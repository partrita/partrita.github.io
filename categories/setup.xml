<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../assets/xml/rss.xsl" media="all"?><rss version="2.0" xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>EHOTTL: 42 (Posts about setup)</title><link>https://partrita.github.io/</link><description></description><atom:link href="https://partrita.github.io/categories/setup.xml" rel="self" type="application/rss+xml"></atom:link><language>en</language><copyright>Contents © 2017 &lt;a href="mailto:partrita@gmail.com"&gt;partrita&lt;/a&gt; </copyright><lastBuildDate>Thu, 14 Dec 2017 02:55:43 GMT</lastBuildDate><generator>Nikola (getnikola.com)</generator><docs>http://blogs.law.harvard.edu/tech/rss</docs><item><title>Setup</title><link>https://partrita.github.io/posts/setup/</link><dc:creator>partrita</dc:creator><description>&lt;div tabindex="-1" id="notebook" class="border-box-sizing"&gt;
    &lt;div class="container" id="notebook-container"&gt;

&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="1.-파이썬-설치"&gt;1. 파이썬 설치&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#1.-%ED%8C%8C%EC%9D%B4%EC%8D%AC-%EC%84%A4%EC%B9%98"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;제일 먼저 파이썬(Python)에 대해 설명할게요. 파이썬은 아주 인기있는 프로그래밍 언어로, 웹 사이트는 물론 게임, 과학용 소프트웨어, 그래픽 소프트웨어 등 다양한 것을 만들 수 있답니다.&lt;/p&gt;
&lt;p&gt;파이썬은 1980년대 후반에 프로그래밍 언어를 기계 뿐만 아니라 인간도 읽을 수 있도록 만들고자 탄생한 언어입니다. 파이썬이 다른 프로그래밍 언어보다 훨씬 간단하게 보이고, 배우기도 쉬운 이유도 그 때문이죠. 하지만 파이썬은 아주 강력한 기능을 가진 프로그래밍 언어랍니다.&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;아래의 방법보다는 Anaconda를 사용하는것을 추천합니다.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;사용중인 OS의 종류에 따라서 설치방법이 다릅니다.&lt;/p&gt;
&lt;h4 id="Windows"&gt;Windows&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#Windows"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;사용 중인 컴퓨터 윈도우 운영체제가 32비트인지 64비트인지 확인하려면 &lt;a href="https://support.microsoft.com/en-au/kb/827218"&gt;https://support.microsoft.com/en-au/kb/827218&lt;/a&gt; 에서 확인하세요. 윈도우 용 파이썬은 &lt;a href="https://www.python.org/downloads/windows/"&gt;https://www.python.org/downloads/windows/&lt;/a&gt; 웹 사이트에서 다운로드 할 수 있습니다. "Latest Python 3 Release - Python x.x.x"링크를 클릭하세요. 64 비트 버전의 Windows인 경우 Windows x86-64 executable installer를 다운로드하세요. 이외에는 Windows x86 executable installer을 다운로드하세요. 설치 프로그램을 다운로드 한 후에 실행(더블 클릭)하고 지시 사항을 따르세요.&lt;/p&gt;
&lt;h4 id="OSX"&gt;OSX&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#OSX"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;웹 사이트로 가서 파이썬 설치 파일을 다운 받으세요. : &lt;a href="https://www.python.org/downloads/release/python-351/"&gt;https://www.python.org/downloads/release/python-351/&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="Linux"&gt;Linux&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#Linux"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;이미 파이썬이 설치되었을 겁니다. 설치된 버전을 확인하려면 콘솔을 열고 다음 명령을 입력하세요.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ python3 --version
Python &lt;span class="m"&gt;3&lt;/span&gt;.6.1


&lt;span class="sb"&gt;`&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="2.-Anaconda-설치"&gt;2. Anaconda 설치&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#2.-Anaconda-%EC%84%A4%EC%B9%98"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;파이썬 기반의 데이터 분석에 특화된 각종 OpenSource 패키지들을 모아놓은 개발 플랫폼이다. 한마디로 규정짓긴 어렵지만 아무튼 그동안 파이썬을 교육용언어, 다루기 쉬운언어, 프로토 타이핑용 스크립트 언어정도로만 봐왔다면 Anaconda라는 것은 본격적으로 파이썬의 능력을 제대로 활용하는 거대한 프로젝트 같은 개념으로 볼수 있다. Panda, Numpy, Numba, Scipy, IPython, GPGPU, 과학, 수학, 데이터 분석등과 관련된 수많은 수준높은 패키지들을 정말 간단하게 설치할 수 있도록 해놓았으니 나의 파이썬 수준을 한단계 업그레이드 해보고자 한다면 이 Anaconda를 꼭 설치해보아야 할것이다.&lt;/p&gt;
&lt;p&gt;&lt;a href="https://www.anaconda.com/"&gt;Anaconda&lt;/a&gt;&lt;/p&gt;
&lt;h4 id="Anaconda"&gt;Anaconda&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#Anaconda"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;필자는 anaconda를 애용자로 anaconda 4.3.1 64bit 환경을 설치했다. 모든 설치는 "Next"만 누르면 해결되므로 별도의 설명은 서술하지 않는다. 다음 링크는 아나콘다 사이트다. 아나콘다는 기존 파이썬에 비해 매우 용량이 크지만 데이터 분석을 위한 다양한 라이브러리를 갖춘 파이썬을 배포한다. 이 패키지에는 conda도 함께 포함돼 있다. Anaconda가 버거우신 분들은 miniconda를 사용하면 된다.&lt;/p&gt;
&lt;h4 id="Miniconda"&gt;Miniconda&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#Miniconda"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;blockquote&gt;&lt;p&gt;개인적으로 &lt;strong&gt;Miniconda&lt;/strong&gt;를 추천합니다.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="3.-Conda-명령어-사용법"&gt;3. Conda 명령어 사용법&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#3.-Conda-%EB%AA%85%EB%A0%B9%EC%96%B4-%EC%82%AC%EC%9A%A9%EB%B2%95"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;Conda는 아나콘다에서 버전 관리를 위해 제공되는 애플리케이션이다. 파이썬을 많이 사용하다 보면 다양한 환경에서 프로그래밍을 진행하게 된다. 그 이유는 파이썬의 유용한 애플리케이션들이 각 버전과 라이브러리에 대해 아주 많이 의존적이기 때문이다. 그렇기 때문에 Conda를 사용할 줄 모른다면 "프로그램 추가/제거" 기능에 종류별로 파이썬이 설치된 모습을 볼 수 있다. 필자의 경우는 그 무겁디무거운 아나콘다를 4개 버전 정도를 설치했었다.&lt;/p&gt;
&lt;p&gt;하지만 conda를 사용하면 이 모든 고민이 해결된다. 용량의 문제, 관리의 문제, 충돌의 문제, 버전 호환성의 문제를 한방에 해결 가능하다. 때문에 파이썬 데이터 분석 강의에서는 항상 이 부분을 먼저 설명한다. 많은 사람들이 파이썬을 기존에 사용하던 것들이 있기 때문에 같은 환경에서 진행하기 어려운 케이스들이 많다.&lt;/p&gt;
&lt;p&gt;서론이 길었지만 요약하면 "conda"는 파이썬을 자주 사용하면서 발생할 수밖에 없는 여러 문제들을 해결하기 위한 해결책이다(conda 외에도 virtualenv도 있다). 아래 사이트에서 정보를 제공받을 수 있다.&lt;/p&gt;
&lt;h4 id="주요기능"&gt;주요기능&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#%EC%A3%BC%EC%9A%94%EA%B8%B0%EB%8A%A5"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;conda는 자동으로 의존성을 설치한다. 모든 라이브러리를 갖고 있지는 않으므로 pip와 병행하여 사용하길 바란다. 자주 사용하는 conda의 기능에 대해 알아보자. 이 기능들은 외울 필요가 없다. 필요할 때 찾아볼 수 있도록 기억해두자.&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;&lt;tr&gt;
&lt;th&gt;기능&lt;/th&gt;
&lt;th&gt;명령어&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td&gt;패키지를 설치&lt;/td&gt;
&lt;td&gt;conda install numpy &lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;동시에 여러 패키지를 설치&lt;/td&gt;
&lt;td&gt;conda install numpy scipy pandas numpy&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;특정 버전 설치&lt;/td&gt;
&lt;td&gt;conda install numpy=1.10&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;패키지 제거&lt;/td&gt;
&lt;td&gt;conda remove package_name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;패키지 업데이트&lt;/td&gt;
&lt;td&gt;conda update package_name&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;모든 패키지 업데이트&lt;/td&gt;
&lt;td&gt;conda update –all&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;설치된 목록 출력&lt;/td&gt;
&lt;td&gt;conda list&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td&gt;설치하려는 패키지 검색&lt;/td&gt;
&lt;td&gt;conda search search_term&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;h4 id="패키지-관리하기"&gt;패키지 관리하기&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#%ED%8C%A8%ED%82%A4%EC%A7%80-%EA%B4%80%EB%A6%AC%ED%95%98%EA%B8%B0"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Now let’s play with packages. We’ve already installed several packages (Astroid, Babel and a specific version of Python) when we created a new environment. We’ll check what packages we have, check what are available, look for a specific package and install it. Then we’ll look for and install specific packages on the Anaconda.org repository, install more using pip install instead of conda install, and install a commercial package.&lt;/p&gt;
&lt;h5 id="설치되어-있는-패키지-목록-확인"&gt;설치되어 있는 패키지 목록 확인&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#%EC%84%A4%EC%B9%98%EB%90%98%EC%96%B4-%EC%9E%88%EB%8A%94-%ED%8C%A8%ED%82%A4%EC%A7%80-%EB%AA%A9%EB%A1%9D-%ED%99%95%EC%9D%B8"&gt;¶&lt;/a&gt;&lt;/h5&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda list
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id="새로운-패키지를-설치"&gt;새로운 패키지를 설치&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#%EC%83%88%EB%A1%9C%EC%9A%B4-%ED%8C%A8%ED%82%A4%EC%A7%80%EB%A5%BC-%EC%84%A4%EC%B9%98"&gt;¶&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;만약 beautifulsoup4를 설치하려면 아래와 같이 입력한다&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda install beautifulsoup4
&lt;/pre&gt;&lt;/div&gt;
&lt;h5 id="패키지를-제거"&gt;패키지를 제거&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#%ED%8C%A8%ED%82%A4%EC%A7%80%EB%A5%BC-%EC%A0%9C%EA%B1%B0"&gt;¶&lt;/a&gt;&lt;/h5&gt;&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda remove beautifulsoup4
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="virtualenv"&gt;virtualenv&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#virtualenv"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;conda는 프로젝트를 격리할 환경을 만드는 데 사용할 수 있다. 환경을 생성할 때는 몇 가지의 환경에 대한 정보를 제공해야 한다.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;환경 이름&lt;/li&gt;
&lt;li&gt;환경에 설치할 Python 버전&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;터미널에 다음과 같이 입력한다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda create -n ENV_NAME &lt;span class="nv"&gt;python&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="m"&gt;3&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;목록을 확인하기 위한 명령어&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda env list
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;삭제를 위한 명령어&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;conda env remove -n ENV_NAME
&lt;/pre&gt;&lt;/div&gt;
&lt;h4 id="Conda-제거하기"&gt;Conda 제거하기&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#Conda-%EC%A0%9C%EA%B1%B0%ED%95%98%EA%B8%B0"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;h5 id="Windows"&gt;Windows&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#Windows"&gt;¶&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Go to Control Panel, click “Add or remove Program,” select “Python 2.7 (Anaconda)” OR “Python 2.7 Miniconda)” and click Remove Program.&lt;/p&gt;
&lt;h5 id="Linux,-OSX"&gt;Linux, OSX&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#Linux,-OSX"&gt;¶&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;디렉토리만 삭제하면 된다.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;rm -rf ~/miniconda
rm -rf ~/anaconda
&lt;/pre&gt;&lt;/div&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="cell border-box-sizing text_cell rendered"&gt;&lt;div class="prompt input_prompt"&gt;
&lt;/div&gt;
&lt;div class="inner_cell"&gt;
&lt;div class="text_cell_render border-box-sizing rendered_html"&gt;
&lt;h2 id="4.-코드-에디터"&gt;4. 코드 에디터&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#4.-%EC%BD%94%EB%93%9C-%EC%97%90%EB%94%94%ED%84%B0"&gt;¶&lt;/a&gt;&lt;/h2&gt;&lt;p&gt;코드 에디터는 종류가 많고 다양해 자신의 취향에 따라 선택할 수 있어요. 대부분의 파이썬 프로그래머는 PyCharm과 같이 복잡하지만 강력한 IDE(통합개발환경: Integrated Development Environments)를 이용합니다. 하지만 초보자에게 적합하지 않을 수 있어요. 간단하지만 강력한 기능을 갖춘 에디터 프로그램을 아래 추천합니다.&lt;/p&gt;
&lt;p&gt;이 중 내가 사용하고 싶은 것을 선택해 사용해도 되지만, 여러분의 코치가 어떤 프로그램을 사용하는지 물어보세요. 같은 프로그램을 사용하면 도움받기 수월해질 거에요.&lt;/p&gt;
&lt;h4 id="Gedit"&gt;Gedit&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#Gedit"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Gedit는 모든 운영체제에서 사용 가능한 무료 오픈소스에요.&lt;/p&gt;
&lt;p&gt;다운받기&lt;/p&gt;
&lt;h4 id="Sublime-Text-3"&gt;Sublime Text 3&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#Sublime-Text-3"&gt;¶&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;Sublime Text는 가장 널리 알려진 프로그램으로 무료로 사용할 수 있어요. 설치와 사용이 편리하고 모든 운영체제에서 쓸 수 있어요.&lt;/p&gt;
&lt;p&gt;다운받기&lt;/p&gt;
&lt;h5 id="Atom"&gt;Atom&lt;a class="anchor-link" href="https://partrita.github.io/posts/setup/#Atom"&gt;¶&lt;/a&gt;&lt;/h5&gt;&lt;p&gt;Atom은 GitHub에서 만든 에디터예요. 무료로 제공되는 오픈소스이며, 설치나 사용이 쉬워요. 윈도우, 맥OS, 리눅스에서 쓸 수 있어요.&lt;/p&gt;
&lt;p&gt;다운받기
왜 코드 에디터를 설치해야 하나요?&lt;/p&gt;
&lt;p&gt;워드나 노트패드가 있는데도, 굳이 코드 에디터 소프트웨어를 설치해야 하는 이유가 궁금할 거에요.&lt;/p&gt;
&lt;p&gt;첫 번째로 코드는 일반 텍스트여야 하는데, 워드나 텍스트에딧(Textedit)과 같은 프로그램에서는 일반 텍스트가 아닌 RTF(Rich Text Format)와 같은 사용자 서식을 쓴 리치 텍스트(폰트와 서식이 있는 텍스트)가 생성되기 때문입니다.&lt;/p&gt;
&lt;p&gt;두 번째는 코드 에디터 프로그램은 개발에 유용한 여러 기능을 제공하기 때문입니다. 대표적인 예로, 코드를 해석해 문법을 하이라이팅해주는 기능이라든가 큰따옴표("")를 자동으로 닫아주는 기능이지요.&lt;/p&gt;
&lt;p&gt;앞으로 코드 에디터가 어떻게 작동하는지 알아볼 거에요. 곧 여러분은 내가 사용하는 코드 에디터를 제일 좋아하게 될 거랍니다.&lt;/p&gt;

&lt;/div&gt;
&lt;/div&gt;
&lt;/div&gt;
    &lt;/div&gt;
  &lt;/div&gt;
</description><category>setup</category><guid>https://partrita.github.io/posts/setup/</guid><pubDate>Thu, 14 Dec 2017 00:37:59 GMT</pubDate></item></channel></rss>