{
  "pages": [
    {
      "title": "10\ubd84\uc548\uc5d0 \ubc30\uc6b0\ub294 Pingouin",
      "text": "Pingouin\uc740 pandas\uc640 numpy\ub97c \uae30\ubc18\uc73c\ub85c \ud55c \uc624\ud508\uc18c\uc2a4 \ud1b5\uacc4 \ud328\ud0a4\uc9c0\uc785\ub2c8\ub2e4. \uc544\ub798\uc758 \ubaa9\ub85d\uc740 pingouin\uc73c\ub85c \ud560 \uc218 \uc788\ub294 \ub300\ud45c\uc801\uc778 \uae30\ub2a5\uc785\ub2c8\ub2e4. \ubaa8\ub4e0 \uae30\ub2a5\uc5d0 \ub300\ud574\uc11c\ub294 API \ubb38\uc11c\ub97c \ucc38\uace0\ud558\uc138\uc694.\n\n\ubd84\uc0b0 \ubd84\uc11d(ANOVAs): N-ways, repeated measures, mixed, ancova\nPairwise \uc0ac\ud6c4 \uac80\uc815(post-hocs tests), pairwise \uc0c1\uad00\uad00\uacc4\n\uacac\uace0\ud55c(Robust), \ubd80\ubd84(partial), \uac70\ub9ac(distance), \ubc18\ubcf5 \uce21\uc815 \uc0c1\uad00\uad00\uacc4\n\uc120\ud615(Linear) \ud68c\uadc0, \ub85c\uc9c0\uc2a4\ud2f1(logistic) \ud68c\uadc0, \ub9e4\uac1c(mediation) \ubd84\uc11d\n\ubca0\uc774\uc988 \uc778\uc790(Bayes factor)\n\ub2e4\ubcc0\ub7c9(Multivariate) \ud14c\uc2a4\ud2b8\n\uc2e0\ub8b0\uc131\uacfc \uc77c\uad00\uc131 \uac80\n\ud6a8\uacfc \ud06c\uae30 \ubc0f \uac80\uc815\ub825 \ubd84\uc11d\n\ud6a8\uacfc \ud06c\uae30 \ub610\ub294 \uc0c1\uad00 \uacc4\uc218\uc758 \ubaa8\uc218(Parametric) \ud639\uc740 \ubd80\ud2b8\uc2a4\ud2b8\ub7a9(bootstrapped) \uc2e0\ub8b0\uad6c\uac04 \n\uc21c\ud658(Circular) \ud1b5\uacc4\n\uce74\uc774\uc81c\uacf1 \uac80\uc815(chi-squared test)\n\uc2dc\uac01\ud654: Bland-Altman plot, Q-Q plot, paired plot, robust correlation.\n\nPingouin\uc740 \uac04\ub2e8\ud558\uc9c0\ub9cc \uc644\uc804\ud55c \ud1b5\uacc4 \uae30\ub2a5\ub97c \uc704\ud574 \uc124\uacc4\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uae30\uc874\uc758 SciPy \ud328\ud0a4\uc9c0\uc758 ttest_ind \ud568\uc218\ub294 T-value\uacfc p-value\ub9cc \uc54c\ub824\uc8fc\uc9c0\ub9cc Pingouin\uc758 ttest \ud568\uc218\ub294 T-value, p-value\ubfd0\ub9cc \uc544\ub2c8\ub77c \uc790\uc720\ub3c4, \ud6a8\uacfc \ud06c\uae30(Cohen 's d), 95% \uc2e0\ub8b0 \uad6c\uac04, \ud1b5\uacc4\uc801 \uac80\uc815\ub825\ub4f1\uc744 \ub3d9\uc2dc\uc5d0 \ucd9c\ub825\ud569\ub2c8\ub2e4.\n0. \uc124\uce58\ubc95\u00b6Pingouin\uc740 \ud30c\uc774\uc36c3 \ud328\ud0a4\uc9c0\uc774\uba70 \ud604\uc7ac \ubc84\uc804 3.6, 3.7\uc5d0\uc11c \ud14c\uc2a4\ud2b8\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ud30c\uc774\uc36c 2.7\uc5d0\uc11c\ub294 \uc791\ub3d9\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\nPingouin\uc758 \uc8fc\uc694 \uc885\uc18d \ud328\ud0a4\uc9c0\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4:\n\nNumPy (>= 1.15)\nSciPy (>= 1.3.0)\nPandas (>= 0.24)\nPandas-flavor (>= 0.1.2)\nMatplotlib (>= 3.0.2)\nSeaborn (>= 0.9.0)\nOutdated\n\n\ub610\ud55c \uc77c\ubd80 \uae30\ub2a5\uc5d0\ub294 \ub2e4\uc74c \ud328\ud0a4\uc9c0\uac00 \ud544\uc694\ud569\ub2c8\ub2e4:\n\nStatsmodels\nScikit-learn\nMpmath\n\n\uac00\uc7a5 \uc26c\uc6b4 \ubc29\ubc95\uc740 \uc544\ub798\uc640 \uac19\uc774 pip \uba85\ub839\uc5b4\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\npip install pingouin\n\n\ud639\uc740 conda\ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.\nconda install -c conda-forge pingouin\n\n\uc544\uc9c1 Pingouin\uc740 \uac1c\ubc1c \uc911\uc5d0 \uc788\uc73c\uba70 \ubc84\uadf8 \uc218\uc815\uc744 \uc704\ud574 \uc0c8\ub85c\uc6b4 \ubc84\uc804\uc774 \uacc4\uc18d \ubc30\ud3ec\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4(\ud55c \ub2ec\uc5d0 \uc57d 1 \ud68c). \uadf8\ub7ec\ub2c8 \ud56d\uc0c1 \ucd5c\uc2e0 \ubc84\uc804\uc758 Pingouin\uc744 \uc0ac\uc6a9\ud558\uace0 \uc788\ub294\uc9c0 \ud655\uc778\ud558\uc138\uc694. \uc0c8\ub85c\uc6b4 \ubc84\uc804\uc774 \ucd9c\uc2dc \ub420 \ub54c\ub9c8\ub2e4 \ud130\ubbf8\ub110 \ucc3d\uc5d0 \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud574 \uc5c5\uadf8\ub808\uc774\ub4dc \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\npip install --upgrade pingouin\n\n# conda\ub97c \uc0ac\uc6a9\ud560 \uacbd\uc6b0\nconda update pingouin\n\n\uc790\uc138\ud55c \ub0b4\uc6a9\uc740 Pingouin \uacf5\uc2dd \ud398\uc774\uc9c0\uc744 \ucc38\uace0\ud558\uc138\uc694.\n1. \uc608\uc81c \ucf54\ub4dc \uc0b4\ud3b4\ubcf4\uae30\u00b6\ud544\uc694\ud55c \ud328\ud0a4\uc9c0\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport numpy as np\nimport pingouin as pg\nimport pandas as pd\n\nnp.random.seed(42)\n\n\n    \n\n\n\n\n\n\n\n1.1. One-sample T-test\u00b6\n\ubaa8\uc9d1\ub2e8\uc758 \ud3c9\uade0\uc740 4\ub85c \uac00\uc815\n\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nmu = 4\nx = [5.5, 2.4, 6.8, 9.6, 4.2]\npg.ttest(x, mu)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      T\n      dof\n      tail\n      p-val\n      CI95%\n      cohen-d\n      BF10\n      power\n    \n  \n  \n    \n      T-test\n      1.397391\n      4\n      two-sided\n      0.234824\n      [-1.68, 5.08]\n      0.624932\n      0.766\n      0.191796\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc790\uc720\ub3c4(dof)\ub294 4, T-value(T)\ub294 1.3973 \uc774\uba70 p-Value\uac00 \uc77c\ubc18\uc801\uc778 \uae30\uc900(0.05) \uc774\uc0c1\uc774\uae30 \ub54c\ubb38\uc5d0 \ud45c\ubcf8 x\uc758 \ud3c9\uade0\uc740 \ubaa8\uc9d1\ub2e8\uc758 \ud3c9\uade0\uacfc \ucc28\uc774\uac00 \uc5c6\ub2e4(\uadc0\ubb34\uac00\uc124)\uace0 \ubcfc \uc218 \uc788\ub2e4.\n1.2. Paired T-test\u00b6\uaf2c\ub9ac\ub97c one-sided\ub85c \uc124\uc815\ud558\uba74 pingouin\uc774 \uc54c\uc544\uc11c \uaf2c\ub9ac\uc758 \ubc29\ud5a5\uc744 \uc54c\ub824\uc90d\ub2c8\ub2e4. \uc544\ub798 \ucf54\ub4dc\uc758 \uacbd\uc6b0 T-value\uac00 \uc74c\uc218\uc774\uae30 \ub54c\ubb38\uc5d0 \uaf2c\ub9ac\uc758 \ubc29\ud5a5\uc774 less\ub85c \ud45c\ud604\ub429\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \npre = [5.5, 2.4, 6.8, 9.6, 4.2]\npost = [6.4, 3.4, 6.4, 11., 4.8]\npg.ttest(pre, post, paired=True, tail='one-sided')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      T\n      dof\n      tail\n      p-val\n      CI95%\n      cohen-d\n      BF10\n      power\n    \n  \n  \n    \n      T-test\n      -2.307832\n      4\n      less\n      0.041114\n      [-inf, -0.05]\n      0.250801\n      3.122\n      0.12048\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uaf2c\ub9ac\uc758 \ubc29\ud5a5\uc774 less\ub77c\ub294 \uac83\uc740 \ud45c\ubcf8 x\uc758 \ud3c9\uade0\uc774 \ud45c\ubcf8 y\uc758 \ud3c9\uade0\ubcf4\ub2e4 \uc791\ub2e4\ub294 \uac83\uc744 \ub73b\ud569\ub2c8\ub2e4.\n\uc77c\ubd80\ub7ec \uaf2c\ub9ac\uc758 \ubc29\ud5a5\uc744 \ubc18\ub300(greater)\ub85c \ud55c \ub300\ub9bd \uac00\uc124\uc744 \ud655\uc778\ud574 \ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \npg.ttest(pre, post, paired=True, tail='greater')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      T\n      dof\n      tail\n      p-val\n      CI95%\n      cohen-d\n      BF10\n      power\n    \n  \n  \n    \n      T-test\n      -2.307832\n      4\n      greater\n      0.958886\n      [-1.35, inf]\n      0.250801\n      0.32\n      0.016865\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\np-Value\uac00 \uc5c9\ub9dd\uc778\uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n1.3. Two-sample T-test\u00b61.3.1. \ud45c\ubcf8 \ud06c\uae30\uac00 \uac19\uc740 \uacbd\uc6b0\u00b6\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nx = np.random.normal(loc=7, size=20)\ny = np.random.normal(loc=4, size=20)\npg.ttest(x, y, correction='auto')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      T\n      dof\n      tail\n      p-val\n      CI95%\n      cohen-d\n      BF10\n      power\n    \n  \n  \n    \n      T-test\n      10.151246\n      38\n      two-sided\n      2.245760e-12\n      [2.48, 3.71]\n      3.210106\n      2.223e+09\n      1.0\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n1.3.2. \ud45c\ubcf8 \ud06c\uae30\uac00 \ub2e4\ub978\uacbd\uc6b0\u00b6\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nx = np.random.normal(loc=7, size=20)\ny = np.random.normal(loc=4, size=15)\npg.ttest(x, y, correction='auto')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      T\n      dof\n      tail\n      p-val\n      CI95%\n      cohen-d\n      BF10\n      power\n    \n  \n  \n    \n      T-test\n      8.352442\n      24.033207\n      two-sided\n      1.443438e-08\n      [2.21, 3.65]\n      2.995554\n      5.808e+06\n      1.0\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n1.4. Pearson\u2019s correlation\u00b6\n\n\n\n\n\nIn\u00a0[7]:\n\n    \nmean, cov, n = [4, 5], [(1, .6), (.6, 1)], 30\nx, y = np.random.multivariate_normal(mean, cov, n).T\npg.corr(x, y)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      n\n      r\n      CI95%\n      r2\n      adj_r2\n      p-val\n      BF10\n      power\n    \n  \n  \n    \n      pearson\n      30\n      0.63893\n      [0.36, 0.81]\n      0.408231\n      0.364397\n      0.000145\n      220.85\n      0.978466\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n1.5. Robust correlation\u00b6\n\n\n\n\n\nIn\u00a0[8]:\n\n    \n# \ud45c\ubcf8 x\uc5d0 \uc544\uc6c3\ub77c\uc774\uc5b4 \ucd94\uac00\nx[5] = 18\n# Use the robust Shepherd's pi correlation\npg.corr(x, y, method=\"shepherd\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      n\n      outliers\n      r\n      CI95%\n      r2\n      adj_r2\n      p-val\n      power\n    \n  \n  \n    \n      shepherd\n      30\n      3\n      0.391331\n      [0.04, 0.66]\n      0.15314\n      0.090409\n      0.043538\n      0.586546\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n1.6. \ub370\uc774\ud130\uc758 \uc815\uaddc\uc131 \ud14c\uc2a4\ud2b8\u00b6pingouin.normality()\ud568\uc218\ub97c pandas\uc758 \ub370\uc774\ud130 \ud504\ub808\uc784\ud615\uc2dd\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \n# \uc77c\ubcc0\ub7c9 \uc815\uaddc\uc131(Univariate normality)\npg.normality(x)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      W\n      pval\n      normal\n    \n  \n  \n    \n      0\n      0.485009\n      3.733778e-09\n      False\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \n# \ub2e4\ubcc0\ub7c9 \uc815\uaddc\uc131(Multivariate normality)\npg.multivariate_normality(np.column_stack((x, y)))\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\n(False, 6.620602006901788e-07)\n\n\n\n\n\n\n\n\n\n\n\n1.7. Q-Q plot \uc2dc\uac01\ud654\u00b6\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nx = np.random.normal(size=50)\nax = pg.qqplot(x, dist='norm')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.8. One-way ANOVA\u00b6\uae30\ubcf8 \ub0b4\uc7a5\ub418\uc5b4 \uc788\ub294 \ub370\uc774\ud130\ud504\ub808\uc784(mixed_anova)\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \n# Read an example dataset\ndf = pg.read_dataset('mixed_anova')\ndf.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[12]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Scores\n      Time\n      Group\n      Subject\n    \n  \n  \n    \n      175\n      6.176981\n      June\n      Meditation\n      55\n    \n    \n      176\n      8.523692\n      June\n      Meditation\n      56\n    \n    \n      177\n      6.522273\n      June\n      Meditation\n      57\n    \n    \n      178\n      4.990568\n      June\n      Meditation\n      58\n    \n    \n      179\n      7.822986\n      June\n      Meditation\n      59\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \n# Run the ANOVA\naov = pg.anova(data=df, dv='Scores', between='Group', detailed=True)\naov\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[13]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Source\n      SS\n      DF\n      MS\n      F\n      p-unc\n      np2\n    \n  \n  \n    \n      0\n      Group\n      5.459963\n      1\n      5.459963\n      5.243656\n      0.0232\n      0.028616\n    \n    \n      1\n      Within\n      185.342729\n      178\n      1.041251\n      NaN\n      NaN\n      NaN\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n1.9. Repeated measures ANOVA\u00b6\n\n\n\n\n\nIn\u00a0[14]:\n\n    \npg.rm_anova(data=df, dv='Scores', within='Time',\n            subject='Subject', detailed=True)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[14]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Source\n      SS\n      DF\n      MS\n      F\n      p-unc\n      np2\n      eps\n    \n  \n  \n    \n      0\n      Time\n      7.628428\n      2\n      3.814214\n      3.912796\n      0.022629\n      0.062194\n      0.998751\n    \n    \n      1\n      Error\n      115.027023\n      118\n      0.974805\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n1.10. Post-hoc tests corrected for multiple-comparisons\u00b6\n\n\n\n\n\nIn\u00a0[15]:\n\n    \n# FDR-corrected post hocs with Hedges'g effect size\nposthoc = pg.pairwise_ttests(data=df, dv='Scores', within='Time',\n                             subject='Subject', parametric=True,\n                             padjust='fdr_bh', effsize='hedges')\n\nposthoc\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[15]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Contrast\n      A\n      B\n      Paired\n      Parametric\n      T\n      dof\n      Tail\n      p-unc\n      p-corr\n      p-adjust\n      BF10\n      hedges\n    \n  \n  \n    \n      0\n      Time\n      August\n      January\n      True\n      True\n      -1.740370\n      59.0\n      two-sided\n      0.087008\n      0.130512\n      fdr_bh\n      0.582\n      -0.327583\n    \n    \n      1\n      Time\n      August\n      June\n      True\n      True\n      -2.743238\n      59.0\n      two-sided\n      0.008045\n      0.024134\n      fdr_bh\n      4.232\n      -0.482547\n    \n    \n      2\n      Time\n      January\n      June\n      True\n      True\n      -1.023620\n      59.0\n      two-sided\n      0.310194\n      0.310194\n      fdr_bh\n      0.232\n      -0.169520\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n1.11. Two-way mixed ANOVA\u00b6\n\n\n\n\n\nIn\u00a0[16]:\n\n    \n# Compute the two-way mixed ANOVA and export to a .csv file\naov = pg.mixed_anova(data=df, dv='Scores', between='Group',\n                     within='Time', subject='Subject',\n                     correction=False, effsize=\"np2\")\naov\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[16]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Source\n      SS\n      DF1\n      DF2\n      MS\n      F\n      p-unc\n      np2\n      eps\n    \n  \n  \n    \n      0\n      Group\n      5.459963\n      1\n      58\n      5.459963\n      5.051709\n      0.028420\n      0.080120\n      NaN\n    \n    \n      1\n      Time\n      7.628428\n      2\n      116\n      3.814214\n      4.027394\n      0.020369\n      0.064929\n      0.998751\n    \n    \n      2\n      Interaction\n      5.167192\n      2\n      116\n      2.583596\n      2.727996\n      0.069545\n      0.044922\n      NaN\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n1.12. Bland-Altman plot\u00b6\n\n\n\n\n\nIn\u00a0[17]:\n\n    \nmean, cov = [10, 11], [[1, 0.8], [0.8, 1]]\nx, y = np.random.multivariate_normal(mean, cov, 30).T\nax = pg.plot_blandaltman(x, y)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.13. paired T-test \uac80\uc815\ub825 \uc2dc\uac01\ud654\u00b6T-\uac80\uc815\uc758 \ud45c\ubcf8 \ud06c\uae30\uc640 \ud6a8\uacfc \ud06c\uae30(Cohen'd)\uc5d0 \ub530\ub978 \uac80\uc815\ub825 \uace1\uc120\uc744 \uc2dc\uac01\ud654\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[18]:\n\n    \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n\nsns.set(style='ticks', context='notebook', font_scale=1.2)\nd = 0.5  # Fixed effect size\nn = np.arange(5, 80, 5)  # Incrementing sample size\n# Compute the achieved power\npwr = pg.power_ttest(d=d, n=n, contrast='paired', tail='two-sided')\nplt.plot(n, pwr, 'ko-.')\nplt.axhline(0.8, color='r', ls=':')\nplt.xlabel('Sample size')\nplt.ylabel('Power (1 - type II error)')\nplt.title('Achieved power of a paired T-test')\nsns.despine()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.14. Paired plot\u00b6mixed_anova\ub370\uc774\ud130\uc14b\uc744 \uac00\uc9c0\uace0 \uba85\uc0c1\uc774 \ud559\uad50 \uc131\uc801\uc5d0 \ubbf8\uce58\ub294 \uc601\ud5a5\uc5d0 \ub300\ud55c \uc2dc\uac01\ud654\ub97c \ud574\ubcf8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[19]:\n\n    \ndf = pg.read_dataset('mixed_anova').query(\n    \"Group == 'Meditation' and Time != 'January'\")\n\npg.plot_paired(data=df, dv='Scores', within='Time',\n               subject='Subject')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[19]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7f24693d2dc0>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2. \ub9c8\ubb34\ub9ac\ud558\uba70,\u00b6\ud30c\uc774\uc36c\uc744 \uc0ac\uc6a9\ud55c \ud1b5\uacc4 \ubd84\uc11d\uc740 R\uc5b8\uc5b4\uc5d0 \ube44\ud574 \uc0ac\uc6a9\ubc95\uacfc \uae30\ub2a5\uc774 \ubd80\uc871\ud588\uc2b5\ub2c8\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 pingouin\uc758 \ub4f1\uc7a5\uc774 \ubc18\uac11\uc2b5\ub2c8\ub2e4. \uc544\uc9c1 0.3.6\ubc84\uc804\uc774\uc9c0\ub9cc \uae30\uc874\uc5d0 \uc874\uc7ac\ud588\ub358 \ud1b5\uacc4 \ubd84\uc11d \ud328\ud0a4\uc9c0\ub4e4\uc744 \ub6f0\uc5b4 \ub118\ub294 \uc131\ub2a5\uacfc \uc644\uc131\ub3c4\ub97c \ubcf4\uc5ec\uc8fc\uace0 \uc788\uc5b4 \uc55e\uc73c\ub85c\uac00 \ub354 \uae30\ub300\uac00 \ub429\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[20]:\n\n    \npg.__version__\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[20]:\n\n\n\n\n\n'0.3.6'",
      "tags": "Pingouin,Python,statstics,\ud1b5\uacc4\ubd84\uc11d",
      "url": "https://partrita.github.io/posts/pingouin/"
    },
    {
      "title": "\ucd5c\uc801 \uba48\ucda4 \ubb38\uc81c(Optimal stop problems)",
      "text": "0. \ucd5c\uc801 \uba48\ucda4 \ubb38\uc81c\u00b6\ucd5c\uace0\uc758 \ub0a8\ud3b8\uac10\uc744 \ucc3e\ub294 \uc5ec\uc131\uc758 \uacbd\uc6b0\ub97c \uc0dd\uac01\ud574 \ubd05\uc2dc\ub2e4. \ub0a8\uc790\ub4e4\uc744 \ud55c \uba85\uc529 \ub9cc\ub098\uac00\uba74\uc11c \ub370\uc774\ud2b8\ud558\uace0 \uccad\ud63c\uc744 \ubc1b\uc544 \ub4e4\uc774\uba74 \ub0a8\ud3b8 \ucc3e\uae30\uac00 \ub05d\ub0a9\ub2c8\ub2e4. \ubc18\ub300\ub85c \uccad\ud63c\uc744 \ubc1b\uc544\ub4e4\uc774\uc9c0 \uc54a\uc73c\uba74 \uadf8 \ub0a8\uc790\ub294 \ub2e4\uc2dc\ub294 \ubcfc \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\n\ub2f9\uc2e0\uc774 \uccad\ud63c\uc744 \ub108\ubb34 \uc77c\ucc0d \ubc1b\uc544\ub4e4\uc774\uba74 \ub4a4\uc5d0 \ub0a8\uc544\uc788\ub294 \ub0a8\uc790\ub4e4 \uc911 \ucd5c\uace0\uc758 \ub0a8\ud3b8\uac10\uc774 \uc788\uc744 \uac83\uc774\uace0 \ubc18\uba74 \ub108\ubb34 \ub2a6\uac8c \uccad\ud63c\uc744 \ubc1b\uc544\ub4e4\uc774\uba74 \uc55e\uc5d0 \uc788\uc5c8\ub358 \ub354 \uc88b\uc740 \ub0a8\ud3b8\uac10\uc744 \ub193\uce58\uac8c \ub420\uc218\ub3c4 \uc788\uac8c \ub429\ub2c8\ub2e4. \uadf8\ub807\ub2e4\uba74 \uc5b8\uc81c \ud0d0\uc0c9\uc744 \uba48\ucdb0\uc57c \ucd5c\uace0\uc758 \ub0a8\ud3b8\uac10\uc744 \uad6c\ud560 \uc218 \uc788\uc744\uae4c\uc694?\n\ucd5c\uc801 \uba48\ucda4 \ubb38\uc81c\ub77c\uace0 \ubd88\ub9ac\ub294 \uc774 \ubb38\uc81c\uc758 \ub2f5\uc740 \uc57d 37% \uc73c\ub85c \uc218\ud559\uc801\uc73c\ub85c \uc99d\uba85\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc989, \uc804\uccb4 \ub0a8\uc790\uc758 37%\uc758 \uc218\ub9cc\ud07c \ub370\uc774\ud2b8\ub97c \ud558\uace0 \uc55e\uc11c \ub370\uc774\ud2b8\ud55c \ub0a8\uc790\ub4e4\ubcf4\ub2e4 \ub6f0\uc5b4\ub09c \ub0a8\ud3b8\uac10\uc774 \ub098\ud0c0\ub098\uba74 \ubc14\ub85c \uccad\ud63c\uc744 \ubc1b\uc544 \ub4e4\uc774\ub294 \uac83\uc774 \ucd5c\uc801\uc758 \uc804\ub7b5\uc785\ub2c8\ub2e4.\n1. \uc65c 37% \uc77c\uae4c?\u00b6\ucd1d 10\uba85\uc758 \ub0a8\uc790\uac00 \uc788\ub2e4\uace0 \uc0dd\uac01\ud574\ubd05\uc2dc\ub2e4.\n\n1\ubc88\uc9f8 \ub0a8\uc790 : \uc9c0\uae08\uae4c\uc9c0 \ubcf8 \uc0ac\ub78c \uc911 \ucd5c\uace0\uc758 \ub0a8\ud3b8\uac10\uc77c \ud655\ub960\uc740 100%\n2\ubc88\uc9f8 \ub0a8\uc790 : \uc9c0\uae08\uae4c\uc9c0 \ubcf8 \uc0ac\ub78c \uc911 \ucd5c\uace0\uc77c \ud655\ub960\uc740 $\\frac{1}{2}$\n5\ubc88\uc9f8 \ub0a8\uc790 : \uc9c0\uae08\uae4c\uc9c0 \ubcf8 \uc0ac\ub78c \uc911 \ucd5c\uace0\uc77c \ud655\ub960\uc740 $\\frac{1}{5}$\n10\ubc88\uc9f8 \ub0a8\uc790 : \uc9c0\uae08\uae4c\uc9c0 \ubcf8 \uc0ac\ub78c \uc911 \ucd5c\uace0\uc77c \ud655\ub960\uc740 $\\frac{1}{10}$\n\n\ub2e4\uc2dc\ub9d0\ud574 \ub370\uc774\ud2b8\ub97c \uacc4\uc18d \ud558\uba74 \uc624\ud788\ub824 \ud655\ub960\uc744 \ub0ae\uc544\uc9c0\uace0 \uc788\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc77c\uc815\ud55c \uc218\ub97c \uc0b4\ud3b4\ubcf4\uace0 \ucee4\ud2b8\ub77c\uc778 \uc810\uc218\ub97c \uc815\ud558\uace0, \uadf8 \uc774\ud6c4 \uc810\uc218\ub97c \ucd08\uacfc\ud55c \ub0a8\uc790\uc758 \uccad\ud63c\uc744 \ubc1b\uc544\ub4e4\uc774\ub294 \uc804\ub7b5\uc744 \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4.\n\ub0a8\uc790\uc758 \uc218 $n$, \ucd5c\ucd08 $r$ \uba85\uc758 \uc9c0\uc6d0\uc790\ub97c \ud0c8\ub77d \uc2dc\ud0ac\ub54c \ucd5c\uc0c1\uc758 \uc120\ud0dd \ud655\ub960\uc740 \uc544\ub798 \ud45c\uc640 \uac19\uc2b5\ub2c8\ub2e4. \uc989, $n$\uc774 \ucee4\uc9c0\uba74 \ud655\ub960 $P$\uac00 37%\uc5d0 \uac00\uae4c\uc6cc \uc9c4\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \uc218\ud559\uc790\ub4e4\uc740 \ub0a8\uc790\uc758 \uc218 $n$\uc5d0 \ub300\ud558\uc5ec \ucd5c\uc801\uc758 \ub370\uc774\ud2b8 \uc804\ub7b5\uc740 $\\frac{1}{e}$ \uba85 \uc0b4\ud3b4\ubcf4\uae30\uc784\uc744 \uc774\ubbf8 \uc99d\uba85 \ud588\uc2b5\ub2c8\ub2e4. \uc815\ud655\ud558\uac8c\ub294 $\\frac{1}{e} = 0.3678794$ \uc785\ub2c8\ub2e4. \uc218\ud559\uc801 \uc99d\uba85 \ud655\uc778\ud558\uae30\n\n\nn\nr\nP\n\n\n\n\n1\n0\n1.000\n\n\n2\n0\n0.500\n\n\n3\n1\n0.500\n\n\n4\n1\n0.458\n\n\n5\n2\n0.433\n\n\n6\n2\n0.428\n\n\n7\n2\n0.414\n\n\n8\n3\n0.410\n\n\n9\n3\n0.406\n\n\n10\n3\n0.398\n\n\n\n2. \ud655\ub960\uc744 \uc2dc\uac01\ud654\ud558\uae30\u00b6\uc704\uc758 \ud45c\ub97c \ud30c\uc774\uc36c\uc73c\ub85c \uc2dc\uac01\ud654\ud574\uc11c \uc9c1\uad00\uc801\uc73c\ub85c \ucd5c\uc801\uc758 \uc804\ub7b5\uc744 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.\n2.1. \ucd5c\uace0\uc758 \uc9c0\uc6d0\uc790\ub97c \uc120\ud0dd\ud560 \ud655\ub960\u00b6\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndef choose_candidate(n, reject=np.e):\n    candidates = np.arange(1, n+1)\n    np.random.shuffle(candidates)\n    \n    if reject == np.e:\n        stop = int(round(n/reject))\n    else:\n        stop = int(round(reject*n/100))\n\n    best_from_rejected = np.min(candidates[:stop])\n    rest = candidates[stop:]\n    \n    try:\n        return rest[rest < best_from_rejected][0]\n    except IndexError:\n        return candidates[-1]\n    \nbest_candidate = []\nfor r in range(5, 101, 5):\n    sim = np.array([choose_candidate(n=100, reject=r) for i in range(100000)])\n    best_candidate.append(np.histogram(sim, bins=100)[0][0]/100000)\n\nplt.figure(figsize=(10, 6))\nplt.scatter(range(5, 101, 5), best_candidate)\nplt.plot(range(5, 101, 5), best_candidate)\nplt.xlabel('% of candidates rejected')\nplt.ylabel('Probability of choosing best candidate')\nplt.axvline(100/np.e, ls='--', c='black')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[1]:\n\n\n\n\n\n<matplotlib.lines.Line2D at 0x7f3ac0c2b880>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704\uc758 \uadf8\ub9bc\uc5d0\uc11c \uc54c \uc218 \uc788\ub4ef\uc774 \uc57d 37%\uc758 \uc9c0\uc6d0\uc790\ub4e4\uc744 \uc0b4\ud3b4\ubcf4\uace0 \uacb0\uc815\ud588\uc744\ub54c \ucd5c\uace0\uc758 \ub0a8\ud3b8\uac10\uc744 \uc120\ud0dd\ud560 \ud655\ub960\uc774 \uac00\uc7a5 \ub192\uc2b5\ub2c8\ub2e4. \ub2e4\ub9cc \uadf8 \uc131\uacf5 \ud655\ub960\uc740 35% \ub85c \uc77c\ubc18\uc801\uc778 \uad00\uc810\uc5d0\uc11c \ub9cc\uc871\uc2a4\ub7fd\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n\uadf8\ub807\ub2e4\uba74 \uc695\uc2ec\uc744 \uc870\uae08 \uc904\uc5ec \uc0c1\uc704 5% 10%, 25%\uc758 \ub0a8\ud3b8\uac10\uc744 \ucc3e\uaca0\ub2e4\ub294 \ubaa9\ud45c \ubcc0\uacbd\ud558\uba74 \uc131\uacf5 \ud655\ub960\uc774 \uc5b4\ub5bb\uac8c \ub420\uae4c\uc694?\n2.2. \ub2e4\uc591\ud55c \ubaa9\ud45c\uc5d0 \ub530\ub978 \uc131\uacf5 \ud655\ub960\u00b6\n\n\n\n\n\nIn\u00a0[2]:\n\n    \ndef choose_candidate(n, reject=np.e):\n    candidates = np.arange(1, n+1)\n    np.random.shuffle(candidates)\n    if reject == np.e:\n        stop = int(round(n/reject))\n    else:\n        stop = int(round(reject*n/100))\n    \n    best_from_rejected = np.min(candidates[:stop])\n    rest = candidates[stop:]\n    try:\n        return rest[rest < best_from_rejected][0]\n    except IndexError:\n        return candidates[-1]\n\ndef get_best_candidates(best_n=1):\n    best_candidate = []\n    for c in [1] + list(range(5, 101, 5)):\n        sim = np.array([choose_candidate(100, reject=c) for i in range(10000)])\n        best_candidate.append(len(sim[sim <= best_n])/100)\n    return best_candidate\n\nplt.figure(figsize=(10, 6))\n\nfor i in [1, 5, 10, 25]:\n    plt.scatter(range(0, 101, 5), get_best_candidates(i), label=str(i))\n    plt.plot(range(0, 101, 5), get_best_candidates(i), label=None)\n\nplt.xlabel('% of candidates rejected')\nplt.ylabel('Probability of choosing best candidates')\nplt.legend(title='No. of best candidates')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\n<matplotlib.legend.Legend at 0x7f3ac0b6d2e0>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uadf8\ub9bc\uc758 \uacb0\uacfc\ub97c \uc815\ub9ac\ud558\uba74 \uc544\ub798 \ud45c\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\n\n\uc120\ud0dd \ubaa9\ud45c\n\uac70\uc808 \ube44\uc728\n\uc131\uacf5 \ud655\ub960\n\n\n\n\n\ucd5c\uace0\uc758 \ub0a8\ud3b8\uac10\n37%\n37%\n\n\n\uc0c1\uc704 5% \ub0a8\ud3b8\uac10\n22%\n57%\n\n\n\uc0c1\uc704 10% \ub0a8\ud3b8\uac10\n14%\n85%\n\n\n\uc0c1\uc704 25% \ub0a8\ud3b8\uac10\n7%\n92%\n\n\n\n\ub9cc\uc57d \uc0c1\uc704 25% \ub0a8\ud3b8\uac10\uc744 \ubaa9\ud45c\ud55c\ub2e4\uba74 \uc131\uacf5\ud655\ub960\uc774 \ubb34\ub824 92% \uae4c\uc9c0 \ub192\uc544\uc9c4\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uadf8\ub9ac\uace0 \uc0c1\uc704 10%\uc5d0 \uc18d\ud558\ub294 \ub0a8\ud3b8\uac10\uc744 \uc120\ud0dd\ud558\ub294 \uac83\uc774 \ubaa9\ud45c\ub77c\uba74 14%\uc758 \ub0a8\uc790\ub4e4\uacfc \ub370\uc774\ud2b8\ub97c \ud55c \ub4a4 \uc774\uc804 \ubcf4\ub2e4 \ub354 \uc88b\uc740 \ub0a8\uc790\uac00 \ub098\ud0c0\ub0ac\uc744 \ub54c \uc120\ud0dd\ud558\uba74 \uc131\uacf5 \ud655\ub960\uc774 85%\uac00 \ub429\ub2c8\ub2e4.\n\uc815\ub9ac\ud558\uc790\uba74 \ucd5c\uace0\uc758 \ub0a8\ud3b8\uac10\uc744 \ubaa9\ud45c\ub85c \ud558\uba74 \uc131\uacf5 \ud65c\ub960\uc774 37% \ubd88\uacfc\ud558\uc9c0\ub9cc \uc0c1\uc704 10%\ub97c \ubaa9\ud45c\ub85c \ud558\uba74 \uc131\uacf5\ud655\ub960\uc740 85%\ub85c \uae09\uaca9\ud558\uac8c \uc62c\ub77c\uac11\ub2c8\ub2e4.\n\uc5ec\uae30\uc11c \uc6b0\ub9ac\uac00 \ubc30\uc6b8 \uc218 \uc788\ub294 \uac83\uc740 \uc2e4\uc81c \uc2e4\uc6a9\uc801\uc778 \uce21\uba74\uc5d0\uc11c \ubb34\ud131\ub300\uace0 \ucd5c\uace0\ub9cc\uc744 \uace0\uc9d1\ud560 \uac83\uc774 \uc544\ub2c8\ub77c \uc131\uacf5 \ud655\ub960\uc744 \uace0\ub824\ud574 \ubaa9\ud45c\uc5d0 \ub300\ud55c \uc695\uc2ec\uc744 \uc870\uae08 \uc904\uc774\ub294\uac8c \uc88b\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4.\n3. \ucc38\uace0\uc790\ub8cc\u00b6\nhttps://horizon.kias.re.kr/6053/\nhttps://imrankhan17.github.io/pages/Solving%20the%20secretary%20problem%20with%20Python.html\nhttps://johngrib.github.io/wiki/secretary-problem",
      "tags": "Python,\ud1b5\uacc4\ud559",
      "url": "https://partrita.github.io/posts/Optimal_stop/"
    },
    {
      "title": "\ud30c\uc774\uc36c\uc73c\ub85c \ubc30\uc6b0\ub294 \ud1b5\uacc4\ud559",
      "text": "0. \ud1b5\uacc4\uc801 \uc0ac\uace0\u00b6\uc544\ub798 \ub0b4\uc6a9\uc740 \ud1b5\uacc4\uc801 \uc0ac\uace0: \ud30c\uc774\uc36c\uc744 \uc774\uc6a9\ud55c \ud0d0\uc0c9\uc801 \uc790\ub8cc \ubd84\uc11d \uc744 \uc77d\uace0 \ub0b4\uc6a9\uc744 \uc815\ub9ac\ud55c \uac83\uc774\ub2e4. \uc774 \ucc45\uc758 \uc6d0\uc81c\ub294 Thinkstat2(\uc800\uc790 Allen B. Downey) \ub85c \uc800\uc790\ub294 \uc62c\ub9b0\uacf5\ub300 \ucef4\ud4e8\ud130\uacfc\ud559\uacfc\uc758 \uad50\uc218\uc774\ub2e4.\n1. \ud0d0\uc0c9\uc801 \uc790\ub8cc \ubd84\uc11d\u00b6\uc77c\ud654\uc801 \uc99d\uac70(anecdotal evidence) \ub294 \uac1c\uc778\uc801\uc778 \uacbd\ud5d8\uc744 \uc9c1\uc811, \ud639\uc740 \ud55c \ub2e4\ub9ac \uac74\ub108 \ub4e3\uace0 \uc774\uc57c\uae30\ud558\ub294 \uac83\uc774\ub2e4. \uc77c\ud654\uc801 \uc99d\uac70\uc758 \uc608\uc2dc\ub85c \u201c\ucd5c\uadfc\uc5d0 \uccab\uc9f8 \uc544\uc774\ub97c \ucd9c\uc0b0\ud55c \ub0b4 \uce5c\uad6c \ub450\uba85\uc740 \ubaa8\ub450 \uc608\uc815\uc77c\uc744 2\uc8fc \uc9c0\ub098\uc11c \ub0b3\uc558\ub2e4. \uadf8\ub7ec\ub2c8 \ub0b4 \uccab\uc9f8 \uc544\uc774\ub3c4 2\uc8fc\uac00 \uc9c0\ub098\uc11c \ub098\uc62c \uac83\uc774\ub2e4.\"\n\uc774\ub7f0 \uc77c\ud654\uc801 \uc99d\uac70\uc758 \uc2e0\ube59\uc131\uc774 \ubd80\uc871\ud55c \uc774\uc720\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4:\n\n\uc801\uc740 \uad00\uce21\uce58(Small number of observations)\n\uc120\ud0dd\ud3b8\uc758(Selection bias)\n\ud655\uc99d\ud3b8\uc758(Con\ufb01rmation bias)\n\ubd80\uc815\ud655\ud568(Inaccuracy)\n\n1.1. \ud1b5\uacc4\uc801 \uc811\uadfc\ubc95\u00b6\ud1b5\uacc4\uc801\uc778 \uc811\uadfc\ubc95\uc740 \ub2e4\uc74c\uc744 \ud3ec\ud568\ud55c\ub2e4.\n\n\uc790\ub8cc\uc218\uc9d1(Data collection): \ud1b5\uc0c1\uc801\uc73c\ub85c \ub300\uaddc\ubaa8\uc758 \uad6d\uac00\uc801\uc778 \uc870\uc0ac\uc5d0\uc11c \ub098\uc628 \uc790\ub8cc\ub97c \uc0ac\uc6a9\ud55c\ub2e4.\n\uae30\uc220\ud1b5\uacc4(Descriptive statistics): \ub370\uc774\ud130\ub97c \uac04\uacb0\ud558\uac8c \uc694\uc57d\ud55c \ud1b5\uacc4\ub7c9(\ud45c\ubcf8\uc758 \uba87\uba87 \ud2b9\uc9d5\uc744 \uc218\uce58\ud654\ud55c \uac12\uc774\ub2e4)\uc744 \uc0dd\uc131\ud558\uace0 \ub370\uc774\ud130\ub97c \uc2dc\uac01\ud654 \ud55c\ub2e4.\n\ud0d0\uc0c9\uc801 \ub370\uc774\ud130\ubd84\uc11d(Exploratory data analysis): \ub370\uc774\ud130\uc758 \ud328\ud134, \ucc28\uc774\uc810, \ud2b9\uc774\uac12\uc744 \ucc3e\ub294\ub2e4.\n\ucd94\uc815(Estimation): \uc0ac\uc6a9\ud55c \ub370\uc774\ud130\ub97c \ud1a0\ub300\ub85c \ubaa8\uc9d1\ub2e8\uc758 \ud2b9\uc9d5\uc744 \ucd94\uc815\ud55c\ub2e4.\n\uac00\uc124\uac80\uc99d(Hypothesis testing): \ub370\uc774\ud130\uc14b\uc5d0\uc11c \ub450 \uadf8\ub8f9\uac04\uc758 \ucc28\uc774\uac00 \uba85\ubc31\ud55c \uac83\uc778\uc9c0 \ud639\uc740 \uc6b0\uc5f0\ud55c \uc0ac\uac74\uc778\uc9c0 \ud3c9\uac00\ud55c\ub2e4.\n\n1.2. \uac00\uc871\uc131\uc7a5 \uad6d\uac00\uc870\uc0ac(National Survey of Family Growth)\u00b6\ubbf8\uad6d\uc9c8\ubcd1\ud1b5\uc81c\uc608\ubc29\uc13c\ud130(Disease Control and Prevention, CDC)\ub294 1973\ub144\ubd80\ud130 \uac00\uc871\uc131\uc7a5 \uad6d\uac00\uc870\uc0ac(National Survey of Family Growth, \uc774\ud558 NSFG)\ub97c \uc218\ud589\ud558\uace0 \uc788\ub2e4.\nNSFG \uc870\uc0ac \ubaa9\uc801\uc740\u201c\uac00\uc871\uc0dd\ud65c, \uacb0\ud63c\ubc0f\uc774\ud63c, \uc784\uc2e0, \ucd9c\uc0b0, \ud53c\uc784, \uadf8\ub9ac\uace0 \ub0a8\ub140\uac74\uac15\uc5d0 \ub300\ud55c\uc815\ubcf4\ub97c \uc218\uc9d1\ud558\ub294\ub370 \uc788\ub2e4. \uc790\uc138\ud55c \uc0ac\ud56d\uc740 \uacf5\uc2dd \uc6f9\uc0ac\uc774\ud2b8\ub97c \ucc38\uace0\ud558\ub77c.\nNSFG\ub294 \ud6a1\ub2e8\uc801\uc5f0\uad6c(cross-sectional study)\ub85c \ud2b9\uc815\uc2dc\uc810\uc5d0 \uc9d1\ub2e8\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c \uc218\uc9d1\ud55c\ub2e4. \uc9c0\uae08\uae4c\uc9c0 NSFG \uc870\uc0ac\ub294 \ucd1d 7\ubc88 \uc218\ud589\ub418\uc5c8\uc73c\uba70 \uc5ec\uae30\uc5d0\uc11c\ub294 2002\ub1441\uc6d4\uc5d0\uc11c 2003\ub144 3\uc6d4\uae4c\uc9c0 \uc218\ud589\ub41c 6\ubc88\uc9f8 \ub370\uc774\ud130\uc14b(2002FemPreg.dat)\ub97c \uc0ac\uc6a9\ud55c\ub2e4.\n1.3. \ub370\uc774\ud130 \uac00\uc838\uc624\uae30\u00b6NSFG\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \ub370\uc774\ud130(2002FemPreg.dat)\ub294 Stata \uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud30c\uc77c \ud615\uc2dd\uc774\ub2e4. Stata \ud30c\uc77c \ud615\uc2dd\uc740 \uc77c\uc885\uc758 \ub515\uc154\ub108\ub9ac \ud615\uc2dd\uc73c\ub85c \uac01 \ud589\ub9c8\ub2e4 \uac01 \ubcc0\uc218\uc758 \uc704\uce58\ub97c \uc2dd\ubcc4\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\ub294 \uc778\ub371\uc2a4, \ud615\uc2dd, \ubcc0\uc218 \uc815\ubcf4\ub97c \ub2f4\uace0 \uc788\ub2e4.\n2002FemPreg.dat\ud30c\uc77c\uc740 NSFG \ud648\ud398\uc774\uc9c0\uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc744 \uc218 \uc788\ub2e4.\n1.4. \ub370\uc774\ud130\ud504\ub808\uc784\u00b6\uc6d0\uc11c\uc5d0\uc11c\ub294 2002FemPreg.dat\ud30c\uc77c\uc744 \ud310\ub2e4\uc2a4(pandas) \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \ubcc0\ud658\ud558\ub294 \ucf54\ub4dc\ub97c \uc81c\uacf5\ud558\uace0 \uc788\ub2e4. \uadf8\ub7ec\ub098 \uc5ec\uae30\uc5d0\uc11c\ub294 \ud3b8\uc758\ub97c \uc704\ud574 \uc774\ubbf8 \ubcc0\ud658\ub41c 2002FemPreg.csv\ud30c\uc77c\uc744 \uc0ac\uc6a9\ud55c\ub2e4.\n1.5. \ubcc0\uc218(Variables)\u00b6NSFG \ub370\uc774\ud130\uc14b\uc5d0\ub294 \ucd1d 244\uac1c\uc758 \ubcc0\uc218\uac00 \uc788\ub2e4. \uadf8 \uc911\uc5d0 \uc911\uc694\ud55c \uba87\uac00\uae30 \ubcc0\uc218\ub97c \uc544\ub798\uc5d0 \uc124\uba85\ud588\ub2e4.\n\ncaseid \ub294 \uc751\ub2f5\uc790 ID\ub85c \uc815\uc218\ud615 \uc22b\uc790\uc774\ub2e4.\nprglngth \ub294 \uc784\uc2e0\uae30\uac04\uc744 \ub098\ud0c0\ub0b8\ub2e4.\noutcome \uc740 \ucd9c\uc0b0\uacb0\uacfc\uc5d0 \ub300\ud55c \uc815\uc218\ud615 \ucf54\ub4dc\uac12\uc774\ub2e4. 1\uc740 \uc815\uc0c1\ucd9c\uc0b0\uc744 \ub098\ud0c0\ub0b8\ub2e4.\npregordr \uc740 \uc784\uc2e0\uc5d0 \ub300\ud55c \uc77c\ub828\ubc88\ud638\ub2e4. \uc74c\ub2f5\uc790\uc758 \uccab\ubc88\uc9f8 \uc784\uc2e0\uc740 1\uc774\uace0 \ub450\ubc88\uc9f8 \uc784\uc2e0\uc740 2\uc774\ub2e4.\nirthord \ub294 \uc815\uc0c1\uc801\uc778 \ucd9c\uc0b0\uc5d0 \ub300\ud55c \uc77c\ub828\ubc88\ud638\ub2e4. \uc751\ub2f5\uc790\uc758 \uccab\ubc88\uc9f8 \uc544\uc774\ub294 1\uc774\uba70 \ub9cc\uc57d \uc815\uc0c1\uc801\uc778 \ucd9c\uc0b0\uc774 \uc544\ub2cc \uacbd\uc6b0\uc5d0\ub294 \uacf5\ubc31\uc73c\ub85c \ucc98\ub9ac\ud55c\ub2e4.\nbirthwgt_lb, birthwgt_oz\uc740 \ucd9c\uc0b0\ud55c \uc544\uae30\uc758 \uccb4\uc911(\ud30c\uc6b4\ub4dc\uc640 \uc628\uc2a4) \uc815\ubcf4\uc774\ub2e4.\nagepreg\ub294 \uc784\uc2e0\ud55c \uc0b0\ubaa8\uc758 \ub098\uc774\uc774\ub2e4.\nfinalwgt \ub294 \uc751\ub2f5\uc790\uc640 \uc5f0\uad00\ub41c \ud1b5\uacc4\uc801 \uac00\uc911\uce58\ub85c \ubbf8\uad6d\uc778\uad6c\uc911 \uc751\ub2f5\uc790\uac00 \ub300\ud45c\ud558\ub294 \ube44\uc911\uc744 \ub098\ud0c0\ub0b8\ub2e4.\n\n1.6. \ubcc0\ud658(Transformation)\u00b6\ub370\uc774\ud130 \uc815\uc81c(data cleaning)\uc740 \ub370\uc774\ud130\ub97c\uac00\uc838\uc62c\ub54c, \uc624\ub958\ub97c\uc810\uac80\ud558\uace0, \ud2b9\uc218\uac12\uc744\ucc98\ub9ac\ud558\uace0, \ub370\uc774\ud130\ub97c \ub2e4\ub978\ud615\uc2dd\uc73c\ub85c\ubcc0\ud658\ud558\uace0, \uacc4\uc0b0\uc744 \uc218\ud589\ud558\ub294 \uac83\uc744 \ub9d0\ud55c\ub2e4.\n1.7. \ud0c0\ub2f9\uc131 \uac80\uc0ac(Validation)\u00b6\ub370\uc774\ud130\ub97c \ub2e4\ub978 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ud658\uacbd\uc73c\ub85c \ub0b4\ubcf4\ub0b4\uace0 \ub610 \ub2e4\ub978 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ud658\uacbd\uc5d0\uc11c \uac00\uc838\uc62c\ub54c \uc624\ub958\uac00 \ubc1c\uc0dd\ud558\uace4 \ud55c\ub2e4. \ub530\ub77c\uc11c \ub370\uc774\ud130\uc758 \ud0c0\ub2f9\uc131\uc744 \ud655\uc778\ud558\ub294 \ub2e8\uacc4\ub97c \uac70\uce5c\ub2e4\uba74 \ub098\uc911\uc5d0 \uc5c5\ubb34\uc2dc\uac04\uc744 \uc808\uc57d\ud558\uace0 \uc624\ub958\ub97c \ud53c\ud558\ub294\ub370 \ub3c4\uc6c0\uc774 \ub41c\ub2e4.\n\ub370\uc774\ud130 \ud0c0\ub2f9\uc131\uc744 \ud655\ubcf4\ud558\ub294 \uac00\uc7a5 \uac04\ub2e8\ud55c \ubc29\ubc95\uc740 \uae30\ucd08\ud1b5\uacc4\ub7c9\uc744 \uacc4\uc0b0\ud574 \uacb0\uacfc\uac12\uc744 \ube44\uad50\ud558\ub294 \uac83\uc774\ub2e4. NSFG \ub370\uc774\ud130\uc758 \uacbd\uc6b0 \ub2e4\uc74c \ud45c\uc640 \uac19\uc740 \uc815\ubcf4\uac00 \uc774\ubbf8 \uc54c\ub824\uc838 \uc788\ub2e4.\n\n\nvalue\nlabel\nTotal\n\n\n\n\n1\nLIVE BIRTH\n9148\n\n\n2\nINDUCED ABORTION\n1862\n\n\n3\nSTILLBIRTH\n120\n\n\n4\nMISCARRIAGE\n1921\n\n\n5\nECTOPIC PREGNANCY\n190\n\n\n6\nCURRENT PREGNANCY\n352\n\n\n\n\uc6b0\ub9ac\uac00 \uc0ac\uc6a9\ud560 \ub370\uc774\ud130\uc14b\uc5d0\uc11c\ub3c4 \ud655\uc778\ud574 \ubcf4\uc790.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport warnings\nwarnings.filterwarnings(\"ignore\") #\uacbd\uace0\ubb38 \ub044\uae30\n\nimport pandas as pd\ndf = pd.read_csv('../data/2002FemPreg.csv')\ndf['outcome'].value_counts().sort_index()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[1]:\n\n\n\n\n\n1    9148\n2    1862\n3     120\n4    1921\n5     190\n6     352\nName: outcome, dtype: int64\n\n\n\n\n\n\n\n\n\n\n\n\uc6b0\ub9ac\uac00 \uc54c\uace0 \uc788\ub358 \uac12\uacfc \ub3d9\uc77c\ud55c \uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\ub2e4.\n1.8. \ud574\uc11d(Interpretation)\u00b6\ud6a8\uacfc\uc801\uc73c\ub85c \ub370\uc774\ud130\ub97c \ub2e4\ub8e8\uae30 \uc704\ud574 \ud1b5\uacc4\uc801 \uad00\uc810\uacfc \ubb38\ub9e5\uc801 \uad00\uc810\uc744 \ub3d9\uc2dc\uc5d0 \uc0dd\uac01\ud574\uc57c \ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4 caseid\uac00 10229 \uc778 \uc5ec\uc131\uc758 \uacbd\uc6b0\ub97c \uc0b4\ud3b4\ubcf8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \ndf[df['caseid']==10229].outcome.values\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\narray([4, 4, 4, 4, 4, 4, 1], dtype=int64)\n\n\n\n\n\n\n\n\n\n\n\n\uc704\uc758 \uacb0\uacfc \uac12\uc5d0\uc11c \uc22b\uc790 4\ub294 \uc720\uc0b0\uc744 \ub73b\ud558\uace0 1\uc740 \uc815\uc0c1\uc801\uc778 \ucd9c\uc0b0\uc744 \ub098\ud0c0\ub0b8\ub2e4. \uc989, \uc704 \uc5ec\uc131\uc740 \ucd1d 6\ubc88 \uc720\uc0b0\ud588\uace0 \ub9c8\uc9c0\ub9c9 7\ubc88\uc9f8\uc5d0 \uc815\uc0c1\uc801\uc73c\ub85c \ucd9c\uc0b0\uc744 \ud588\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.\n1.9. \uc5f0\uc2b5\ubb38\uc81c\u00b6\nNSFG \ub370\uc774\ud130\uc14b\uc758 \uc2e0\uc0dd\uc544 \ubab8\ubb34\uac8c\uc758 \ubd84\ud3ec\ub97c \ub098\ud0c0\ub0b4\ub77c.\n\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \ndf.birthwgt_lb.value_counts().sort_index()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n0.000000       8\n0.453515      40\n0.907029      53\n1.360544      98\n1.814059     229\n2.267574     697\n2.721088    2223\n3.174603    3049\n3.628118    1889\n4.081633     623\n4.535147     132\n4.988662      26\n5.442177      10\n5.895692       3\n6.349206       3\n6.802721       1\nName: birthwgt_lb, dtype: int64\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uacb0\uacfc\ub97c \ud1b5\ud574 \ub300\ubd80\ubd84\uc758 \uc2e0\uc0dd\uc544\ub294 2.75 - 3.17 \uc0ac\uc774\uc5d0 \ubaa8\uc5ec \uc788\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.\n\n\uc2e0\uc0dd\uc544 \ubab8\ubb34\uac8c\uc758 \ud3c9\uade0\uc740 \uc5bc\ub9c8\uc778\uac00?\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \ndf.birthwgt_lb.mean()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n3.0984682145278004\n\n\n\n\n\n\n\n\n\n\n\n1.10. \uc6a9\uc5b4\uc124\uba85\u00b6\n\uc77c\ud654\uc801 \uc99d\uac70(anecdotal evidence): \uacfc\ud559\uc801\uc778 \uc870\uc0ac\uc5d0 \uc758\ud55c \uac83\uc774 \uc544\ub2cc \uc6b0\uc5f0\ud558\uac8c \uc218\uc9d1\ub41c \uc99d\uac70.\n\ubaa8\uc9d1\ub2e8(population): \ud1b5\uacc4 \uc870\uc0ac\uc5d0\uc11c \uad00\uc2ec\uc744 \uac16\ub294 \uc9d1\ub2e8.\n\uc885\ub2e8\uc801\uc5f0\uad6c(cross-sectional study): \ud2b9\uc815\uc2dc\uc810\uc5d0 \ubaa8\uc9d1\ub2e8\uc5d0 \ub300\ud55c \uc790\ub8cc\ub97c \uc218\uc9d1\ud558\ub294 \uc5f0\uad6c.\n\ud6a1\ub2e8\uc801\uc5f0\uad6c(longitudinal study): \uc2dc\uac04\uc744 \ub450\uace0 \ubaa8\uc9d1\ub2e8\uc744 \ucd94\uc801\ud558\ub294\uc5f0\uad6c, \ub3d9\uc77c\ud55c \uadf8\ub8f9\uc5d0\uc11c \ubc18\ubcf5\uc801\uc73c\ub85c \ub370\uc774\ud130\ub97c \uc218\uc9d1\ud55c\ub2e4.\n\ub808\ucf54\ub4dc(record): \ub370\uc774\ud130\uc14b\uc5d0\uc11c \ud558\ub098\uc5d0 \ub300\ud55c \uc815\ubcf4\n\ud45c\ubcf8(sample): \uc790\ub8cc \uc218\uc9d1\ud558\ub294\ub370 \uc0ac\uc6a9\ub41c \ubaa8\uc9d1\ub2e8\uc758 \ubd80\ubd84\uc9d1\ud569.\n\ub300\ud45c\uc131(representative): \ub9cc\uc57d \ubaa8\uc9d1\ub2e8\uc758 \ubaa8\ub4e0 \uba64\ubc84\uac00 \ud45c\ubcf8\uc5d0 \ubf51\ud790 \uac00\ub2a5\uc131\uc774 \ub3d9\uc77c\ud55c\ub2e4\uba74 \ub300\ud45c\uc131\uc774 \uc788\ub2e4\uace0 \ud55c\ub2e4.\n\uc624\ubc84\uc0d8\ud50c\ub9c1(oversampling): \uc801\uc740 \ud45c\ubcf8 \ud06c\uae30\ub85c \uc0dd\uae30\ub294 \uc624\ub958\ub97c \ud53c\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub418\ub294 \ubc29\ubc95\n\uc6d0\uc2dc\uc790\ub8cc(raw data): \uac00\uc7a5 \ucc98\uc74c\uc5d0 \uc218\uc9d1\ub418\uc5b4 \uacc4\uc0b0\ubc0f \ud574\uc11d\uc774 \uc804\ud600 \uc5c6\ub294 \uc0c1\ud0dc\uc758 \ub370\uc774\ud130.\n\uc7ac\ucf54\ub4dc(recode): \uc6d0\uc2dc\uc790\ub8cc\uc5d0 \ud2b9\uc815 \uacc4\uc0b0 \ud639\uc740 \ub2e4\ub978\ubc29\ubc95\uc744 \ud1b5\ud574 \uc218\uc815\ub41c \ub370\uc774\ud130.\n\uc790\ub8cc\uc815\uc81c(data cleaning): \ub370\uc774\ud130 \ud0c0\ub2f9\uc131 \ud655\ubcf4, \uc624\ub958\uc2dd\ubcc4, \uc790\ub8cc\ud615\uac04\uc758 \ubcc0\ud658\ub4f1\uc744 \ud3ec\ud568\ud558\ub294 \uacfc\uc815.\n\n2. \ubd84\ud3ec(Distribution)\u00b62.1. \ud788\uc2a4\ud1a0\uadf8\ub7a8\u00b6\ub370\uc774\ud130\uc758 \ubd84\ud3ec\ub97c \ud45c\ud604\ud560\ub54c \uac00\uc7a5 \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294 \uac83\uc740 \ud788\uc2a4\ud1a0\uadf8\ub7a8(histogram)\uc774\ub2e4. \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc740 \uac01 \uac12\uc758 \ube48\ub3c4(frequency)\ub97c \ubcf4\uc5ec\uc8fc\ub294 \uadf8\ub798\ud504\ub2e4.\n2.3. \uac04\ub2e8\ud55c \ud788\uc2a4\ud1a0\uadf8\ub7a8 \uadf8\ub9ac\uae30\u00b61\uc7a5\uc5d0\uc11c \uc0b4\ud3b4\ubcf8 \uc2e0\uc0dd\uc544\ub4e4\uc758 \ubab8\ubb34\uac8c\uc5d0 \ub300\ud55c \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc744 \uadf8\ub824\ubcf8\ub2e4. \ud310\ub2e4\uc2a4\uc758 plot.hist()\ud568\uc218\ub97c \uc0ac\uc6a9\ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \ndf.birthwgt_lb.plot.hist(bins=14)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x95123c8>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uac00\uc7a5 \ub192\uc740 \uac12 \uc989, \ub9ce\uc774 \uad00\ucc30\ub418\ub294\uac12\uc744 \ucd5c\ube48\uac12(mode) \uc774\ub77c \ud558\uba70 \uc704\uc758 \uc608\uc2dc\uc5d0\uc11c\ub294 3.3\uc774\ub2e4. \uc5bc\ud54f\ubcf4\uba74 \ubab8\ubb34\uac8c\uc758 \ubd84\ud3ec\ub294 \uc885\ubaa8\uc591\uc778 \uc815\uaddc(normal) \ubd84\ud3ec\ucc98\ub7fc \ubcf4\uc778\ub2e4.(\uc815\uaddc \ubd84\ud3ec\ub294 \ub2e4\ub978 \ub9d0\ub85c \uac00\uc6b0\uc2a4(Gaussian) \ubd84\ud3ec\ub77c\uace0 \ud55c\ub2e4.)\n\uadf8\ub7ec\ub098 \uc790\uc138\ud788 \ubcf4\uba74 \uc704 \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc740 \uc624\ub978\ucabd\ubcf4\ub2e4 \uc67c\ucabd\uc73c\ub85c \uc880 \ub354\ud655\uc7a5\ub41c \uaf2c\ub9ac(tail) \uac00 \uc788\ub294 \ube44\ub300\uce6d\ud55c \ubd84\ud3ec\ub97c \ubcf4\uc5ec\uc900\ub2e4.\n2.4. NSFG \ub370\uc774\ud130\uc14b\uc758 \ud788\uc2a4\ud1a0\uadf8\ub7a8\u00b62.4.1. \uc0b0\ubaa8\uc758 \ub098\uc774 \ud788\uc2a4\ud1a0\uadf8\ub7a8\u00b6\n\n\n\n\n\nIn\u00a0[6]:\n\n    \ndf.agepreg.plot.hist(bins=100)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0xa4a3320>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc0b0\ubaa8 \ub098\uc774\uc5d0 \ub300\ud55c \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc758 \ubd84\ud3ec\ub294 \uaf2c\ub9ac\uac00 \uc880 \ub354 \uc624\ub978\ucabd\uc73c\ub85c \ubed7\uc5b4\ub098\uac14\ub2e4. \ub300\ubd80\ubd84\n\uc758 \uc0b0\ubaa8\ub294 20\ub300\uc774\uc9c0\ub9cc 30\ub300\uc774\ud6c4\uc5d0\ub3c4 \uc801\uc9c0\uc54a\uac8c \uc874\uc7ac\ud55c\ub2e4\ub294 \uc758\ubbf8\uc774\ub2e4.\n2.4.2. \uc784\uc2e0\uae30\uac04 \ud788\uc2a4\ud1a0\uadf8\ub7a8\u00b6\n\n\n\n\n\nIn\u00a0[7]:\n\n    \ndf[df['outcome']==1].prglngth.plot.hist(bins=50)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0xa6050b8>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704\uc758 \ucf54\ub4dc\uc5d0\uc11c df['outcome']==1\ub294 \uc815\uc0c1\uc801\uc73c\ub85c \ucd9c\uc0b0\ud55c \uacbd\uc6b0\ub97c \uc120\ud0dd\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud588\ub2e4.\n \uc784\uc2e0\uae30\uac04 \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc758 \ub2e8\uc704\ub294 \uc8fc\uac04(week)\uc73c\ub85c \uac00\uc7a5 \ud754\ud55c\uac12\uc740 39\uc8fc\uc774\ub2e4. \uadf8\ub9ac\uace0 \uc67c\ucabd \uaf2c\ub9ac\uac00 \ub354 \uae38\ub2e4. \uc774\uac83\uc740 \uc870\uc0b0\uc5d0 \uc758\ud55c \uac83\uc774\uc774\ub2e4. \uadf8\ub9ac\uace0 \uc784\uc2e0\uae30\uac04\uc774 43\uc8fc\uac00 \ub118\uc5b4\uac00\uba74 \uc720\ub3c4\ubd84\ub9cc\uc744 \ud558\uae30 \ub54c\ubb38\uc5d0 \uc624\ub978\ucabd \uaf2c\ub9ac\ub294 \uc9e7\ub2e4.\n2.5. \ud2b9\uc774\uac12(Outliers)\u00b6\ud2b9\uc774\uac12\uc740 \uc77c\ubc18\uc801\uc778 \ub370\uc774\ud130\uc640 \ub2e4\ub974\uac8c \uadf9\ub2e8\uc5d0 \uc874\uc7ac\ud558\ub294 \ub370\uc774\ud130\uc774\ub2e4. \ud2b9\uc774\uac12\uc740 \uce21\uc815\uc758 \uc624\ub958\uc5d0 \uc758\ud55c \uac83\uc77c \uc218\ub3c4 \uc788\uace0 \ub4dc\ubb3c\uac8c \uc2e4\uc81c \ub370\uc774\ud130\uc77c\uc218\ub3c4 \uc788\ub2e4. \uc55e\uc5d0\uc11c \ubc30\uc6b4 \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc740 \ucd5c\ube48\uac12\uacfc \ub370\uc774\ud130 \ubd84\ud3ec\uc758 \ubaa8\uc591\uc744 \uc2dd\ubcc4\ud558\uae30\uc5d0\ub294 \uc801\ud569\ud558\uc9c0\ub9cc \ud2b9\uc774\uac12\uc744 \ud655\uc778\ud558\uae30 \uc5b4\ub835\ub2e4.\n\ud2b9\uc774\uac12\uc744 \ucc3e\ub294 \uac00\uc7a5 \uc88b\uc740 \ubc29\ubc95\uc740 \ud574\ub2f9 \ubd84\uc57c\uc758 \uc804\ubb38\uc9c0\uc2dd(domain knowledge)\uc774\ub2e4. \ub2e4\uc2dc\ub9d0\ud574 \ub370\uc774\ud130 \ucd9c\ucc98\uc640 \ub370\uc774\ud130\uc758 \uc758\ubbf8\ub97c \ud30c\uc545\ud560 \uc218 \uc788\uc5b4\uc57c \ud2b9\uc774\uac12\uc744 \ucc3e\ub294\ub370 \uc5b4\ub5a4 \ubd84\uc11d\ubc95\uc744 \uc0ac\uc6a9\ud560\uc9c0 \uc54c \uc218 \uc788\ub2e4.\n2.6. \uccab\uc9f8 \uc544\uc774\u00b6NSFG \ub370\uc774\ud130\uc14b\uc73c\ub85c \uccab\uc9f8 \uc544\uc774\uac00 \uc77c\ucc0d(\ud639\uc740 \ub2a6\uac8c) \ud0dc\uc5b4\ub098\ub294 \uacbd\ud5a5\uc774 \uc788\ub294\uac00?\ub97c \uc0b4\ud3b4\ubcf8\ub2e4. \uba3c\uc800 \n\uccab\uc9f8 \uc544\uc774\uc640 \ub098\uba38\uc9c0 \uc544\uc774\ub4e4\uc5d0 \ub300\ud55c \uc784\uc2e0 \uae30\uac04\uc758 \ubd84\ud3ec\ub97c \ube44\uad50\ud574\ubcf4\uc790.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nlive_baby = df[df['outcome']==1] # \ucd9c\uc0b0\uc5d0 \uc131\uacf5\ud55c \uc544\uae30\nfirst_baby = live_baby[live_baby['birthord']==1] # \uccab\uc9f8 \uc544\uc774\nothers = live_baby[live_baby['birthord']!=1] # \ub098\uba38\uc9c0 \uc544\uc774\n\nfirst_baby.prglngth.plot.hist(bins=50, alpha=0.5)\nothers.prglngth.plot.hist(bins=50, alpha=0.5)\nplt.legend(['first_baby','others'])\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n<matplotlib.legend.Legend at 0xa6eeba8>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud788\uc2a4\ud1a0\uadf8\ub7a8\uc740 \ucd5c\ube48\uac12\uc744 \uba85\ud655\ud558\uac8c \ubcf4\uc5ec\uc900\ub2e4\ub294 \uc810\uc5d0\uc11c \uc720\uc6a9\ud558\uc9c0\ub9cc \ub450 \uadf8\ub8f9\uac04\uc758 \ubd84\ud3ec\ub97c \ube44\uad50\ud558\ub294\ub370\ub294 \uc88b\uc740 \uc120\ud0dd\uc774 \ub418\uc9c0 \ubabb\ud55c\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.\n\ub610\ud55c \ub450 \uadf8\ub8f9\uc758 \ub192\uc774 \ucc28\uc774\ub294 \uc0ac\uc2e4 \ud45c\ubcf8\ud06c\uae30\uc5d0 \uc758\ud55c \uac83\uc774\ub2e4. \uc704 \uc608\uc81c\uc5d0\uc11c\u201c\uccab\uc9f8\uac00 \uc544\ub2cc\uc544\uc774\u201d\ubcf4\ub2e4\u201c\uccab\uc9f8\uc544\uc774\u201d\uc22b\uc790\uac00 \ub354 \uc801\uae30 \ub54c\ubb38\uc774\ub2e4. \uadf8\ub798\uc11c \ub2e4\uc74c 3\uc7a5\uc5d0\uc11c \ud655\ub960\uc9c8\ub7c9\ud568\uc218(probability mass functions)\ub97c \uc0ac\uc6a9\ud574 \uc774 \ubb38\uc81c\uc5d0 \ub300\ud574 \ub2e4\uc2dc \uc0b4\ud3b4\ubcf8\ub2e4.\n2.7. \ud3c9\uade0\u00b6\uac00\uc7a5 \ud754\ud55c \uc694\uc57d\ud1b5\uacc4(summary statistics) \ub294 \ud3c9\uade0(mean) \uc73c\ub85c \ubd84\ud3ec\uc758 \uc911\uc2ec\uacbd\ud5a5\uc131\uc744 \uae30\uc220\ud560\uae30 \uc704\ud574 \uc0ac\uc6a9\ub41c\ub2e4.\n$$\\bar x = \\frac{1}{n} \\sum_{i} x_i$$\u201c\ud3c9\uade0(mean)\u201d\uacfc\u201c\ud3c9\uade0(average)\u201d\uc740 \ub54c\ub54c\ub85c \uc0c1\ud638 \ud638\ud658\uc801\uc73c\ub85c \uc0ac\uc6a9\ub41c\ub2e4. \ud558\uc9c0\ub9cc \uc774 \ucc45\uc5d0\uc11c\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uad6c\ubcc4\ud55c\ub2e4.\n\n\ud45c\ubcf8\ud3c9\uade0(mean)\uc740 \uc704\uc758 \uacf5\uc2dd\uc73c\ub85c \uacc4\uc0b0\ub418\ub294 \uc694\uc57d \ud1b5\uacc4\uc774\ub2e4.\n\ud3c9\uade0(average)\uc740 \uc911\uc2ec \uacbd\ud5a5\uc131\uc744 \uae30\uc220\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\ub294 \uc694\uc57d \ud1b5\uacc4\ub7c9\uc911 \ud558\ub098\ub2e4.\n\n2.8. \ubd84\uc0b0\u00b6\ubd84\uc0b0\uc740 \ubd84\ud3ec\uc758 \ubcc0\ub3d9(variability)\uacfc \ud37c\uc9d0(spread)\uc744 \uae30\uc220\ud558\ub294 \uc694\uc57d \ud1b5\uacc4\ub2e4. \uacf5\uc2dd\uc73c\ub85c \ub098\ud0c0\ub0b8 \ubd84\uc0b0\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n$$S2 = \\frac{1}{n} \\sum_{i} (x_i - \\bar x)2$$$(x_i - \\bar x)2$\ud56d\uc740\u201c\ud3c9\uade0\uc73c\ub85c\ubd80\ud130 \ud3b8\ucc28(deviation from the mean)\u201d\ub77c\uace0 \ud558\uba70 \ubd84\uc0b0\uc740\n\ud3c9\uade0 \ud3b8\ucc28\uc758 \uc81c\uacf1\uc774\ub2e4. \ub610\ud55c \ubd84\uc0b0\uc758 \uc81c\uacf1\uadfc(S)\uc744 \ud45c\uc900\ud3b8\ucc28(standard deviation) \uc774\ub77c \ubd80\ub978\ub2e4.\n2.9. \ud6a8\uacfc\ud06c\uae30(Effect size)\u00b6\ud6a8\uacfc\ud06c\uae30(effect size) \ub294 \ub450 \uc9d1\ub2e8\uac04\uc758 \ucc28\uc774\ub97c \uae30\uc220\ud558\ub294 \uc694\uc57d \ud1b5\uacc4\ub85c \ud604\uc0c1\uc774 \uc2e4\uc81c\ub85c \ubaa8\uc9d1\ub2e8\uc5d0 \uc874\uc7ac\ud558\ub294 \uc815\ub3c4\uc744 \ub9d0\ud55c\ub2e4.\n\ud6a8\uacfc\ud06c\uae30\ub97c \uacc4\uc0b0\ud558\ub294 \ubc29\ubc95\uc73c\ub85c \ub370\uc774\ud130\uc14b\uc758 \uc9d1\ub2e8 \uac04(between groups)\uc758 \ucc28\uc774\ub97c \uc9d1\ub2e8 \ub0b4(within groups) \ubcc0\ub3d9\uc131\uacfc \ube44\uad50 \ud558\ub294 \ucf54\ud5e8(Cohen) d \uac12\uc744 \uc8fc\ub85c \uc0ac\uc6a9\ud55c\ub2e4. \ucf54\ud5e8(Cohen) d \ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub41c\ub2e4.\n$$d = \\frac{\\bar x_1 - \\bar x_2}{s}$$$\\bar x_1 - \\bar x_2$\uc740 \uc9d1\ub2e8 \ud3c9\uade0\uac12\uc774\uace0, $s$\ub294 \ud569\ub3d9 \ud45c\uc900\ud3b8\ucc28(pooled standard deviation)\ub2e4.\n\ud6a8\uacfc\ud06c\uae30\uac00 0\uc774\ub77c\ub294 \uac83\uc740 \ube44\uad50 \uc9d1\ub2e8\ub4e4 \uc0ac\uc774\uc758 \ucc28\uc774\uac00 \uc5c6\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud558\uba70 \uadc0\ubb34 \uac00\uc124\uc774 \uc131\ub9bd\ud558\uac8c \ub41c\ub2e4. \ud3c9\uade0\uce58 \ube44\uad50\uc758 \uacbd\uc6b0 \ube44\uad50 \ud558\ub824\ub294 \uc9d1\ub2e8 \uc0ac\uc774\uc5d0 \ud3c9\uade0 \ucc28\uc774\uac00 \ud074\uc218\ub85d \ud6a8\uacfc\ud06c\uae30\ub294 \ucee4\uc9c0\uac8c \ub41c\ub2e4. \ud6a8\uacfc\ud06c\uae30\uc758 \uc26c\uc6b4 \uc608\ub97c \ub4e4\uc5b4\ubcf4\uba74 \ub0a8\ub140 \uc131\ubcc4 \ube44\uc728\uc774 50:50\uc774\ub77c\ub294 \uadc0\ubb34\uac00\uc124\ud558\uc5d0\uc11c \uc2e4\uc81c \ube44\uc728\uc740 53:47\uc774\ub77c\uace0 \ud558\uba74 \ud6a8\uacfc\ud06c\uae30\ub294 3%\uac00 \ub41c\ub2e4.\n\uc989, \ud6a8\uacfc\ud06c\uae30\uac00 0\uc774\ub77c\ub294 \uc758\ubbf8\ub294 \ube44\uad50\ud558\ub824\ub294 \uc9d1\ub2e8\uc0ac\uc774\uc758 \ud3c9\uade0\uc774 \ub3d9\uc77c\ud558\ub2e4\ub294\ub73b\uc774\uace0, \ud6a8\uacfc\ud06c\uae30\uc758 \uac12\uc774 \uc591\uc218\ub97c \uac16\uac8c \ub418\uba74 \ube44\uad50\uc9d1\ub2e8\uc774 \ub300\uc870\uc9d1\ub2e8\uc5d0 \ube44\ud574 \ud3c9\uade0\uce58\uac00 \ud06c\ub2e4\ub294 \uc758\ubbf8\uc774\ub2e4. \uadf8\ub9ac\uace0 \uc74c\uc218 \uac12\uc744 \uac16\uac8c\ub418\uba74 \ube44\uad50\uc9d1\ub2e8\uc758 \ud3c9\uade0\uc774 \ub300\uc870\uc9d1\ub2e8\uc5d0 \ube44\ud574 \uc791\ub2e4\ub294\uac83\uc744 \uc758\ubbf8\ud55c\ub2e4.\n2.11. \uc5f0\uc2b5\ubb38\uc81c\u00b6\n\ubcc0\uc218 totalwgt_lb\uc744\uc0ac\uc6a9\ud574 \uccab\uc9f8 \uc544\uc774\uac00 \ub2e4\ub978 \uc544\uc774\ub4e4 \ubcf4\ub2e4 \ub354\uac00\ubcbc\uc6b4\uc9c0\ub354\ubb34\uac70\uc6b4\uc9c0\uc870\uc0ac\ud558\uc2dc\uc624. \uc9d1\ub2e8\uc0ac\uc774 \ucc28\uc774\ub97c \uc815\ub7c9\ud654\ud558\ub294\ub370 \ucf54\ud5e8d \uac12\uc744 \uacc4\uc0b0\ud55c\ub2e4.\n\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nimport math\n\ndef CohenEffectSize(group1, group2):\n    diff = group1.mean() - group2.mean()\n    var1 = group1.var()\n    var2 = group2.var()\n    n1, n2 = len(group1), len(group2)\n    pooled_var = (n1 * var1 + n2 * var2) / (n1 + n2)\n    d = diff / math.sqrt(pooled_var)\n    return d\n\ncohen_d = CohenEffectSize(first_baby.totalwgt_lb, others.totalwgt_lb)\nprint(f'\ucf54\ud5e8d \uac12\uc740 {cohen_d} \uc774\ub2e4.')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\ucf54\ud5e8d \uac12\uc740 -0.088672927072602 \uc774\ub2e4.\n\n\n\n\n\n\n\n\n\n\n\n\uc704\uc758 \uacb0\uacfc\uac00 \uc74c\uc218\uc774\uae30 \ub54c\ubb38\uc5d0 \uccab\uc9f8 \uc544\uc774\uc758 \ubab8\ubb34\uac8c \ud3c9\uade0\uc740 \ub098\uba38\uc9c0 \uc544\uc774\ub4e4\uc758 \ud3c9\uade0\ubcf4\ub2e4 \uc791\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uace0, \uac12\uc774 0\uc5d0 \uac00\uae5d\uae30 \ub54c\ubb38\uc5d0 \ud6a8\uacfc \ud06c\uae30\uac00 \uc544\uc8fc \uc791\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.\n\ucf54\ud5e8\uc740 \ud6a8\uacfc \ud06c\uae30\ub97c \uc784\uc758\ub85c small(0.5\ubbf8\ub9cc), medium(0.5\uc774\uc0c1), large(1\uc774\uc0c1)\ub85c \uad6c\ubd84\ud574 \uc9c1\uad00\uc801\uc73c\ub85c \uc774\ud574\ud558\uae30 \uc27d\uac8c \uc18c\uac1c\ud558\uc600\ub2e4.\n\n2.12.  \uc6a9\uc5b4\uc0ac\uc804\u00b6\n\ubd84\ud3ec(distribution): \ud45c\ubcf8\uc5d0 \ub098\ud0c0\ub098\ub294 \uac12\uacfc \uac1c\ubcc4\uac12\uc758 \ube48\ub3c4\n\ud788\uc2a4\ud1a0\uadf8\ub7a8(histogram): \ub370\uc774\ud130\uc14b\uc758 \uac12\ub4e4\uc744 \ube48\ub3c4\ub85c \ub098\ud0c0\ub0b4\ub294 \uadf8\ub798\ud504\n\ube48\ub3c4(frequency): \ub370\uc774\ud130\uc14b\uc5d0\uc11c \uac12\uc774 \ub098\ud0c0\ub098\ub294 \ud69f\uc218.\n\ucd5c\ube48\uac12(mode): \ub370\uc774\ud130\uc14b\uc5d0\uc11c \uac00\uc7a5 \ube48\ub3c4\uac00 \ub192\uc740\uac12\n\uc815\uaddc\ubd84\ud3ec(normal distribution): \uc885\ubaa8\uc591\uc758 \ubd84\ud3ec, \uac00\uc6b0\uc2a4\ubd84\ud3ec\ub85c\ub3c4 \uc54c\ub824\uc838\uc788\ub2e4.\n\uade0\ub4f1\ubd84\ud3ec(uniform distribution): \ubaa8\ub4e0\uac12\uc774 \ub3d9\uc77c\ud55c \ube48\ub3c4\ub85c \ubd84\ud3ec.\n\uaf2c\ub9ac(tail): \ubd84\ud3ec\uc758 \uc591\uadf9\ub2e8\uc5d0 \uc874\uc7ac\ud558\ub294 \ubd80\ubd84\n\ud2b9\uc774\uac12(outlier): \uc911\uc2ec\uc5d0\uc11c \ub9ce\uc774 \ub5a8\uc5b4\uc9c4 \uac12.\n\ud37c\uc9d0(spread): \ub370\uc774\ud130\ub4e4\uc774 \uc5bc\ub9c8\ub098 \ud37c\uc838\uc788\ub294\uc9c0\uc5d0 \ub300\ud55c \uce21\uc815\uac12.\n\uc694\uc57d\ud1b5\uacc4(summary statistic): \uc911\uc2ec \uacbd\ud5a5\uc131 \ud639\uc740 \ud37c\uc9d0 \uac19\uc774 \ubd84\ud3ec\uc758 \uce21\uba74\uc744 \uc815\ub7c9\ud654\ud558\ub294 \ud1b5\uacc4\uce58.\n\ubd84\uc0b0(variance): \ud37c\uc9d0\uc744 \uc815\ub7c9\ud654\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\ub294 \uc694\uc57d\ud1b5\uacc4.\n\ud45c\uc900\ud3b8\ucc28(standard deviation): \ubd84\uc0b0\uc758 \uc81c\uacf1\uadfc\uc73c\ub85c \ud37c\uc9d0\uc744 \uce21\uc815\ud558\ub294\ub370 \uc0ac\uc6a9\ub41c\ub2e4.\n\ud6a8\uacfc\ud06c\uae30(effect size): \uc9d1\ub2e8\uac04\uc758 \ucc28\uc774\ucc98\ub7fc \ud6a8\uacfc\ud06c\uae30\ub97c \uc815\ub7c9\ud654\ud558\ub294 \uc694\uc57d\ud1b5\uacc4.\n\n3. \ud655\ub960 \uc9c8\ub7c9 \ud568\uc218\u00b63.1. PMF \uc18c\uac1c\u00b6\ud655\ub960 \uc9c8\ub7c9 \ud568\uc218(Probability Mass Function; \uc774\ud558 PMF)\uc740 \ubd84\ud3ec\ub97c \ud45c\ud604\ud558\ub294 \ub610 \ub2e4\ub978 \ubc29\uc2dd\uc774\ub2e4. PMF\ub294 \uac01\uac01\uc758 \uac12\uc744 \ud655\ub960\ub85c \uce58\ud658\ud558\ub294 \ubc29\ubc95\uc73c\ub85c \uac01\uac01\uc758 \ud655\ub960\uc744 \uc5bb\uae30 \uc704\ud574 \ud45c\ubcf8\uc758 \ud06c\uae30 n\uc73c\ub85c \uac12\uc744 \ub098\ub204\ub294\ub370 \uc774\uac83\uc744 \uc815\uaddc\ud654 \ub77c\uace0 \ud55c\ub2e4.\n\uc5ec\uae30\uc11c\ub294 \uc124\uba85\uc744 \uc704\ud574 \uc800\uc790\uac00 \uc791\uc131\ud55c thinkstats2 \ubaa8\ub4c8\uc744 \uc0ac\uc6a9\ud574 PMF\ub97c \uacc4\uc0b0\ud55c\ub2e4. \uc2e4\ubb34\uc5d0\uc11c\ub294 scipy\ub97c \uc0ac\uc6a9\ud558\ub294\ud3b8\uc774 \uc131\ub2a5\uba74\uc5d0\uc11c \uc720\ub9ac\ud560 \uac83\uc774\ub2e4.\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nimport thinkstats2\npmf = thinkstats2.Pmf([1,2,2,3,5])\nprint(pmf)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nPmf({1: 0.2, 2: 0.4, 3: 0.2, 5: 0.2})\n\n\n\n\n\n\n\n\n\n\n\nPMF\ub294 \uc815\uaddc\ud654\ub97c \uac70\uce58\uae30 \ub54c\ubb38\uc5d0 \uc804\uccb4\uc758 \ud569\uc774 1\uc774 \ub41c\ub2e4.\n3.2. PMF \ud50c\ub86f \uadf8\ub9ac\uae30\u00b6PMF\ub97c \uc2dc\uac01\ud654\ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nimport thinkplot\n\nfirst_pmf = thinkstats2.Pmf(first_baby.prglngth)\nother_pmf = thinkstats2.Pmf(others.prglngth)\nwidth = 0.45\n\nthinkplot.PrePlot(2, cols=2)\nthinkplot.Hist(first_pmf, align='right', width=width, label='first')\nthinkplot.Hist(other_pmf, align='left', width=width, label='others')\nthinkplot.Config(xlabel='weeks', ylabel='probability', axis=[27, 46, 0, 0.6])\n\nthinkplot.PrePlot(2)\nthinkplot.SubPlot(2)\nthinkplot.Pmfs([first_pmf, other_pmf])\nthinkplot.Show(xlabel='weeks', axis=[27, 46, 0, 0.6])\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n<Figure size 576x432 with 0 Axes>\n\n\n\n\n\n\n\n\n\n\n\n3.3. \ub2e4\ub978 \uc2dc\uac01\ud654 \ubc29\ubc95\u00b6\ud788\uc2a4\ud1a0\uadf8\ub7a8\uacfc PMF\uc740 \ub370\uc774\ud130\ub97c \ud0d0\uc0c9\ud558\uace0 \ud328\ud134\uc744 \uc2dd\ubcc4\ud558\ub294\ub370 \uc720\uc6a9\ud558\ub2e4. \uc704\uc5d0\uc11c \uc0b4\ud3b4\ubcf8 \uccab\uc9f8\uc544\uc774\uc640 \ub098\uba38\uc9c0 \uc544\uc774 \uadf8\ub8f9\uc758 \uac00\uc7a5 \ud070\ucc28\uc774\ub294 \ucd5c\ube48\uac12\uc5d0 \uc788\ub2e4. \ucd5c\ube48\uac12 \ucc28\uc774\ub97c \uac15\uc870\ud558\ub294 \uc2dc\uac01\ud654\ub97c \ud574\ubcf4\uc790.\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \nweeks = range(35, 46)\ndiffs = []\n\nfor week in weeks:\n    p1 = first_pmf.Prob(week)\n    p2 = other_pmf.Prob(week)\n    diff = 100 * (p1 - p2)\n    diffs.append(diff)\n\nthinkplot.Bar(weeks, diffs)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \ub9c9\ub300 \uadf8\ub798\ud504\uc758 y\ucd95\uc740 \ud655\ub960\uc774\ub2e4. \ub530\ub77c\uc11c \uccab\uc9f8 \uc544\uc774\ub294 \uc784\uc2e0 39\uc8fc\ucc28\uc5d0 \ub35c \ud0dc\uc5b4\ub0ac\uace0 41-42\uc8fc\ucc28\uc5d0 \uc880 \ub354 \ud0dc\uc5b4\ub0ac\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.\n3.4. \ud559\uae09 \ud06c\uae30 \uc5ed\uc124(Class size paradox)\u00b6\ud559\uad50\uc5d0\uc11c \ud559\uae09(Class)\ub97c \uac1c\uc124\ud588\ub294\ub370, \ud559\uad50 \uce21\uc5d0\uc11c \uacc4\uc0b0\ud55c \ud559\uae09 \ubcc4 \ud3c9\uade0 \uc778\uc6d0\ubcf4\ub2e4 \ud559\uc0dd \uce21\uc5d0\uc11c \ub290\ub07c\ub294 \ud559\uae09 \ubcc4 \ud3c9\uade0 \uc778\uc6d0\uc774 \ub354 \ub9ce\uc740 \ud604\uc0c1\uc744 \ub9d0\ud55c\ub2e4.\n3.5. \ub370\uc774\ud130\ud504\ub808\uc784 \uc778\ub371\uc2f1(indexing)\u00b6\uc790\uc138\ud55c \uac83\uc740 \ud310\ub2e4\uc2a4(pandas) \uacf5\uc2dd \ubb38\uc11c\ub97c \ucc38\uace0\ud558\ub77c.\n3.6. \uc5f0\uc2b5\ubb38\uc81c\u00b6\n\ub2ec\ub9ac\uae30 \uacbd\uc8fc \uacb0\uacfc(Apr25_27thAn_set1.shtml)\ub97c \uc0ac\uc6a9\ud574 \uc704\uc5d0\uc11c \ubc30\uc6b4 \ud559\uae09 \ud06c\uae30 \uc5ed\uc124\uc744 \uc801\uc6a9\ud55c\ub2e4. \uc8fc\ucd5c\uc790 \uc785\uc7a5\uc5d0\uc11c\uc758 \uc2e4\uc81c \ucc38\uac00\uc790 \uc18d\ub3c4 \uc640 \ucc38\uac00\uc790\ub4e4\uc758 \uc785\uc7a5\uc5d0\uc11c \uc8fc\uc790\ub4e4\uc758 \uc18d\ub3c4 \ub97c PMF\ub85c \uc2dc\uac01\ud654\ud558\ub77c. \n\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \nimport numpy as np\n\ndef CleanLine(line):\n    t = line.split()\n    if len(t) < 6:\n        return None  \n    place, divtot, div, gun, net, pace = t[0:6]\n    if not '/' in divtot:\n        return None\n    for time in [gun, net, pace]:\n        if ':' not in time:\n            return None\n    return place, divtot, div, gun, net, pace\n\ndef ConvertPaceToSpeed(pace):\n    m, s = [int(x) for x in pace.split(':')]\n    secs = m*60 + s\n    mph  = 1 / secs * 60 * 60 \n    return mph\n\ndef ReadResults(filename='../data/Apr25_27thAn_set1.shtml'):\n    results = []\n    for line in open(filename):\n        t = CleanLine(line)\n        if t:\n            results.append(t)\n    return results\n\ndef GetSpeeds(results, column=5):\n    speeds = []\n    for t in results:\n        pace = t[column]\n        speed = ConvertPaceToSpeed(pace)\n        speeds.append(speed)\n    return speeds\n\ndef BinData(data, low, high, n):\n    data = (np.array(data) - low) / (high - low) * n\n    data = np.round(data) * (high - low) / n + low\n    return data\n\nresults = ReadResults()\nspeeds = GetSpeeds(results)\nspeeds = BinData(speeds, 3, 12, 100)\n\n\n    \n\n\n\n\n\n\n\n\uc2e4\uc81c \ucc38\uac00\uc790\ub4e4\uc758 \uc18d\ub3c4\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \npmf = thinkstats2.Pmf(speeds, 'actual speeds')\nthinkplot.Pmf(pmf)\nthinkplot.Config(xlabel='Speed (mph)', ylabel='PMF')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uacbd\uc8fc \ucc38\uac00\uc790\ub4e4\uc774 \ub290\ub07c\ub294 \ub2e4\ub978 \ucc38\uac00\uc790\uc758 \uc0c1\ub300 \uc18d\ub3c4\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \ndef ObservedPmf(pmf, speed, label=None):\n    new = pmf.Copy(label=label)\n    for val in new.Values():\n        diff = abs(val - speed)\n        new[val] *= diff\n    new.Normalize()\n    return new\n\nbiased = ObservedPmf(pmf, 7, label='observed speeds')\nthinkplot.Pmf(biased)\nthinkplot.Config(xlabel='Speed (mph)', ylabel='PMF')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.7. \uc6a9\uc5b4\uc0ac\uc804\u00b6\n\ud655\ub960\uc9c8\ub7c9\ud568\uc218(Probability mass function, PMF): \uac12\uc744 \ud655\ub960\ub85c \uce58\ud658\ud574 \ubd84\ud3ec\ub85c \ud45c\ud604.\n\ud655\ub960(probability): \ud45c\ubcf8 \ud06c\uae30\uc758 \uc77c\ubd80\ub85c \ud45c\ud604\ub418\ub294 \ube48\ub3c4\uc218.\n\uc815\uaddc\ud654(normalization): \ud655\ub960\uac12\uc744 \uc5bb\uae30\uc704\ud574\uc11c \ud45c\ubcf8\ud06c\uae30\ub85c \ube48\ub3c4\uc218\ub97c \ub098\ub204\ub294\uacfc\uc815.\n\n4. \ub204\uc801 \ubd84\ud3ec \ud568\uc218\u00b64.1. PMF\uc758 \ud55c\uacc4\u00b6PMF\ub294 \ub370\uc774\ud130\uc758 \uc218\uac00 \uc801\uc744\ub54c\ub294 \uc798 \uc791\ub3d9\ud558\uc9c0\ub9cc \ub370\uc774\ud130\uc758 \uac1c\uc218\uac00 \ub9ce\uc774 \uc99d\uac00\ub418\uba74 \uac01\uac01\uc758 \ud655\ub960\uac12\uc774 \uc791\uc544\uc838 \ud655\ub960\uc7a1\uc74c\uc758 \ud6a8\uacfc\uac00 \uc99d\uac00\ud558\ub294 \ud55c\uacc4\uac00 \uc788\ub2e4. \ub530\ub77c\uc11c \uc774 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uae30 \uc704\ud574 \ub204\uc801 \ubd84\ud3ec \ud568\uc218(cumulative distribution function, \uc774\ud558 CDF)\uc758 \uac1c\ub150\uc774 \ub098\uc624\uac8c \ub418\uc5c8\ub2e4. CDF\ub97c \uc124\uba85\ud558\uae30 \uc55e\uc11c \ubc31\ubd84\uc704\uc218(percentile)\uc744 \uc0b4\ud3b4\ubcf4\uc790.\n4.2. \ubc31\ubd84\uc704\uc218(Percentiles)\u00b6\ubc31\ubd84\uc704\uc218\ub294 \ub370\uc774\ud130\ub97c \uc21c\uc11c\ub300\ub85c \ub098\uc5f4\ud588\uc744 \ub54c \ubc31\ubd84\uc728\ub85c \ud2b9\uc815 \uc704\uce58\uc758 \uac12\uc744 \ub098\ud0c0\ub0b4\ub294 \uac83\uc774\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uac00\uc7a5 \uc791\uc740 \uac83\uc744 0, \uac00\uc7a5 \ud070 \uac83\uc744 100\uc73c\ub85c \ud55c\ub2e4.\n4.3. CDF\u00b6\ub204\uc801 \ubd84\ud3ec \ud568\uc218(CDF)\ub294 \ub370\uc774\ud130\ub97c \ubc31\ubd84\uc704 \uc21c\uc704\ub85c \uce58\ud658\ud558\ub294 \uac83\uc774\ub2e4.\n4.4. CDF \ud45c\ud604\ud558\uae30\u00b6\ucc45\uc758 \uc800\uc790\uac00 \uc791\uc131\ud55c thinkstats2,thinkplot\uc744 \uc0ac\uc6a9\ud588\ub2e4.\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \nfirst_cdf = thinkstats2.Cdf(first_baby.prglngth, label='prglngth')\nthinkplot.Cdf(first_cdf)\nthinkplot.Show(xlabel='weeks', ylabel='CDF')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n<Figure size 576x432 with 0 Axes>\n\n\n\n\n\n\n\n\n\n\n\nCDF \uadf8\ub798\ud504\ub97c \uc77d\ub294 \ubc29\ubc95\uc740 \ubc31\ubd84\uc704\uc218\ub97c \ucc3e\ub294 \uac83\uc774\ub2e4. \uc704\uc758 \uadf8\ub9bc\uc744 \uc608\ub85c \ub4e4\uba74 \uc784\uc2e0\uae30\uac04\uc758 10%\ub294 36\uc8fc\ucc28\ubcf4\ub2e4 \uc9e7\uace0 90%\uc758 \uc0b0\ubaa8\ub4e4\uc740 41\uc8fc\ubcf4\ub2e4 \uc9e7\uc740 \uc784\uc2e0\uae30\uac04\uc744 \uac16\ub294\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.\n\ub370\uc774\ud130\uc758 \ucd5c\ube48\uac12\uc740 CDF \uadf8\ub798\ud504\uc5d0\uc11c \uae09\uaca9\ud558\uac70\ub098 \uc218\uc9c1\uc120\uc73c\ub85c \ud45c\ud604\ub41c\ub2e4. \uc704 \uadf8\ub9bc\uc5d0\uc11c\ub294 39\uc8fc\ucc28\uc5d0\uc11c \uba85\ud655\ud558\uac8c \ud45c\ud604\ub418\uc5b4 \uc788\ub2e4. \ub610\ud55c 30\uc8fc\ubcf4\ub2e4 \uc9e7\uc740 \ub370\uc774\ud130\ub294 \ub9e4\uc6b0 \uc801\uae30 \ub54c\ubb38\uc5d0 \ud3c9\ud3c9\ud558\uac8c \ud45c\ud604\ub418\uc5b4 \uc788\ub2e4.\n\uc774\ub807\ub4ef CDF \uadf8\ub798\ud504\ub294 PMF \uadf8\ub798\ud504\ubcf4\ub2e4 \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \ubcf4\ub2e4 \uba85\ud655\ud558\uac8c \uc2dc\uac01\ud654 \ud560 \uc218 \uc788\ub2e4\ub294 \uc7a5\uc810\uc774 \uc788\ub2e4.\n4.5. CDF \ube44\uad50\ud558\uae30\u00b6CDF\ub294 \uc11c\ub85c \ub2e4\ub978 \ub370\uc774\ud130\uc758 \ubd84\ud3ec\ub97c \ube44\uad50\ud560\ub54c\ub3c4 \uc0ac\uc6a9\ub41c\ub2e4. \uc55e\uc5d0\uc11c \ud588\ub358 \uccab\uc9f8 \uc544\uc774\uc640 \ub098\uba38\uc9c0 \uc544\uc774\ub4e4\uc758 \uc784\uc2e0\uae30\uac04\uc758 \ucc28\uc774\ub97c \ub2e4\uc2dc \uc0b4\ud3b4\ubcf4\uc790.\n\n\n\n\n\n\nIn\u00a0[17]:\n\n    \nfirst_cdf = thinkstats2.Cdf(first_baby.prglngth, label='first')\nothers_cdf = thinkstats2.Cdf(others.prglngth, label='others')\n\nthinkplot.Cdf(first_cdf)\nthinkplot.Cdf(others_cdf)\nthinkplot.Show(xlabel='weeks', ylabel='CDF')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n<Figure size 576x432 with 0 Axes>\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uadf8\ub9bc\uc744 \ud1b5\ud574 \ubd84\ud3ec \ucc28\uc774\ub97c \ubcfc\uc218 \uc788\ub2e4. \ucd5c\ube48\uac12\uc740 \ub3d9\uc77c\ud558\ub098 \uccab\uc9f8 \uc544\uc774\uac00 \ub098\uba38\uc9c0 \uc544\uc774\ub4e4\uc5d0 \ube44\ud574 \uc784\uc2e0\uae30\uac04\uc774 \uc870\uae08 \uc9e7\uc740 \uac83\uc744 \ubcfc \uc218 \uc788\ub2e4.\n4.6. \ubc31\ubd84\uc704\uc218 \uae30\ubc18 \ud1b5\uacc4\ub7c9\u00b6\uc911\uc559\uac12(median) \ub610\ub294 \uc911\uc704\uc218\ub294 \uc5b4\ub5a4 \uc8fc\uc5b4\uc9c4 \uac12\ub4e4\uc744 \ud06c\uae30\uc758 \uc21c\uc11c\ub300\ub85c \uc815\ub82c\ud588\uc744 \ub54c \uac00\uc7a5 \uc911\uc559\uc5d0 \uc704\uce58\ud558\ub294 \uac12\uc744 \uc758\ubbf8\ud55c\ub2e4. \uc608\ub97c \ub4e4\uc5b4 1, 2, 100\uc758 \uc138 \uac12\uc774 \uc788\uc744 \ub54c, 2\uac00 \uac00\uc7a5 \uc911\uc559\uc5d0 \uc788\uae30 \ub54c\ubb38\uc5d0 2\uac00 \uc911\uc559\uac12\uc774\ub2e4.\n\uc0ac\ubd84\uc704\uc218 \ubc94\uc704(Interquartile range, IQR)\ub294 \uc790\ub8cc\ub97c \uc791\uc740 \uac12\ubd80\ud130 \ud070 \uac12\uae4c\uc9c0 \uc21c\uc11c\ub300\ub85c \ub098\uc5f4\ud55c \ud6c4 4\ub4f1\ubd84 \ud558\uc600\uc744 \ub54c \uac01 \uc810\uc5d0 \ud574\ub2f9\ud558\ub294 \uac12\uc744 \uc758\ubbf8\ud55c\ub2e4. \ub530\ub77c\uc11c \uc804\uccb4 \uc790\ub8cc\ub97c 100%\ub85c \ubcf4\uc558\uc744 \ub54c, 25% \uc9c0\uc810\uc5d0 \ud574\ub2f9\ud558\ub294 \uac12\uc740 \uc81c1\uc0ac\ubd84\uc704\uc218\uac00 \ub418\ub294 \uac83\uc774\ub2e4.\n\n25% = \uc81c1\uc0ac\ubd84\uc704\uc218 (q1) , the first quartile\n50% = \uc81c2\uc0ac\ubd84\uc704\uc218(\uc911\uc559\uac12) (q2), the second quartile \n75% \uc81c 3\uc0ac\ubd84\uc704\uc218 (q3), the third quartile\n\n\uc5ec\uae30\uc11c 50% \uc9c0\uc810\uc5d0 \ud574\ub2f9\ud558\ub294 \uc81c2\uc0ac\ubd84\uc704\uc218\ub294 \uc790\ub8cc\uc758 \uc911\uc559\uac12(\uc911\uc704\uc218, median)\uacfc \ub3d9\uc77c\ud558\ub2e4.\n4.7. \ub09c\uc218(Random numbers)\u00b6\ub09c\uc218\ub780 \ubb34\uc791\uc704\ub85c \ub9cc\ub4e4\uc5b4\uc9c4 \uc218\uc5f4\uc744 \uac00\ub9ac\ud0a8\ub2e4. \uc5ec\uae30\uc11c \ubb34\uc791\uc704\ub780 \ub2e4\uc74c\uc5d0 \ub098\uc62c \uc218\ub97c \uc808\ub300 \uc608\uce21\ud560 \uc218 \uc5c6\ub2e4\ub294 \uac83\uc744 \ub9d0\ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[18]:\n\n    \nweight_cdf = thinkstats2.Cdf(live_baby.totalwgt_lb, label='weight')\nsample = np.random.choice(live_baby.totalwgt_lb, 100, replace=True)\nranks = [weight_cdf.PercentileRank(x) for x in sample]\nrank_cdf = thinkstats2.Cdf(ranks)\nthinkplot.Cdf(rank_cdf)\nthinkplot.Show(xlabel='percentile rank', ylabel='CDF')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n<Figure size 576x432 with 0 Axes>\n\n\n\n\n\n\n\n\n\n\n\n\uc704 CDF \uadf8\ub798\ud504\ub294 \uadfc\uc0ac\uc801\uc73c\ub85c \uc9c1\uc120\uc774\ub2e4. \uc989, \ubd84\ud3ec\ub294 \uade0\ub4f1\ud558\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.\nCDF \ubaa8\uc591\uacfc \uad00\uacc4\uc5c6\uc774 \ubc31\ubd84\uc704 \uc21c\uc704\uc758 \ubd84\ud3ec\ub294 \uade0\ub4f1\ud558\uba70 \ub610\ud55c \ub09c\uc218\ub97c \ud1b5\ud574 \uc120\ud0dd\uc774 \uade0\ub4f1\ud558\uac8c \uc774\ub8e8\uc5b4\uc84c\ub2e4\ub294 \uac83\uc744 \uc54c \uc218\uc788\ub2e4.\n4.8. \ubc31\ubd84\uc704 \uc21c\uc704 \ube44\uad50\ud558\uae30\u00b6\ubc31\ubd84\uc704\uc21c\uc704\ub294 \ub2e4\ub978\uc9d1\ub2e8\uacfc\uc758 \uce21\uc815\uac12\uc744 \ube44\uad50\ud558\ub294\ub370 \uc720\uc6a9\ud558\ub2e4.\n4.9. \uc5f0\uc2b5\ubb38\uc81c\u00b6\n\ub09c\uc218 1000\uac1c\ub97c \uc0dd\uc131\ud574 PMF\uc640 CDF\uac00 \uade0\ub4f1\ubd84\ud3ec\uc778\uc9c0 \uc2dc\uac01\ud654\ud558\ub77c.\n\n\n\n\n\n\n\nIn\u00a0[19]:\n\n    \nx = np.random.random(1000)\nthinkplot.Pmf(thinkstats2.Pmf(x), linewidth=0.1)\nthinkplot.Config(xlabel='Random variate', ylabel='PMF', ylim=(0,0.05))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uadf8\ub798\ud504\uc5d0\uc11c \ubcfc \uc218 \uc788\ub4ef\uc774 \ub370\uc774\ud130\ub4e4\uc774 \uade0\ub4f1\ud558\uac8c \ubd84\ud3ec\ud55c\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.\n\n\n\n\n\n\nIn\u00a0[20]:\n\n    \nthinkplot.Cdf(thinkstats2.Cdf(x))\nthinkplot.Config(xlabel='Random variate', ylabel='CDF')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 CDF \uadf8\ub798\ud504\uc5d0\uc11c \ud655\uc778\ud560 \uc218 \uc788\ub4ef\uc774, \ub9e4\uc6b0 \uc120\ud615\uc784\uc73c\ub85c \ub370\uc774\ud130\uc14b\uc774 \uade0\ub4f1\ubd84\ud3ec\ub77c\uace0 \ud560 \uc218 \uc788\ub2e4.\n4.10. \uc6a9\uc5b4\uc0ac\uc804\u00b6\n\ubc31\ubd84\uc704\uc21c\uc704(percentile rank): \ubd84\ud3ec\uc5d0\uc11c \uc8fc\uc5b4\uc9c4 \uac12\uacfc \ub3d9\uc77c\ud558\uac70\ub098 \uc801\uc740\uac12\uc758 \ud37c\uc13c\ud2f0\uc9c0.\n\ubc31\ubd84\uc704\uc218(percentile): \uc8fc\uc5b4\uc9c4 \ubc31\ubd84\uc704 \uc21c\uc704\uc640 \uc5f0\uad00\ub41c \uac12.\n\ub204\uc801\ubd84\ud3ec\ud568\uc218(cumulative distribution function, CDF): \ub370\uc774\ud130\ub97c \ub204\uc801 \ud655\ub960\uac12\uc73c\ub85c \uce58\ud658\ud558\ub294 \ubc29\ubc95. CDF(x)\ub294 x\uc640 \ub3d9\uc77c\ud558\uac70\ub098 \uc791\uc740 \ud45c\ubcf8\ube44\uc728\uc774\ub2e4.\n\uc5edCDF(inverse CDF): \ub204\uc801\ud655\ub960(p)\uc5d0\uc11c \ud574\ub2f9 \uac12\uc73c\ub85c \uce58\ud658\ud558\ub294 \ud568\uc218.\n\uc911\uc704\uac12(median): \uc911\uc2ec \uacbd\ud5a5\uc131 \uce21\ub3c4\ub85c \uc0ac\uc6a9\ub418\ub294 \ubc31\ubd84\uc704\uc758 50\ubc88\uc9f8 \ub370\uc774\ud130.\n\uc0ac\ubd84\uc704\ubc94\uc704(interquartile range): \ud37c\uc9d0\uc758\uce21\ub3c4\ub85c\uc0ac\uc6a9\ub418\ub29475\ubc88\uc9f8\uc64025 \ubc88\uc9f8\ubc31\ubd84\uc704\uc218\uac04\ucc28\uc774.\n\ubcf5\uc6d0(replacement): \ud45c\ubcf8\ucd94\ucd9c \uacfc\uc815\uc758 \uc18d\uc131\uc73c\ub85c \ubcf5\uc6d0\ucd94\ucd9c(With replacement)\uc740 \ub3d9\uc77c\ud55c \uac12\uc774\ud55c\ubc88\uc774\uc0c1 \ucd94\ucd9c\ub420\uc218\uc788\ub2e4\ub294 \uc758\ubbf8\ub2e4. \uadf8\ub9ac\uace0 \ube44\ubcf5\uc6d0\ucd94\ucd9c(Without replacement)\uc740 \uac12\uc774 \ud55c\ubc88 \ucd94\ucd9c\ub418\uba74 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \uc81c\uac70\ub41c\ub2e4\ub294 \uc758\ubbf8\uac00 \ub41c\ub2e4.\n\n5. \ubd84\ud3ec \ubaa8\ub378(Modeling distributions)\u00b6\uc9c0\uae08\uae4c\uc9c0 \ubc30\uc6b4 \ubd84\ud3ec\ub294 \uacbd\ud5d8\uc801 \uad00\uce21\uce58\uc5d0 \uae30\ubc18\ud55c \ub370\uc774\ud130\uc73c\ub85c \uad6c\uc131\ub41c \uacbd\ud5d8\uc801 \ubd84\ud3ec(empirical distributions) \uc774\ub2e4.\n\uc774\ub7f0 \uacbd\ud5d8\uc801 \ubd84\ud3ec\ub97c \uc218\ud559\uc801\uc778 \ud568\uc218\ub85c \ub2e8\uc21c\ud654\ud558\ub294 \uc791\uc5c5\uc744 \ubaa8\ub378(model)\uc774\ub77c \ud558\uba70 \ubaa8\ub378\uc744 \ud1b5\ud574 \ub9cc\ub4e4\uc5b4\uc9c0\ub294 \ubd84\ud3ec\ub97c \ud574\uc11d\ubd84\ud3ec(analytic distribution) \ub77c\uace0 \ud55c\ub2e4.\n5.1. \uc9c0\uc218\ubd84\ud3ec(Exponential distribution)\u00b6\uac00\uc7a5 \ub2e8\uc21c\ud55c \ubd84\ud3ec \uc720\ud615\uc778 \uc9c0\uc218 \ubd84\ud3ec\uc758 CDF\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\ud604\ud55c\ub2e4.\n$$CDF(x) = 1 - e{-\\lambda x}$$\uc5ec\uae30\uc11c \ubaa8\uc218 $\\lambda$\ub294 \ubd84\ud3ec\uc758 \ubaa8\uc591\uc744 \ub098\ud0c0\ub0b8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[21]:\n\n    \nthinkplot.PrePlot(3)\nfor lam in [2.0, 1, 0.5]:\n    xs, ps = thinkstats2.RenderExpoCdf(lam, 0, 3.0, 50)\n    label = r'$\\lambda=%g$' % lam\n    thinkplot.Plot(xs, ps, label=label)\n    \nthinkplot.Config(title='Exponential CDF', xlabel='x', ylabel='CDF', \n                 loc='lower right')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc608\uc2dc\ub85c 1997\ub144 12\uc6d4 18\uc77c \ud638\uc8fc \ube0c\ub9ac\uc988\ubc88\uc5d0\uc11c \ud0dc\uc5b4\ub09c \uc544\uc774\ub4e4\uc758 \ucd9c\uc0dd \uc2dc\uac04\uc5d0 \ub300\ud55c \ub370\uc774\ud130\uc14b babyboom.dat\uc744 \uc0ac\uc6a9\ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[22]:\n\n    \ndef ReadBabyBoom(filename='../data/babyboom.dat'):\n    var_info = [\n        ('time', 1, 8, int),\n        ('sex', 9, 16, int),\n        ('weight_g', 17, 24, int),\n        ('minutes', 25, 32, int),]\n    columns = ['name', 'start', 'end', 'type']\n    variables = pd.DataFrame(var_info, columns=columns)\n    variables.end += 1\n    dct = thinkstats2.FixedWidthVariables(variables, index_base=1)\n    df = dct.ReadFixedWidth(filename, skiprows=59)\n    return df\n\ndiffs = ReadBabyBoom().minutes.diff()\ncdf = thinkstats2.Cdf(diffs, label='actual')\nthinkplot.Cdf(cdf)\nthinkplot.Config(xlabel='Time between births (minutes)', ylabel='CDF')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uadf8\ub9bc\uc740 \ub370\uc774\ud130\uc14b\uc758 \ucd9c\uc0dd\uc2dc\uac04\uac04\uc758 \uac04\uaca9\uc758 \ubd84\ud3ec\uc5d0 \ub300\ud574 \uc2dc\uac01\ud654\ud55c \uac83\uc774\ub2e4.\n\ubcf4\uc548\uc801\uc778 CDF(complementary CDF, \uc774\ud558 CCDF) \ub294 \uc704\uc758 \ubaa8\ub378\uc5d0 $Log$\ub97c \ucde8\ud558\ub294 \uac83\uc774\ub2e4. \uacf5\uc2dd\uc73c\ub85c \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\ud604 \ud55c\ub2e4.\n$$\\log y \\approx  - \\lambda x$$\ub530\ub77c\uc11c \ub85c\uadf8\ub97c \ucde8\ud55c CCDF\ub294 \uae30\uc6b8\uae30\uac00 $-\\lambda$\uc778 \uc9c1\uc120\uc774 \ub41c\ub2e4. \uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \uc0b4\ud3b4\ubcf4\uc790.\n\n\n\n\n\n\nIn\u00a0[23]:\n\n    \nthinkplot.Cdf(cdf, complement=True)\nthinkplot.Config(xlabel='Time between births (minutes)',\n                 ylabel='CCDF', yscale='log', loc='upper right')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uadf8\ub798\ud504\ub294 \uba85\ubc31\ud55c \uc9c1\uc120\uc774 \uc544\ub2c8\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c \uc774 \ub370\uc774\ud130\uc14b\uc5d0 \ub300\ud574 \uc9c0\uc218\ubd84\ud3ec\ub294 \uc644\ubcbd\ud55c \ubaa8\ub378\uc774 \uc544\ub2c8\ub77c\ub294 \uac83\uc774 \uc5ed\uc73c\ub85c \uc99d\uba85\ub41c\ub2e4. \ub2e4\uc2dc\ub9d0\ud574 \uc544\uc774\uc758 \"\ucd9c\uc0dd\uc740 \uade0\ub4f1\ud558\uac8c \ubc1c\uc0dd\ud560 \uac83\"\uc774\ub77c\ub294 \uac00\uc815\uc740 \ud2c0\ub838\ub2e4\uace0 \ubcfc \uc218 \uc788\ub2e4.\n5.2. \uc815\uaddc\ubd84\ud3ec(normal distribution)\u00b6\ub2e4\ub978 \ub9d0\ub85c \uac00\uc6b0\uc2a4 \ubd84\ud3ec(Gaussian distribution) \ub77c\uace0 \ud55c\ub2e4. \uc815\uaddc\ubd84\ud3ec\ub294 \ub2e4\uc591\ud55c \ud604\uc0c1\uc5d0 \uadfc\uc0ac \ubaa8\ub378\ub85c \uc0ac\uc6a9\ub420 \uc218 \uc788\uc5b4 \uc790\uc8fc \uc0ac\uc6a9\ub41c\ub2e4.\n\uc815\uaddc\ubd84\ud3ec\ub294 \ubaa8\uc218 \ud3c9\uade0 $\u00b5$, \ud45c\uc900\ud3b8\ucc28 $\u03c3$\ub85c \ud2b9\uc131\ud654\ub41c\ub2e4.  \uadf8\ub9ac\uace0 \ud3c9\uade0\uc774 0\uc774\uace0 \ud45c\uc900\ud3b8\ucc28\uac00 1\uc778 \uc815\uaddc\ubd84\ud3ec\ub97c \ud45c\uc900 \uc815\uaddc \ubd84\ud3ec(standard normal distribution)\ub77c\uace0 \ud55c\ub2e4. \uc218\uc2dd\uc73c\ub85c\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\ud604\ub41c\ub2e4.\n$$ CDF(z) = \\frac{1}{\\sqrt{2 \\pi}} \\int{z}_{-\\infty} e{\\frac{-t2}{2}}dt $$\ubaa8\uc218\uc758 \ubc94\uc704\uc5d0 \ub530\ub978 \uc815\uaddc \ubd84\ud3ec CDF\ub97c \uc2dc\uac01\ud654\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\ub2e4\n\n\n\n\n\n\nIn\u00a0[24]:\n\n    \nthinkplot.PrePlot(3)\nmus = [1.0, 2.0, 3.0]\nsigmas = [0.5, 0.4, 0.3]\n\nfor mu, sigma in zip(mus, sigmas):\n    xs, ps = thinkstats2.RenderNormalCdf(mu=mu, sigma=sigma, low=-1.0, high=4.0)\n    label = r'$\\mu=%g$, $\\sigma=%g$' % (mu, sigma)\n    thinkplot.Plot(xs, ps, label=label)\n\nthinkplot.Config(title='Normal CDF', xlabel='x', ylabel='CDF', loc='upper left')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.3. \uc815\uaddc\ud655\ub960\uadf8\ub9bc(Normal probability plot)\u00b6\n\n\n\n\n\nIn\u00a0[25]:\n\n    \nn = 1000\nthinkplot.PrePlot(3) \n\nmus = [0, 1, 5]\nsigmas = [1, 1, 2]\n\nfor mu, sigma in zip(mus, sigmas):\n    sample = np.random.normal(mu, sigma, n)\n    xs, ys = thinkstats2.NormalProbability(sample)\n    label = '$\\mu=%d$, $\\sigma=%d$' % (mu, sigma)\n    thinkplot.Plot(xs, ys, label=label)\n\nthinkplot.Config(title='Normal probability plot', xlabel='standard normal sample',\n                 ylabel='sample values')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704\uc758 \uadf8\ub9bc\uc740 \uc815\uaddc \ubd84\ud3ec\uc5d0 \ub300\ud55c \uc815\uaddc\ud655\ub960\uadf8\ub9bc\uc774\ub2e4. \uc120\ub4e4\uc774 \uadfc\uc0ac\uc801\uc778 \uc9c1\uc120\uc774\uace0 \ud3c9\uade0\uc5d0 \uc788\ub294 \uac12\ubcf4\ub2e4 \ubc97\uc5b4\ub09c \uac12\uc744 \uaf2c\ub9ac\uc5d0 \uac16\ub294\ub2e4.\n\uc774\uc81c \ucd9c\uc0dd \uccb4\uc911 \ub370\uc774\ud130\uc5d0 \ub300\ud574 \uc2dc\ub3c4\ud574 \ubcf4\uc790. \ubaa8\ub378\uc740 \ud68c\uc0c9\uc120\uc73c\ub85c \ud45c\ud604\ud558\uace0 \uc2e4\uc81c \ub370\uc774\ud130\ub294 \ud30c\ub780\uc0c9\uc73c\ub85c \uadf8\ub9b0\ub2e4.\n\n\n\n\n\n\nIn\u00a0[26]:\n\n    \nweights = live_baby.totalwgt_lb.dropna()\nfull_term = df[df.prglngth >= 37]\nterm_weights = full_term.totalwgt_lb.dropna()\n\nmean, var = thinkstats2.TrimmedMeanVar(weights, p=0.01)\nstd = np.sqrt(var)\n\nxs = [-4, 4]\nfxs, fys = thinkstats2.FitLine(xs, mean, std)\nthinkplot.Plot(fxs, fys, linewidth=4, color='0.8')\n\nthinkplot.PrePlot(2) \nxs, ys = thinkstats2.NormalProbability(weights)\nthinkplot.Plot(xs, ys, label='all live')\n\nxs, ys = thinkstats2.NormalProbability(term_weights)\nthinkplot.Plot(xs, ys, label='full term')\nthinkplot.Config(title='Normal probability plot',\n                 xlabel='Standard deviations from mean',\n                 ylabel='Birth weight (lbs)')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uadf8\ub798\ud504\ub294 \uc804\uccb4 \uc815\uc0c1 \ucd9c\uc0dd\uacfc \ub9cc\uc0ad(\uc784\uc2e0\uae30\uac04\uc77436\uc8fc\uc774\uc0c1)\uc5d0 \ub300\ud55c \uacb0\uacfc\ub97c \ubcf4\uc5ec\uc900\ub2e4. \ub450 \uace1\uc120 \ubaa8\ub450 \ud3c9\uade0 \uadfc\ucc98\uc5d0\uc11c \ubaa8\ud615\uacfc \uc77c\uce58\ub418\uace0 \uaf2c\ub9ac \ubd80\ubd84\uc5d0\uc11c \ucc28\uc774\uac00 \ub09c\ub2e4. \ubb34\uac70\uc6b4 \uc544\uc774\ub294 \ubaa8\ub378\ub85c \uc608\uce21\ud55c \uac83 \ubcf4\ub2e4 \ubb34\uac81\uace0 \uac00\ubcbc\uc6b4 \uc544\uc774\ub294 \uc608\uce21\ubcf4\ub2e4 \ub354 \uac00\ubccd\ub2e4.\n\ub9cc\uc0ad \ub370\uc774\ud130\ub9cc \uc120\ud0dd\ud558\uba74 \uac00\ubcbc\uc6b4 \uc544\uc774\ub4e4\uc758 \ub370\uc774\ud130\uac00 \uc81c\uac70\ub418\uace0 \uadf8\ub798\ud504\uc758 \uc544\ub798\ucabd \uaf2c\ub9ac\uac00 \ubaa8\ub378\uc5d0 \uc880 \ub354 \uc798 \uc77c\uce58\ub418\ub294 \uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\ub2e4.\n5.4. \ub85c\uadf8 \uc815\uaddc\ubd84\ud3ec(Lognormal distribution)\u00b6\uc815\uaddc\ubd84\ud3ec\uc5d0 \ub85c\uadf8\ub97c \ucde8\ud558\uba74 \ub85c\uadf8 \uc815\uaddc\ubd84\ud3ec\uac00 \ub41c\ub2e4.\n$$CDF_{lognormal}(x) = CDF_{normal}(logx)$$\ub85c\uadf8 \uc815\uaddc\ubd84\ud3ec\uc758 \uc608\uc2dc\ub85c \ubbf8\uad6d\uc5d0\uc11c \uc870\uc0ac\ud55c \uc131\uc778\uc758 \uccb4\uc911 \ub370\uc774\ud130(2008\ub144\uc5d0 \uc870\uc0ac\ud55c 398,484\uba85\uc758 \ub370\uc774\ud130)\ub97c \uc0ac\uc6a9\ud55c\ub2e4.\n5.5. \ud30c\ub808\ud1a0 \ubd84\ud3ec(Pareto distribution)\u00b6\ud30c\ub808\ud1a0 \ubd84\ud3ec(Pareto distribution)\ub294 \uacbd\uc81c\ud559\uc790 \ube4c\ud504\ub808\ub3c4 \ud30c\ub808\ud1a0(Vilfredo Pareto) \uc774\ub984\uc5d0\uc11c \ub098\uc654\ub294\ub370 \uc774\uac83\uc744 \uc0ac\uc6a9\ud574 \ub3c4\uc2dc\uc640 \ub9c8\uc744\uc758 \ud06c\uae30\ub4f1\uc744 \ub098\ud0c0\ub0c8\ub2e4.\n$$CDF(x) = 1 - \\frac{x}{x_m}{- \\alpha}$$5.6. \ub09c\uc218 \uc0dd\uc131\ud558\uae30\u00b6\uc8fc\uc5b4\uc9c4 \ubd84\ud3ec\ud568\uc218 $p = CDF(x)$\ub85c \ub09c\uc218\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[27]:\n\n    \nimport random\n\ndef expovariate(lam):\n    p = random.random()\n    x = -np.log(1-p) / lam\n    return x\n\nt = [expovariate(lam=2) for _ in range(1000)]\n\ncdf = thinkstats2.Cdf(t)\n\nthinkplot.Cdf(cdf, complement=True)\nthinkplot.Config(xlabel='Exponential variate', ylabel='CCDF', yscale='log')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5.7. \uc65c \ubaa8\ub378\uc774 \ud544\uc694\ud55c\uac00?\u00b6\ubaa8\ub378\uc740 \uc77c\uc885\uc758 \ub370\uc774\ud130 \uc555\ucd95\uc774\ub2e4. \ubaa8\ub378\uc774 \ub370\uc774\ud130\uc14b\uc5d0 \uc798 \uc801\ud569 \ub420 \ub54c, \uc801\uc740 \ubaa8\uc218 \uc9d1\ud569\uc73c\ub85c \ub300\ub7c9\uc758 \ub370\uc774\ud130\ub97c \uc694\uc57d\ud560 \uc218 \uc788\ub294 \uac83\uc774\ub2e4.\n5.8. \uc5f0\uc2b5\ubb38\uc81c\u00b65.9. \uc6a9\uc5b4 \uc0ac\uc804\u00b6\n\uacbd\ud5d8\uc801\ubd84\ud3ec(empirical distribution): \ud45c\ubcf8\uac12\uc758 \ubd84\ud3ec\n\ud574\uc11d\ubd84\ud3ec(analytic distribution): CDF\uac00 \ud574\uc11d\ud568\uc218\uc778 \ubd84\ud3ec.\n\ub3c4\ucc29\uac04\uaca9\uc2dc\uac04(interarrival time): \ub450\uc0ac\uac74 \uc0ac\uc774 \uacbd\uacfc \uc2dc\uac04.\n\ubcf4\uc644\uc801 CDF(complementary CDF): \uac12x\uc5d0\uc11c x\ub97c \ub118\ub294 \uac12 \ube44\uc728\ub85c \ub9e4\uce6d\ud558\ub294 \ud568\uc218, $1 \u2212 CDF(x)$.\n\ud45c\uc900\uc815\uaddc\ubd84\ud3ec(standard normal distribution): \ud3c9\uade0 0\uacfc \ud45c\uc900\ud3b8\ucc281\uc744 \uac16\ub294 \uc815\uaddc\ubd84\ud3ec.\n\uc815\uaddc\ud655\ub960\uadf8\ub9bc(normal probability plot): \ud45c\ubcf8\uac12\uacfc \ud45c\uc900\uc815\uaddc\ubd84\ud3ec\uc5d0\uc11c \ub098\uc628 \ub09c\uc218\ub97c \ub300\ube44\ud574 \uc2dc\uac01\ud654\ud55c \uadf8\ub9bc\n\n6. \ud655\ub960\ubc00\ub3c4\ud568\uc218\u00b66.1. PDF\u00b6CDF \ubbf8\ubd84\uc744 \ud655\ub960\ubc00\ub3c4\ud568\uc218(probability density function, \uc774\ud558 PDF) \ub77c\uace0\ud55c\ub2e4.\n\uc9c0\uc218\ubd84\ud3ec\uc758 PDF\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\u00b6$$PDF_{expo}(x) = \\lambda e{-\\lambda x}$$\uc815\uaddc\ubd84\ud3ec\uc758 PDF\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\u00b6$$PDF_{normal}(x) = \\frac{1}{\\sigma \\sqrt{2\\pi}} exp [ - \\frac{1}{2}(\\frac{x-\\mu}{\\sigma})2]$$6.2. \ud575\ubc00\ub3c4\ucd94\uc815\u00b6\ud575\ubc00\ub3c4\ucd94\uc815(Kernel density estimation, \uc774\ud558 KDE) \uc740 \ud45c\ubcf8\uc744 \ubc1b\uc544 \ub370\uc774\ud130\uc5d0 \uc801\ud569\ud55c \ud3c9\ud65c PDF\ub97c \ucc3e\ub294 \uc54c\uace0\ub9ac\uc998\uc774\ub2e4. KDE\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc720\uc6a9\uc131\uc774 \uc788\ub2e4.\n\n\uc2dc\uac01\ud654(Visualization): \ub370\uc774\ud130\uc14b\uc758 \ud0d0\uc0c9 \ub2e8\uacc4\uc5d0\uc11c\ub294 \ub300\uccb4\ub85c KDE\uac00 \ubd84\ud3ec\ub97c \uac00\uc7a5 \uc798 \uc2dc\uac01\ud654\ud55c\ub2e4.\n\ubcf4\uac04(Interpolation): KDE\ub97c \uc0ac\uc6a9\ud574\uc11c \ud45c\ubcf8\uc5d0 \uc5c6\ub294\uac12\uc5d0\ub300\ud574 \ubc00\ub3c4\ub97c \ubcf4\uac04\ud560 \uc218 \uc788\ub2e4.\n\ubaa8\uc758\uc2e4\ud5d8(Simulation): \ub9cc\uc57d \ud45c\ubcf8 \ud06c\uae30\uac00 \uc791\ub2e4\uba74 KDE\ub97c \uc0ac\uc6a9\ud574 \ud45c\ubcf8 \ubd84\ud3ec\ub97c \ud3c9\ud65c\ud560 \uc218 \uc788\ub2e4.\n\n\ubcf4\uac04\uc774\ub780 \uc54c\ub824\uc9c4 \uc9c0\uc810\uc758 \uac12 \uc0ac\uc774(\uc911\uac04)\uc5d0 \uc704\uce58\ud55c \uac12\uc744 \uc54c\ub824\uc9c4 \uac12\uc73c\ub85c\ubd80\ud130 \ucd94\uc815\ud558\ub294 \uac83\uc744 \ub9d0\ud55c\ub2e4.\n\n6.3. \ubd84\ud3ec \ud504\ub808\uc784\uc6cc\ud06c\u00b6\uc9c0\uae08\uae4c\uc9c0 PMF, CDF, PDF\ub97c \uc0b4\ud3b4\ubd24\ub2e4, \uc7a0\uc2dc \ubcf5\uc2b5\uc2dc\uac04\uc744 \uac16\ub294\ub2e4. \ub2e4\uc74c \uadf8\ub9bc\uc5d0 \uac01\uac01\uc758 \ud568\uc218\uac00 \uc5b4\ub5bb\uac8c \uc5f0\uad00 \ub418\ub294\uc9c0 \ub098\ud0c0\ub098 \uc788\ub2e4.\n\n6.8. \uc65c\ub3c4\u00b6\uc65c\ub3c4(Skewness)\ub294 \ubd84\ud3ec\uc758 \ud615\ud0dc\ub97c \uae30\uc220\ud55c\ub2e4. \ub9cc\uc57d \ubd84\ud3ec\uac00 \uc911\uc2ec\uacbd\ud5a5\uc131 \uc8fc\ubcc0\uc5d0\uc11c \ub300\uce6d\uc774\ub77c\uba74 \uae30\uc6b8\uc5b4 \uc9c0\uc9c0 \uc54a\uc558\ub2e4. \ub9cc\uc57d \uac12\ub4e4\uc774 \uc624\ub978\ucabd\uc73c\ub85c \uc880 \ub354 \ubed7\uc5b4\uc838\uc788\ub2e4\uba74\u201c\uc624\ub978\ucabd\uc73c\ub85c\uae30\uc6b8\uc5b4\uc838(right skewed), \ub9cc\uc57d \uac12\ub4e4\uc774 \uc67c\ucabd\uc73c\ub85c \uce58\uc6b0\uccd0\uc788\ub2e4\uba74,\u201c\uc67c\ucabd\uc73c\ub85c \uae30\uc6b8\uc5b4\uc838(left skewed)\u201d\uc774\ub2e4.\n6.9. \uc5f0\uc2b5\ubb38\uc81c\u00b6\n\uc18c\ub4dd\uc758 \ubd84\ud3ec\ub294 \uae30\uc6b8\uc5b4\uc838 \uc788\uae30\ub85c \uc720\uba85\ud558\ub2e4. \uc18c\ub4dd \ub370\uc774\ud130\uc14b\uc740 http://www.census.gov/hhes/www/cpstables/032013/hhinc/toc.htm \uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc744\uc218 \uc788\ub2e4. \uc5bc\ub9c8\ub098 \uce58\uc6b0\uccd0 \uc788\ub294\uc9c0 \uce21\uc815\ud558\ub77c.\n\n\n\n\n\n\n\nIn\u00a0[28]:\n\n    \nincome_df = pd.read_csv('../data/hinc06(1).csv')\n\ndef InterpolateSample(df, log_upper=6.0):\n    df['log_upper'] = np.log10(df.income)\n    df['log_lower'] = df.log_upper.shift(1)\n    df.loc[0, 'log_lower'] = 3.0\n    df.loc[41, 'log_upper'] = log_upper\n    arrays = []\n    for _, row in df.iterrows():\n        vals = np.linspace(row.log_lower, row.log_upper, int(row.freq))\n        arrays.append(vals)\n    log_sample = np.concatenate(arrays)\n    return log_sample\n\nlog_sample = InterpolateSample(income_df, log_upper=6.0)\nlog_cdf = thinkstats2.Cdf(log_sample)\nthinkplot.Cdf(log_cdf)\nthinkplot.Config(xlabel='Household income (log $)', ylabel='CDF')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[29]:\n\n    \nsample = np.power(10, log_sample)\ncdf = thinkstats2.Cdf(sample)\nthinkplot.Cdf(cdf)\nthinkplot.Config(xlabel='Household income ($)', ylabel='CDF')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[30]:\n\n    \ndef RawMoment(xs, k):\n    return sum(x**k for x in xs) / len(xs)\n\ndef Median(xs):\n    cdf = thinkstats2.Cdf(xs)\n    return cdf.Value(0.5)\n\ndef Mean(xs):\n    return RawMoment(xs, 1)\n\nMean(sample), Median(sample)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[30]:\n\n\n\n\n\n(74278.70753118733, 51226.45447894046)\n\n\n\n\n\n\n\n\n\n\n\n\ud3c9\uade0\uacfc \uc911\uc704\uac12\uc740 \uac01\uac01 74278, 51226\uc784\uc744 \uc54c \uc218 \uc788\ub2e4.\n\n\n\n\n\n\nIn\u00a0[31]:\n\n    \ndef CentralMoment(xs, k):\n    mean = RawMoment(xs, 1)\n    return sum((x - mean)**k for x in xs) / len(xs)\n\ndef StandardizedMoment(xs, k):\n    var = CentralMoment(xs, 2)\n    std = np.sqrt(var)\n    return CentralMoment(xs, k) / std**k\n\ndef Skewness(xs):\n    return StandardizedMoment(xs, 3)\n\ndef PearsonMedianSkewness(xs):\n    median = Median(xs)\n    mean = RawMoment(xs, 1)\n    var = CentralMoment(xs, 2)\n    std = np.sqrt(var)\n    gp = 3 * (mean - median) / std\n    return gp\n\nSkewness(sample), PearsonMedianSkewness(sample)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[31]:\n\n\n\n\n\n(4.949920244429583, 0.7361258019141782)\n\n\n\n\n\n\n\n\n\n\n\n\uc65c\ub3c4\ub294 4.9\ub85c \ub370\uc774\ud130\uc14b\uc774 \uc67c\ucabd\uc73c\ub85c \uce58\uc6b0\uccd0\uc788\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. (\uc815\uaddc\ubd84\ud3ec\uc758 \uc65c\ub3c4\ub294 0\uc774\ub2e4.) \uadf8\ub7ec\ub098 \uc774 \uacc4\uc0b0\ub294 \uac00\uc7a5 \ub192\uc740 \uc18c\ub4dd\uc744 \ubc31\ub9cc\ub2ec\ub7ec\ub77c\uace0 \uac00\uc815\ud55c \uacb0\uacfc\uc774\ub2e4. \ub2e4\uc2dc\ub9d0\ud574 \ucd5c\ub300\uac12\uc5d0 \ub300\ud55c \uc815\ubcf4\uac00 \uc5c6\uc73c\uba74 \uacc4\uc0b0\ub41c \uc65c\ub3c4\ub294 \ubbff\uc744 \uc218\uac00 \uc5c6\ub2e4.\n6.10. \uc6a9\uc5b4\uc0ac\uc804\u00b6\n\ud655\ub960\ubc00\ub3c4\ud568\uc218(Probability density function, PDF): \uc5f0\uc18dCDF \ubbf8\ubd84\uc73c\ub85c \uac12\uc744 \ud655\ub960\ubc00\ub3c4\ub85c \uce58\ud658\ud558\ub294 \ud568\uc218\n\ud655\ub960\ubc00\ub3c4(Probability density): \ud655\ub960\uc744 \ub9cc\ub4e4\uae30 \uc704\ud574 \ubc94\uc704\uac12\uc5d0 \ub300\ud574 \uc801\ubd84 \ud560 \uc218 \uc788\ub294\uc591.\n\ud575\ubc00\ub3c4\ucd94\uc815(Kernel density estimation, KDE): \ud45c\ubcf8\uc5d0\uae30\ubc18\ud574\uc11cPDF\ub97c \ucd94\uc815\ud558\ub294\uc54c\uace0\ub9ac\uc998.\n\uc774\uc0b0\ud654(discretize): \uc5f0\uc18d \ud568\uc218 \ud639\uc740 \uc774\uc0b0 \ud568\uc218\ub97c \uac00\uc9c4 \ubd84\ud3ec\ub97c \uadfc\uc0ac\ud568. \ud3c9\ud65c(smoothing)\uc758\ubc18\ub300.\n\uc6d0\uc801\ub960(raw moment): \uac70\ub4ed\uc81c\uacf1\ub418\ub294 \ub370\uc774\ud130 \ud569\uacc4\uc5d0 \uae30\ubc18\ud55c \ud1b5\uacc4\ub7c9 \n\uc911\uc2ec\uc801\ub960(central moment): \ud3c9\uade0\uc5d0\uc11c \ud3b8\ucc28 \uac70\ub4ed\uc81c\uacf1\uc5d0 \uae30\ubc18\ud55c \ud1b5\uacc4\ub7c9.\n\ud45c\uc900\uc801\ub960(standardized moment): \ub2e8\uc704\uac00 \uc5c6\ub294 \uc801\ub960 \ube44\uc728.\n\uc65c\ub3c4(skewness): \ubd84\ud3ec\uac00 \uc5bc\ub9c8\ub098 \ube44\ub300\uce6d\uc778\uc9c0 \ub098\ud0c0\ub0b4\ub294 \uce21\ub3c4.\n\ud45c\ubcf8\uc65c\ub3c4(sample skewness): \ubd84\ud3ec \uc65c\ub3c4\ub97c \uc815\ub7c9\ud654 \ud558\ub294\ub370 \uc0ac\uc6a9\ub418\ub294 \uc801\ub960 \uae30\ubc18 \ud1b5\uacc4\ub7c9.\n\ud53c\uc5b4\uc2a8\uc911\uc704\uc218\uc65c\ub3c4\uacc4\uc218(Pearson\u2019s median skewness coef\ufb01cient): \uc911\uc704\uc218, \ud3c9\uade0, \ud45c\uc900\ud3b8\ucc28\uc5d0 \uae30\ubc18\ud55c \ubd84\ud3ec \uc65c\ub3c4\ub97c \uc815\ub7c9\ud654\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\ub294 \ud1b5\uacc4\ub7c9. \n\uac15\uac74\uc131(robust): \ud2b9\uc774\uac12\uc5d0\ub3c4 \ud718\ub458\ub9ac\uc9c0 \uc54a\ub294 \ud1b5\uacc4\ub7c9\uc744 \uac15\uac74\ud558\ub2e4 \ud45c\ud604\ud55c\ub2e4.\n\n7. \ubcc0\uc218\uac04 \uad00\uacc4\u00b6\ubcc0\uc218\ub4e4\uc5d0\ub294 \uad00\uacc4\uac00 \uc788\ub2e4. \uc608\ub97c \ub4e4\uba74 \ud0a4\uc640 \uccb4\uc911\uc740 \uad00\uacc4\uac00 \uc788\ub2e4; \ud0a4\uac00 \ud070 \uc0ac\ub78c\uc774 \uccb4\uc911\ub3c4 \ub354 \ub098\uac00\ub294 \uacbd\ud5a5\uc774 \uc788\ub2e4. \ubb3c\ub860 \ud0a4\uac00 \uc791\uace0 \ub6b1\ub6b1\ud55c \uc0ac\ub78c\ub3c4 \uc788\uc744 \uc218 \uc788\uc9c0\ub9cc \ud0a4\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c \uc54c\uace0 \uc788\uc73c\uba74 \uccb4\uc911\uc744 \ucd94\uc815\ud558\ub294\ub370 \ub354 \uc720\ub9ac\ud558\ub2e4.\n7.1. \uc0b0\uc810\ub3c4\u00b6\ubcc0\uc218\uac04\uc758 \uad00\uacc4(relationship)\uc744 \ud655\uc778\ud558\ub294 \uac00\uc7a5 \uac04\ub2e8\ud55c \ubc29\ubc95\uc740 \uc0b0\uc810\ub3c4(scatter plot)\ub97c \uadf8\ub9ac\ub294 \uac83\uc774\ub2e4.\n\n\n\n\n\n\nIn\u00a0[32]:\n\n    \nimport pandas as pd\n\ndf_brfss = pd.read_csv('../data/brfss.csv')\nsample = thinkstats2.SampleRows(df_brfss, 5000) # SampleRows\ud568\uc218\ub294 \ub370\uc774\ud130\uc5d0\uc11c \uc77c\ubd80\ub97c \uace8\ub77c\ub0b8\ub2e4.\nheights, weights = sample.htm3, sample.wtkg2\n\nthinkplot.Scatter(heights, weights)\nthinkplot.Show(xlabel='Height (cm)', ylabel='Weight (kg)',\n               axis=[140, 210, 20, 200])\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n<Figure size 576x432 with 0 Axes>\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uadf8\ub9bc\uc740 \ub370\uc774\ud130\uc758 \uc720\uc2e4\uc744 \uba85\ubc31\ud788 \ubcf4\uc5ec\uc900\ub2e4. \uc2e4\uc81c \ud0a4\uc5d0 \ub300\ud55c \ub370\uc774\ud130\ub294 \uc778\uce58\ub85c \uce21\uc815\ub418\uc5c8\ub294\ub370, \uc218\uce58\ub97c \ubc18\uc62c\ub9bc\ud574\uc11c \uc13c\uce58\ubbf8\ud130\ub85c \ubcc0\ud658\ud588\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774\ub7f0 \ub370\uc774\ud130 \uc720\uc2e4\uc744 \n\ubcf4\uc548\ud558\uae30 \uc704\ud574 \uc784\uc758\ub85c \uc7a1\uc74c\uc744 \ucd94\uac00\ud558\ub294 \uc9c0\ud130\ub9c1(jittering) \uc744 \ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[33]:\n\n    \ndef Jitter(values, jitter=1.5):\n    n = len(values)\n    return np.random.uniform(-jitter, +jitter, n) + values\n\nthinkplot.Scatter(Jitter(heights), Jitter(weights))\nthinkplot.Show(xlabel='Height (cm)', ylabel='Weight (kg)',\n               axis=[140, 210, 20, 200])\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n<Figure size 576x432 with 0 Axes>\n\n\n\n\n\n\n\n\n\n\n\n\uc9c0\ud130\ub9c1(jittering)\uc744 \ud1b5\ud574\uc11c \ubc18\uc62c\ub9bc\uc73c\ub85c \uc778\ud55c \uc2dc\uac01\uc801 \ud6a8\uacfc\ub97c \uc904\uc774\uace0, \ubcc0\uc218\uc758 \uad00\uacc4 \ud615\ud0dc\ub97c \uc880 \ub354 \uba85\ud655\ud574\uc9c4\ub2e4. \ud558\uc9c0\ub9cc, \uc77c\ubc18\uc801\uc73c\ub85c \uc9c0\ud130\ub9c1\uc740 \uc2dc\uac01\ud654 \ubaa9\uc801\uc73c\ub85c\ub9cc \uc0ac\uc6a9\ud574\uc57c \ud558\uace0 \ubd84\uc11d\uc5d0 \uc9c0\ud130\ub9c1\ub41c \ub370\uc774\ud130 \uc0ac\uc6a9\uc740 \ud53c\ud574\uc57c \ud55c\ub2e4.\n7.2. \ubcc0\uc218\uc758 \uad00\uacc4\ub97c \ud2b9\uc9d5\uc9d3\uae30\u00b6\ubcc0\uc218\uc758 \uad00\uacc4\uc5d0 \ub300\ud55c \ub354 \ub9ce\uc740 \ud1b5\ucc30\uc744 \uc5bb\uae30 \uc704\ud574 \ubcc0\uc218\ub97c \uad6c\uac04\ud654(binning)\ud558\uace0 \ub2e4\ub978 \ubcc0\uc218 \ubc31\ubd84\uc704\uc218\ub97c \uc2dc\uac01\ud654\ud574\ubcf4\uc790. \ub118\ud30c\uc774(NumPy)\uc640 \ud310\ub2e4\uc2a4\ub97c \uc774\uc6a9\ud574 \ub370\uc774\ud130\ub97c \uad6c\uac04\uc73c\ub85c \ub098\ub208\ub2e4.\n\n\n\n\n\n\nIn\u00a0[34]:\n\n    \ndf_brfss = df_brfss.dropna(subset=['htm3', 'wtkg2'])\nbins = np.arange(135, 210, 5)\nindices = np.digitize(df_brfss.htm3, bins)\ngroups = df_brfss.groupby(indices)\n\nheights = [group.htm3.mean() for i, group in groups]\ncdfs = [thinkstats2.Cdf(group.wtkg2) for i, group in groups]\n\nfor percent in [75, 50, 25]:\n    weights = [cdf.Percentile(percent) for cdf in cdfs]\n    label = '%dth' % percent\n    thinkplot.Plot(heights, weights, label=label)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uadf8\ub9bc \uacb0\uacfc\ub97c \ubcf4\uba74 140cm\uc5d0\uc11c 200cm \uc0ac\uc774 \ub450 \ubcc0\uc218\uac04\uc758 \uad00\uacc4\ub294 \ub300\ub7b5\uc791\uc778 \uc120\ud615 \uad00\uacc4\uc774\ub2e4. \uadf8\ub9ac\uace0 \uc774 \ubc94\uc704\uc5d0 99% \uc774\uc0c1\uc758 \ub370\uc774\ud130\uac00 \ubab0\ub824\uc788\ub2e4. \uadf8\ub798\uc11c, \uadf9\ub2e8\uac12\ub4e4\uc740 \uc2e0\uacbd\uc4f8 \ud544\uc694\ub294 \uc5c6\ub2e4.\n7.3. \uc0c1\uad00(Correlation)\u00b6\uc0c1\uad00(correlation) \uc740 \ub450 \ubcc0\uc218\uac04 \uad00\uacc4\ub97c \uc815\ub7c9\ud654\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\ub294 \ud1b5\uacc4\ub7c9\uc774\ub2e4.\n7.4. \uacf5\ubd84\uc0b0(Covariance)\u00b6\uacf5\ubd84\uc0b0(Covariance) \uc740 \ud568\uaed8 \ubcc0\ud654\ud558\ub294 \ub450 \ubcc0\uc218\uc758 \uacbd\ud5a5\uc131\uc774\ub2e4. \ub9cc\uc57d \ub450 \ubcc0\uc218\nX, Y\uac00 \uc788\ub2e4\uba74 \ud3c9\uade0\uc5d0 \ub300\ud55c \ud3b8\ucc28\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n7.5. \ud53c\uc5b4\uc2a8 \uc0c1\uad00(Pearson\u2019s correlation)\u00b6\uacf5\ubd84\uc0b0\uc774 \uba87\uba87 \uc5f0\uc0b0\uc5d0\uc11c\ub294 \uc720\uc6a9\ud558\uc9c0\ub9cc \ud574\uc11d\ud558\uae30 \uc5b4\ub835\uae30 \ub54c\ubb38\uc5d0 \uc694\uc57d \ud1b5\uacc4\ub7c9\uc73c\ub85c \ub9ce\uc774 \uc0ac\uc6a9\ub418\uc9c0 \uc54a\ub294\ub2e4. \ubc18\uba74\uc5d0 \ud53c\uc5b4\uc2a8\uc0c1\uad00(Pearson's correlation)\uc740 \uacc4\uc0b0\ud558\uae30 \uc27d\uace0 \ud574\uc11d\ud558\uae30\ub3c4 \uc26c\uc6cc \ub9ce\uc774 \uc120\ud615 \uc0c1\uad00\uc744 \ud310\ubcc4\ud558\ub294\ub370 \ub9ce\uc774 \uc0ac\uc6a9\ub41c\ub2e4.\n7.6. \ube44\uc120\ud615\uad00\uacc4(Nonlinear relationships)\u00b6\uc0c1\uad00\uacc4\uc218\uac00 0\uc774\uc5b4\ub3c4 \ubcc0\uc218\uac04\uc5d0 \uad00\uacc4\uac00 \uc874\uc7ac\ud558\ub294 \uac83\uc744 \ube44\uc120\ud615\uad00\uacc4\ub77c\uace0 \ud55c\ub2e4. \ub2e4\uc74c \uadf8\ub9bc\uc744 \ud1b5\ud574 \n\ub2e4\uc591\ud55c \ubc94\uc704\uc758 \uc0c1\uad00\uc744 \uac16\ub294 \ub370\uc774\ud130\ub4e4\uc744 \ud655\uc778\ud560 \uc218 \uc788\ub2e4.\n\n\uc704 \uadf8\ub9bc\uc5d0\uc11c \uc138\ubc88\uc9f8 \ud589\uc774 \ube44\uc120\ud615 \uad00\uacc4\uc758 \ub370\uc774\ud130\uc14b\uc774\ub2e4.\n7.7. \uc2a4\ud53c\uc5b4\ub9cc \uc21c\uc704 \uc0c1\uad00(Spearman\u2019s rank correlation)\u00b6\ud53c\uc5b4\uc2a8 \uc0c1\uad00\uc740 \ubcc0\uc218\uc758 \uad00\uacc4\uac00 \uc120\ud615\uc774\uace0 \uc815\uaddc\ubd84\ud3ec\ub97c \ub530\ub978\ub2e4\uba74 \uc798 \uc791\ub3d9\ud55c\ub2e4. \ud558\uc9c0\ub9cc \ub370\uc774\ud130\uc5d0 \ud2b9\uc774\uac12\uc774 \uc788\ub294 \uacbd\uc6b0\uc5d0\ub294 \uc2a4\ud53c\uc5b4\ub9cc \uc21c\uc704 \uc0c1\uad00\uc744 \ub300\uc548\uc73c\ub85c \uc0ac\uc6a9\ud55c\ub2e4.\n7.8. \uc0c1\uad00\uacfc \uc778\uacfc\uad00\uacc4(Correlation and causation)\u00b6\ub9cc\uc57d \ubcc0\uc218 A\uc640 B\uac00 \uc0c1\uad00\uc774 \uc788\ub2e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \uc138\uac00\uc9c0 \uc124\uba85\uc774 \uac00\ub2a5\ud558\ub2e4.\n\nA\uac00 B\uc758 \ubc1c\uc0dd\uc6d0\uc778\uc774\ub2e4.\nB\uac00 A\uc758 \ubc1c\uc0dd\uc6d0\uc778\uc774\ub2e4.\n\ub2e4\ub978 \ubcc0\uc218\uac00 A\uc640 B\uc758 \ubc1c\uc0dd \uc6d0\uc778\uc774\ub2e4.\n\n\uc704\uc640 \uac19\uc740 \uc124\uba85\uc744 \uc778\uacfc\uad00\uacc4\ub77c\uace0 \ubd80\ub978\ub2e4. \uc778\uacfc\uad00\uacc4\ub97c \uc99d\uba85\ud558\uae30 \uc704\ud574 \ub2e4\uc74c\uc744 \uc218\ud589\ud55c\ub2e4.\n\n\uc0ac\uac74\uc758 \uc21c\uc11c\ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ub9cc\uc57d A\uac00 B \ubcf4\ub2e4 \uba3c\uc800 \uc77c\uc5b4\ub0ac\ub2e4\uba74 A\uac00 B\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \uc6d0\uc778\uc774\ub77c\uace0 \ucd94\ub860\ud560 \uc218 \uc788\uc744 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub098 \ub2e4\ub978 \ubb34\uc5b8\uac00 A\uc640 B\ub97c \ubc1c\uc0dd\uc2dc\ud0a4\ub294 \uc6d0\uc778\uc774 \ub41c\ub2e4\ub294 \uac00\ub2a5\uc131\uc744 \ubc30\uc81c\ud560 \uc218 \uc5c6\ub2e4.\n\ud655\ub960\uc744 \uc0ac\uc6a9\ud55c\ub2e4. \ud45c\ubcf8\uc744 \uc784\uc758\ub85c \ub450 \uc9d1\ub2e8\uc73c\ub85c \ub098\ub220 \ubcc0\uc218\uc758 \ud3c9\uade0\uc744 \uacc4\uc0b0\ud558\ub294 \ubb34\uc791\uc704 \ub300\uc870\uad70 \uc2dc\ud5d8\uc744 \ud1b5\ud574 \uc778\uacfc \uad00\uacc4\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4.\n\n7.9. \uc5f0\uc2b5\ubb38\uc81c\u00b6\nNSFG \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud574 \ucd9c\uc0dd \uccb4\uc911\uacfc \uc0b0\ubaa8 \uc5f0\ub839\uc758 \uc0b0\uc810\ub3c4\ub97c \uadf8\ub9ac\uace0, \ucd9c\uc0dd \uccb4\uc911\uacfc \uc0b0\ubaa8 \uc5f0\ub839\ubc31\ubd84\uc704\uc218\ub97c \uc2dc\uac01\ud654\ud558\ub77c. \ud53c\uc5b4\uc2a8\uc0c1\uad00\uacfc \uc2a4\ud53c\uc5b4\ub9cc \uc0c1\uad00\uc744 \uacc4\uc0b0\ud574 \ub450 \ubcc0\uc218\uc0ac\uc774\uc758 \uad00\uacc4\ub97c \uc124\uba85\ud558\ub77c.\n\n\n\n\n\n\n\nIn\u00a0[35]:\n\n    \nlive = live_baby.dropna(subset=['agepreg', 'totalwgt_lb'])\n\nages = live.agepreg\nweights = live.totalwgt_lb\n\nthinkplot.Scatter(ages, weights)\nthinkplot.Config(xlabel='Age (years)',\n                 ylabel='Birth weight (lbs)',\n                 xlim=[10, 45], ylim=[0, 15], legend=False)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[36]:\n\n    \nfrom scipy.stats import pearsonr, spearmanr\nprint(f'\ud53c\uc5b4\uc2a8 \uc0c1\uad00 \uacc4\uc218: {pearsonr(ages, weights)[0]}')\nprint(f'\uc2a4\ud53c\uc5b4\ub9cc \uc0c1\uad00 \uacc4\uc218: {spearmanr(ages, weights)[0]}')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\ud53c\uc5b4\uc2a8 \uc0c1\uad00 \uacc4\uc218: 0.06883397035410908\n\uc2a4\ud53c\uc5b4\ub9cc \uc0c1\uad00 \uacc4\uc218: 0.09461004109658226\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[37]:\n\n    \ndef BinnedPercentiles(df):\n    bins = np.arange(10, 48, 3)\n    indices = np.digitize(df.agepreg, bins)\n    groups = df.groupby(indices)\n    ages = [group.agepreg.mean() for i, group in groups][1:-1]\n    cdfs = [thinkstats2.Cdf(group.totalwgt_lb) for i, group in groups][1:-1]\n    thinkplot.PrePlot(3)\n    for percent in [75, 50, 25]:\n        weights = [cdf.Percentile(percent) for cdf in cdfs]\n        label = '%dth' % percent\n        thinkplot.Plot(ages, weights, label=label)\n    thinkplot.Config(xlabel=\"Mother's age (years)\",\n                     ylabel='Birth weight (lbs)',\n                     xlim=[14, 45], legend=True)\n    \nBinnedPercentiles(live)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.10. \uc6a9\uc5b4\uc0ac\uc804\u00b6\n\uc0b0\uc810\ub3c4(scatter plot): \ub450 \ubcc0\uc218 \uc0ac\uc774 \uad00\uacc4\ub97c \ub370\uc774\ud130 \uac01 \ud589\ub9c8\ub2e4 \uc810\uc744 \ucc0d\uc5b4 \ubcf4\uc784\uc73c\ub85c\uc368 \uc2dc\uac01\ud654.\n\uc9c0\ud130(jitter): \uc2dc\uac01\ud654\ub97c \uc704\ud574 \ub370\uc774\ud130\uc5d0 \ucd94\uac00\ub418\ub294 \uc7a1\uc74c\n\ud3ec\ud654(saturation): \ub2e4\uc218\uc758 \uc810\uc774 \uacb9\uccd0\uc838 \ubc1c\uc0dd\ud558\ub294 \ub370\uc774\ud130\uc758 \uc190\uc2e4.\n\uc0c1\uad00(correlation): \ub450 \ubcc0\uc218 \uc0ac\uc774 \uad00\uacc4\ub97c \uce21\uc815 \ud558\ub294 \ud1b5\uacc4\ub7c9.\n\ud45c\uc900\ud654(standardize): \ubcc0\uc218 \uc9d1\ud569\uac12\uc744 \ubcc0\ud658\ud574 \ud3c9\uade0 0, \ubd84\uc0b0\uc744 1\ub85c \ub9cc\ub4dc\ub294 \uacfc\uc815.\n\ud45c\uc900\uc810\uc218(standard score): \ud1b5\uacc4\ud559\uc801\uc73c\ub85c \uc815\uaddc\ubd84\ud3ec\ub97c \ub9cc\ub4e4\uace0 \uac1c\uac1c\uc758 \uacbd\uc6b0\uac00 \ud45c\uc900\ud3b8\ucc28\uc0c1\uc5d0 \uc5b4\ub5a4 \uc704\uce58\ub97c \ucc28\uc9c0\ud558\ub294\uc9c0\ub97c \ubcf4\uc5ec\uc8fc\ub294 \ucc28\uc6d0\uc5c6\ub294 \uc218\uce58\uc774\ub2e4. \ud45c\uc900\uac12, Z\uac12(Z-value), Z \uc810\uc218(Z score)\uc774\ub77c\uace0\ub3c4 \ud55c\ub2e4.\n\uacf5\ubd84\uc0b0(covariance): \ud568\uaed8 \ubcc0\ud654\ud558\ub294 \ub450\ubcc0\uc218 \uacbd\ud5a5\uc131\uc744 \ub098\ud0c0\ub0b4\ub294 \uce21\ub3c4.\n\uc21c\uc704(rank): \uc778\ub371\uc2a4\ub85c \uc815\ub82c\ub41c \ubaa9\ub85d\uc5d0 \uc694\uc18c\uc758 \uc21c\uc11c.\n\ubb34\uc791\uc704\ub300\uc870\uad70\uc2dc\ud5d8: \uc2e4\ud5d8 \ub300\uc0c1\uc774 \ubb34\uc791\uc704 \uc9d1\ub2e8\uc73c\ub85c \ub098\ub220 \uc9d1\ub2e8\uac04 \ucc28\uc774\ub97c \uc0b4\ud3b4\ubcf4\ub294 \uc2e4\ud5d8.\n\ucc98\ub9ac\uad70\uc9d1\ub2e8(treatment group): \ub300\uc870\uad70\uc2dc\ud5d8\uc5d0\uc11c \uc77c\uc885\uc758 \uac1c\uc785(intervention)\uc744 \ubc1b\ub294 \uc9d1\ub2e8.\n\ub300\uc870\uad70\uc9d1\ub2e8(control group): \ub300\uc870\uad70\uc2dc\ud5d8\uc5d0\uc11c \ucc98\ub9ac\ub97c \ubc1b\uc9c0 \uc54a\uac70\ub098 \uc774\ubbf8 \ud6a8\uacfc\uac00 \uc54c\ub824\uc9c4 \ucc98\ub9ac\ub97c \ubc1b\ub294 \uc9d1\ub2e8.\n\uc790\uc5f0\uc2e4\ud5d8(natural experiment): \ub300\uc0c1\uc774 \uc9d1\ub2e8\uc73c\ub85c \uc790\uc5f0\uc801\uc73c\ub85c \uad6c\ubd84\ub418\ub294 \ud604\uc0c1\uc744 \uc774\uc6a9\ud55c \uc2e4\ud5d8\uacc4\ud68d. \uc5ec\uae30\uc11c \uc9d1\ub2e8\uc740 \uadfc\uc0ac\uc801\uc73c\ub85c \ubb34\uc791\uc704\uac00 \ub41c\ub2e4.\n\n8. \ucd94\uc815\u00b68.1. \ud1b5\uacc4\uc801 \ucd94\uc815\u00b6\ucd94\uc815(estimation) \uc740 \ud45c\ubcf8\uc744 \ud1b5\ud574 \ubaa8\uc9d1\ub2e8 \ud2b9\uc131\uc774 \uc5b4\ub5a0\ud55c\uac00\uc5d0 \ub300\ud574 \ucd94\uce21\ud558\ub294 \uac83\uc774\ub2e4. \uadf8\ub9ac\uace0 \ucd94\uc815\uc5d0 \uc0ac\uc6a9\ud55c \ud1b5\uacc4\ub7c9(\ud45c\ubcf8\ud3c9\uade0)\uc744 \ucd94\uc815\ub7c9(estimator) \uc774\ub77c \ud55c\ub2e4.\n\uc5b4\ub290 \ucd94\uc815\ub7c9\uc774 \uac00\uc7a5 \uc88b\uc740\uac00\ub294 \uc0c1\ud669\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c4\ub2e4. \uc608\ub97c\ub4e4\uc5b4 \ud2b9\uc774\uac12\uc758 \uc720\ubb34\uc640 \ubaa9\uc801\uc774 \ubb34\uc5c7\uc778\uac00\uc5d0 \ub2ec\ub824\uc788\ub2e4. \ub9cc\uc57d \ud2b9\uc774\uac12\uc774 \uc5c6\ub2e4\uba74 \ub204\uc801\ud3c9\uade0\uc81c\uacf1\uc624\ucc28(mean squared error, \uc774\ud558 MSE) \ub97c \ucd5c\uc18c\ud654\ud558\ub294 \uac83\uc774 \uc88b\uc740 \ubc29\ubc95\uc774\ub2e4.\n\uadf8\ub7ec\ub098 \uc8fc\uc0ac\uc704 \uc138\uac1c\ub97c \ub358\uc838\uc11c \ud569\uacc4\ub97c \uc608\uce21\ud558\ub294 \ubb38\uc81c\uc5d0\uc11c MSE \uac12\uc740 10.5\ub85c \uacc4\uc0b0\ub418\uc9c0\ub9cc \uc88b\uc9c0\ubabb\ud55c \ucd94\uc815\uac12\uc774\ub2e4. \uc65c\ub0d0\ud558\uba74 \uc8fc\uc0ac\uc704 \uc138\uac1c\uc758 \ud569\uc740 \uacb0\ucf54 10.5 \uac00 \ub418\uc9c0 \ubabb\ud558\uae30 \ub54c\ubb38\uc774\ub2e4. \uc774 \uacbd\uc6b0 10 \ub610\ub294 11\uc774 \ucd5c\uc120\uc758 \uac12\uc774 \ub418\uba70 \uc774\uac83\uc744 \ucd5c\ub300\uc6b0\ub3c4\ucd94\uc815\ub7c9(maximum likelihood\nestimator, \uc774\ud558 MLE) \uc774\ub77c \ubd80\ub978\ub2e4.\n8.2. \ubaa8\ubd84\uc0b0 \ucd94\uc815\u00b6\uc5b4\ub5a4 \uacf5\uc7a5\uc5d0\uc11c \uc77c\uc815 \ud06c\uae30\uc758 \ubcfc\ud2b8\ub97c \ub9cc\ub4e0\ub2e4\uace0 \ud574\ubcf4\uc790. \uc81c\uc870 \uacf5\uc815\uc5d0\uc11c \ubcfc\ud2b8\uc758 \uc9c0\ub984\uc774 \uc77c\uc815\ud574\uc57c \ud488\uc9c8 \uae30\uc900\uc744 \ub9cc\uc871\ud560 \uc218 \uc788\ub2e4. \ubcfc\ud2b8\uc758 \uc9c0\ub984\uc774 10mm \uc5ec\uc57c\ud558\ub294\ub370, \ud3c9\uade0\uc801\uc73c\ub85c\ub294 10mm \uc774\uc9c0\ub9cc, \ubd84\uc0b0\uc774 \uc874\uc7ac\ud574  \ubd88\ub7c9\ud488\uc774 \uc77c\uc815 \ubd80\ubd84 \uc874\uc7ac\ud55c\ub2e4. \uc774\ub7f0 \uc0c1\ud669\uc5d0\uc11c \ubcfc\ud2b8 \uc9c0\ub984\uc758 \ubd84\uc0b0\uc744 \ud655\uc778\ud558\ub294 \ubc29\ubc95\uc73c\ub85c \ubaa8\ubd84\uc0b0\uc5d0 \ub300\ud55c \ucd94\ub860\uc744 \ud560 \uc218 \uc788\ub2e4.\n\n\ucd9c\ucc98: https://3months.tistory.com/480 [Deep Play]\n8.3. \ud45c\ubcf8\ubd84\ud3ec(Sampling distributions)\u00b6\ud06c\uae30 n\uc758 \ud655\ub960 \ud45c\ubcf8(random sample)\uc758 \ud655\ub960 \ubcc0\uc218(random variable)\uc758 \ubd84\ud3ec(distribution)\uc774\ub2e4. \ub610\ud55c \ud655\ub960\uc120\ud0dd(random selection) \uc5d0 \uc758\ud574 \ubc1c\uc0dd \ub418\ub294 \ucd94\uc815\uac12\uc758 \ubcc0\ub3d9\uc744 \ud45c\uc9d1\uc624\ucc28(sampling error)\ub77c\uace0\ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[38]:\n\n    \ndef SimulateSample(mu=90, sigma=7.5, n=9, iters=1000):\n    xbars = []\n    for j in range(iters):\n        xs = np.random.normal(mu, sigma, n)\n        xbar = np.mean(xs)\n        xbars.append(xbar)\n    return xbars\n\ndef VertLine(x, y=1):\n        thinkplot.Plot([x, x], [0, y], color='0.8', linewidth=3)\n        \nxbars = SimulateSample()\ncdf = thinkstats2.Cdf(xbars)\nthinkplot.Cdf(cdf)\nci = cdf.Percentile(5), cdf.Percentile(95)\nVertLine(ci[0])\nVertLine(ci[1])\nthinkplot.Config(xlabel='Sample mean', ylabel='CDF')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud45c\uc9d1 \ubd84\ud3ec\ub97c \uc694\uc57d\ud558\ub294 \ub450\uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\ub2e4.\n\n\ud45c\uc900\uc624\ucc28(Standard error SE) \ub294 \ud3c9\uade0\uc801\uc73c\ub85c \ucd94\uc815\uac12\uc774 \uc5bc\ub9c8\ub098 \ucc28\uc774\uac00 \uc788\uc744\uc9c0 \uce21\uc815\ud558\ub294 \uce21\ub3c4\ub2e4. \uac01\uac01\uc758 \ubaa8\uc758\uc2e4\ud5d8 \ub9c8\ub2e4, \uc624\ucc28($\\hat x - \\mu$)\ub97c \uacc4\uc0b0\ud574 \ub204\uc801 \ud3c9\uade0\uc81c\uacf1\uc624\ucc28\uc5d0\uc81c\uacf1\uadfc(root mean squared error, RMSE)\uc744 \uc50c\uc6cc \uacc4\uc0b0\ud55c\ub2e4. \n\uc2e0\ub8b0\uad6c\uac04(con\ufb01dence interval, CI) \uc740 \ud45c\uc9d1 \ubd84\ud3ec\ub97c \uc8fc\uc5b4\uc9c4 \ube44\uc728\ub85c \ud3ec\ud568\ud560 \ubc94\uc704\uac00 \ub41c\ub2e4. \uc608\ub97c\ub4e4\uc5b4, \uc2e0\ub8b0\uad6c\uac04 90%\ub294 5\ubc88\uc9f8\ubd80\ud130 95\ubc88\uc9f8 \ubc31\ubd84\uc704\uc218\uac00 \ub41c\ub2e4.\n\n8.4. \uc120\ud0dd\ud3b8\ud5a5(Sampling bias)\u00b6'\ud45c\ubcf8 \ud3b8\ud5a5'\uc774\ub77c\uace0\ub3c4 \ud55c\ub2e4. \uc0c1\ub2f9\ud788 \ub9ce\uc740 \uc790\ub8cc\ub4e4\uc744 \uac80\ud1a0\ud558\uc600\uc73c\ub098 \uadf8 \uc790\ub8cc\ub97c \uc120\ud0dd\ud558\uac70\ub098 \ud574\uc11d\ud568\uc5d0 \uc788\uc5b4 \uc911\uc694\ud55c \uce21\uba74\uc744 \uac04\uacfc\ud568\uc73c\ub85c\uc368 \uc798\ubabb\ub41c \uacb0\ub860\uc5d0 \ub3c4\ub2ec\ud558\uac8c \ub9cc\ub4e0\ub2e4.\n8.5. \uc9c0\uc218\ubd84\ud3ec\u00b6\ud1b5\uacc4\ud559\uc5d0\uc11c \uc9c0\uc218\ubd84\ud3ec(exponential distribution) \ub294 \uc5f0\uc18d \ud655\ub960 \ubd84\ud3ec\uc758 \uc77c\uc885\uc774\ub2e4. \uc0ac\uac74\uc774 \uc11c\ub85c \ub3c5\ub9bd\uc801\uc77c \ub54c, \uc77c\uc815 \uc2dc\uac04\ub3d9\uc548 \ubc1c\uc0dd\ud558\ub294 \uc0ac\uac74\uc758 \ud69f\uc218\uac00 \ud478\uc544\uc1a1 \ubd84\ud3ec\ub97c \ub530\ub978\ub2e4\uba74, \ub2e4\uc74c \uc0ac\uac74\uc774 \uc77c\uc5b4\ub0a0 \ub54c\uae4c\uc9c0 \ub300\uae30 \uc2dc\uac04\uc740 \uc9c0\uc218\ubd84\ud3ec\ub97c \ub530\ub978\ub2e4.\n8.6 \uc5f0\uc2b5\ubb38\uc81c\u00b6\n\ubaa8\uc218(\u03bb)\uac00 2\uc778 \uc9c0\uc218 \ubd84\ud3ec\uc5d0\uc11c \ud45c\ubcf8(n) 10\uac1c\ub97c \ucd94\ucd9c\ud55c\ub2e4. 1000\ubc88\uc758 \uc2e4\ud5d8\uc5d0\uc11c \ucd94\uc815\uac12(L)\uc758\ud45c\ubcf8 \ubd84\ud3ec\ub97c \uc2dc\uac01\ud654\ud55c\ub2e4. \uadf8\ub9ac\uace0 \ucd94\uc815\uac12\uc758 \ud45c\uc900\uc624\ucc28\uc640 90% \uc2e0\ub8b0\uad6c\uac04\uc744 \uacc4\uc0b0\ud558\ub77c.\n\n\n\n\n\n\n\nIn\u00a0[39]:\n\n    \ndef RMSE(estimates, actual):\n    e2 = [(estimate-actual)**2 for estimate in estimates]\n    mse = np.mean(e2)\n    return np.sqrt(mse)\n\ndef SimulateSample(lam=2, n=10, iters=1000):\n    def VertLine(x, y=1):\n        thinkplot.Plot([x, x], [0, y], color='0.8', linewidth=3)\n    estimates = []\n    for _ in range(iters):\n        xs = np.random.exponential(1.0/lam, n)\n        lamhat = 1.0 / np.mean(xs)\n        estimates.append(lamhat)\n    stderr = RMSE(estimates, lam)\n    print('standard error', stderr)\n    cdf = thinkstats2.Cdf(estimates)\n    ci = cdf.Percentile(5), cdf.Percentile(95)\n    print('confidence interval', ci)\n    VertLine(ci[0])\n    VertLine(ci[1])\n    # plot the CDF\n    thinkplot.Cdf(cdf)\n    thinkplot.Config(xlabel='estimate', ylabel='CDF',\n                     title='Sampling distribution')\n    return stderr\n\nSimulateSample()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nstandard error 0.8324297617252238\nconfidence interval (1.251816627593507, 3.643302785154261)\n\n\n\n\n\n\n    Out[39]:\n\n\n\n\n\n0.8324297617252238\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8.7. \uc6a9\uc5b4\uc0ac\uc804\u00b6\n\ucd94\uc815(estimation): \ud45c\ubcf8\uc5d0\uc11c \ubd84\ud3ec\ub97c \ucd94\uc815\ud558\ub294 \uacfc\uc815.\n\ucd94\uc815\ub7c9(estimator): \ubaa8\uc218\ub97c \ucd94\uc815\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\ub294 \ud1b5\uacc4\ub7c9.\n\ub204\uc801\ud3c9\uade0\uc81c\uacf1\uc624\ucc28(mean squared error, MSE): \ucd94\uc815\uc624\ucc28\uce21\ub3c4.\n\uc81c\uacf1\uadfc\ud3c9\uade0\uc81c\uacf1\uc624\ucc28(root mean squared error, RMSE): MSE \uc81c\uacf1\uadfc\uc73c\ub85c \uc624\ucc28\uaddc\ubaa8\ub97c \uc880 \ub354\uc77c\ubc18\uc801\uc73c\ub85c \ud45c\ud604.\n\ucd5c\uc6b0\ucd94\uc815\ub7c9(maximum likelihood estimator, MLE): \uac00\uc7a5 \uc62c\ubc14\ub97c\uac83 \uac19\uc740 \ucd94\uc815\uac12\uc744 \uacc4\uc0b0\ud558\ub294\ucd94\uc815\ub7c9.\n(\ucd94\uc815\ub7c9\uc758) \ud3b8\uc758(bias of an estimator): \ubc18\ubcf5\ub418\ub294 \uc2e4\ud5d8\uc744 \ud3c9\uade0\ub0bc\ub54c, \uc2e4\uc81c \ubaa8\uc218\uac12 \ubcf4\ub2e4 \ub192\uc740 \ud639\uc740 \ub0ae\uc740 \ucd94\uc815\ub7c9\uc758 \uacbd\ud5a5\uc131.\n\ud45c\uc9d1\uc624\ucc28(sampling error): \uc6b0\uc5f0\uc5d0\uc758\ud55c\ubcc0\ub3d9\uacfc\ud55c\uc815\ub41c\ud45c\ubcf8\ud06c\uae30\ub54c\ubb38\uc5d0 \ucd94\uc815\uac12\uc5d0\uc0dd\uae30\ub294\uc624\ucc28.\n\ud45c\uc9d1\ud3b8\uc758(sampling bias): \ubaa8\uc9d1\ub2e8\uc744\ub300\ud45c\ud558\uc9c0\ubabb\ud558\ub294\ud45c\uc9d1\uacfc\uc815\ub54c\ubb38\uc5d0 \ucd94\uc815\uac12\uc5d0\uc0dd\uae30\ub294\uc624\ucc28.\n\uce21\uc815\uc624\ucc28(measurement error): \ub370\uc774\ud130\ub97c\uc218\uc9d1\ud558\uace0\uae30\ub85d\ud558\ub294\ubd80\uc815\ud655\uc131\ub54c\ubb38\uc5d0 \ucd94\uc815\uac12\uc5d0\uc0dd\uae30\ub294\uc624\ucc28.\n\ud45c\uc9d1\ubd84\ud3ec(sampling distribution): \ub9cc\uc57d\uc2e4\ud5d8\uc744\ub9ce\uc774\ubc18\ubcf5\ud55c\ub2e4\uba74\uc0dd\uae30\ub294 \ud1b5\uacc4\ub7c9\ubd84\ud3ec.\n\ud45c\ubcf8\uc624\ucc28(standard error): \ucd94\uc815\uac12\uc758RMSE\ub85c\ud45c\uc9d1\uc624\ucc28(\ud558\uc9c0\ub9cc\ub2e4\ub978 \uc624\ucc28\ub294\uc81c\uc678) \ub54c\ubb38\uc5d0\uc0dd\uae30\ub294\ubcc0\ub3d9\uc131\uc744\uc815\ub7c9\ud654\ud55c\ub2e4.\n\uc2e0\ub8b0\uad6c\uac04(con\ufb01dence interval): \ub9cc\uc57d\uc2e4\ud5d8\uc744\ub9ce\uc774\ubc18\ubcf5\ud558\uba74\ucd94\uc815\ub7c9\uc608\uc0c1 \ubc94\uc704\ub97c \ud45c\ud604\ud558\ub294\uad6c\uac04.\n\n9. \uac00\uc124 \uac80\uc815\u00b69.1. \uc804\ud1b5\uc801 \uac00\uc124 \uac80\uc815\u00b6\n\uccab\ubc88\uc9f8 \ub2e8\uacc4\ub294 \uac80\uc815\ud1b5\uacc4\ub7c9(test statistic) \uc744 \uc815\ud574 \ud6a8\uacfc \ud06c\uae30\ub97c \uc815\ub7c9\ud654 \ud55c\ub2e4. 2. \ub450\ubc88\uc9f8 \ub2e8\uacc4\ub294 \uadc0\ubb34\uac00\uc124(null hypothesis) \uc744 \uc815\uc758 \ud558\ub294 \uac83\uc73c\ub85c \uba85\ubc31\ud55c \ucc28\uc774\uac00 \uc5c6\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4.\n\uc138\ubc88\uc9f8 \ub2e8\uacc4\ub294 \ub9cc\uc57d \uadc0\ubb34\uac00\uc124\uc774 \uc0ac\uc2e4\uc774\ub77c\uba74 \ub098\ud0c0\ub0a0 \ud655\ub960\uc778 p-value\ub97c \uacc4\uc0b0 \ud558\ub294 \uac83\uc774\ub2e4.\n\ub9c8\uc9c0\ub9c9 \ub2e8\uacc4\ub294 \uacb0\uacfc\ub97c \ud574\uc11d \ud558\ub294 \uac83\uc774\ub2e4. \ub9cc\uc57d p-value\uac00 \ucda9\ubd84\ud788 \ub0ae\ub2e4\uba74 \ud1b5\uacc4\uc801 \uc720\uc758\uc131(statistically signi\ufb01cant) \uc774 \uc788\ub2e4\uace0 \ubcf8\ub2e4. \ub2e4\uc2dc\ub9d0\ud574 \ubaa8\uc9d1\ub2e8\uc5d0\uc11c\ub3c4 \ub3d9\uc77c\ud55c \ud604\uc0c1\uc774 \ub098\ud0c0\ub09c\ub2e4\uace0 \ucd94\ub860\ud560 \uc218 \uc788\ub2e4.\n\n9.2. \uac00\uc124 \uac80\uc815\u00b6\uc800\uc790\ub294 thinkstats2 \ubaa8\ub4c8\uc5d0 \uc804\ud1b5\uc801 \uac00\uc124 \uac80\uc815 \uad6c\uc870\ub97c \ud45c\ud604\ud558\ub294 HypothesisTest \ud074\ub798\uc2a4\ub97c \uc815\uc758\ud574 \ub450\uc5c8\ub2e4. \uc6b0\ub9ac\ub294 \uc4f0\uae30\ub9cc \ud558\uba74 \ub41c\ub2e4.\n9.3. \ud3c9\uade0 \ucc28\uc774 \uac80\uc815\u00b6\uc608\uc2dc\ub85c NSFG \ub370\uc774\ud130\uc14b\uc5d0\uc11c \uccab \ubc88\uc9f8 \uc544\uc774\uc5d0 \ub300\ud55c \ud3c9\uade0 \uc784\uc2e0\uae30\uac04\uacfc \ud3c9\uade0 \ucd9c\uc0b0 \uccb4\uc911\uc774 \ub098\uba38\uc9c0 \uc544\uc774\ub4e4\uacfc \ud1b5\uacc4\uc801\uc73c\ub85c \uc720\uc758\ubbf8\ud55c \ucc28\uc774\uac00 \uc788\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\uc790.\n\n\n\n\n\n\nIn\u00a0[40]:\n\n    \nclass DiffMeansPermute(thinkstats2.HypothesisTest):\n    def TestStatistic(self, data):\n        group1, group2 = data\n        test_stat = abs(group1.mean() - group2.mean())\n        return test_stat\n\n    def MakeModel(self):\n        group1, group2 = self.data\n        self.n, self.m = len(group1), len(group2)\n        self.pool = np.hstack((group1, group2))\n\n    def RunModel(self):\n        np.random.shuffle(self.pool)\n        data = self.pool[:self.n], self.pool[self.n:]\n        return data\n\ndata = first_baby.prglngth.values, others.prglngth.values\nht = DiffMeansPermute(data)\npvalue = ht.PValue()\nprint(f'p-value \uac12\uc740 {pvalue} \uc774\ub2e4.')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\np-value \uac12\uc740 0.169 \uc774\ub2e4.\n\n\n\n\n\n\n\n\n\n\n\n\uacb0\uacfc\ub294 \uc57d 0.19\ub85c \uc57d 19% \uc815\ub3c4 \uad00\uce21\ub41c \ud6a8\uacfc \ucc28\uc774\uac00 \uc608\uc0c1\ub41c\ub2e4. \ub2e4\uc2dc\ub9d0\ud574 \ud6a8\uacfc\uac00 \ud1b5\uacc4\uc801\uc73c\ub85c \uc720\uc758 \ud558\uc9c0 \uc54a\ub2e4\uace0 \ubcfc \uc218 \uc788\ub2e4.\n\uc774\uc81c \uad00\uce21 \ud6a8\uacfc \ud06c\uae30\ub97c \ub098\ud0c0\ub0b4\ub294 \ud68c\uc0c9\uc120\uacfc \uac80\uc815 \ud1b5\uacc4\ub7c9 \ubd84\ud3ec\ub97c \uc2dc\uac01\ud654\ud558\uc790.\n\n\n\n\n\n\nIn\u00a0[41]:\n\n    \nht.PlotCdf()\nthinkplot.Config(xlabel='test statistic', ylabel='CDF')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nCDF\ub294 0.83\uc5d0\uc11c \uad00\uce21\ucc28\uc774\uc640 \uad50\ucc28\ud55c\ub2e4.\n9.4. \ub2e4\ub978 \uac80\uc815 \ud1b5\uacc4\ub7c9\u00b6\uc55e\uc120 \uac80\uc815\uc740 \uc591\ucabd\uc744 \uc0ac\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0\uc591\uce21(two-sided) \uac80\uc99d\uc774\ub77c\uace0\ud55c\ub2e4. TestStatistic\uac00\ucc28\uc774\uc5d0 \uc808\ub300\uac12\uc744 \ucde8\ud558\uc9c0 \uc54a\ub294\ub2e4\ub294 \uac83\uc774\ub2e4. \ub9cc\uc57d \uccab\ubc88\uc9f8 \uc544\uc774\uac00 \ub2a6\uac8c \ucd9c\uc0dd\ud558\ub294 \uacbd\ud5a5\uc774 \uc788\ub2e4\uace0 \uac00\uc815\ud55c\ub2e4\uba74 \uc774\ub7f0 \uc720\ud615\uc758 \uac80\uc99d\uc744 \ub2e8\uce21(one-sided)\uac80\uc99d \uc774\ub77c\uace0\ud55c\ub2e4. \uc65c\ub0d0\ud558\uba74, \ucc28\uc774 \ubd84\ud3ec\uc758\ub2e8\uce21\uba74\ub9cc \uace0\ub824\ud558\uae30\ub54c\ubb38\uc774\ub2e4.\n\n\n\n\n\n\nIn\u00a0[42]:\n\n    \nclass DiffStdPermute(DiffMeansPermute):\n\n    def TestStatistic(self, data):\n        group1, group2 = data\n        test_stat = group1.std() - group2.std()\n        return test_stat\n\nht = DiffStdPermute(data)\npvalue = ht.PValue()\nprint(f'p-value \uac12\uc740 {pvalue} \uc774\ub2e4.')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\np-value \uac12\uc740 0.069 \uc774\ub2e4.\n\n\n\n\n\n\n\n\n\n\n\n\ub2e8\uce21\uac00\uc124, \uccab\uc9f8 \uc544\uc774\uac00 \ub2a6\uac8c \ud0dc\uc5b4\ub09c\ub2e4\ub294 \uac83\uc774 \uc591\uce21\uac00\uc124\ubcf4\ub2e4 \uc880 \ub354 \uad6c\uccb4\uc801\uc774\ub2e4. \uadf8\ub798\uc11c p-value\uac00 \ub354 \uc791\uac8c \uacc4\uc0b0\ub41c\ub2e4. \ud558\uc9c0\ub9cc \uadf8\ub7fc\uc5d0\ub3c4 \uadf8 \ucc28\uc774\ub294 \ud1b5\uacc4\uc801\uc73c\ub85c \uc720\uc758\ud574\ubcf4\uc774\uc9c0 \uc54a\ub294\ub2e4.\n9.5. \uc0c1\uad00\uac80\uc815\u00b6NSFG \ub370\uc774\ud130 \uc14b\uc5d0\uc11c \uc0b0\ubaa8\uc758 \ub098\uc774\uc640 \ucd9c\uc0dd \uccb4\uc911 \uc0ac\uc774 \uc0c1\uad00\uad00\uacc4\ub294 \uc57d 0.07 \uc774\ub2e4. \uc989, \ub098\uc774\uac00 \ub9ce\uc740 \uc0b0\ubaa8 \uc544\uc774\uac00 \uccb4\uc911\uc774 \ub354 \ub098\uac00\ub294 \uac83\ucc98\ub7fc \ubcf4\uc778\ub2e4. \uc774\uac83\uc740 \uacfc\uc5f0 \uc6b0\uc5f0\uc77c\uae4c? \uadc0\ubb34\uac00\uc124\ub85c \uc0b0\ubaa8 \uc5f0\ub839\uacfc \uc2e0\uc0dd\uc544 \uccb4\uc911\uc0ac\uc774\uc5d0 \uc0c1\uad00\uad00\uacc4\ub294 \uc5c6\ub2e4\uace0 \uac00\uc815\ud574 \uac80\uc815\ud574\ubcf4\uc790.\n\n\n\n\n\n\nIn\u00a0[43]:\n\n    \nclass CorrelationPermute(thinkstats2.HypothesisTest):\n\n    def TestStatistic(self, data):\n        xs, ys = data\n        test_stat = abs(thinkstats2.Corr(xs, ys))\n        return test_stat\n\n    def RunModel(self):\n        xs, ys = self.data\n        xs = np.random.permutation(xs)\n        return xs, ys\n    \ndata = live_baby.agepreg.values, live_baby.totalwgt_lb.values\nht = CorrelationPermute(data)\npvalue = ht.PValue()\n\nprint(f'p-value \uac12\uc740 {pvalue} \uc774\ub2e4.')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\np-value \uac12\uc740 0.0 \uc774\ub2e4.\n\n\n\n\n\n\n\n\n\n\n\n\uacc4\uc0b0\ub41c p-value\ub294 0 \uc73c\ub85c \uadc0\ubb34\uac00\uc124\uc744 \uae30\uac01\ud55c\ub2e4. \ub530\ub77c\uc11c \uc0b0\ubaa8\uc758 \uc5f0\ub839\uacfc \uc2e0\uc0dd\uc544\uc758 \uccb4\uc911\uc5d0\ub294 \uad00\uacc4\uac00 \uc788\ub2e4\uace0 \ubcfc \uc218 \uc788\ub2e4.\n9.6. \ubaa8\ube44\uc728 \uac80\uc815\u00b6\ubaa8\ube44\uc728\uc758 \uac80\uc815\uc740 \ubaa8\ube44\uc728\uc778 p\uac00 \uc774\ub7f4\uac83\uc774\ub2e4. \ub77c\uace0 \uadc0\ubb34\uac00\uc124\uc744 \uc138\uc6b0\uace0 \uac80\uc815 \ud1b5\uacc4\ub7c9\uc744 \uacc4\uc0b0\ud558\ub294 \uac83\uc774\ub2e4.\n9.7. \uce74\uc774\uc81c\uacf1 \uac80\uc815\u00b6\uce74\uc774\uc81c\uacf1 \uac80\uc815\uc740 \ubaa8\ube44\uc728 \uac80\uc815\uc5d0\uc11c \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \ud1b5\uacc4\ub7c9\uc774\ub2e4. \uc218\uc2dd\uc73c\ub85c\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud45c\ud604\ud55c\ub2e4.\n$$ x2 = \\sum_{i} \\frac{(O_i - E_i)2}{E_i} $$\uc5ec\uae30\uc11c $O_i$\ub294 \uad00\uce21\ube48\ub3c4 $E_i$\ub294 \uae30\ub300 \ube48\ub3c4\uc774\ub2e4.\n9.8. \uccab\ubc88\uc9f8 \uc544\uc774\uc758 \uc784\uc2e0\uae30\uac04\u00b635 - 43\uc8fc\ucc28\uc5d0\uc11c \uccab\ubc88\uc9f8 \uc544\uc774\uc640 \ub098\uba38\uc9c0 \uc544\uc774\uc758 \uce74\uc774\uc81c\uacf1 \uac80\uc815\uc744 \uc218\ud589\ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[44]:\n\n    \nclass PregLengthTest(thinkstats2.HypothesisTest):\n    \n    def MakeModel(self):\n        firsts, others = self.data\n        self.n = len(firsts)\n        self.pool = np.hstack((firsts, others))\n\n        pmf = thinkstats2.Pmf(self.pool)\n        self.values = range(35, 44)\n        self.expected_probs = np.array(pmf.Probs(self.values))\n\n    def RunModel(self):\n        np.random.shuffle(self.pool)\n        data = self.pool[:self.n], self.pool[self.n:]\n        return data\n    \n    def TestStatistic(self, data):\n        firsts, others = data\n        stat = self.ChiSquared(firsts) + self.ChiSquared(others)\n        return stat\n\n    def ChiSquared(self, lengths):\n        hist = thinkstats2.Hist(lengths)\n        observed = np.array(hist.Freqs(self.values))\n        expected = self.expected_probs * len(lengths)\n        stat = sum((observed - expected)**2 / expected)\n        return stat\n\ndata = first_baby.prglngth.values, others.prglngth.values\nht = PregLengthTest(data)\np_value = ht.PValue()\nprint('p-value =', p_value)\nprint('actual =', ht.actual)\nprint('ts max =', ht.MaxTestStat())\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\np-value = 0.0\nactual = 101.50141482893264\nts max = 26.09852160851441\n\n\n\n\n\n\n\n\n\n\n\nNSFG \ub370\uc774\ud130\uc14b\uc758 \uce74\uc774\uc81c\uacf1\uac12 101.5 \uc740 \uadf8 \uc790\uccb4\ub85c \ub9ce\uc740 \uac83\uc744 \uc758\ubbf8 \ud558\uc9c0\ub294 \uc54a\ub294\ub2e4. \ud558\uc9c0\ub9cc \uadc0\ubb34\uac00\uc124 \uc544\ub798\uc5d0\uc11c 1000\ud68c \ubc18\ubcf5\ud588\uc744\ub54c \uac00\uc7a5 \ud070 \uac80\uc815 \ud1b5\uacc4\ub7c9\uc740 25.7 \ub2e4. \ub2e4\uc2dc \ub9d0\ud574 \uc2e4\uc81c \uce74\uc774 \uc81c\uacf1 \ud1b5\uacc4\ub7c9\uc774 \uadc0\ubb34\uac00\uc124 \uc544\ub798\uc5d0\uc11c \uac00\ub2a5\ud560 \uac83 \uac19\uc9c0 \uc54a\ub2e4\uace0 \uacb0\ub860 \ub0b4\ub9b4 \uc218 \uc788\ub2e4. \uadf8\ub798\uc11c \uc678\uad00 \ud6a8\uacfc\ub294 \ud1b5\uacc4\uc801 \uc720\uc758\uc131\uc774 \uc788\ub2e4\uace0 \ubcfc \uc218 \uc788\ub2e4. \ub3d9\uc2dc\uc5d0 \uc774 \uc608\uc81c\ub294 \uce74\uc774\uc81c\uacf1 \uac80\uc815\ud55c\uacc4\ub97c \ubcf4\uc5ec\uc900\ub2e4. \ubc14\ub85c \ub450 \uc9d1\ub2e8 \uc0ac\uc774\uc5d0 \ucc28\uc774\uac00 \uc788\ub2e4\ub294 \uac83\uc740 \uc54c \uc218 \uc788\uc9c0\ub9cc \ucc28\uc774\uac00 \ubb34\uc5c7\uc778\uc9c0\uc5d0 \ub300\ud55c \uad6c\uccb4\uc801\uc778 \uac83\uc740 \uc54c \uc218 \uc5c6\ub2e4\ub294 \uac83\uc774\ub2e4.\n9.9 \uc624\ub958\u00b6\uc77c\ubc18\uc801\uc73c\ub85c \uc804\ud1b5\uc801 \uac00\uc124 \uac80\uc815\uc5d0\uc11c p-value\uac00 0.05\ubcf4\ub2e4 \ub0ae\ub2e4\uba74 \ubcf4\ud1b5 \ud1b5\uacc4\uc801\uc73c\ub85c \uc720\uc758\ubbf8 \ud558\ub2e4\uace0 \ud310\ub2e8\ud55c\ub2e4. \uadf8\ub9ac\uace0 \uadf8\ub7f0 \uacbd\uc6b0\uc5d0\ub3c4 \ub2e4\uc74c \ub450 \uac00\uc9c0\ub97c \uace0\ub824 \ud55c\ub2e4.\n\n\ub9cc\uc57d \ud6a8\uacfc\uac00 \uc2e4\uc81c\ub85c \uc6b0\uc5f0\uc774\ub77c\uba74 \ud574\ub2f9 \ud6a8\uacfc\ub97c \uc798\ubabb \ud310\ub2e8\ud560 \ud655\ub960\uc740 \uc5bc\ub9c8\ub098\ub420\uae4c? \uc774\uac83\uc744 \uc774\uac70\uc9d3\uc591\uc131\ub960(false positive rate)\uc774\ub77c \ud55c\ub2e4.\n\ub9cc\uc57d \ud6a8\uacfc\uac00 \uc9c4\uc2e4\uc774\ub77c\uba74, \uac00\uc124\uac80\uc815\uc774 \uc2e4\ud328\ud560 \uac00\ub2a5\uc131\uc740 \uc5bc\ub9c8\ub098\ub420\uae4c? \uc774 \ud655\ub960\uc740 \uac70\uc9d3 \uc74c\uc131\ub960(false negative rate) \uc774\ub77c \ud55c\ub2e4.\n\n9.10. \uac80\uc815\ub825(Power)\u00b6\uac70\uc9d3\uc591\uc131\ub960\uc740 \uc0c1\ub300\uc801\uc73c\ub85c \uacc4\uc0b0\ud558\uae30 \uc27d\ub2e4. \ubd84\uacc4\uc810\uc774 5% \uc774\uba74, \uac70\uc9d3\uc591\uc131\ub960\uc740 5% \uc774\ub2e4. \ubc18\uba74\uc5d0 \n\uac70\uc9d3\uc74c\uc131\ub960\uc740 \uacc4\uc0b0\ud558\uae30 \ub354 \uc5b4\ub835\ub2e4. \uc65c\ub0d0\uba74 \uc2e4\uc81c \ud6a8\uacfc\ud06c\uae30\uc5d0 \uc758\uc874\ud558\uace0 \uc815\uc0c1\uc801\uc73c\ub85c\ub294 \uc2e4\uc81c\ud6a8\uacfc \ud06c\uae30\ub97c \ubaa8\ub974\uae30 \ub54c\ubb38\uc774\ub2e4. \ud55c \uac00\uc9c0 \uc120\ud0dd\uc635\uc158\uc740 \uac00\uc0c1\ud6a8\uacfc\ud06c\uae30(hypothetical effect size) \uc870\uac74\uc73c\ub85c \uac70\uc9d3\uc74c\uc131\ub960\uc744 \uacc4\uc0b0\ud558\ub294 \uac83\uc774\ub2e4.\n\uc815\ud655\ud55c \uc591\uc131\ub960(correct positive rate)\uc744 \uac80\uc815\ub825(power)\ub77c\uace0 \ubd80\ub974\uba70 \uc885\uc885 \ubbfc\uac10\ub3c4(sensitivity)\ub77c \ud55c\ub2e4.\n9.11. \ubc18\ubcf5(Replication)\u00b6\ud604\uc7ac \ub370\uc774\ud130\uc5d0\uc11c \ud1b5\uacc4\uc801 \uc720\uc758\uc131\uc774\uc788\ub294 \ubaa8\ub4e0 \ud6a8\uacfc\uac00 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\uc14b\uc5d0\uc11c\ub3c4 \ubc18\ubcf5\ub418\uc5b4\uc57c \ud55c\ub2e4.\n9.12. \uc5f0\uc2b5\ubb38\uc81c\u00b6\n\ud45c\ubcf8\ud06c\uae30\uac00 \uc99d\uac00\ud558\uba74 \uac00\uc124 \uac80\uc815\ub825\uc774 \uc99d\uac00\ud558\uace0 \ubc18\ub300\ub85c \ud45c\ubcf8\ud06c\uae30\uac00 \uc904\uc5b4\ub4e4\uba74 \uac80\uc815\ub825\uc740 \uc904\uc5b4\ub4e0\ub2e4. \ud45c\ubcf8\uc758 \ud06c\uae30\uac00 \uc904\uc5b4\ub4ec\uc5d0 \ub530\ub77c p-value \uac00 \uc5b4\ub5bb\uac8c \ubcc0\ud654\ud558\ub294\uc9c0 \ucd5c\uc18c\ud55c\uc758 \ud45c\ubcf8\ud06c\uae30\ub294 \uc5bc\ub9c8\uc778\uc9c0 \uc54c\uc544\ubcf4\ub77c.\n\n\n\n\n\n\n\nIn\u00a0[45]:\n\n    \ndef RunTests(live, iters=1000):\n    n = len(live)\n    firsts = live[live.birthord == 1]\n    others = live[live.birthord != 1]\n    # compare pregnancy lengths\n    data = firsts.prglngth.values, others.prglngth.values\n    ht = DiffMeansPermute(data)\n    p1 = ht.PValue(iters=iters)\n    data = (firsts.totalwgt_lb.dropna().values,\n            others.totalwgt_lb.dropna().values)\n    ht = DiffMeansPermute(data)\n    p2 = ht.PValue(iters=iters)\n    # test correlation\n    live2 = live.dropna(subset=['agepreg', 'totalwgt_lb'])\n    data = live2.agepreg.values, live2.totalwgt_lb.values\n    ht = CorrelationPermute(data)\n    p3 = ht.PValue(iters=iters)\n    # compare pregnancy lengths (chi-squared)\n    data = firsts.prglngth.values, others.prglngth.values\n    ht = PregLengthTest(data)\n    p4 = ht.PValue(iters=iters)\n    print('%d\\t%0.2f\\t%0.2f\\t%0.2f\\t%0.2f' % (n, p1, p2, p3, p4))\n    \nn = len(live_baby)\nfor _ in range(7):\n    sample = thinkstats2.SampleRows(live_baby, n)\n    RunTests(sample)\n    n //= 2\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n9148\t0.16\t0.00\t0.00\t0.00\n4574\t0.14\t0.04\t0.00\t0.00\n2287\t0.62\t0.35\t0.00\t0.00\n1143\t0.37\t0.53\t0.01\t0.03\n571\t0.45\t0.16\t0.07\t0.41\n285\t0.70\t0.55\t0.02\t0.97\n142\t0.08\t0.06\t0.76\t0.02\n\n\n\n\n\n\n\n\n\n\n\n\uc608\uc0c1\ub300\ub85c \ud070 \uc0d8\ud50c\uc5d0\uc11c \uc591\uc131\uc778 \ub370\uc774\ud130\ub97c \uc81c\uac70\ud558\uba74 \ud6a8\uacfc \ud06c\uae30\uac00 \uc904\uc5b4\ub4e0\ub2e4. \uadf8\ub7ec\ub098 \uc791\uc740 \uc0d8\ud50c \ud06c\uae30\uc5d0\uc11c\ub3c4 \ud328\ud134\uc740 \ubd88\uaddc\uce59\ud558\uac8c \uc77c\uc5b4\ub09c\ub2e4.\n9.13. \uc6a9\uc5b4\uc0ac\uc804\u00b6\n\uac00\uc124\uac80\uc815(hypothesis testing): \uc678\uad00\ud6a8\uacfc(apparent effect)\uac00 \ud1b5\uacc4\uc801 \uc720\uc758\uc131\uc774 \uc788\ub294\uc9c0 \uacb0\uc815\ud558\ub294 \uacfc\uc815.\n\uac80\uc815\ud1b5\uacc4\ub7c9(test statistic): \ud6a8\uacfc\ud06c\uae30\ub97c \uc815\ub7c9\ud654\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\ub294 \ud1b5\uacc4\ub7c9.\n\uadc0\ubb34\uac00\uc124(null hypothesis): \uc678\uad00\ud6a8\uacfc\uac00 \uc6b0\uc5f0\uc5d0 \uc758\ud55c \uac83\uc774\ub77c\ub294 \uac00\uc815\uc5d0 \uae30\ubc18\ud55c \uc2dc\uc2a4\ud15c\ubaa8\ub378.\np-\uac12(p-value): \ud6a8\uacfc\uac00 \uc6b0\uc5f0\uc5d0 \uc758\ud574\uc11c \ubc1c\uc0dd\ud55c \ud655\ub960.\n\ud1b5\uacc4\uc801\uc720\uc758\uc131(statistically signi\ufb01cant): \uc6b0\uc5f0\uc5d0 \uc758\ud574\uc11c \ubc1c\uc0dd\ud560 \uac83 \uac19\uc9c0\uc54a\ub2e4\uba74, \ud6a8\uacfc\ub294 \ud1b5\uacc4\uc801 \uc720\uc758\uc131\uc774 \uc788\ub2e4.\n\uc21c\uc5f4\uac80\uc815(permutation test): \uad00\uce21 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \uc21c\uc5f4\uc744 \uc0dd\uc131\ud574\uc11c p-\uac12\uc744 \uacc4\uc0b0\ud558\ub294\ubc29\ubc95.\n\uc7ac\ud45c\ubcf8\uac80\uc815(resampling test): \uad00\uce21 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \ubcf5\uc6d0\uc73c\ub85c \ud45c\ubcf8\uc744 \uc0dd\uc131\ud574\uc11c p-\uac12\uc744 \uacc4\uc0b0\ud558\ub294\ubc29\ubc95.\n\uc591\uce21\uac80\uc815(two-sided test): \u201c\ud6a8\uacfc\ud06c\uae30\uac00 \uc591\uc73c\ub85c \ud639\uc740 \uc74c\uc73c\ub85c \uad00\uce21 \ud6a8\uacfc\ubcf4\ub2e4 \uc5bc\ub9c8\ub098 \ud070\uac00?\u201d\ub97c \ubb3b\ub294 \uac80\uc815.\n\ub2e8\uce21\uac80\uc815(one-sided test): \u201c\ud6a8\uacfc\ud06c\uae30\uac00 \ub3d9\uc77c \ubd80\ud638\ub85c \uad00\uce21 \ud6a8\uacfc\ubcf4\ub2e4 \uc5bc\ub9c8\ub098 \ud070\uac00?\u201d\ub97c \ubb3b\ub294 \uac80\uc815.\n\uce74\uc774-\uc81c\uacf1\uac80\uc815(chi-squared test): \uac80\uc815\ud1b5\uacc4\ub7c9\uc73c\ub85c \uce74\uc774-\uc81c\uacf1\ud1b5\uacc4\ub7c9\uc744 \uc0ac\uc6a9\ud558\ub294\uac80\uc815.\n\uac70\uc9d3\uc591\uc131(false positive): \uc0ac\uc2e4\uc774 \uc544\ub2d0\ub54c \ud6a8\uacfc\uac00 \uc0ac\uc2e4\uc774\ub77c\ub294 \uacb0\ub860.\n\uac70\uc9d3\uc74c\uc131(false negative): \uc6b0\uc5f0\uc774 \uc544\ub2d0\ub54c \ud6a8\uacfc\uac00 \uc6b0\uc5f0 \ub54c\ubb38\uc774\ub77c\ub294 \uacb0\ub860.\n\uac80\uc815\ub825(power): \ub300\ub9bd \uac00\uc124\uc774 \uc0ac\uc2e4\uc77c\ub54c, \uc774\ub97c \uc0ac\uc2e4\ub85c\uc11c \uacb0\uc815\ud560 \ud655\ub960\uc774\ub2e4. \uac80\uc815\ub825\uc774 90% \ub77c\uace0\ud558\uba74, \ub300\ub9bd\uac00\uc124\uc774 \uc0ac\uc2e4\uc784\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 \uadc0\ubb34\uac00\uc124\uc744 \ucc44\ud0dd \ud560 \ud655\ub960\uc740 10%\uc774\ub2e4.\n\n10. \uc120\ud615\ucd5c\uc18c\uc81c\uacf1(Linear least squares)\u00b610.1. \ucd5c\uc18c\uc81c\uacf1 \uc801\ud569(Lease squares fit)\u00b6\ubcc0\uc218\uac04\uc758 \uae30\uc6b8\uae30\ub97c \uce21\uc815\ud558\ub294 \uac00\uc7a5 \ud754\ud55c \ubc29\ubc95\uc774 \uc120\ud615\ucd5c\uc18c\uc81c\uacf1 \uc801\ud569(linearleast squares fit) \uc774\ub2e4. \uc120\ud615 \uc801\ud569\uc740 \ubcc0\uc218 \uc0ac\uc774\uc758 \uad00\uacc4\ub97c \ud558\ub098\uc758 \uc120\uc73c\ub85c \ubaa8\ub378\ub9c1\ud55c\ub2e4. \ub530\ub77c\uc11c \uc18c\uc81c\uacf1 \uc801\ud569\uc740 \ubaa8\ub378\uacfc \ub370\uc774\ud130 \uc0ac\uc774\uc758 \ud3c9\uade0\uc81c\uacf1\uc624\ucc28\ub97c \ucd5c\uc18c\ud654 \ud558\ub294 \uac83\uc774\ub2e4.\n\ubaa8\ub378\uacfc \ub370\uc774\ud130 \uc0ac\uc774\uc758 \ucc28\uc774\ub97c \uc794\ucc28(residual) \ub77c\uace0 \ud55c\ub2e4. \uc794\ucc28\uc5d0 \uc81c\uacf1\uc744 \ud558\ub294 \uc774\uc720\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n\n\uc81c\uacf1\ud558\uac8c \ub418\uba74 \uc794\ucc28\uc758 \ubd80\ud638\ub97c \uc81c\uac70\ud558\ub294 \uae30\ub2a5\uc774 \uc788\ub2e4.\n\uc81c\uacf1\uc740 \ud070 \uc794\ucc28\uc5d0 \ub354 \ub9ce\uc740 \uac00\uc911\uce58\ub97c \uc8fc\uc9c0\ub9cc \uac00\uc7a5 \ud070 \uc794\ucc28\uac00 \ud56d\uc0c1 \uc8fc\ub3c4\uc801\uc778 \uacbd\uc6b0\uc5d0\ub294 \uadf8\ub807\uac8c \ub9ce\uc740 \uac00\uc911\uce58\ub97c \uc8fc\uc9c0\ub294 \uc54a\ub294\ub2e4.\n\ub9cc\uc57d \uc794\ucc28\uac00 \uc0c1\uad00\uad00\uacc4\uac00 \uc5c6\uace0 \ud3c9\uade0\uacfc \uc54c\uc218\uc5c6\ub294 \ubd84\uc0b0\uc744 \uac00\uc9c4 \uc815\uaddc\ubd84\ud3ec\ub77c\uba74, \ucd5c\uc18c\uc81c\uacf1\uc801\ud569\uc740 \ub610\ud55c \ucd5c\ub300\uc6b0\ub3c4 \ucd94\uc815\ub7c9\uc774\ub2e4.\n\n\n\n\n\n\n\nIn\u00a0[46]:\n\n    \nfrom thinkstats2 import Mean, MeanVar, Var, Std, Cov\n\ndef LeastSquares(xs, ys):\n    meanx, varx = MeanVar(xs)\n    meany = Mean(ys)\n    slope = Cov(xs, ys, meanx, meany) / varx\n    inter = meany - slope * meanx\n    return inter, slope\n\ndef FitLine(xs, inter, slope):\n    fit_xs = np.sort(xs)\n    fit_ys = inter + slope * fit_xs\n    return fit_xs, fit_ys\n\nlive = live_baby.dropna(subset=['agepreg', 'totalwgt_lb'])\nages = live.agepreg\nweights = live.totalwgt_lb\ninter, slope = LeastSquares(ages, weights)\nfit_xs, fit_ys = FitLine(ages, inter, slope)\ninter, slope\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[46]:\n\n\n\n\n\n(6.8303969733110526, 0.017453851471802756)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[47]:\n\n    \nthinkplot.Scatter(ages, weights, color='blue', alpha=0.1, s=10)\nthinkplot.Plot(fit_xs, fit_ys, color='red', linewidth=3)\nthinkplot.Config(xlabel=\"Mother's age (years)\", ylabel='Birth weight (lbs)',\n                 axis=[10, 45, 0, 15], legend=False)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc120\uacfc \ud568\uaed8 \ucd9c\uc0dd \uccb4\uc911\uacfc \uc5f0\ub839\uc744 \uc0b0\uc810\ub3c4\ub85c \ubcf4\uc5ec\uc900\ub2e4. \uad00\uacc4\uac00 \uc120\ud615\uc778\uc9c0, \uc801\ud569\uc120\uc774\uad00\uacc4\ub97c \ub098\ud0c0\ub0b4\ub294 \uc88b\uc740 \ubaa8\ud615\uc778\uc9c0\ub97c \ud3c9\uac00 \ud558\ub294\ub370 \uc2dc\uac01\ud654\ub294 \uc5b8\uc81c\ub098 \uc88b\uc740 \uc0dd\uac01\uc774\ub2e4.\n10.3. \uc794\ucc28(Residuals)\u00b6\uc794\ucc28\ub97c \uc2dc\uac01\ud654 \ud574\ubcf4\uc790.\n\n\n\n\n\n\nIn\u00a0[48]:\n\n    \ndef Residuals(xs, ys, inter, slope):\n    xs = np.asarray(xs)\n    ys = np.asarray(ys)\n    res = ys - (inter + slope * xs)\n    return res\n\nlive['residual'] = Residuals(ages, weights, inter, slope)\n\nbins = np.arange(10, 48, 3)\nindices = np.digitize(live.agepreg, bins)\ngroups = live.groupby(indices)\nage_means = [group.agepreg.mean() for _, group in groups][1:-1]\ncdfs = [thinkstats2.Cdf(group.residual) for _, group in groups][1:-1]\n\ndef PlotPercentiles(age_means, cdfs):\n    thinkplot.PrePlot(3)\n    for percent in [75, 50, 25]:\n        weight_percentiles = [cdf.Percentile(percent) for cdf in cdfs]\n        label = '%dth' % percent\n        thinkplot.Plot(age_means, weight_percentiles, label=label)\n\nPlotPercentiles(age_means, cdfs)\nthinkplot.Config(xlabel=\"Mother's age (years)\", ylabel='Residual (lbs)',\n                 xlim=[10, 45])\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc774\uc0c1\uc801\uc73c\ub85c\ub294 \ubaa8\ub4e0 \uc5f0\ub839\uc9d1\ub2e8\uc5d0\uc11c \uc794\ucc28\uac00 \ud3c9\ud3c9\ud55c \uc9c1\uc120\uc73c\ub85c \ub098\ud0c0\ub098\uc57c \ud55c\ub2e4. \uadf8\ub7ec\ub098 \uc2e4\uc81c \ub370\uc774\ud130\uc5d0\ub294 \uc704\uc758 \uadf8\ub9bc\uacfc \uac19\uc740 \ubaa8\uc2b5\uc744 \ub744\uac8c \ub41c\ub2e4.\n10.4. \ucd94\uc815(Estimation)\u00b6\ubaa8\uc218 slope \uc640 inter \ub294 \ud45c\ubcf8\uc5d0 \uae30\ubc18\ud55c \ucd94\uc815\uac12\uc774\ub2e4\n10.5. \uc801\ud569\ub3c4(Goodness of fit)\u00b6\uc120\ud615 \ubaa8\ub378\uc758 \ud488\uc9c8\uc740 \uc801\ud569\ub3c4(goodness of fit) \ub85c \ub098\ud0c0\ub0b4\uba70, \uac00\uc7a5 \uac04\ub2e8\ud558\uac8c \uce21\uc815\ud558\ub294 \ubc29\ubc95\uc740 \uc794\ucc28\uc758 \ud45c\uc900\ud3b8\ucc28\ub97c \uad6c\ud558\ub294 \uac83\uc774\ub2e4.\n\uc801\ud569\ub3c4\ub97c \uce21\uc815\ud558\ub294 \ub610 \ub2e4\ub978\ubc29\uc2dd\uc740 $R2$\ub85c \ud45c\uae30\ud558\uace0, R-\uc81c\uacf1(R-squared) \ub77c\uace0  \ubd80\ub974\ub294 \uacb0\uc815\uacc4\uc218(coefficient of determination)\ub2e4.\n\n\n\n\n\n\nIn\u00a0[49]:\n\n    \ndef CoefDetermination(ys, res):\n    return 1 - Var(res) / Var(ys)\n\ninter, slope = LeastSquares(ages, weights)\nres = Residuals(ages, weights, inter, slope)\nr2 = CoefDetermination(weights, res)\nr2\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[49]:\n\n\n\n\n\n0.00473811547471048\n\n\n\n\n\n\n\n\n\n\n\n\uc2e0\uc0dd\uc544\uc758 \uccb4\uc911\uacfc \uc0b0\ubaa8\uc758 \ub098\uc774\uc5d0 \ub300\ud55c \uc801\ud569\ub3c4 $R2$ \uac12\uc740 0.0047 \uc774\ub2e4. \uadf8\ub9d0\uc740 \uc0b0\ubaa8 \ub098\uc774\uac00 \uc2e0\uc0dd\uc544\uc758 \uccb4\uc911\uc744 \uc57d 0.5% \ud655\ub960\ub85c \uc608\uce21\ud55c\ub2e4\ub294 \uc758\ubbf8\uac00 \ub41c\ub2e4.\n10.9. \uc6a9\uc5b4\uc0ac\uc804\u00b6\n\uc120\ud615\uc801\ud569(linear fit): \ubcc0\uc218\uc0ac\uc774 \uad00\uacc4\ub97c \ubaa8\ub378\ub9c1\ud558\ub294 \uc9c1\uc120.\n\ucd5c\uc18c\uc81c\uacf1\uc801\ud569(least squares fit): \uc794\ucc28 \uc81c\uacf1\ud569\uc744 \ucd5c\uc18c\ud654\ud558\ub294 \ub370\uc774\ud130 \ubaa8\ub378.\n\uc794\ucc28(residual): \uc2e4\uc81c\uac12\uacfc \ubaa8\ub378\uac12\uc758 \ucc28\uc774.\n\uc801\ud569\ub3c4(goodness of fit): \ubaa8\ub378\uc774 \ub370\uc774\ud130\uc5d0 \uc5bc\ub9c8\ub098 \uc798 \uc801\ud569\ud558\ub294\uc9c0\uc5d0 \ub300\ud55c \ucc99\ub3c4.\n\uacb0\uc815\uacc4\uc218(coef\ufb01cient of determination): \uc801\ud569\ub3c4\ub97c \uacc4\ub7c9\ud654\ud558\ub294 \ud1b5\uacc4\ub7c9.\n\ud45c\uc9d1\uac00\uc911\uce58(sampling weight): \ud45c\ubcf8\uc774 \ubaa8\uc9d1\ub2e8 \uc5b4\ub290\ubd80\ubd84\uc744 \ub300\ud45c\ud558\ub294\uc9c0 \ub098\ud0c0\ub0b4\ub294 \ud45c\ubcf8 \uad00\uce21\uacfc \uc5f0\uad00\ub41c \uac12.\n\n11. \ud68c\uadc0\u00b6\ud68c\uadc0(regression)\ub294 \ub370\uc774\ud130\ub97c \ubaa8\ud615\uc5d0 \uc801\ud569\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\ub294 \ubc29\ubc95\uc774\ub2e4. \ud68c\uadc0\ubd84\uc11d\uc758 \ubaa9\uc801\uc740 \uc885\uc18d\ubcc0\uc218(dependent variables)\ub77c\uace0 \ubd88\ub9ac\ub294 \ubcc0\uc218\uc9d1\ud569\uacfc \uc124\uba85\ubcc0\uc218(explanatory variables)\ub77c\uace0\ubd88\ub9ac\ub294 \ub610 \ub2e4\ub978 \uc9d1\ud569\ubcc0\uc218\uc0ac\uc774\uad00\uacc4\ub97c \uae30\uc220\ud558\ub294 \uac83\uc774\ub2e4.\n11.1. StatsModels\u00b6statsmodels \ud30c\uc774\uc36c \ud328\ud0a4\uc9c0\ub294 \uba87\uac00\uc9c0 \ud615\ud0dc\uc758 \ud68c\uadc0\ubd84\uc11d\uacfc \ub2e4\ub978 \ud1b5\uacc4 \ubd84\uc11d \uae30\ub2a5\uc744 \uc81c\uacf5\ud55c\ub2e4.\n11.2. \ub2e4\uc911\ud68c\uadc0(Multiple regression)\u00b6\ub2e4\uc911 \ud68c\uadc0\ub780 \uc124\uba85\ubcc0\uc218(\ub3c5\ub9bd\ubcc0\uc218)\uac00 2 \uac1c \uc774\uc0c1\uc778 \ud68c\uadc0\ubaa8\ud615\uc744 \ubd84\uc11d\ub300\uc0c1\uc73c\ub85c \uc0bc\ub294\ub2e4.\n\n\ucd94\uac00\uc801\uc778 \ub3c5\ub9bd\ubcc0\uc218\ub97c \ub3c4\uc785\ud568\uc73c\ub85c\uc368 \uc624\ucc28\ud56d\uc758 \uac12\uc744 \uc904\uc77c \uc218 \uc788\ub2e4.\n\ub2e8\uc21c\ud68c\uadc0\ubd84\uc11d\uc758 \ub2e8\uc810\uc744 \uadf9\ubcf5 \ud560 \uc218 \uc788\ub2e4.\n\n\n\n\n\n\n\nIn\u00a0[50]:\n\n    \nimport statsmodels.formula.api as smf\n\nformula = 'totalwgt_lb ~ agepreg'\nmodel = smf.ols(formula, data=live)\nresults = model.fit()\nresults.summary()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[50]:\n\n\n\n\n\nOLS Regression Results\n\n  Dep. Variable:       totalwgt_lb     R-squared:             0.005 \n\n\n  Model:                   OLS         Adj. R-squared:        0.005 \n\n\n  Method:             Least Squares    F-statistic:           43.02 \n\n\n  Date:             Mon, 16 Mar 2020   Prob (F-statistic): 5.72e-11 \n\n\n  Time:                 13:28:33       Log-Likelihood:      -15897. \n\n\n  No. Observations:        9038        AIC:                3.180e+04\n\n\n  Df Residuals:            9036        BIC:                3.181e+04\n\n\n  Df Model:                   1                                     \n\n\n  Covariance Type:      nonrobust                                   \n\n\n\n\n               coef     std err      t      P>|t|  [0.025    0.975]  \n\n\n  Intercept     6.8304     0.068   100.470  0.000     6.697     6.964\n\n\n  agepreg       0.0175     0.003     6.559  0.000     0.012     0.023\n\n\n\n\n  Omnibus:       1024.052   Durbin-Watson:         1.618\n\n\n  Prob(Omnibus):   0.000    Jarque-Bera (JB):   3081.833\n\n\n  Skew:           -0.601    Prob(JB):               0.00\n\n\n  Kurtosis:        5.596    Cond. No.               118.\n\nWarnings:[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[51]:\n\n    \ninter = results.params['Intercept']\nslope = results.params['agepreg']\ninter, slope\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[51]:\n\n\n\n\n\n(6.830396973311056, 0.017453851471802777)\n\n\n\n\n\n\n\n\n\n\n\n11.3. \ube44\uc120\ud615\uad00\uacc4(Nonlinear relationships)\u00b6\uc704\uc758 agepreg \ubcc0\uc218\uac00 \ube44\uc120\ud615\uad00\uacc4\uc77c\uc9c0 \ubaa8\ub978\ub2e4\ub294 \uac83\uc744 \uace0\ub824\ud574 \ubcc0\uc218\uac04\uc758 \uad00\uacc4\uc5d0\uc11c \ub354 \ub9ce\uc740 \uc815\ubcf4\ub97c \uc5bb\uae30 \uc704\ud574 \ubcc0\uc218\ub97c \ucd94\uac00\ud55c\ub2e4.\n11.6. \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0(Logistic regression)\u00b6\uc120\ud615\ud68c\uadc0\ub294 \ub2e4\ub978 \uc720\ud615 \uc885\uc18d\ubcc0\uc218\ub97c \ucc98\ub9ac\ud558\ub3c4\ub85d \uc77c\ubc18\ud654 \ub420 \uc218 \uc788\ub2e4. \ub9cc\uc57d \uc885\uc18d\ubcc0\uc218\uac00 \ubd80\uc6b8(boolean)\uc774\ub77c\uba74, \uc77c\ubc18\ud654 \ubaa8\ud615\uc740 \ub85c\uc9c0\uc2a4\ud2f1\ud68c\uadc0(logistic regression)\ub77c \ubd88\ub9b0\ub2e4. \ub9cc\uc57d \uc885\uc18d\ubcc0\uc218\uac00 \uc815\uc218 \uac2f\uc218\ub77c\uba74 \ud3ec\uc544\uc1a1\ud68c\uadc0(Poisson regression)\ub77c \ud55c\ub2e4.\n$$ \\log o = \\beta_0 + \\beta_1 x_1 + \\beta_2 x_2 $$\ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0(logistic regression)\ub294 \uc601\uad6d\uc758 \ud1b5\uacc4\ud559\uc790\uc778 D. R. Cox\uac00 1958\ub144 \uc5d0 \uc81c\uc548\ud55c \ud655\ub960 \ubaa8\ub378\ub85c\uc11c \ub3c5\ub9bd \ubcc0\uc218\uc758 \uc120\ud615 \uacb0\ud569\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uac74\uc758 \ubc1c\uc0dd \uac00\ub2a5\uc131\uc744 \uc608\uce21\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\ub294 \ud1b5\uacc4 \uae30\ubc95\uc774\ub2e4.\n\n11.7. \ubaa8\uc218 \ucd94\uc815\u00b6\ubaa8\uc218\uc758 \uac12\uc73c\ub85c \uac00\uc7a5 \uac00\ub2a5\uc131\uc774 \ub192\uc740 \ud558\ub098\uc758 \uc22b\uc790\ub97c \ucc3e\uc544\ub0b4\ub294 \uc791\uc5c5\uc744 \ubaa8\uc218 \ucd94\uc815(parameter estimation)\uc774\ub77c\uace0 \ud55c\ub2e4.\n\uc120\ud615 \ud68c\uadc0\uc640 \ub2ec\ub9ac \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\ub294 \ub2eb\ud78c \ud615\uc2dd \ud574\ub2f5(closed form solution)\uc774 \uc5c6\ub2e4. \uadf8\ub798\uc11c \ucd08\uae30 \ud574\ub2f5(solution)\uc744 \ucd94\uce21\ud574 \ubc18\ubcf5\ud574 \ud574\ub2f5\uc744 \ud5a5\ud574 \uc811\uadfc\ud55c\ub2e4.\n11.9. \uc815\ubc00\ub3c4\u00b6\uac19\uc740 \uc2e4\ud5d8\uc744 \ubc18\ubcf5\ud588\uc744 \ub54c \uce21\uc815\uacb0\uacfc\uac00 \uac70\uc758 \uc720\uc0ac\ud55c \ud615\ud0dc\uc758 \uc9d1\ud569\uc744 \uc774\ub8e8\uba74 \uc774\ub294 \uc815\ubc00\ub3c4\uac00 \ub192\ub2e4\uace0 \ub9d0\ud55c\ub2e4. \uc815\ud655\uc131(accuracy)\uacfc \ud63c\ub3d9\ud558\uae30 \uc26c\uc6b0\ub098, \uc815\ud655\uc131\uc740 \uc2e4\ud5d8\uac12\uc774 \uc774\ub860\uc5d0 \uc0c1\ub2f9\ud558\ub294 \ucc38\uac12\uc5d0 \uadfc\uc0ac\ud55c \uc815\ub3c4\ub97c \ub098\ud0c0\ub0b4\uba70, \uc815\ubc00\ub3c4\uac00 \ub192\ub354\ub77c\ub3c4 \uc774 \uacb0\uacfc\uc758 \uc9d1\ud569\ub4e4\uc774 \uc2e4\uc81c\uc758 \uc774\ub860\uac12\uacfc\ub294 \ubaa8\ub450 \uc624\ucc28\uac00 \ud074 \uc218 \uc788\ub2e4.\n11.11. \uc6a9\uc5b4\uc0ac\uc804\u00b6\n\ud68c\uadc0(regression): \ub370\uc774\ud130\uc5d0 \ub9de\ub294 \ubaa8\ub378\uc744 \ucd94\uc815\ud558\uae30 \uc704\ud55c \uba87 \uac00\uc9c0 \uad00\ub828\ub41c \uacfc\uc815\uc911 \ud558\ub098.\n\uc885\uc18d\ubcc0\uc218(dependent variables): \ud68c\uadc0\ubaa8\ud615\uc5d0\uc11c \uc608\uce21 \ud558\ub824\ub294 \ubcc0\uc218. \ub610\ud55c, \ub0b4\uc0dd \ubcc0\uc218\ub85c\ub3c4 \uc54c\ub824\uc838 \uc788\ub2e4.\n\uc124\uba85\ubcc0\uc218(explanatory variables): \uc885\uc18d\ubcc0\uc218\ub97c \uc608\uce21 \ud558\uac70\ub098 \uc124\uba85 \ud558\ub294\ub370 \uc0ac\uc6a9\ub418\ub294 \ubcc0\uc218. \ub610\ud55c \ub3c5\ub9bd \ubcc0\uc218 \ud639\uc740 \uc678\uc0dd \ubcc0\uc218\ub85c\ub3c4 \uc54c\ub824\uc838 \uc788\ub2e4.\n\ub2e8\uc21c\ud68c\uadc0(simple regression): \ub2e8\uc9c0 \ud558\ub098\uc758\uc885\uc18d\ubcc0\uc218, \ud558\ub098\uc758\ub3c5\ub9bd\ubcc0\uc218\ub9cc\uc744 \uac16\ub294\ud68c\uadc0.\n\ub2e4\uc911\ud68c\uadc0(multiple regression): \uc124\uba85 \ubcc0\uc218 \ub2e4\uc218\ub97c \uac16\ub294 \ud68c\uadc0, \ud558\uc9c0\ub9cc \uc885\uc18d \ubcc0\uc218\ub294 \ud558\ub098\ub2e4.\n\uc120\ud615\ud68c\uadc0(linear regression): \uc120\ud615\ubaa8\ud615\uc5d0 \uae30\ubc18\ud55c \ud68c\uadc0.\n\ubcf4\ud1b5\ucd5c\uc18c\uc81c\uacf1(ordinary least squares): \uc794\ucc28 \uc81c\uacf1 \uc624\ucc28\ub97c \ucd5c\uc18c\ud654\ud568\uc73c\ub85c\uc368 \ubaa8\uc218\ub97c \ucd94\uc815\ud558\ub294 \uc120\ud615 \ud68c\uadc0.\n\uac70\uc9d3\uad00\uacc4(spurious relationship): \ubaa8\ud615\uc5d0 \ud3ec\ud568 \ub418\uc9c0 \uc54a\ub294 \ud1b5\uacc4\uc801 \uc0b0\ucd9c\ubb3c \ud639\uc740 \uc694\uc778\uc73c\ub85c \ubc1c\uc0dd\ud558\uc5ec \ub450 \ubcc0\uc218\uac00 \uc5f0\uad00\ub41c \ub450 \ubcc0\uc218 \uc0ac\uc774 \uad00\uacc4.\n\uc81c\uc5b4\ubcc0\uc218(control variable): \uac70\uc9d3\uad00\uacc4\ub97c \uc81c\uc5b4 \ubaa9\uc801\uc73c\ub85c \ud639\uc740 \uc81c\uac70 \ud558\ub294\ub370 \ud68c\uadc0\uc5d0 \ud3ec\ud568\ub418\ub294 \ubcc0\uc218.\n\ub300\ub9ac\ubcc0\uc218(proxy variable): \ub2e4\ub978 \uc694\uc778\uacfc \uad00\uacc4 \ub54c\ubb38\uc5d0 \uac04\uc811\uc801\uc73c\ub85c \ud68c\uadc0\ubaa8\ud615\uc5d0 \uc815\ubcf4\ub97c \uae30\uc5ec\ud558\ub294 \ubcc0\uc218. \uadf8\ub798\uc11c \uadf8 \uc694\uc778\uc5d0 \ub300\ud55c \ub300\ub9ac(proxy) \uc5ed\ud560\uc744 \ud55c\ub2e4\n\ubc94\uc8fc\ud615\ubcc0\uc218(categorical variable): \uc774\uc0b0\ud615 \uc21c\uc11c \uc5c6\ub294\uac12\uc744 \uac16\ub294 \ubcc0\uc218.\n\uacb0\ud569(join): \ub450 \ud504\ub808\uc784\uc5d0 \ud589\uc744 \ub9e4\uce6d \ud558\ub294 \ud0a4(key)\ub97c \uc0ac\uc6a9\ud574\uc11c \ub450 \ub370\uc774\ud130 \ud504\ub808\uc784\uc5d0 \ub370\uc774\ud130\ub97c \uacb0\ud569.\n\ub370\uc774\ud130\ub9c8\uc774\ub2dd(data mining): \ub9ce\uc740\ubaa8\ud615\uc744 \uac80\uc815\ud568\uc73c\ub85c\uc368 \ubcc0\uc218 \uc0ac\uc774 \uad00\uacc4\ub97c \ucc3e\uc544\ub0b4\ub294 \uc811\uadfc\ubc95.\n\ub85c\uc9c0\uc2a4\ud2f1\ud68c\uadc0(logistic regression): \uc885\uc18d\ubcc0\uc218\uac00\ubd80\uc6b8(boolean) \uc790\ub8cc \ud615\uc2dd\uc77c \ub54c \uc0ac\uc6a9\ub418\ub294 \ud68c\uadc0.\n\ud3ec\uc544\uc1a1\ud68c\uadc0(Poisson regression): \uc885\uc18d\ubcc0\uc218\uac00 \uc74c\uc218\uac00 \uc544\ub2cc \uc815\uc218\ub85c \ud1b5\uc0c1\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \ud68c\uadc0 \ud615\uc2dd.\n\uc624\uc988(odds): \ud655\ub960(p)\ub97c \ud655\ub960\uacfc \ud655\ub960\ubcf4(complement) \ube44\uc728\ub85c $\\frac{p}{1-p}$\ub85c \ub098\ud0c0\ub0b4\ub294 \ub300\uc548\uc801\uc778 \ubc29\ubc95.\n\n12. \uc2dc\uacc4\uc5f4 \ubd84\uc11d\u00b6\uc2dc\uacc4\uc5f4(time series)\uc740 \uc2dc\uc2a4\ud15c\uc5d0\uc11c \uc2dc\uac04\uc5d0 \ub530\ub77c \ubcc0\ud654\ud558\ub294 \uce21\uc815\uac12\uc774\ub2e4. \uac04\ub2e8\ud55c \uc608\uc2dc\ub85c \uc2dc\uac04\uc5d0 \ub530\ub77c\ubcc0\ud558\ub294 \uc138\uacc4 \ud3c9\uade0 \uae30\uc628\uc774 \uc788\ub2e4.\n\n12.1. \ub370\uc774\ud130 \uac00\uc838\uc640 \uc815\uc81c\ud558\uae30\u00b6\uc608\uc2dc\ub85c \uc0ac\uc6a9\ud560 \ub370\uc774\ud130\ub294 PriceOfWeed \uc0ac\uc774\ud2b8\uc5d0\uc11c \uacf5\uac1c\ud558\uace0 \uc788\ub294 \ub300\ub9c8\ucd08\uc758 \uc2dc\uc138\uc774\ub2e4. \ub2e4\uc6b4\ub85c\ub4dc\ud55c \ub370\uc774\ud130\ub97c \ud310\ub2e4\uc2a4 \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \ub9cc\ub4e0\ub2e4. \ud574\ub2f9 \ub370\uc774\ud130\uc14b\uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ud589\uc774 \ud3ec\ud568\ub418\uc5b4 \uc788\ub2e4.\n\ncity(\ub3c4\uc2dc): \ub3c4\uc2dc\uc774\ub984\uc744 \ub098\ud0c0\ub0b8 \ubb38\uc790\uc5f4.\nstate(\uc8fc): \uc54c\ud30c\ubcb3 \ub450 \uae00\uc790\ub85c\ub41c \ubbf8\uad6d\uc758 \uc8fc.\nprice(\uac00\uaca9): \uc9c0\ubd88\ud55c \uac00\uaca9(\ub2ec\ub7ec).\namount(\uc218\ub7c9): \uad6c\uc785\ud55c \uc218\ub7c9(g).\nquality(\ud488\uc9c8): \ub300\ub9c8\ucd08\uc758 \ud488\uc9c8, \uace0\uae09, \ubcf4\ud1b5, \uc800\uae09.\ndate(\ub0a0\uc9dc): \ub300\ub9c8\ucd08 \uad6c\ub9e4 \ub0a0\uc9dc\nppg: \ub300\ub9c8\ucd08\uc758 \uadf8\ub7a8\ub2f9 \uac00\uaca9(price per gram)\nlat: \uc704\ub3c4(Latitude) \uc815\ubcf4\nlon: \uacbd\ub3c4(Longitude) \uc815\ubcf4\n\n\n\n\n\n\n\nIn\u00a0[52]:\n\n    \nimport pandas as pd\n\ntransactions = pd.read_csv('../data/mj-clean.csv', parse_dates=[5])\ntransactions.head()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[52]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      city\n      state\n      price\n      amount\n      quality\n      date\n      ppg\n      state.name\n      lat\n      lon\n    \n  \n  \n    \n      0\n      Annandale\n      VA\n      100\n      7.075\n      high\n      2010-09-02\n      14.13\n      Virginia\n      38.830345\n      -77.213870\n    \n    \n      1\n      Auburn\n      AL\n      60\n      28.300\n      high\n      2010-09-02\n      2.12\n      Alabama\n      32.578185\n      -85.472820\n    \n    \n      2\n      Austin\n      TX\n      60\n      28.300\n      medium\n      2010-09-02\n      2.12\n      Texas\n      30.326374\n      -97.771258\n    \n    \n      3\n      Belleville\n      IL\n      400\n      28.300\n      high\n      2010-09-02\n      14.13\n      Illinois\n      38.532311\n      -89.983521\n    \n    \n      4\n      Boone\n      NC\n      55\n      3.540\n      high\n      2010-09-02\n      15.54\n      North Carolina\n      36.217052\n      -81.687983\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704\uc758 \ub300\ub9c8\ucd08 \ub370\uc774\ud130\uc14b\uc758 \ub370\uc774\ud130\ub97c \uc815\uc81c\ud558\uae30 \uc704\ud574 \uc544\ub798 \ud568\uc218\ub97c \uc815\uc758\ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[53]:\n\n    \n# \ud558\ub8e8\ub2e8\uc704\ub85c \ubc1c\uc0dd\ud55c \uac70\ub798\uc758 \ud3c9\uade0\ndef GroupByDay(transactions, func=np.mean):\n    grouped = transactions[['date', 'ppg']].groupby('date')\n    daily = grouped.aggregate(func)\n    daily['date'] = daily.index\n    start = daily.date[0]\n    one_year = np.timedelta64(1, 'Y')\n    daily['years'] = (daily.date - start) / one_year\n    return daily\n# \ud558\ub8e8\ub2e8\uc704\ub85c \ud3c9\uade0 \ud488\uc9c8\ndef GroupByQualityAndDay(transactions):\n    groups = transactions.groupby('quality')\n    dailies = {}\n    for name, group in groups:\n        dailies[name] = GroupByDay(group)        \n    return dailies\n\ndailies = GroupByQualityAndDay(transactions)\n\n\n    \n\n\n\n\n\n\n\n12.2. \ud50c\ub86f \uadf8\ub9ac\uae30\u00b6\uc2dc\uac04\uc5d0 \ub530\ub978 \ub300\ub9c8\ucd08\uc758 \uac00\uaca9\uc744 \ud488\uc9c8\ub85c \uad6c\ubd84\ud574\uc11c \uc2dc\uac01\ud654\ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[54]:\n\n    \nimport matplotlib.pyplot as plt\n\nthinkplot.PrePlot(rows=3)\nfor i, (name, daily) in enumerate(dailies.items()):\n    thinkplot.SubPlot(i+1)\n    title = 'Price per gram ($)' if i == 0 else ''\n    thinkplot.Config(ylim=[0, 20], title=title)\n    thinkplot.Scatter(daily.ppg, s=10, label=name)\n    if i == 2: \n        plt.xticks(rotation=30)\n        thinkplot.Config()\n    else:\n        thinkplot.Config(xticks=[])\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud488\uc9c8\uc5d0 \ub530\ub978 \ub300\ub9c8\ucd08 \uac00\uaca9, \uc704 \uadf8\ub798\ud504\ub97c \ud1b5\ud574 \uba85\ubc31\ud558\uac8c \uc54c \uc218 \uc788\ub294 \uac83\uc740 2013\ub144 11\uc6d4\uc5d0 \ub370\uc774\ud130\uac00 \ube48\ub2e4\ub294 \uac83\uc774\ub2e4. \uc774 \uae30\uac04\ub3d9\uc548\uc758 \uacb0\uce21 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud558\ub294 \ubc29\ubc95\uc740 \uc774\ud6c4\uc5d0 \uc0dd\uac01\ud574\ubcfc \uac83\uc774\ub2e4.\n12.3. \uc120\ud615\ud68c\uadc0(Linear regression)\u00b6\uc885\uc18d \ubcc0\uc218 y\uc640 \ud55c \uac1c \uc774\uc0c1\uc758 \ub3c5\ub9bd \ubcc0\uc218 (\ub610\ub294 \uc124\uba85 \ubcc0\uc218) X\uc640\uc758 \uc120\ud615 \uc0c1\uad00 \uad00\uacc4\ub97c \ubaa8\ub378\ub9c1\ud558\ub294 \ud68c\uadc0\ubd84\uc11d \uae30\ubc95\uc774\ub2e4.\n\n\n\n\n\n\nIn\u00a0[55]:\n\n    \nimport statsmodels.formula.api as smf\n\ndef RunLinearModel(daily):\n    model = smf.ols('ppg ~ years', data=daily)\n    results = model.fit()\n    return model, results\n\nfor name, daily in dailies.items():\n    model, results = RunLinearModel(daily)\n    print(name, results.summary())\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nhigh                             OLS Regression Results                            \n==============================================================================\nDep. Variable:                    ppg   R-squared:                       0.444\nModel:                            OLS   Adj. R-squared:                  0.444\nMethod:                 Least Squares   F-statistic:                     989.7\nDate:                Mon, 16 Mar 2020   Prob (F-statistic):          3.69e-160\nTime:                        13:28:35   Log-Likelihood:                -1510.1\nNo. Observations:                1241   AIC:                             3024.\nDf Residuals:                    1239   BIC:                             3035.\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept     13.4496      0.045    296.080      0.000      13.361      13.539\nyears         -0.7082      0.023    -31.460      0.000      -0.752      -0.664\n==============================================================================\nOmnibus:                       56.254   Durbin-Watson:                   1.847\nProb(Omnibus):                  0.000   Jarque-Bera (JB):              128.992\nSkew:                           0.252   Prob(JB):                     9.76e-29\nKurtosis:                       4.497   Cond. No.                         4.71\n==============================================================================\n\nWarnings:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\nlow                             OLS Regression Results                            \n==============================================================================\nDep. Variable:                    ppg   R-squared:                       0.030\nModel:                            OLS   Adj. R-squared:                  0.029\nMethod:                 Least Squares   F-statistic:                     35.90\nDate:                Mon, 16 Mar 2020   Prob (F-statistic):           2.76e-09\nTime:                        13:28:35   Log-Likelihood:                -3091.3\nNo. Observations:                1179   AIC:                             6187.\nDf Residuals:                    1177   BIC:                             6197.\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      5.3616      0.194     27.671      0.000       4.981       5.742\nyears          0.5683      0.095      5.991      0.000       0.382       0.754\n==============================================================================\nOmnibus:                      649.338   Durbin-Watson:                   1.820\nProb(Omnibus):                  0.000   Jarque-Bera (JB):             6347.614\nSkew:                           2.373   Prob(JB):                         0.00\nKurtosis:                      13.329   Cond. No.                         4.85\n==============================================================================\n\nWarnings:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\nmedium                             OLS Regression Results                            \n==============================================================================\nDep. Variable:                    ppg   R-squared:                       0.050\nModel:                            OLS   Adj. R-squared:                  0.049\nMethod:                 Least Squares   F-statistic:                     64.92\nDate:                Mon, 16 Mar 2020   Prob (F-statistic):           1.82e-15\nTime:                        13:28:35   Log-Likelihood:                -2053.9\nNo. Observations:                1238   AIC:                             4112.\nDf Residuals:                    1236   BIC:                             4122.\nDf Model:                           1                                         \nCovariance Type:            nonrobust                                         \n==============================================================================\n                 coef    std err          t      P>|t|      [0.025      0.975]\n------------------------------------------------------------------------------\nIntercept      8.8791      0.071    125.043      0.000       8.740       9.018\nyears          0.2832      0.035      8.057      0.000       0.214       0.352\n==============================================================================\nOmnibus:                      133.025   Durbin-Watson:                   1.767\nProb(Omnibus):                  0.000   Jarque-Bera (JB):              630.863\nSkew:                           0.385   Prob(JB):                    1.02e-137\nKurtosis:                       6.411   Cond. No.                         4.73\n==============================================================================\n\nWarnings:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[56]:\n\n    \ndef PlotFittedValues(model, results, label=''):\n    years = model.exog[:,1]\n    values = model.endog\n    thinkplot.Scatter(years, values, s=15, label=label)\n    thinkplot.Plot(years, results.fittedvalues, label='model', color='#ff7f00')\n    \ndef PlotLinearModel(daily, name):\n    model, results = RunLinearModel(daily)\n    PlotFittedValues(model, results, label=name)\n    thinkplot.Config(title='Fitted values',\n                     xlabel='Years',\n                     xlim=[-0.1, 3.8],\n                     ylabel='Price per gram ($)')\n    \nname = 'high'\ndaily = dailies[name]\n\nPlotLinearModel(daily, name)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub192\uc740 \ud488\uc9c8\uc758 \ub300\ub9c8\ucd08 \uac00\uaca9 \uc2dc\uacc4\uc5f4\uacfc \uc120\ud615 \ucd5c\uc18c\uc790\uc2b9\uc801\ud569 \uadf8\ub798\ud504. \uadf8\ub7ec\ub098 \uc120\ud615\ud68c\uadc0\ub294 \uc2dc\uacc4\uc5f4 \ubd84\uc11d\uc5d0 \uc801\ud569\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\ub294\ub370 \uadf8 \uc774\uc720\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n\n\uccab\uc9f8\ub85c \uc7a5\uae30\ucd94\uc138\ub97c \uc120\ud615 \ud639\uc740 \ub2e4\ub978 \uac04\ub2e8\ud55c \ud568\uc218\ub85c \uc608\uce21\ud560 \uc774\uc720\uac00 \uc5c6\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uac00\uaca9\uc740\uc218\uc694\uc640 \uacf5\uae09\uc5d0 \uc758\ud574 \uacb0\uc815 \ub41c\ub2e4. \ubaa8\ub450 \uc2dc\uac04\uc5d0 \ub530\ub77c \uc608\uce21\ubd88\uac00\ud55c \ubc29\ud5a5\uc73c\ub85c \ubcc0\ud654 \ud55c\ub2e4.\n\ub458\uc9f8 \uc120\ud615\ud68c\uadc0\ubaa8\ud615\uc740 \ubaa8\ub4e0 \ub370\uc774\ud130\uc5d0 \ub3d9\uc77c\ud55c \uac00\uc911\uce58\ub97c \ub454\ub2e4. \uc608\uce21 \ubaa9\uc801\uc774\ub77c\uba74 \ucd5c\uadfc \ub370\uc774\ud130\uc5d0 \ub354 \ub9ce\uc740 \uac00\uc911\uce58\ub97c \ub450\uc5b4\uc57c \ud55c\ub2e4.\n\ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc120\ud615\ud68c\uadc0\uc758 \uac00\uc815\uc911 \ud558\ub098\ub294 \uc794\ucc28\ub294 \uc0c1\uad00\ub418\uc9c0 \uc54a\ub294 \uc7a1\uc74c\uc774\ub77c\ub294 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub098 \uc2dc\uacc4\uc5f4 \ub370\uc774\ud130\uc5d0\uc11c \uc5f0\uc18d\ub41c \uac12\uc740 \uc0c1\uad00\ub418\uae30 \ub54c\ubb38\uc5d0 \uc885\uc885 \uc774\ub7f0 \uac00\uc815\uc740 \ud2c0\ub9ac\ub2e4.\n\n12.4. \uc774\ub3d9 \ud3c9\uade0(Moving averages)\u00b6\ub300\ubd80\ubd84 \uc2dc\uacc4\uc5f4 \ubd84\uc11d\uc740 \uad00\uce21\ub41c \uacc4\uc5f4\uc774 \ub2e4\uc74c \uc138 \uac00\uc9c0 \uc694\uc18c\ud569\uc774\ub77c\ub294 \uac00\uc815\uc5d0 \uae30\ubc18\ud55c\ub2e4.\n\n\ucd94\uc138(Trend): \uc9c0\uc18d\ub418\ub294 \ubcc0\uacbd \uc0ac\ud56d\uc744 \uc7a1\uc544 \ub0b4\ub294 \ud3c9\ud65c \ud568\uc218(smooth function).\n\uacc4\uc808\uc131(Seasonality): \uc77c\ubcc4, \uc8fc\ubcc4, \uc6d4\ubcc4 \uc8fc\uae30\uc801 \ubcc0\ub3d9 \uc8fc\uae30.\n\uc7a1\uc74c(Noise): \uc7a5\uae30 \ucd94\uc138 \uc8fc\uc704 \ud655\ub960 \ubcc0\ub3d9.\n\n\uc55e\uc808\uc5d0\uc11c \uc0b4\ud3b4\ubd24\ub4ef \ud68c\uadc0\ub294 \uacc4\uc5f4\uc5d0\uc11c \ucd94\uc138\ub97c \ubf51\uc544\ub0b4\ub294 \ubc29\ubc95\uc774\ub2e4. \ud558\uc9c0\ub9cc \ucd94\uc138\ub294 \ucc3e\ub294 \ud6cc\ub96d\ud55c \ubc29\ubc95 \uc911 \ud558\ub098\ub294 \uc774\ub3d9\ud3c9\uade0(moving average)\uc744 \uad6c\ud558\ub294 \uac83\uc774\ub2e4. \uc774\ub3d9\ud3c9\uade0\uc740 \ub370\uc774\ud130\ub97c \uc708\ub3c4\uc6b0(windows) \ub2e8\uc704\ub85c \ub098\ub204\uace0 \uac01 \uc708\ub3c4\uc6b0\uc758 \uac12\uc744 \ud3c9\uade0\ub0b4 \uacc4\uc0b0\ud55c\ub2e4.\n12.5. \uacb0\uce21\uac12(Missing values)\u00b6\uc2dc\uacc4\uc5f4 \ub370\uc774\ud130\ub294 \uc885\uc885 \uc77c\ubcc4, \uc8fc\ubcc4, \uc6d4\ubcc4, \ub144\ubcc4 \uc8fc\uae30(cycle)\ub97c \ub098\ud0c0\ub0b8\ub2e4. \ub2e4\uc74c \uc808\uc5d0\uc11c \uacc4\uc808\uc131\uc744 \uac80\uc815\ud558\ub294 \ubc29\ubc95\uc744 \uc81c\uc2dc\ud55c\ub2e4. \ud558\uc9c0\ub9cc \uacb0\uce21\uac12\uc5d0\ub294 \uc798 \ub3d9\uc791\ud558\uc9c0 \uc54a\ub294\ub2e4. \uadf8\ub798\uc11c \uc774 \ubb38\uc81c\ub97c \uba3c\uc800 \ud574\uacb0\ud574\uc57c\ud55c\ub2e4. \uc774\ub7f0 \uacb0\uce21\uac12\uc744 \ucc44\uc6b0\ub294 \uac00\uc7a5 \uac04\ub2e8\ud558\uace0 \ud754\ud55c \ubc29\ubc95\uc774 \uc774\ub3d9\ud3c9\uade0\uc774\ub2e4.\n\n\n\n\n\n\nIn\u00a0[57]:\n\n    \ndef PlotRollingMean(daily, name):\n    dates = pd.date_range(daily.index.min(), daily.index.max())\n    reindexed = daily.reindex(dates)\n    thinkplot.Scatter(reindexed.ppg, s=15, alpha=0.2, label=name)\n    roll_mean = reindexed.ppg.rolling(30).mean()    \n    thinkplot.Plot(roll_mean, label='rolling mean', color='#ff7f00')\n    plt.xticks(rotation=30)\n    thinkplot.Config(ylabel='price per gram ($)')\n    \nPlotRollingMean(daily, name)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[58]:\n\n    \ndef PlotRollingMean(daily, name):\n    dates = pd.date_range(daily.index.min(), daily.index.max())\n    reindexed = daily.reindex(dates)\n    ewma = reindexed.ppg.ewm(span=30).mean()\n    resid = (reindexed.ppg - ewma).dropna()\n    fake_data = ewma + thinkstats2.Resample(resid, len(reindexed))\n    reindexed.ppg.fillna(fake_data, inplace=True)\n    thinkplot.Scatter(reindexed.ppg, s=15, alpha=0.2, label=name)\n    thinkplot.Plot(ewma, label='rolling mean', color='#ff7f00')\n    plt.xticks(rotation=30)\n    thinkplot.Config(ylabel='price per gram ($)')\n    \nPlotRollingMean(daily, name)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uadf8\ub798\ud504\uc5d0 \uacb0\uce21 \ub370\uc774\ud130\ub97c \ucc44\uc6cc \uc2dc\uac01\ud654\ud55c \uacb0\uacfc\ub97c \ud655\uc778\ud560 \uc218 \uc788\ub2e4. \uc7ac\ud45c\ubcf8 \ucd94\ucd9c\ud55c \uc794\ucc28\uac00 \ubb34\uc791\uc704(random)\ub85c \uacb0\uacfc\ub294 \ub9e4\ubc88 \ub2ec\ub77c\uc9c4\ub2e4. \ub098\uc911\uc5d0 \uacb0\uce21\uac12\uc5d0\uc11c \uc0dd\uc131\ub41c \uc624\ucc28\ub97c \uc5b4\ub5bb\uac8c \ud2b9\uc131\ud654\ud558\ub294\uc9c0 \uc0b4\ud3b4\ubcfc \uac83\uc774\ub2e4.\n12.6. \uacc4\uc5f4\uc0c1\uad00(Serial correlation)\u00b6\ub9cc\uc57d \uc6d4\uc694\uc77c\uc5d0 \ub300\ub9c8\ucd08 \uac00\uaca9\uc774 \ub192\ub2e4\uba74 \ub2e4\uc74c \uba87 \uc77c\ub3d9\uc548 \uac00\uaca9\uc774 \ub192\uc744 \uac83\uc744 \uc608\uc0c1\ub41c\ub2e4. \uadf8\ub9ac\uace0 \ub9cc\uc57d \ub0ae\ub2e4\uba74 \ub0ae\uac8c \uc720\uc9c0\ub420 \uac83\uc744 \uc608\uc0c1 \ud560 \uc218 \uc788\ub2e4. \uc774\uc640 \uac19\uc774 \uac01\uac12\uc774 \ub2e4\uc74c\uac12\uacfc \uc0c1\uad00\uc788\ub294 \ud328\ud134\uc744 \uacc4\uc5f4 \uc0c1\uad00(serial correlation) \uc774\ub77c \ud55c\ub2e4.\n12.7. \uc790\uae30\uc0c1\uad00(Autocorrelation)\u00b6\uc2dc\uac04 \ub610\ub294 \uacf5\uac04\uc801\uc73c\ub85c \uc5f0\uc18d\ub41c \uc77c\ub828\uc758 \uad00\uce21\uce58\ub4e4\uac04\uc5d0 \uc874\uc7ac\ud558\ub294 \uc0c1\uad00\uad00\uacc4\ub2e4.\n12.8. \uc608\uce21\u00b6\uc2dc\uacc4\uc5f4\ubd84\uc11d\uc740 \uc2dc\uac04\uc5d0\ubcc0\ud654\ud558\ub294 \uc2dc\uc2a4\ud15c\uc744 \uc870\uc0ac\ud558\uace0 \ub54c\ub85c\ub294 \uc608\uce21\ub3c4 \ud560\uc218\uc788\ub2e4.\n\n\n\n\n\n\nIn\u00a0[59]:\n\n    \ndef GenerateSimplePrediction(results, years):\n    n = len(years)\n    inter = np.ones(n)\n    d = dict(Intercept=inter, years=years, years2=years**2)\n    predict_df = pd.DataFrame(d)\n    predict = results.predict(predict_df)\n    return predict\n\ndef PlotSimplePrediction(results, years):\n    predict = GenerateSimplePrediction(results, years)\n    thinkplot.Scatter(daily.years, daily.ppg, alpha=0.2, label=name)\n    thinkplot.plot(years, predict, color='#ff7f00')\n    xlim = years[0]-0.1, years[-1]+0.1\n    thinkplot.Config(title='Predictions', xlabel='Years', xlim=xlim,\n                     ylabel='Price per gram ($)', loc='upper right')\n\n\n    \n\n\n\n\n\n\nIn\u00a0[60]:\n\n    \nname = 'high'\ndaily = dailies[name]\n_, results = RunLinearModel(daily)\nyears = np.linspace(0, 5, 101)\nPlotSimplePrediction(results, years)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[61]:\n\n    \ndef SimulateResults(daily, iters=101, func=RunLinearModel):\n    _, results = func(daily)\n    fake = daily.copy()   \n    result_seq = []\n    for _ in range(iters):\n        fake.ppg = results.fittedvalues + thinkstats2.Resample(results.resid)\n        _, fake_results = func(fake)\n        result_seq.append(fake_results)\n    return result_seq\n\ndef GeneratePredictions(result_seq, years, add_resid=False):\n    n = len(years)\n    d = dict(Intercept=np.ones(n), years=years, years2=years**2)\n    predict_df = pd.DataFrame(d)\n    predict_seq = []\n    for fake_results in result_seq:\n        predict = fake_results.predict(predict_df)\n        if add_resid:\n            predict += thinkstats2.Resample(fake_results.resid, n)\n        predict_seq.append(predict)\n    return predict_seq\n\ndef PlotPredictions(daily, years, iters=101, percent=90, func=RunLinearModel):\n    result_seq = SimulateResults(daily, iters=iters, func=func)\n    p = (100 - percent) / 2\n    percents = p, 100-p\n    predict_seq = GeneratePredictions(result_seq, years, add_resid=True)\n    low, high = thinkstats2.PercentileRows(predict_seq, percents)\n    thinkplot.FillBetween(years, low, high, alpha=0.3, color='gray')\n    predict_seq = GeneratePredictions(result_seq, years, add_resid=False)\n    low, high = thinkstats2.PercentileRows(predict_seq, percents)\n    thinkplot.FillBetween(years, low, high, alpha=0.5, color='gray')\n\n\n    \n\n\n\n\n\n\nIn\u00a0[62]:\n\n    \nyears = np.linspace(0, 5, 101)\nthinkplot.Scatter(daily.years, daily.ppg, alpha=0.1, label=name)\nPlotPredictions(daily, years)\nxlim = years[0]-0.1, years[-1]+0.1\nthinkplot.Config(title='Predictions', xlabel='Years', xlim=xlim,\n                   ylabel='Price per gram ($)')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uadf8\ub798\ud504\ub294 \uc120\ud615\uc801\ud569\uc5d0 \uae30\ucd08\ud55c \uc608\uce21, \ud45c\uc9d1\uc624\ucc28, \uc608\uce21\uc624\ucc28\uc5d0 \uae30\uc778\ud55c \ubcc0\ub3d9\uc131\uc744 \uc2dc\uac01\ud654\ud55c\ub2e4. \uc9d9\uc740 \ud68c\uc0c9 \uc9c0\uc5ed\uc740 \ud45c\uc9d1 \uc624\ucc28\uc5d0 \ub300\ud55c 90% \uc2e0\ub8b0\uad6c\uac04\uc744 \ub098\ud0c0\ub0b8\ub2e4. \uc989, \ud45c\uc9d1 \ub54c\ubb38\uc5d0 \ucd94\uc815 \uae30\uc6b8\uae30\uc640 \uc808\ud3b8\uc5d0 \ub300\ud55c \ubd88\ud655\uc2e4\uc131\uc774\ub2e4. \ubc1d\uc740 \ud68c\uc0c9 \uc9c0\uc5ed\uc740 \uc608\uce21\uc624\ucc28\uc5d0 \ub300\ud55c 90% \uc2e0\ub8b0\uad6c\uac04\uc744 \ubcf4\uc5ec \uc8fc\ub294\ub370 \ud45c\uc9d1\uc624\ucc28\uc640 \ud655\ub960 \ubcc0\ub3d9\uc758 \ud569\uc774\ub2e4.\n12.11. \uc6a9\uc5b4\uc0ac\uc804\u00b6\n\uc2dc\uacc4\uc5f4(time series): \uc2dc\uac04(timestamp)\uacfc \uc5f0\uad00\ub41c \ub370\uc774\ud130\uc14b.\n\uc708\ub3c4\uc6b0(window): \uc774\ub3d9\ud3c9\uade0\uc744 \uacc4\uc0b0\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub418\ub294 \uc2dc\uacc4\uc5f4\uc5d0 \uc5f0\uc18d\uac12 \uc11c\uc5f4.\n\uc774\ub3d9\ud3c9\uade0(moving average): \uacb9\uccd0\uc9c0\uc9c0 \uc54a\ub294 \uc77c\ub828\uc758 \uc708\ub3c4\uc6b0\uc5d0 \ub300\ud55c \ud3c9\uade0\uc744 \uacc4\uc0b0\ud568\uc73c\ub85c\uc368 \uc2dc\uacc4\uc5f4\uc5d0 \uc7a0\uc7ac\ud558\ub294 \ucd94\uc138\ub97c \ucd94\uc815\ud558\ub294\ub370 \uc0ac\uc6a9 \ub418\ub294 \uc5ec\ub7ec \ud1b5\uacc4\ub7c9 \uc911\uc758 \ud558\ub098.\n\uc774\ub3d9\ud3c9\uade0(rolling mean): \uac01 \uc708\ub3c4\uc6b0 \ud3c9\uade0\uac12\uc5d0 \uae30\ubc18\ud55c \uc774\ub3d9\ud3c9\uade0.\n\uc9c0\uc218\uac00\uc911\uc774\ub3d9\ud3c9\uade0(exponentially-weighted moving average, EWMA): \uac00\uc911 \ud3c9\uade0\uc5d0 \uae30\ubc18\ud55c \uc774\ub3d9\ud3c9\uade0\uc73c\ub85c \uac00\uc7a5 \ucd5c\uadfc\uac12\uc5d0 \uac00\uc7a5 \ub192\uc740 \uac00\uc911\uce58\ub97c \ub450\uace0 \uc774\uc804 \uac12\uc5d0 \ub300\ud574\uc11c\ub294 \uc9c0\uc218\uc801\uc73c\ub85c \uc904\uc5b4\ub4dc\ub294 \uac00\uc911\uce58\ub97c \ub454\ub2e4.\n\uc2a4\ud32c(span): \uac00\uc911\uce58\uac00 \uc5bc\ub9c8\ub098 \ube68\ub9ac \uc904\uc5b4\ub4dc\ub294\uc9c0\ub97c \uacb0\uc815\ud558\ub294 EWMA \ubaa8\uc218.\n\uacc4\uc5f4\uc0c1\uad00(serial correlation): \ud55c \uc2dc\uacc4\uc5f4\uacfc \uc774\ub3d9\ub41c \ud639\uc740 \uc2dc\ucc28 \uc774\ub3d9\ud55c \uc2dc\uacc4\uc5f4\uacfc \uc0c1\uad00.\n\uc2dc\ucc28(lag): \uacc4\uc5f4 \uc0c1\uad00 \ud639\uc740 \uc790\uae30 \uc0c1\uad00\uc5d0\uc11c \uc774\ub3d9 \ud06c\uae30.\n\uc790\uae30\uc0c1\uad00(autocorrelation): \uc784\uc758\uc758 \uc2dc\uac04\ucc28\uc774\ub97c \uac16\ub294 \uacc4\uc5f4 \uc0c1\uad00\uc5d0 \ub300\ud55c \uc880 \ub354 \uc77c\ubc18\uc801\uc778 \uc6a9\uc5b4.\n\uc790\uae30\uc0c1\uad00\ud568\uc218(autocorrelation function): \uc2dc\ucc28\uc5d0\uc11c \uacc4\uc5f4\uc0c1\uad00\uc73c\ub85c \ub9e4\ud551\ud558\ub294 \ud568\uc218.\n\uc815\uc0c1\uc131(stationary): \ub9cc\uc57d \ubaa8\uc218\uc640 \uc794\ucc28\ubd84\ud3ec\uac00 \uc2dc\uac04\uc5d0 \ub530\ub77c \ubcc0\ud654\ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \ubaa8\ub378\uc774 \uc815\uc0c1\uc131\uc774 \uc788\ub2e4.\n\n13. \uc0dd\uc874\ubd84\uc11d\u00b6\uc0dd\uc874\ubd84\uc11d(Survival analysis)\uc740 \ubb34\uc5b8\uac00 \uc5bc\ub9c8\ub098 \uc9c0\uc18d\ud558\ub294\uc9c0\ub97c \uae30\uc220\ud558\ub294 \ubc29\ubc95\uc774\ub2e4. \uc885\uc885 \uc0ac\ub78c\uc0dd\uba85\uc5f0\uad6c\uc5d0 \uc0ac\uc6a9\ub418\uc9c0\ub9cc, \ub610\ud55c \uae30\uacc4\ub098 \uc804\uc790\ubd80\ud488\uc758 \uc0dd\uc874(survial) \ud639\uc740 \uc880 \ub354 \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uac74 \uc804 \uc2dc\uac04 \uac04\uaca9\uc5d0\ub3c4 \uc801\uc6a9\ub41c\ub2e4.\n\uc0dd\uc874 \uae30\uac04\uc744 \ubd84\uc11d\ud558\uc5ec \uc0dd\uc874\ud568\uc218(survival function)\ub97c \ucd94\uc815\ud558\ub294 \ud1b5\uacc4\uae30\ubc95\uc73c\ub85c \uce58\ub8cc\ubc29\ubc95\uc774\ub098 \uc608\ud6c4 \uc778\uc790 \ub4f1\uc744 \ucd94\uc815\ud558\ub294 \ub370 \uc774\uc6a9\ub41c\ub2e4. \uc2e4\ud5d8 \uae30\uac04 \ub3d9\uc548 \uc57d\ubb3c\ucc98\ub9ac, \uc720\uc804\uc5fc\uae30\uc11c\uc5f4 \ubcc0\uc774 \uc640 \uac19\uc774 \ud2b9\uc815 \uc870\uac74\uc744 \ub9cc\uc871\ud558\ub294 \uc9d1\ub2e8 \ub0b4 \uac1c\uccb4\uac00 \uac01 \uce21\uc815 \uc2dc\uac04\uc5d0\uc11c \uc0b4\uc544\ub0a8\uc544 \uc788\ub294 \ube48\ub3c4\ub85c \ub098\ud0c0\ub0b8\ub2e4.\n\n13.1. \uc0dd\uc874\uace1\uc120(Survival curves)\u00b6\uc0dd\uc874 \uace1\uc120(survival curve; $S(t)$) \ub294 \uc874\uc18d t\ub97c t\ubcf4\ub2e4 \ub354 \uc624\ub798 \uc0dd\uc874\ud560 \ud655\ub960\ub85c \uce58\ud658\ud558\ub294 \ud568\uc218\ub2e4. \ub9cc\uc57d \uc874\uc18d(duration) \ubd84\ud3ec \uc989, \uc218\uba85(lifetimes)\uc744 \uc54c\uace0 \uc788\ub2e4\uba74 \uc0dd\uc874\uace1\uc120\uc744 \ucc3e\ub294 \uac83\uc740\uc880 \ub354 \uc27d\ub2e4. CDF\uc758 \uc5ec\ubd84\ud3ec(complement)\uac00 \ub41c\ub2e4. \uc5ec\uae30\uc11c\ub294 \uc800\uc790\uac00 \ub9cc\ub4e0 survival \ubaa8\ub4c8\uc744 \uc0ac\uc6a9\ud55c\ub2e4.\nNSFG \ub370\uc774\ud130\uc14b\uc5d0\uc11c \uacb0\uacfc \ucf54\ub4dc(outcome code) 1, 3, 4\uc740 \uac01\uac01 \uc815\uc0c1\ucd9c\uc0b0, \uc0ac\uc0b0, \uc720\uc0b0\uc744 \ub098\ud0c0\ub0b8\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 \ubd84\uc11d\uc744 \uc704\ud574\uc11c \uc720\ubc1c\uc720\uc0b0(induced abortion), \uc790\uad81\uc678\uc784\uc2e0(ectopic pregnancy), \uadf8\ub9ac\uace0 \uc784\uc2e0\uc0c1\ud0dc\uc778 \uacbd\uc6b0\ub294 \uc81c\uc678\ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[63]:\n\n    \nimport survival\n\ncomplete = df.query('outcome in [1, 3, 4]').prglngth\ncdf = thinkstats2.Cdf(complete, label='cdf')\n\ndef MakeSurvivalFromCdf(cdf, label=''):\n    ts = cdf.xs\n    ss = 1 - cdf.ps\n    return survival.SurvivalFunction(ts, ss, label)\n\nsf = MakeSurvivalFromCdf(cdf, label='survival')\nthinkplot.Plot(sf)\nthinkplot.Cdf(cdf, alpha=0.2)\nplt.legend()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[63]:\n\n\n\n\n\n<matplotlib.legend.Legend at 0x11391240>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uadf8\ub798\ud504\uc5d0\uc11c \uc784\uc2e0\uae30\uac04 CDF\uc640 \uc0dd\uc874\ud568\uc218\uc758 \uc0c1\ubcf4\uc801 CDF\uac00 \ubcf4\uc5ec\uc9c4\ub2e4.\n13.2. \uc704\ud5d8\ud568\uc218\u00b6\uc0dd\uc874 \ud568\uc218\uc5d0\uc11c \uc704\ud5d8 \ud568\uc218(hazard function)\ub97c \ub3c4\ucd9c\ud560 \uc218 \uc788\ub2e4. \uc784\uc2e0\uae30\uac04\uc5d0 \ub300\ud574\uc11c \uc704\ud5d8 \ud568\uc218\ub294 \uc2dc\uac04 t\uc5d0\uc11c t\uae4c\uc9c0 \uacc4\uc18d \ub418\uace0 \ub098\uc11c t\uc5d0\uc11c \ub05d\ub098\ub294 \uc784\uc2e0 \ube44\uc728\uc774\ub2e4. \uc880 \ub354 \uc815\ud655\ud558\uac8c\ub294 \ub2e4\uc74c\uacfc\uac19\ub2e4.\n$$\\lambda(t) = \\frac{S(t)-S(t+1)}{S(t)}$$\ubd84\uc790\ub294 PMF(t)\ub85c t\uc5d0\uc11c \ub05d\ub098\ub294 \uc218\uba85 \ube44\uc728\uc774\ub2e4. SurvivalFunction\ub294 MakeHazard \ud568\uc218\ub97c \uc81c\uacf5 \ud558\ub294\ub370 \uc704\ud5d8 \ud568\uc218\ub97c \uacc4\uc0b0\ud55c\ub2e4\n13.4. \ucf00\ud50c\ub780-\ub9c8\uc774\uc5b4 \ucd94\uc815(Kaplan-Meier estimation)\u00b6\uce74\ud50c\ub780-\ub9c8\uc774\uc5b4 \uc0dd\uc874\ubd84\uc11d\uc740 \uc0dd\uc874 \ubd84\uc11d\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ud1b5\uacc4 \uae30\ubc95\uc774\ub2e4. \ube44\ubaa8\uc218 \ud1b5\uacc4\ub97c \uc774\uc6a9\ud558\uc5ec \uc0dd\uc874\ud568\uc218\ub97c \ucd94\uc815\ud55c\ub2e4. \ubbf8\uad6d\uc758 \ud1b5\uacc4\ud559\uc790 \ud3f4 \ub9c8\uc774\uc5b4\uc640 \uc5d0\ub4dc\uc6cc\ub4dc \uce74\ud50c\ub780\uc5d0 \uc758\ud574 \uac1c\ubc1c\ub418\uc5c8\ub2e4.\n\n\uc0dd\uc874 \ubd84\uc11d\uc5d0\uc11c \uc911\uc2ec\uc801\uc778 \uc54c\uace0\ub9ac\uc998 \uc911\uc758 \ud558\ub098\uc778 \uce90\ud50c\ub780-\ub9c8\uc774\uc5b4 \ucd94\uc815(Kaplan-Meier estimation)\uc744 \uc54c\uc544\ubcf4\uae30 \uc704\ud574 \uc774\ubc88 \uc608\uc81c\ub294 \uacb0\ud63c\uc744 \ud558\uc9c0 \uc54a\uc740 \ubbf8\ud63c \uc5ec\uc131\uc758 \uad00\uce21 \uc815\ubcf4\ub97c \ud3ec\ud568\ud574 \uc0ac\uc6a9\ud55c\ub2e4.\n13.5. \uacb0\ud63c \uace1\uc120(Marriage curve)\u00b6\uc0ac\uc6a9\ud55c \ub370\uc774\ud130\uc14b\uc5d0\ub294 \ub2e4\uc74c\uc758 \uc815\ubcf4\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\ub2e4.\n\ncmbirth: \uc751\ub2f5\uc790\uc5d0 \ub300\ud55c \uc0dd\ub144\uc6d4\uc77c.\ncmintvw: \uc751\ub2f5\uc790\ub97c \uc778\ud130\ubdf0\ud55c \ub0a0\uc9dc.\ncmmarrhx: \uc751\ub2f5\uc790\uac00 \uacb0\ud63c\ud55c \ub0a0\uc9dc.\nevrmarry: \ub9cc\uc57d \uc751\ub2f5\uc790\uac00 \uc778\ud130\ubdf0\ud55c \ub0a0\uc9dc \uc774\uc804\uc5d0 \uacb0\ud63c\ud588\ub2e4\uba74 1, \uadf8\ub807\uc9c0\uc54a\uc73c\uba74 0.\n\n\n\n\n\n\n\nIn\u00a0[64]:\n\n    \nresp6 = pd.read_csv('../data/2002FemResp.csv')\nresp6.cmmarrhx.replace([9997, 9998, 9999], np.nan, inplace=True)\nresp6['agemarry'] = (resp6.cmmarrhx - resp6.cmbirth) / 12.0\nresp6['age'] = (resp6.cmintvw - resp6.cmbirth) / 12.0\ncomplete = resp6[resp6.evrmarry==1].agemarry.dropna()\nongoing = resp6[resp6.evrmarry==0].age\n\n\n    \n\n\n\n\n\n\nIn\u00a0[65]:\n\n    \nfrom collections import Counter\n\ndef EstimateHazardFunction(complete, ongoing, label='', verbose=False):\n    if np.sum(np.isnan(complete)):\n        raise ValueError(\"complete contains NaNs\")\n    if np.sum(np.isnan(ongoing)):\n        raise ValueError(\"ongoing contains NaNs\")\n    hist_complete = Counter(complete)\n    hist_ongoing = Counter(ongoing)\n    ts = list(hist_complete | hist_ongoing)\n    ts.sort()\n    at_risk = len(complete) + len(ongoing)\n    lams = pd.Series(index=ts, dtype='float64')\n    \n    for t in ts:\n        ended = hist_complete[t]\n        censored = hist_ongoing[t]\n        lams[t] = ended / at_risk\n        if verbose:\n            print(t, at_risk, ended, censored, lams[t])\n        at_risk -= ended + censored\n\n    return survival.HazardFunction(lams, label=label)\n\nhf = EstimateHazardFunction(complete, ongoing) # \uc704\ud5d8\ud568\uc218\nsf = hf.MakeSurvival() # \uc0dd\uc874\ud568\uc218 \ucd94\uc815\n\n\n    \n\n\n\n\n\n\n\n\ucd08\ud63c \uc5f0\ub839\uc5d0 \ub300\ud55c \uc704\ud5d8 \ud568\uc218 \uc2dc\uac01\ud654\n\n\n\n\n\n\nIn\u00a0[66]:\n\n    \nthinkplot.Plot(hf)\nthinkplot.Config(xlabel='Age (years)')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ucd08\ud63c \uc5f0\ub839\uc5d0 \ub300\ud55c \uc0dd\uc874 \ud568\uc218\n\n\n\n\n\n\nIn\u00a0[67]:\n\n    \nthinkplot.Plot(sf)\nthinkplot.Config(xlabel='Age (years)', ylabel='Prob unmarried')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n13.7. \uc2e0\ub8b0\uad6c\uac04\u00b6\uce90\ud50c\ub780-\ub9c8\uc774\uc5b4\ubd84\uc11d(Kaplan-Meier analysis)\uc740\uc0dd\uc874\uace1\uc120\uc5d0\ub300\ud55c\ub2e8\ud558\ub098\uc758\ucd94\uc815\n\uac12\uc744\uc0b0\ucd9c\ud55c\ub2e4. \ud558\uc9c0\ub9cc, \ucd94\uc815\uac12\uc758\ubd88\ud655\uc2e4\uc131\uc744\uc815\ub7c9\ud654\ud558\ub294\uac83\ub3c4\ub610\ud55c\uc911\uc694\ud558\ub2e4\n\ucd08\ud63c\uc5f0\ub839\uc5d0\ub300\ud55c\uc0dd\uc874\ud568\uc218\uc640\uac00\uc911\uc7ac\ud45c\uc9d1\uc5d0\uadfc\uac70\ud55c90% \uc2e0\ub8b0\uad6c\uac04.\n\n\n\n\n\n\nIn\u00a0[68]:\n\n    \ndef EstimateMarriageSurvival(resp):\n    complete = resp[resp.evrmarry == 1].agemarry.dropna()\n    ongoing = resp[resp.evrmarry == 0].age\n    hf = EstimateHazardFunction(complete, ongoing)\n    sf = hf.MakeSurvival()\n    return hf, sf\n\ndef ResampleSurvival(resp, iters=101):\n    _, sf = EstimateMarriageSurvival(resp)\n    thinkplot.Plot(sf)\n    low, high = resp.agemarry.min(), resp.agemarry.max()\n    ts = np.arange(low, high, 1/12.0)\n    ss_seq = []\n    \n    for _ in range(iters):\n        sample = thinkstats2.ResampleRowsWeighted(resp)\n        _, sf = EstimateMarriageSurvival(sample)\n        ss_seq.append(sf.Probs(ts))\n\n    low, high = thinkstats2.PercentileRows(ss_seq, [5, 95])\n    thinkplot.FillBetween(ts, low, high, color='gray', label='90% CI')\n    \nResampleSurvival(resp6)\nthinkplot.Config(xlabel='Age (years)', ylabel='Prob unmarried', xlim=[12, 46],\n                 ylim=[0, 1], loc='upper right')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uadf8\ub9bc\uc740 \uc55e\uc5d0\uc11c \ucd94\uc815\ud55c \uc0dd\uc874\ud568\uc218\uc640 \ud568\uaed8 \ud45c\uc9d1 \uac00\uc911\uce58\uc5d0 \uadfc\uac70\ud55c 90% \uc2e0\ub8b0\uad6c\uac04\uc744 \ud68c\uc0c9\uc120\uc73c\ub85c \ub098\ud0c0\ub0b8 \uac83\uc774\ub2e4. \ud45c\uc9d1 \uac00\uc911\uce58\uc5d0 \uc758\ud574 \ub450 \uace1\uc120\uc0ac\uc774\uc5d0 \ucc28\uc774\uac00 \uc0dd\uae34\ub2e4\ub294 \uac83\uc744 \uc720\ub150\ud558\ub77c.\n13.8. \ucf54\ud638\ud2b8 \ud6a8\uacfc(Cohort effects)\u00b6\uc0dd\uc874 \ubd84\uc11d\uc758 \ubb38\uc81c \uc911 \ud558\ub098\ub294 \ucd94\uc815 \uace1\uc120\uc758 \ub2e4\ub978 \ubd80\ubd84\uc774 \uc751\ub2f5\uc790\uc758 \ub2e4\ub978 \uc9d1\ub2e8\uc5d0 \uae30\ubc18\ud55c\ub2e4\ub294\uac83\uc774\ub2e4. \uc2dc\uc810 t\uc5d0 \uace1\uc120 \ubd80\ubd84\uc740 \uc778\ud130\ubdf0 \ub2f9\uc2dc\uc5d0\ub294 \uc801\uc5b4\ub3c4 \uc751\ub2f5\uc790 \uc5f0\ub839\uc774 \uc801\uc5b4\ub3c4 t\uc778 \uc751\ub2f5\uc790\uc5d0 \uae30\ubc18\ud55c\ub2e4. \uadf8\ub798\uc11c \uace1\uc120\uc758 \uac00\uc7a5 \uc67c\ucabd \ubd80\ubd84\uc740 \ubaa8\ub4e0 \uc751\ub2f5\uc790\ub85c \ubd80\ud130 \ub370\uc774\ud130\uac00 \ud3ec\ud568\ub418\uc5b4\uc788\uace0, \uac00\uc7a5 \uc624\ub978\ucabd\uc5d0\ub294 \uac00\uc7a5 \ub098\uc774\ub4e0 \uc751\ub2f5\uc790\ub9cc \ud3ec\ud568\ub41c\ub2e4.\n\ub370\uc774\ud130\uc758 \ud2b9\uc131\uc774 \uc2dc\uac04\uc5d0 \ub530\ub77c \ubcc0\ud654 \ud558\uc9c0 \uc54a\ub294\ub2e4\uba74 \ubb38\uc81c\uac00 \ub418\uc9c0\uc54a\uc744 \uac83\uc774\ub2e4. \uadf8\ub7ec\ub098 \ucd9c\uc0dd\ud55c \uc138\ub300\uc5d0 \ub530\ub77c \uc5ec\uc131\uc758 \ud63c\uc778 \ud328\ud134\uc740 \ub2e4\ub97c \uac83\uc73c\ub85c \uc774\uae30 \ub54c\ubb38\uc5d0 10\ub144 \ub2e8\uc704\ub85c \uc751\ub2f5\uc790 \uc9d1\ub2e8\uc744 \ub9cc\ub4e4\uc5b4 \ud6a8\uacfc\ub97c \uc870\uc0ac\ud574\ubcf4\uc790.\n\uc774\ub807\uac8c \ube44\uc2b7\ud55c \uc0ac\uac74\uc73c\ub85c \uadf8\ub8f9\ud654\ud55c \uc9d1\ub2e8\uc744 \ucf54\ud638\ud2b8(cohorts)\ub77c \ubd80\ub974\uba70 \uc9d1\ub2e8\uac04 \ucc28\uc774\ub97c \ucf54\ud638\ud2b8 \ud6a8\uacfc(cohort effects)\ub77c \ubd80\ub978\ub2e4.\n\n\n\n\n\n\nIn\u00a0[69]:\n\n    \nresp5 = pd.read_csv('../data/FemResp_1995.csv')\nresp6 = pd.read_csv('../data/FemResp_2002.csv')\nresp7 = pd.read_csv('../data/FemResp_2006.csv')\nresps = [resp5, resp6, resp7]\n\n\n    \n\n\n\n\n\n\nIn\u00a0[70]:\n\n    \ndef AddLabelsByDecade(groups, **options):\n    thinkplot.PrePlot(len(groups))\n    \n    for name, _ in groups:\n        label = '%d0s' % name\n        thinkplot.Plot([15], [1], label=label, **options)\n\ndef EstimateMarriageSurvivalByDecade(groups, **options):\n    thinkplot.PrePlot(len(groups))\n    \n    for _, group in groups:\n        _, sf = EstimateMarriageSurvival(group)\n        thinkplot.Plot(sf, **options)\n\ndef PlotResampledByDecade(resps, iters=11, predict_flag=False, omit=None):\n\n    for i in range(iters):\n        samples = [thinkstats2.ResampleRowsWeighted(resp) \n                   for resp in resps]\n        sample = pd.concat(samples, ignore_index=True)\n        groups = sample.groupby('decade')\n\n        if omit:\n            groups = [(name, group) for name, group in groups \n                      if name not in omit]\n\n        if i == 0:\n            AddLabelsByDecade(groups, alpha=0.7)\n\n        if predict_flag:\n            PlotPredictionsByDecade(groups, alpha=0.1)\n            EstimateMarriageSurvivalByDecade(groups, alpha=0.1)\n        else:\n            EstimateMarriageSurvivalByDecade(groups, alpha=0.2)\n            \nPlotResampledByDecade(resps)\nthinkplot.Config(xlabel='Age (years)', ylabel='Prob unmarried', xlim=[13, 45])\nplt.legend()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[70]:\n\n\n\n\n\n<matplotlib.legend.Legend at 0x13110278>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704\uc758 \uadf8\ub9bc\uc740 \ucf54\ud638\ud2b8\uac04\uc758 \uc0dd\uc874 \ud568\uc218 \uc2dc\uac01\ud654\ub97c \ub098\ud0c0\ub0b8 \uac83\uc73c\ub85c \uba87\uac00\uc9c0 \ud328\ud134\uc774 \ubcf4\uc778\ub2e4.\n\n50\ub144\ub300 \ud0dc\uc5b4\ub09c \uc5ec\uc131\uc758 \ucd08\ud63c \uc5f0\ub839\uc774 \uac00\uc7a5 \ub0ae\ub2e4.\n\uc774\ud6c4 \uc138\ub300\ub4e4\uc758 \ucd08\ud63c \uc5f0\ub839\uc740 \uc810\ucc28 \ub2a6\uc5b4\uc9c0\uace0 \uc788\ub2e4.\n80\ub144\ub300\uc0dd\uc758 \uacbd\uc6b0 25\uc0b4\uc774 \ub118\uc5b4\uc11c \uacb0\ud63c\uc744 \ud558\uc9c0 \uc54a\ub294 \ube44\uc728\uc774 \uc720\uc9c0\ub418\ub294 \uac83\uc774 \ubcf4\uc778\ub2e4.\n\n13.9 \uc678\uc0bd\ubc95(Extrapolation)\u00b6\uc55e\uc5d0\uc11c \ubc30\uc6b4 \uc608\uc2dc\uc5d0\uc11c 80\ub144\ub300 90\ub144\ub300\uc0dd\uc758 \ub370\uc774\ud130\uac00 \ubd80\uc871\ud574 \ucda9\ubd84\ud55c \uace1\uc120\uc758 \uc2dc\uac01\ud654\ub97c \ud560 \uc218 \uc5c6\uc5c8\ub2e4. \ub370\uc774\ud130\ub97c \ube4c\ub824(borrowing)\uc640 \uace1\uc120\uc744 \uc678\uc0bd(extrapolate)\ud574\ubcf4\ub3c4\ub85d \ud558\uc790.\n\n\n\n\n\n\nIn\u00a0[71]:\n\n    \ndef PlotPredictionsByDecade(groups, **options):\n    hfs = []\n    \n    for _, group in groups:\n        hf, sf = EstimateMarriageSurvival(group)\n        hfs.append(hf)\n\n    thinkplot.PrePlot(len(hfs))\n    \n    for i, hf in enumerate(hfs):\n        if i > 0:\n            hf.Extend(hfs[i-1])\n        sf = hf.MakeSurvival()\n        thinkplot.Plot(sf, **options)\n\nPlotResampledByDecade(resps, predict_flag=True)\nthinkplot.Config(xlabel='Age (years)', ylabel='Prob unmarried', xlim=[13, 45])\nplt.legend()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[71]:\n\n\n\n\n\n<matplotlib.legend.Legend at 0x10dacdd8>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n50\ub144\ub300\uc0dd\uc758 \ub370\uc774\ud130\ub97c \ube4c\ub824\uc640 \uc774\ud6c4 \uc138\ub300\uc758 \ucd08\ud63c \uc5f0\ub839\uc744 \ucd94\uc815\ud588\ub2e4. \ube44\ud63c \uc5ec\uc131\uc758 \ube44\uc728\uc774 \uc2dc\ub300\uac00 \ud750\ub97c\uc218\ub85d \ub298\uc5b4\ub0a8\uc774 \ubcf4\uc778\ub2e4.\n13.12. \uc6a9\uc5b4\uc0ac\uc804\u00b6\n\uc0dd\uc874\ubd84\uc11d(survival analysis): \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uac74\uc774 \uc77c\uc5b4\ub098\uae30\uae4c\uc9c0 \uc2dc\uac04\uc744 \uae30\uc220\ud558\uace0 \uc608\uce21\ud558\ub294 \ubc29\ubc95.\n\uc0dd\uc874\uace1\uc120(survival curve): \uc2dc\uc810t\uc758 t\uc758 \uc0dd\uc874 \ud655\ub960\ub85c \uce58\ud658\ud558\ub294 \ud568\uc218.\n\uc704\ud5d8\ud568\uc218(hazard function): \uc2dc\uc810t\uc758 t\uc2dc\uc810\uae4c\uc9c0 \uc0dd\uc874\ud55c \uc0ac\ub78c\uc774 t\uc2dc\uc810\uc5d0\uc11c \uc0ac\ub9dd\ud55c \ube44\uc728\uc744 \uce58\ud658\ud558\ub294 \ud568\uc218.\n\uce90\ud50c\ub780-\ub9c8\uc774\uc5b4 \ucd94\uc815(Kaplan-Meier estimation): \uce74\ud50c\ub780-\ub9c8\uc774\uc5b4 \uc0dd\uc874\ubd84\uc11d\uc740 \uad00\ucc30 \uc2dc\uac04\uc5d0 \ub530\ub77c\uc11c \uc0ac\uac74\uc774 \ubc1c\uc0dd\ud55c \uc2dc\uc810\uc5d0\uc11c\uc758 \uc0ac\uac74 \ubc1c\uc0dd\ub960\uc744 \uacc4\uc0b0\ud558\ub294 \ubc29\ubc95\uc774\ub2e4.\n\ucf54\ud638\ud2b8(cohort): \ube44\uc2b7\ud55c \uc18d\uc131\uc73c\ub85c \uadf8\ub8f9\ud654\ub41c \uc9d1\ub2e8.\n\ucf54\ud638\ud2b8 \ud6a8\uacfc(cohort effect): \ucf54\ud638\ud2b8 \uc0ac\uc774\uc758 \ucc28\uc774.\n\n14. \ud574\uc11d\uc801 \ubc29\ubc95(Analytic methods)\u00b6\ud574\uc11d\uc801 \ubc29\ubc95\uc774\ub780 \ub17c\ub9ac\uc801\uc778 \ucd94\ub860\uc744 \ud1b5\ud574 \ud1b5\uacc4 \ubb38\uc81c\ub97c \ud480\uc5b4\uac00\ub294 \uacfc\uc815\uc774\ub2e4. \uc774\ubc88 \uc7a5\uc5d0\uc11c \ud574\uc11d\uc801 \ubc29\ubc95 \uc77c\ubd80\ub97c \uc124\uba85\ud558\uace0 \uc5b4\ub5bb\uac8c \ub3d9\uc791\ud558\ub294\uc9c0 \uc54c\uc544\ubcf8\ub2e4.\n14.1. \uc815\uaddc\ubd84\ud3ec\u00b6\uc778\uac04\uacfc \uc790\uc5f0 \uc138\uc0c1\uc5d0\uc11c \uc77c\uc5b4\ub098\ub294 \uc218\ub9ce\uc740 \uc77c\uc744 \uc124\uba85\ud558\ub294 \ud575\uc2ec \uac1c\ub150\uc73c\ub85c \uc815\uaddc\ubd84\ud3ec\ub294 \ud3c9\uade0\uac12\uc744 \uae30\uc900\uc73c\ub85c \uc88c\uc6b0 \ub300\uce6d \ud615\ud0dc\uac00 \ub098\ud0c0\ub098\uba70, \uc88c\uc6b0 \uadf9\ub2e8\uc73c\ub85c \uac08\uc218\ub85d \uae09\uaca9\ud558\uac8c \uc218\uce58\uac00 \ub0ae\uc544\uc9c0\ub294 \ud2b9\uc9d5\uc774 \uc788\ub2e4.\n14.2. \ud45c\uc9d1\ubd84\ud3ec\u00b6\ud1b5\uacc4\uc758 \uc758\uc0ac\uacb0\uc815\uc744 \uc704\ud55c \uc774\ub860\uc801 \ubd84\ud3ec\ub85c \uc774\ub860\uc801\uc73c\ub85c \ud45c\ubcf8\uc758 \ud06c\uae30\uac00 n\uc778 \ud45c\ubcf8\uc744 \ubb34\ud55c\ud788 \ubc18\ubcf5 \ucd94\ucd9c\ud55c \ud6c4 \ubb34\ud55c\uac1c\uc758 \ud45c\ubcf8\ub4e4\uc758 \ud3c9\uade0\uc744 \uac00\uc9c0\uace0 \uadf8\ub9b0 \ubd84\ud3ec\uc774\ub2e4.\n14.4. \uc911\uc2ec\uadf9\ud55c\uc815\ub9ac\u00b6\ub9cc\uc57d \uac12\uc758 \ubd84\ud3ec\uac00 \ud3c9\uade0(\u00b5), \ud45c\uc900\ud3b8\ucc28(\u03c3)\ub97c \uac16\ub294\ub2e4\uba74 \ud569 \ubd84\ud3ec\ub294 \uadfc\uc0ac\uc801\uc73c\ub85c $N(n\u00b5, n\u03c32)$\uc774 \ub41c\ub2e4\ub294 \uac83\uc774 \uc911\uc2ec\uadf9\ud55c \uc815\ub9ac\uc758 \uc758\ubbf8\ub2e4.\n\uc911\uc2ec\uadf9\ud55c\uc815\ub9ac(Central Limit Theorem, \uc774\ud558 CLT)\ub294 \ud1b5\uacc4 \ubd84\uc11d\uc5d0 \uac00\uc7a5 \uc720\uc6a9\ud55c \ub3c4\uad6c\uc911 \ud558\ub098\ub85c \uba87\uac00\uc9c0 \uc8fc\uc758\ud560 \uc810\uc740 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n\n\uac12\uc740 \ub3c5\ub9bd\uc801\uc73c\ub85c \ucd94\ucd9c \ub418\uc5b4\uc57c \ud55c\ub2e4. \ub9cc\uc57d \uac12\ub4e4\uc774 \uc11c\ub85c \uc0c1\uad00 \ub41c\ub2e4\uba74 CLT\uc744 \uc801\uc6a9 \ud560 \uc218 \uc5c6\ub2e4.\n\uac12\ub4e4\uc740 \ub3d9\uc77c\ud55c \ubd84\ud3ec\uc5d0\uc11c \ub098\uc640\uc57c \ud558\uba70 \uc720\ud55c\ud55c \ud3c9\uade0\uacfc \ubd84\uc0b0\uc744 \uac16\ub294 \ubd84\ud3ec\ub97c \uac00\uc838\uc57c\ud55c\ub2e4. \uadf8\ub798\uc11c \ub300\ubd80\ubd84 \ud30c\ub808\ud1a0 \ubd84\ud3ec\ub294 \ud574\ub2f9\ub418\uc9c0 \uc54a\ub294\ub2e4.\n\uc218\ub834\uc758 \uc18d\ub3c4\ub294 \ubd84\ud3ec \uc65c\ub3c4\uc5d0 \uc758\uc874 \ud55c\ub2e4. \uc9c0\uc218\ubd84\ud3ec\uc5d0\uc11c \ub098\uc628 \uac12\ub4e4\uc758 \ud569\uc740 \uc791\uc740 n\uc5d0 \ub300\ud574\uc11c \uc218\ub834\ud55c\ub2e4. \ub85c\uadf8\uc815\uaddc\ubd84\ud3ec\uc5d0\uc11c \ub098\uc628\uac12\ub4e4\uc758 \ud569\uc740 \ub354 \ucee4\ub2e4\ub780 \ud06c\uae30\uac00 \ud544\uc694 \ud558\ub2e4.\n\n14.5. \uc911\uc2ec\uadf9\ud55c\uc815\ub9ac \uac80\uc815\u00b6\uc9c0\uc218 \ubd84\ud3ec\uac12\uc758 \ud569\uc5d0 \ub300\ud55c \ubd84\ud3ec\ub97c \uac80\uc815\ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[72]:\n\n    \ndef MakeExpoSamples(beta=2.0, iters=1000):\n    samples = []\n    for n in [1, 10, 100]:\n        sample = [np.sum(np.random.exponential(beta, n))\n                  for _ in range(iters)]\n        samples.append((n, sample))\n    return samples\n\ndef NormalPlotSamples(samples, plot=1, ylabel=''):\n    for n, sample in samples:\n        thinkplot.SubPlot(plot)\n        thinkstats2.NormalProbabilityPlot(sample)\n\n        thinkplot.Config(title='n=%d' % n, legend=False, xticks=[],\n                         yticks=[], xlabel='random normal variate',\n                         ylabel=ylabel)\n        plot += 1\n        \nthinkplot.PrePlot(num=3, rows=2, cols=3)\nsamples = MakeExpoSamples()\nNormalPlotSamples(samples, plot=1,ylabel='sum of expo values')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ubc18\uba74\uc5d0 \ud30c\ub808\ud1a0\ubd84\ud3ec\uc758 \uacbd\uc6b0\ub294 \ub2e4\uc74c\uacfc \uac19\ub2e4.\n\n\n\n\n\n\nIn\u00a0[73]:\n\n    \ndef MakeParetoSamples(alpha=1.0, iters=1000):\n    samples = []\n\n    for n in [1, 10, 100]:\n        sample = [np.sum(np.random.pareto(alpha, n))\n                  for _ in range(iters)]\n        samples.append((n, sample))\n    return samples\n\nthinkplot.PrePlot(num=3, rows=2, cols=3)\nsamples = MakeParetoSamples()\nNormalPlotSamples(samples, ylabel='sum of Pareto values')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud30c\ub808\ud1a0 \ubd84\ud3ec\ub294 \ub85c\uadf8 \uc815\uaddc\ubd84\ud3ec\ubcf4\ub2e4 \ub354 \uae30\uc6b8\uc5b4\uc9d0\uc774 \uc2ec\ud558\ub2e4. \ubaa8\uc218\uc5d0 \ub530\ub77c \ub9ce\uc740 \ud30c\ub808\ud1a0 \ubd84\ud3ec\ub294 \uc720\ud55c \ud3c9\uade0\uacfc \ubd84\uc0b0\uc744 \uac16\uc9c0 \ubabb\ud55c\ub2e4. \ub530\ub77c\uc11c \uc911\uc2ec\uadf9\ud55c\uc815\ub9ac\uac00 \uc801\uc6a9 \ub418\uc9c0 \uc54a\ub294\ub2e4. \uc2ec\uc9c0\uc5b4 n=100\n\uc77c\ub54c \uc815\uaddc \ud655\ub960 \uadf8\ub9bc\uc740 \uc9c1\uc120\uacfc \uac70\ub9ac\uac00 \ub9e4\uc6b0 \uba40\ub2e4.\n14.7. \uc0c1\uad00\uac80\uc815\u00b6\uc55e\uc11c \uc2e0\uc0dd\uc544 \uccb4\uc911\uacfc \uc0b0\ubaa8 \uc5f0\ub839\uc0ac\uc774 \uc0c1\uad00\uc744 \uacc4\uc0b0\ud558\ub294\ub370 \uc21c\uc5f4 \uac80\uc815(permutationtest)\uc744 \uc0ac\uc6a9 \ud574 p-value\uac00 0.001 \ubcf4\ub2e4 \uc791\uc544 \ud1b5\uacc4\uc801\uc73c\ub85c \uc720\uc758\ud558\ub2e4\ub294 \uacb0\ub860\uc740 \ub0b4\ub838\ub2e4. \uc774\uc81c \ud574\uc11d\uc801 \ubc29\ubc95\uc744 \ud1b5\ud574 \uac19\uc740 \ubd84\uc11d\uc744 \uc218\ud589\ud574\ubcf4\uc790.\n\n\n\n\n\n\nIn\u00a0[74]:\n\n    \nimport scipy\n\ndef StudentCdf(n):\n    ts = np.linspace(-3, 3, 101)\n    ps = scipy.stats.t.cdf(ts, df=n-2)\n    rs = ts / np.sqrt(n - 2 + ts**2)\n    return thinkstats2.Cdf(rs, ps)\n\ndef ResampleCorrelations(live):\n    live2 = live.dropna(subset=['agepreg', 'totalwgt_lb'])\n    data = live2.agepreg.values, live2.totalwgt_lb.values\n    ht = CorrelationPermute(data)\n    p_value = ht.PValue()\n    return len(live2), ht.actual, ht.test_cdf\n\nn, r, cdf = ResampleCorrelations(live_baby)\n\nmodel = StudentCdf(n)\nthinkplot.Plot(model.xs, model.ps, color='gray', alpha=0.5, label='Student t')\nthinkplot.Cdf(cdf, label='sample')\nthinkplot.Config(xlabel='correlation', ylabel='CDF', legend=True, loc='lower right')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uadf8\ub9bc\uc740 \uc7ac\ud45c\ubcf8\ucd94\ucd9c\ub85c \uc0dd\uc131\ud55c \ubd84\ud3ec\ub97c \ub530\ub978 \ubd84\ud3ec\ub97c \ubcf4\uc5ec\uc900\ub2e4. \ub450 \ubd84\ud3ec\uac00 \uac70\uc758 \ub3d9\uc77c(iden\ntical)\ud558\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4. \ub530\ub77c\uc11c \uc2e4\uc81c \ubd84\ud3ec\uac00 \uc815\uaddc \ubd84\ud3ec\ub294 \uc544\ub2c8\uc9c0\ub9cc, \ud53c\uc5b4\uc2a8\uc0c1\uad00\uacc4\uc218\ub294\ud45c\ubcf8\ud3c9\uade0\uacfc \ubd84\uc0b0\uc5d0 \uae30\ubc18\ud558\uba70 \uc911\uc2ec\uadf9\ud55c\uc815\ub9ac\uc5d0 \uc758\ud574 \uac12\uc744 \uacc4\uc0b0\ud560 \uc218 \uc788\ub2e4.\n\n\n\n\n\n\nIn\u00a0[75]:\n\n    \nt = r * np.sqrt((n-2) / (1-r**2))\np_value = 1 - scipy.stats.t.cdf(t, df=n-2)\nprint(r, p_value)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n0.06883397035410908 2.861466619208386e-11\n\n\n\n\n\n\n\n\n\n\n\np-value \uacb0\uacfc\ub294 \ub9e4\uc6b0\uc791\ub2e4. \ub530\ub77c\uc11c \ud574\uc11d\uc801 \ubc29\ubc95\uc744 \ud1b5\ud574\uc11c\ub3c4 \uc2e0\uc0dd\uc544\uc758 \uccb4\uc911\uacfc \uc0b0\ubaa8\uc758 \ub098\uc774\uc5d0\ub294 \ud1b5\uacc4\uc801 \uc720\uc758\uc131\uc774 \uc788\ub2e4\uace0 \uacb0\ub860\ub0b4\ub9b4 \uc218 \uc788\ub2e4.\n14.8. \uce74\uc774\uc81c\uacf1 \uac80\uc815\u00b6\uce74\uc774\uc81c\uacf1 \ud1b5\uacc4\ub7c9\uc740 \uae30\ub300\uac12\uacfc \uc815\uaddc\ud654\ub41c \ucd1d \ud3b8\ucc28\ub294 \uce21\uc815\ud55c\ub2e4. \uce74\uc774\uc81c\uacf1 \ud1b5\uacc4\ub7c9\uc774 \ub110\ub9ac \uc0ac\uc6a9\ub418\ub294 \uc774\uc720\ub294 \uadc0\ubb34\uac00\uc124 \uc544\ub798\uc5d0 \ud45c\uc9d1\ubd84\ud3ec\uac00 \ud574\uc11d\uc801\uc774\uae30 \ub54c\ubb38\uc774\ub2e4. scipy \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud574 \uce74\uc774\uc81c\uacf1 \uac80\uc815\uc744 \uc27d\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4.\n\n\n\n\n\n\nIn\u00a0[76]:\n\n    \nfrom scipy.stats import chi2_contingency\ndata = [[30, 10], [35, 5], [28, 12], [20, 20]]\nchi2, pval, dof, expected = chi2_contingency(data)\nprint(f'\uce74\uc774\uc81c\uacf1 \uac80\uc815\uc758 p-value\ub294 {pval} \uc774\ub2e4')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\uce74\uc774\uc81c\uacf1 \uac80\uc815\uc758 p-value\ub294 0.002812834559546625 \uc774\ub2e4\n\n\n\n\n\n\n\n\n\n\n\n14.9. \ud574\uc11d\uc801 \ubc29\ubc95\uc758 \uc7a5\uc810\u00b6\n\ud574\uc11d\uc801 \ubc29\ubc95\uc740 \uc124\uba85\uacfc \uc774\ud574\ud558\uae30 \ub354 \uc27d\ub2e4. \uadc0\ubb34 \uac00\uc124\uc744 \uc2dc\ubbac\ub808\uc774\uc158\ud558\uace0 \uac80\uc815 \ud1b5\uacc4\ub7c9\uc744 \uacc4\uc0b0\ud558\ub294\uac83\uc774 \uc880 \ub354 \uba85\ud655\ud558\uae30 \ub54c\ubb38\uc774\ub2e4.\n\uc880 \ub354 \uac15\uac74\ud55c \ubaa8\ub378\uc744 \uc0dd\uc131\ud55c\ub2e4. \ud574\uc11d\uc801 \ubc29\ubc95\uc740 \ub354 \uc801\uc740 \uac00\uc815\uc744 \uc694\uad6c\ud558\uace0 \uc880 \ub354 \uc27d\uac8c \ubaa8\ub378\uc744 \ud655\uc7a5\ud560 \uc218 \uc788\ub2e4.\n\ud574\uc11d\uc801 \ubc29\ubc95\uc740 \ub514\ubc84\uadf8(debuggable)\ud560 \uc218 \uc788\ub2e4. \uac80\uc99d \ubc0f \ud14c\uc2a4\ud2b8(incremental development and testing)\ub97c \ud560 \uc218 \uc788\uc5b4 \uacb0\uacfc\uc5d0 \uc2e0\ub8b0\ub97c \uc900\ub2e4.\n\n\uadf8\ub7ec\ub098 \ud574\uc11d\uc801 \ubc29\ubc95\uc5d0 \uc7a5\uc810\ub9cc \uc788\ub294 \uac83\uc740 \uc544\ub2c8\ub2e4. \ud574\uc11d\uc801 \ubc29\ubc95\uc740 \uacc4\uc0b0\uc774 \uc624\ub798 \uac78\ub9b0\ub2e4\ub294 \ub2e8\uc810\uc774 \uc788\ub2e4.\n15. \ub9c8\uce58\uba70\u00b6Thinkstat2\uc740 \ubb34\ub8cc\ub85c \uacf5\uac1c\ub41c \ud1b5\uacc4\ud559 \ucc45\uc73c\ub85c \uc601\uc5b4\ub85c \uc791\uc131\ub418\uc5b4 \uc788\ub2e4. \ucc45\uc758 \ubc88\uc5ed\uc740 \uc624\ub798\uc804  \uc774\uad11\ucd98 \uc528\uac00 \uc778\ud130\ub137\uc5d0 \uacf5\uac1c\ud558\uc600\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 \ud574\ub2f9 \ubc88\uc5ed\ubcf8\uc758 \uc5b4\uc0c9\ud55c \ud45c\ud604\uc744 \uc218\uc815\ud558\uace0 \ub0b4\uc6a9\uc744 \uc694\uc57d\ud574 \uc815\ub9ac\ud55c \uac83\uc774\ub2e4.",
      "tags": "Python,thinkstat,\ud1b5\uacc4\ud559",
      "url": "https://partrita.github.io/posts/thinkstat2/"
    },
    {
      "title": "Isolation forest\uc744 \uc774\uc6a9\ud55c \uc774\uc0c1\ud0d0\uc9c0",
      "text": "1. \uc774\uc0c1 \ud0d0\uc9c0(Anomaly detection)\u00b6\uc774\uc0c1 \ud0d0\uc9c0(anomaly detection)\ub780 \uc790\ub8cc\uc5d0\uc11c \ub2e4\ub978 \ud328\ud134\uc744 \ubcf4\uc774\ub294 \uc790\ub8cc\ub97c \ucc3e\ub294 \uac83\uc744 \ub9d0\ud569\ub2c8\ub2e4. \uc774\ub7f0 \ub370\uc774\ud130\ub97c \uc774\uc0c1\uac12(anomaly)\ub77c \ud558\uba70 \uc774\uc0c1 \ud0d0\uc9c0\ub294 \uc0ac\uae30 \ud0d0\uc9c0, \uce68\uc785 \ud0d0\uc9c0, \uc548\uc804 \uad00\ub9ac\ub97c \ud3ec\ud568\ud55c \ub2e4\uc591\ud55c \ubd84\uc57c\uc5d0 \ub110\ub9ac \ud65c\uc6a9\ub41c\ub2e4.\n2. \uc774\uc0c1\uc758 \uc885\ub958\u00b62.1. Point anomaly\u00b6\ub370\uc774\ud130\uc14b \ub0b4\uc5d0 \ud558\ub098\uc758 \ub370\uc774\ud130\uac00 \ub098\uba38\uc9c0\uc5d0 \ub300\ud574 \uc774\uc0c1\ud558\ub2e4\uace0 \ud310\ub2e8\ub418\ub294 \uacbd\uc6b0, \ud754\ud788 \uc544\uc6c3\ub77c\uc774\uc5b4(Outlier)\ub77c\uace0 \ubd80\ub978\ub2e4.\n2.2. Collective anomaly\u00b6\ub370\uc774\ud130\uc14b \ub0b4\uc5d0 \uc5ec\ub7ec \ub370\uc774\ud130 \ud3ec\uc778\ud2b8\uac00 \uc774\uc0c1\ud558\ub2e4\uace0 \ud310\ub2e8\ub418\ub294 \uacbd\uc6b0\n2.3. Contextual anomaly\u00b6\uc804\uccb4\uc801\uc778 \ub370\uc774\ud130\uc14b\uc758 \ub9e5\ub77d\uc744 \uace0\ub824\ud588\uc744\ub54c \uc774\uc0c1\ud558\ub2e4\uace0 \ud310\ub2e8\ub418\ub294 \uacbd\uc6b0\n3. Isolation forest\u00b6\uae30\uacc4\ud559\uc2b5\uc73c\ub85c \uc774\uc0c1\uc744 \ud0d0\uc9c0\ud558\ub294 \ub2e4\uc591\ud55c \uc54c\uace0\ub9ac\uc998\uc774 \uc874\uc7ac\ud558\uace0 \ubb38\uc81c \ub9c8\ub2e4 \uc801\ud569\ud55c \uc54c\uace0\ub9ac\uc998\uc744 \uc120\ud0dd\ud558\ub294 \uac83\uc774 \uc911\uc694\ud558\ub2e4. \uc5ec\uae30\uc5d0\uc11c\ub294 \ubc00\ub3c4\uae30\ubc18\uc73c\ub85c \uc774\uc0c1 \ud0d0\uc9c0\ub97c \ud558\ub294 Isolation forest\uc758 \uc608\uc81c\ub97c \ubc30\uc6b4\ub2e4.\nIsolation forest\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \ub370\uc774\ud130\uc14b\uc744 \uc758\uc0ac\uacb0\uc815\ub098\ubb34(Decision Tree) \ud615\ud0dc\ub85c \ud45c\ud604\ud574 \uc815\uc0c1\uac12\uc744 \ubd84\ub9ac\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc758\uc0ac\uacb0\uc815\ub098\ubb34\ub97c \uae4a\uc219\ud558\uac8c \ud0c0\uace0 \ub0b4\ub824\uac00\uc57c \ud558\uace0, \ubc18\ub300\ub85c \uc774\uc0c1\uac12\uc740 \uc758\uc0ac\uacb0\uc815\ub098\ubb34 \uc0c1\ub2e8\ubd80\uc5d0\uc11c \ubd84\ub9ac\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc744 \uc774\uc6a9\ud55c\ub2e4.\n\uc774 \ud2b9\uc131\uc744 \uc0ac\uc6a9\ud574 \uc758\uc0ac\uacb0\uc815\ub098\ubb34\ub97c \uba87 \ud68c \ud0c0\uace0 \ub0b4\ub824\uac00\uc57c \ubd84\ub9ac\ub418\ub294\uac00\ub97c \uae30\uc900\uc73c\ub85c \uc815\uc0c1\uacfc \uc774\uc0c1\uc744 \ubd84\ub9ac\ud55c\ub2e4.\nIsolation forest\uc758 \uc7a5\uc810\n\n\uad70\uc9d1\uae30\ubc18 \uc774\uc0c1\ud0d0\uc9c0 \uc54c\uace0\ub9ac\uc998\uc5d0 \ube44\ud574 \uacc4\uc0b0\ub7c9\uc774 \ub9e4\uc6b0 \uc801\ub2e4\n\uac15\uac74\ud55c(Robust)\ud55c \ubaa8\ub378\uc744 \ub9cc\ub4e4 \uc218 \uc788\ub2e4\n\n4. \uc608\uc81c \uc0b4\ud3b4\ubcf4\uae30\u00b64.1. \uac00\uc7a5 \ub2e8\uc21c\ud55c \uc608\uc81c\u00b6\uba3c\uc800 \uc0ac\uc6a9\ud560 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc628\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\nsns.set_style(\"darkgrid\")\nfrom sklearn.ensemble import IsolationForest\n\n\n    \n\n\n\n\n\n\n\n\uac04\ub2e8\ud55c \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nrng = np.random.RandomState(42)\n# Generating training data \nX_train = 0.2 * rng.randn(1000, 2)\nX_train = np.r_[X_train + 3, X_train]\nX_train = pd.DataFrame(X_train, columns = ['x1', 'x2'])\n# Generating new, 'normal' observation\nX_test = 0.2 * rng.randn(200, 2)\nX_test = np.r_[X_test + 3, X_test]\nX_test = pd.DataFrame(X_test, columns = ['x1', 'x2'])\n# Generating outliers\nX_outliers = rng.uniform(low=-1, high=5, size=(50, 2))\nX_outliers = pd.DataFrame(X_outliers, columns = ['x1', 'x2'])\n\n\n    \n\n\n\n\n\n\n\n\uc0dd\uc131\ud55c \ub370\uc774\ud130\uc14b\uc744 \uc2dc\uac01\ud654\ud574 \uc0b4\ud3b4\ubcf8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nplt.rcParams['figure.figsize'] = [10, 10]\np1 = plt.scatter(X_train.x1, X_train.x2, c='white', s=20*4, edgecolor='k', label='training observations')\n# p2 = plt.scatter(X_test.x1, X_test.x2, c='green', s=20*4, edgecolor='k', label='new regular obs.')\np3 = plt.scatter(X_outliers.x1, X_outliers.x2, c='red', s=20*4, edgecolor='k', label='new abnormal obs.')\n\nplt.legend()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n<matplotlib.legend.Legend at 0xd059518>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nscikit-learn\uc758 IsolationForest \ud568\uc218\ub97c \uc774\uc6a9\ud574 \ud559\uc2b5 \ubaa8\ub378\uc744 \ub9cc\ub4e0\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nclf = IsolationForest(max_samples=100, contamination = 0.1, random_state=42)\nclf.fit(X_train)\ny_pred_train = clf.predict(X_train)\ny_pred_test = clf.predict(X_test)\ny_pred_outliers = clf.predict(X_outliers)\n\n\n    \n\n\n\n\n\n\n\n\ud559\uc2b5\ub41c \ubaa8\ub378\uc744 \uac00\uc9c0\uace0 X_outliers \ub370\uc774\ud130\uc14b\uc758 \uc774\uc0c1 \ud0d0\uc9c0\ub97c \ud574\ubcf4\uace0 \uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \ub098\ud0c0\ub0b8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nX_outliers = X_outliers.assign(y = y_pred_outliers)\np1 = plt.scatter(X_train.x1, X_train.x2, c='white',\n                 s=20*4, edgecolor='k', label=\"training observations\")\np2 = plt.scatter(X_outliers.loc[X_outliers.y == -1, ['x1']], \n                 X_outliers.loc[X_outliers.y == -1, ['x2']], \n                 c='red', s=20*4, edgecolor='k', label=\"detected outliers\")\np3 = plt.scatter(X_outliers.loc[X_outliers.y == 1, ['x1']], \n                 X_outliers.loc[X_outliers.y == 1, ['x2']], \n                 c='green', s=20*4, edgecolor='k', label=\"detected regular obs\")\nplt.legend()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n<matplotlib.legend.Legend at 0xd2db630>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud559\uc2b5 \ubaa8\ub378\uc758 \uc815\ud655\ub3c4\ub97c \uc218\uce58\ub85c \ub098\ud0c0\ub0b4\ubcf8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nprint(\"\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \uc815\ud655\ub3c4:\", list(y_pred_test).count(1)/y_pred_test.shape[0])\nprint(\"\uc774\uc0c1\uce58 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \uc815\ud655\ub3c4:\", list(y_pred_outliers).count(-1)/y_pred_outliers.shape[0])\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \uc815\ud655\ub3c4: 0.905\n\uc774\uc0c1\uce58 \ub370\uc774\ud130\uc14b\uc5d0\uc11c \uc815\ud655\ub3c4: 0.96\n\n\n\n\n\n\n\n\n\n\n\n4.2. \ub354 \ubcf5\uc7a1\ud55c \uc608\uc81c\u00b6\uc880 \ub354 \uc2e4\uc6a9\uc801\uc778 \uc608\uc81c\ub85c \uc9c1\uc5c5\uc5d0 \ub530\ub978 \uae09\uc5ec\ub97c \uc870\uc0ac\ud55c \ub370\uc774\ud130\uc14b\uc744 \uac00\uc9c0\uace0 \uc774\uc0c1 \ud0d0\uc9c0\ub97c \ud574\ubcf4\uc790. \uba3c\uc800 \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 \ub370\uc774\ud130\uc14b(jobtitle_pay.csv)\uc744 \ubd88\ub7ec\uc628\ub2e4.\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn.ensemble import IsolationForest\n%matplotlib inline\n\nsalary = pd.read_csv('../data/jobtitle_pay.csv')\nsalary.tail()\ndf = salary.copy()\n\n\n    \n\n\n\n\n\n\n\n\uc0dd\uc131\ud55c \ub370\uc774\ud130\ud504\ub808\uc784\uc758 \ubaa8\uc591\uc744 \uc0b4\ud3b4\ubcf4\uc790.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \ndf.head()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      JobTitle\n      TotalPay\n    \n  \n  \n    \n      0\n      Transit Operator\n      148711.28\n    \n    \n      1\n      Transit Operator\n      146680.39\n    \n    \n      2\n      Transit Operator\n      145024.94\n    \n    \n      3\n      Transit Operator\n      144704.29\n    \n    \n      4\n      Transit Operator\n      144557.78\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub370\uc774\ud130\uc14b\uc758 \uccab\ubc88\uc9f8 \uc5f4\uc5d0\ub294 \uc9c1\uc5c5\uc758 \uc774\ub984(JobTitle)\uc774 \ub450\ubc88\uc9f8 \uc5f4\uc5d0\ub294 \uc5f0\ubd09(TotalPay)\uac00 \ub2ec\ub7ec\ud654 \uae30\uc900\uc73c\ub85c \ub098\uc640 \uc788\ub2e4. \uc774\uc81c \ub370\uc774\ud130\uc14b\uc5d0 \uc874\uc7ac\ud558\ub294 \uc9c1\uc5c5\uc758 \uc885\ub958\uc640 \uac01\uac01 \uba87\uba85\uc758 \ub370\uc774\ud130\uac00 \uc788\ub294\uc9c0 \ucd9c\ub825\ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \ndf['JobTitle'].value_counts()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\nTransit Operator                9424\nSpecial Nurse                   4389\nRegistered Nurse                3736\nPublic Svc Aide-Public Works    2518\nPolice Officer 3                2421\nCustodian                       2418\nFirefighter                     2359\nRecreation Leader               1971\nPatient Care Assistant          1945\nName: JobTitle, dtype: int64\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uacb0\uacfc\ub97c \ud1b5\ud574 \ucd1d 9\uac1c\uc758 \uc9c1\uc5c5\uc774 \ub9ce\uac1c\ub294 9424\uba85\uc758 \ub370\uc774\ud130\uc5d0\uc11c \uc801\uac8c\ub294 1945\uba85\uc758 \ub370\uc774\ud130\ub97c \ud3ec\ud568\ud558\uace0 \uc788\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.\n\uac01 \uc9c1\uc5c5\ubcc4\ub85c \ubc15\uc2a4\ud50c\ub86f\uc744 \uadf8\ub824 \ud3c9\uade0 \uc5f0\ubd09\uc774 \uc5b4\ub290\uc815\ub3c4 \ub418\ub294\uc9c0 \uc2dc\uac01\ud654\ud574\ubcf4\uc790.\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nplt.figure(figsize=(10, 8))\nplt.xticks(rotation=45, horizontalalignment='right')\nsns.boxplot(x='JobTitle', y='TotalPay', data=df)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0xd118908>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \ubbf8\uad6d\uc5d0\uc11c\ub294 \uc18c\ubc29\uad00(Firefighter)\uc758 \uc5f0\ubd09\uc774 \ub192\ub2e4\ub294 \uac83\uacfc \uc5f0\ubd09\uc758 \ubd84\ud3ec\uac00 \uc77c\uc815\ud558\uc9c0 \uc54a\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\ub2e4.\n\uae30\uacc4\ud559\uc2b5\uc744 \uc704\ud574 \uc704\uc758 \ub370\uc774\ud130\ub97c LabelEncoder\ub97c \ud1b5\ud574 \uc804\ucc98\ub9ac \ud574\uc918\uc57c\ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nfrom sklearn.preprocessing import LabelEncoder\njob_encode = LabelEncoder()\nsalary['JobTitle'] = job_encode.fit_transform(salary['JobTitle'])\nsalary.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[11]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      JobTitle\n      TotalPay\n    \n  \n  \n    \n      31176\n      8\n      15.35\n    \n    \n      31177\n      6\n      6.00\n    \n    \n      31178\n      0\n      0.00\n    \n    \n      31179\n      0\n      0.00\n    \n    \n      31180\n      0\n      0.00\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uae30\uacc4 \ud559\uc2b5\ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4 \ud559\uc2b5\uc744 \uc218\ud589\ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \nmodel=IsolationForest(n_estimators=100, max_samples='auto', n_jobs=-1,\n                      max_features=2, contamination=0.01)\nmodel.fit(salary.to_numpy())\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[12]:\n\n\n\n\n\nIsolationForest(behaviour='deprecated', bootstrap=False, contamination=0.01,\n                max_features=2, max_samples='auto', n_estimators=100, n_jobs=-1,\n                random_state=None, verbose=0, warm_start=False)\n\n\n\n\n\n\n\n\n\n\n\n\ub370\uc774\ud130\ud504\ub808\uc784\uc5d0 \ud3c9\uac00 \uc810\uc218(score)\uc640 \uc774\uc0c1(anomaly) \ud310\ub2e8 \uc5ec\ubd80\uc5d0 \ub300\ud55c \uac12\uc744 \ucd94\uac00\ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \nscore = model.decision_function(salary.to_numpy())\nanomaly = model.predict(salary.to_numpy())\ndf['scores']= score\ndf['anomaly']= anomaly\nanomaly_data = df.loc[df['anomaly']==-1] # \uc774\uc0c1\uac12\uc740 -1\uc73c\ub85c \ub098\ud0c0\ub0b8\ub2e4.\nanomaly_data\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[13]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      JobTitle\n      TotalPay\n      scores\n      anomaly\n    \n  \n  \n    \n      2388\n      Firefighter\n      290076.13\n      -0.063016\n      -1\n    \n    \n      2389\n      Firefighter\n      267951.41\n      -0.061552\n      -1\n    \n    \n      2390\n      Firefighter\n      259740.36\n      -0.061552\n      -1\n    \n    \n      2391\n      Firefighter\n      245399.19\n      -0.055934\n      -1\n    \n    \n      2392\n      Firefighter\n      246369.02\n      -0.059329\n      -1\n    \n    \n      ...\n      ...\n      ...\n      ...\n      ...\n    \n    \n      31108\n      Custodian\n      192.04\n      -0.024968\n      -1\n    \n    \n      31155\n      Custodian\n      54.39\n      -0.024505\n      -1\n    \n    \n      31178\n      Custodian\n      0.00\n      -0.024505\n      -1\n    \n    \n      31179\n      Custodian\n      0.00\n      -0.024505\n      -1\n    \n    \n      31180\n      Custodian\n      0.00\n      -0.024505\n      -1\n    \n  \n\n309 rows \u00d7 4 columns\n\n\n\n\n\n\n\n\n\n\n\n\n\ucd1d 31180\uac1c \ub370\uc774\ud130 \uc911 312\uac1c\uc758 \ub370\uc774\ud130\uac00 \uc774\uc0c1\uce58\ub85c \ud310\ubcc4\ub41c\ub2e4. \uc774\uc81c \uc9c1\uc5c5\ubcc4\ub85c \uc774\uc0c1\uce58\uac00 \uc5bc\ub9c8\ub098 \ub418\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\uc790.\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \nanomaly_data['JobTitle'].value_counts()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[14]:\n\n\n\n\n\nFirefighter         183\nCustodian            71\nPolice Officer 3     51\nSpecial Nurse         3\nRegistered Nurse      1\nName: JobTitle, dtype: int64\n\n\n\n\n\n\n\n\n\n\n\n\ucd1d 9\uac1c\uc758 \uc9c1\uc5c5\uc5d0\uc11c 5\uac1c \uc9c1\uc5c5\uc5d0 \uc774\uc0c1\uce58\uac00 \ubc1c\uacac\ub418\uba70, \uc18c\ubc29\uad00\uc5d0\uc11c \uac00\uc7a5 \ub9ce\uc774 \ubd84\ud3ec\ud55c\ub2e4. \uc774\uc81c \uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \uc774\uc0c1\uce58\uac00 \uc5b4\ub5bb\uac8c \ubd84\ud3ec\ud558\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\uc790.\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \nplt.figure(figsize=(10, 8))\nplt.xticks(rotation=45, horizontalalignment='right')\nsns.stripplot(x='JobTitle', y='TotalPay', data=anomaly_data, jitter=True)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[15]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0xd2ae278>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc2dc\uac01\ud654\ub97c \ud574\ubcf4\uba74 \uc18c\ubc29\uad00\uacfc \ud6c4\uacac\uc778(Custodian)\uc5d0\uc11c \uc5f0\ubd09\uc774 \uc720\ub09c\ud788 \ub0ae\uc740 \uc0ac\ub78c\ub4e4\uc744 \ubcfc \uc218 \uc788\ub2e4. \ud6c4\uacac\uc778\uc758 \uacbd\uc6b0\ub294 \uc0dd\uc5c5\uc744 \uc704\ud55c \uc9c1\uc5c5\uc774\ub77c\uace0\ub294 \ubcfc \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uadf8\ub7f0\uac83\uc73c\ub85c \ubcf4\uc5ec\uc9c4\ub2e4.\n\n\n\n\n\n\nIn\u00a0[21]:\n\n    \nanomaly_data[\n    (anomaly_data['JobTitle'] == 'Custodian')&\n    (anomaly_data['TotalPay'] <= 1000)].sort_values(by=['TotalPay'], axis=0)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[21]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      JobTitle\n      TotalPay\n      scores\n      anomaly\n    \n  \n  \n    \n      31180\n      Custodian\n      0.00\n      -0.024505\n      -1\n    \n    \n      31178\n      Custodian\n      0.00\n      -0.024505\n      -1\n    \n    \n      11784\n      Custodian\n      0.00\n      -0.024505\n      -1\n    \n    \n      19727\n      Custodian\n      0.00\n      -0.024505\n      -1\n    \n    \n      19754\n      Custodian\n      0.00\n      -0.024505\n      -1\n    \n    \n      31179\n      Custodian\n      0.00\n      -0.024505\n      -1\n    \n    \n      21319\n      Custodian\n      41.95\n      -0.024505\n      -1\n    \n    \n      31155\n      Custodian\n      54.39\n      -0.024505\n      -1\n    \n    \n      31106\n      Custodian\n      135.58\n      -0.024968\n      -1\n    \n    \n      21226\n      Custodian\n      152.85\n      -0.024968\n      -1\n    \n    \n      31093\n      Custodian\n      165.48\n      -0.024968\n      -1\n    \n    \n      21268\n      Custodian\n      167.17\n      -0.024968\n      -1\n    \n    \n      31108\n      Custodian\n      192.04\n      -0.024968\n      -1\n    \n    \n      11670\n      Custodian\n      380.36\n      -0.021584\n      -1\n    \n    \n      31042\n      Custodian\n      427.50\n      -0.021584\n      -1\n    \n    \n      21204\n      Custodian\n      462.26\n      -0.021124\n      -1\n    \n    \n      30978\n      Custodian\n      597.20\n      -0.020204\n      -1\n    \n    \n      21158\n      Custodian\n      644.77\n      -0.020204\n      -1\n    \n    \n      21146\n      Custodian\n      685.91\n      -0.020204\n      -1\n    \n    \n      21128\n      Custodian\n      755.10\n      -0.020204\n      -1\n    \n    \n      30856\n      Custodian\n      840.26\n      -0.020204\n      -1\n    \n    \n      21091\n      Custodian\n      841.94\n      -0.020204\n      -1\n    \n    \n      11445\n      Custodian\n      845.72\n      -0.020204\n      -1\n    \n    \n      30930\n      Custodian\n      916.07\n      -0.019354\n      -1\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uacb0\uacfc\ub294 \ud6c4\uacac\uc778\ub4e4\uc911 \uc5f0\ubd09\uc774 1000\ub2ec\ub7ec \ubbf8\ub9cc\uc778 \uc0ac\ub78c\uc758 \ub370\uc774\ud130\ub97c \uc815\ub82c\ud55c \uac83\uc774\ub2e4. \uc5f0\ubd09 1000\ub2ec\ub7ec\ub3c4 \uc0ac\uc2e4 \ub108\ubb34 \ub0ae\uc9c0\ub9cc \uc5f0\ubd09\uc744 \ubc1b\uc9c0 \uc54a\ub294 \uc0ac\ub78c\ub4e4\ub3c4 \uc874\uc7ac\ud558\uace0 \uc788\ub2e4. \uc774\ub4e4\uc758 \ub370\uc774\ud130\ub294 \uc0c1\uc2dd\uc801\uc73c\ub85c \uc9c1\uc5c5\ubcc4 \uc5f0\ubd09 \ub370\uc774\ud130\uc14b\uc5d0 \ubd88\ud544\uc694\ud55c \uc774\uc0c1\uce58\ub77c\uace0 \ubcfc \uc218 \uc788\ub2e4.\n5. \ub9c8\uce58\uba70,\u00b6\uc774 \uae00\uc5d0\uc11c \uc774\uc0c1\uc774 \ubb34\uc5c7\uc778\uc9c0, \uadf8\ub9ac\uace0 Isolation forest \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud574 \uac10\uc9c0\ud558\ub294 \ubc29\ubc95\uc744 \ubc30\uc6e0\ub2e4. \ubc15\uc2a4 \ud50c\ub86f\uc744 \uc0ac\uc6a9\ud574 \ub370\uc774\ud130\uc14b\uc744 \uc0b4\ud3b4\ubcf4\uace0 \ub9c8\uc9c0\ub9c9\uc73c\ub85c Isolation forest \uc54c\uace0\ub9ac\uc998\uc744 \uad6c\ud604\ud588\ub2e4.\n\ucd94\uac00\uc801\uc73c\ub85c \ub354 \uc54c\uc544\ubcf4\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c \ub9c1\ud06c\ub97c \ud655\uc778\ud558\ub77c.\n\nhttps://github.com/erykml/medium_articles/blob/master/Machine%20Learning/outlier_detection_hampel_filter.ipynb\nhttps://towardsdatascience.com/anomaly-detection-with-isolation-forest-visualization-23cd75c281e2",
      "tags": "anomaly detection,isolation forest,machine learning,Python",
      "url": "https://partrita.github.io/posts/isolation-forest/"
    },
    {
      "title": "\ud1b5\uacc4 \ubd84\uc11d \uc8fc\uc11d\ub123\uae30",
      "text": "0. statannot \uc18c\uac1c\u00b6statannot\uc740 \ud30c\uc774\uc36c \uc2dc\uac01\ud654 \ub77c\uc774\ube0c\ub7ec\ub9ac seaborn\ub85c \uadf8\ub9b0 \ubc15\uc2a4\ud50c\ub86f\uc5d0 \ud1b5\uacc4\ubd84\uc11d\uc5d0 \ub300\ud55c \uc8fc\uc11d\uc744 \uc790\ub3d9\uc73c\ub85c \ub2ec\uc544\uc8fc\ub294 \ud30c\uc774\uc36c \ud328\ud0a4\uc9c0\uc785\ub2c8\ub2e4. \uc790\uc138\ud55c \uac83\uc740 \uacf5\uc2dd \ud648\ud398\uc774\uc9c0\ub97c \ucc38\uace0\ud558\uc138\uc694.\n\ub9c9\ub300\uadf8\ub798\ud504\uc5d0 \uc8fc\uc11d\uc744 \ucd94\uac00\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud558\uc9c0\ub9cc \uc544\uc9c1 \uc644\uc804\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n\n1. statannot \ud2b9\uc9d5\u00b6\nscipy.stats \uba54\uc18c\ub4dc\ub97c \uc0ac\uc6a9\ud55c \ud1b5\uacc4\ubd84\uc11d:\nMann-Whitney\nt-test (independent and paired)\nWelch's t-test\nLevene test\nWilcoxon test\nKruskal-Wallis test\n\n\n\ud50c\ub86f\uc758 \ub0b4\ubd80 \ub610\ub294 \uc678\ubd80\uc5d0 \uc8fc\uc11d \ub123\uae30\n\ud1b5\uacc4\ubd84\uc11d\uc758 \uc8fc\uc11d\uc744 \ubcc4\ud45c(*), p-value \ub4f1\uc73c\ub85c \uc0ac\uc6a9\uc790\uac00 \uc9c0\uc815\ud560 \uc218 \uc788\uc74c\n\uc120\ud0dd\uc801\uc73c\ub85c \uc0ac\uc6a9\uc790 \uc815\uc758 p- value\ub97c \uc785\ub825\uac12\uc73c\ub85c \uc81c\uacf5(\uc774 \uacbd\uc6b0 \ud1b5\uacc4 \ubd84\uc11d\uc740 \uc218\ud589\ub418\uc9c0 \uc54a\uc74c).\n\n2. statannot \uc758\uc874\uc131\u00b6\n    Python >= 3.5\n    numpy >= 1.12.1\n    seaborn >= 0.8.1\n    matplotlib >= 2.2.2\n    pandas >= 0.23.0\n    scipy >= 1.1.0\n3. statannot \uc124\uce58\u00b6PyPI\ub97c \ud1b5\ud574 \uc124\uce58:\npip install statannot\n\n\uac1c\ubc1c\uc911\uc778 \ucd5c\uc2e0 \ubc84\uc804\uc740 \ub2e4\uc74c \uba85\ub839\uc5b4\ub85c \uc124\uce58:\npip install git+https://github.com/webermarcolivier/statannot.git\n\n4. \uc0ac\uc6a9 \uc608\uc2dc\u00b6\uba3c\uc800 \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nimport numpy as np\nfrom statannot import add_stat_annotation\n\nsns.set(style=\"ticks\")\n\n\n    \n\n\n\n\n\n\n\n4.1 Boxplot non-hue\u00b64.1.1 \ub2e4\uc911 \ube44\uad50 \uad50\uc815\u00b6\uae30\ubcf8\uc801\uc73c\ub85c \ubcf8\ud398\ub85c\ub2c8 \uad50\uc815\uc774 \uc801\uc6a9\ub429\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \ndf = sns.load_dataset(\"tips\")\nx = \"day\"\ny = \"total_bill\"\norder = ['Sun', 'Thur', 'Fri', 'Sat']\nax = sns.boxplot(data=df, x=x, y=y, order=order)\nax, test_results = add_stat_annotation(ax, data=df, x=x, y=y, order=order,\n                                   box_pairs=[(\"Thur\", \"Fri\"), (\"Thur\", \"Sat\"), (\"Fri\", \"Sun\")],\n                                   test='Mann-Whitney', text_format='star', loc='outside', verbose=2)\nsns.despine() # \ud544\uc694\uc5c6\ub294 axis border \uc81c\uac70\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\np-value annotation legend:\nns: 5.00e-02 < p <= 1.00e+00\n*: 1.00e-02 < p <= 5.00e-02\n**: 1.00e-03 < p <= 1.00e-02\n***: 1.00e-04 < p <= 1.00e-03\n****: p <= 1.00e-04\n\nThur v.s. Fri: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=1.000e+00 U_stat=6.305e+02\nThur v.s. Sat: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=1.407e-01 U_stat=2.180e+03\nSun v.s. Fri: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=8.041e-02 U_stat=9.605e+02\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.1.2 \ud1b5\uacc4 \ubd84\uc11d \uacb0\uacfc\u00b6add_stat_annotation \ud568\uc218\ub294 \ud29c\ud50c ax, test_results \ub97c \ubc18\ud658\ud569\ub2c8\ub2e4. \uc5ec\uae30\uc11c test_results\ub294 \uc6d0\ub798 \ub370\uc774\ud130\uc640 \ud1b5\uacc4 \ubd84\uc11d \uacb0\uacfc (p-value \ub4f1)\ub97c \ubaa8\ub450 \ud3ec\ud568\ud558\ub294StatResult \ub9ac\uc2a4\ud2b8 \uac1d\uccb4\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nfor res in test_results:\n    print(res)\n\nprint(\"\\nStatResult attributes:\", test_results[0].__dict__.keys())\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nMann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=1.000e+00 U_stat=6.305e+02\nMann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=1.407e-01 U_stat=2.180e+03\nMann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=8.041e-02 U_stat=9.605e+02\n\nStatResult attributes: dict_keys(['test_str', 'test_short_name', 'stat_str', 'stat', 'pval', 'box1', 'box2'])\n\n\n\n\n\n\n\n\n\n\n\n4.1.3. \ub2e4\uc911 \ube44\uad50 \uad50\uc815\uc774 \uc5c6\ub294 \uacbd\uc6b0\u00b6\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nx = \"day\"\ny = \"total_bill\"\norder = ['Sun', 'Thur', 'Fri', 'Sat']\nax = sns.boxplot(data=df, x=x, y=y, order=order)\ntest_results = add_stat_annotation(ax, data=df, x=x, y=y, order=order,\n                                   box_pairs=[(\"Thur\", \"Fri\"), (\"Thur\", \"Sat\"), (\"Fri\", \"Sun\")],\n                                   test='Mann-Whitney', comparisons_correction=None, \n                                   text_format='star', loc='outside', verbose=2)\nsns.despine() # \ud544\uc694\uc5c6\ub294 axis border \uc81c\uac70\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\np-value annotation legend:\nns: 5.00e-02 < p <= 1.00e+00\n*: 1.00e-02 < p <= 5.00e-02\n**: 1.00e-03 < p <= 1.00e-02\n***: 1.00e-04 < p <= 1.00e-03\n****: p <= 1.00e-04\n\nThur v.s. Fri: Mann-Whitney-Wilcoxon test two-sided, P_val=6.477e-01 U_stat=6.305e+02\nThur v.s. Sat: Mann-Whitney-Wilcoxon test two-sided, P_val=4.690e-02 U_stat=2.180e+03\nSun v.s. Fri: Mann-Whitney-Wilcoxon test two-sided, P_val=2.680e-02 U_stat=9.605e+02\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.1.4. \uc8fc\uc11d\uc758 \uc704\uce58\u00b6\ud1b5\uacc4 \ubd84\uc11d \uc8fc\uc11d\uc740 \ud50c\ub86f \uc548\ucabd(loc = 'inside') \ub610\ub294 \ubc14\uae65\ucabd(loc ='outside')\uc5d0 \uc704\uce58\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798 \uc608\uc2dc\ub294 \uc548\ucabd \uc788\ub294 \uc608\uc2dc\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nx = \"day\"\ny = \"total_bill\"\norder = ['Sun', 'Thur', 'Fri', 'Sat']\nax = sns.boxplot(data=df, x=x, y=y, order=order)\nadd_stat_annotation(ax, data=df, x=x, y=y, order=order,\n                    box_pairs=[(\"Sun\", \"Thur\"), (\"Sun\", \"Sat\"), (\"Fri\", \"Sun\")],\n                    perform_stat_test=False, pvalues=[0.1, 0.1, 0.001],\n                    test=None, text_format='star', loc='inside', verbose=2);\nsns.despine() # \ud544\uc694\uc5c6\ub294 axis border \uc81c\uac70\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\np-value annotation legend:\nns: 5.00e-02 < p <= 1.00e+00\n*: 1.00e-02 < p <= 5.00e-02\n**: 1.00e-03 < p <= 1.00e-02\n***: 1.00e-04 < p <= 1.00e-03\n****: p <= 1.00e-04\n\nSun v.s. Thur: Custom statistical test, P_val:1.000e-01\nSun v.s. Fri: Custom statistical test, P_val:1.000e-03\nSun v.s. Sat: Custom statistical test, P_val:1.000e-01\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.2. Boxplot with hue\u00b6ymax \uc704\uce58\uac00 \ub2e4\ub978 \uc0c1\uc790 \ud50c\ub86f\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \ndf = sns.load_dataset('diamonds')\ndf = df[df['color'].map(lambda x: x in 'EIJ')]\n# Modifying data to yield unequal boxes in the hue value\ndf.loc[df['cut'] == 'Ideal', 'price'] = df.loc[df['cut'] == 'Ideal', 'price'].map(lambda x: min(x, 5000))\ndf.loc[df['cut'] == 'Premium', 'price'] = df.loc[df['cut'] == 'Premium', 'price'].map(lambda x: min(x, 7500))\ndf.loc[df['cut'] == 'Good', 'price'] = df.loc[df['cut'] == 'Good', 'price'].map(lambda x: min(x, 15000))\ndf.loc[df['cut'] == 'Very Good', 'price'] = df.loc[df['cut'] == 'Very Good', 'price'].map(lambda x: min(x, 3000))\ndf.head()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      carat\n      cut\n      color\n      clarity\n      depth\n      table\n      price\n      x\n      y\n      z\n    \n  \n  \n    \n      0\n      0.23\n      Ideal\n      E\n      SI2\n      61.5\n      55.0\n      326\n      3.95\n      3.98\n      2.43\n    \n    \n      1\n      0.21\n      Premium\n      E\n      SI1\n      59.8\n      61.0\n      326\n      3.89\n      3.84\n      2.31\n    \n    \n      2\n      0.23\n      Good\n      E\n      VS1\n      56.9\n      65.0\n      327\n      4.05\n      4.07\n      2.31\n    \n    \n      3\n      0.29\n      Premium\n      I\n      VS2\n      62.4\n      58.0\n      334\n      4.20\n      4.23\n      2.63\n    \n    \n      4\n      0.31\n      Good\n      J\n      SI2\n      63.3\n      58.0\n      335\n      4.34\n      4.35\n      2.75\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \nx = \"color\"\ny = \"price\"\nhue = \"cut\"\nhue_order=['Ideal', 'Premium', 'Good', 'Very Good', 'Fair']\nbox_pairs=[\n    ((\"E\", \"Ideal\"), (\"E\", \"Very Good\")),\n    ((\"E\", \"Ideal\"), (\"E\", \"Premium\")),\n    ((\"E\", \"Ideal\"), (\"E\", \"Good\")),\n    ((\"I\", \"Ideal\"), (\"I\", \"Premium\")),\n    ((\"I\", \"Ideal\"), (\"I\", \"Good\")),\n    ((\"J\", \"Ideal\"), (\"J\", \"Premium\")),\n    ((\"J\", \"Ideal\"), (\"J\", \"Good\")),\n    ((\"E\", \"Good\"), (\"I\", \"Ideal\")),\n    ((\"I\", \"Premium\"), (\"J\", \"Ideal\")),\n    ]\nax = sns.boxplot(data=df, x=x, y=y, hue=hue,)\nadd_stat_annotation(ax, data=df, x=x, y=y, hue=hue, box_pairs=box_pairs,\n                    test='Mann-Whitney', loc='inside', verbose=2)\nplt.legend(loc='upper left', bbox_to_anchor=(1.03, 1))\nsns.despine() # \ud544\uc694\uc5c6\ub294 axis border \uc81c\uac70\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\np-value annotation legend:\nns: 5.00e-02 < p <= 1.00e+00\n*: 1.00e-02 < p <= 5.00e-02\n**: 1.00e-03 < p <= 1.00e-02\n***: 1.00e-04 < p <= 1.00e-03\n****: p <= 1.00e-04\n\nE_Ideal v.s. E_Premium: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=1.404e-30 U_stat=3.756e+06\nI_Ideal v.s. I_Premium: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=4.627e-60 U_stat=1.009e+06\nJ_Ideal v.s. J_Premium: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=3.616e-36 U_stat=2.337e+05\nE_Ideal v.s. E_Good: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=4.681e-18 U_stat=1.480e+06\nI_Ideal v.s. I_Good: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=4.507e-12 U_stat=4.359e+05\nJ_Ideal v.s. J_Good: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=9.056e-04 U_stat=1.174e+05\nE_Ideal v.s. E_Very Good: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=1.562e-01 U_stat=4.850e+06\nE_Good v.s. I_Ideal: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=1.000e+00 U_stat=9.882e+05\nI_Premium v.s. J_Ideal: Mann-Whitney-Wilcoxon test two-sided with Bonferroni correction, P_val=4.643e-26 U_stat=8.084e+05\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.3. \ubc84\ud0b7 \uce74\ud14c\uace0\ub9ac\uac00 \ud3ec\ud568 \ub41c \ubc15\uc2a4 \ud50c\ub86f\u00b6\n\n\n\n\n\nIn\u00a0[8]:\n\n    \ndf = sns.load_dataset(\"tips\")\ndf['tip_bucket'] = pd.cut(df['tip'], 3)\ndf.head()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      total_bill\n      tip\n      sex\n      smoker\n      day\n      time\n      size\n      tip_bucket\n    \n  \n  \n    \n      0\n      16.99\n      1.01\n      Female\n      No\n      Sun\n      Dinner\n      2\n      (0.991, 4.0]\n    \n    \n      1\n      10.34\n      1.66\n      Male\n      No\n      Sun\n      Dinner\n      3\n      (0.991, 4.0]\n    \n    \n      2\n      21.01\n      3.50\n      Male\n      No\n      Sun\n      Dinner\n      3\n      (0.991, 4.0]\n    \n    \n      3\n      23.68\n      3.31\n      Male\n      No\n      Sun\n      Dinner\n      2\n      (0.991, 4.0]\n    \n    \n      4\n      24.59\n      3.61\n      Female\n      No\n      Sun\n      Dinner\n      4\n      (0.991, 4.0]\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \n# In this case we just have to pass the list of categories objects to the add_stat_annotation function.\ntip_bucket_list = df['tip_bucket'].unique()\ntip_bucket_list\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\n[(0.991, 4.0], (4.0, 7.0], (7.0, 10.0]]\nCategories (3, interval[float64]): [(0.991, 4.0] < (4.0, 7.0] < (7.0, 10.0]]\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nx = \"day\"\ny = \"total_bill\"\nhue = \"tip_bucket\"\ndata = df\nax = sns.boxplot(data=df, x=x, y=y, hue=hue)\nadd_stat_annotation(ax, data=df, x=x, y=y, hue=hue,\n                    box_pairs=[((\"Sat\", tip_bucket_list[2]), (\"Fri\", tip_bucket_list[0]))],\n                    test='t-test_ind', loc='inside', verbose=2)\nplt.legend(loc='upper left', bbox_to_anchor=(1.03, 1))\nsns.despine() # \ud544\uc694\uc5c6\ub294 axis border \uc81c\uac70\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\np-value annotation legend:\nns: 5.00e-02 < p <= 1.00e+00\n*: 1.00e-02 < p <= 5.00e-02\n**: 1.00e-03 < p <= 1.00e-02\n***: 1.00e-04 < p <= 1.00e-03\n****: p <= 1.00e-04\n\nFri_(0.991, 4.0] v.s. Sat_(7.0, 10.0]: t-test independent samples with Bonferroni correction, P_val=6.176e-07 stat=-7.490e+00\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.4. y \uc624\ud504\uc14b \uc870\uc808\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[11]:\n\n    \ndf = sns.load_dataset(\"tips\")\nx = \"day\"\ny = \"total_bill\"\nhue = \"smoker\"\nax = sns.boxplot(data=df, x=x, y=y, hue=hue)\nadd_stat_annotation(ax, data=df, x=x, y=y, hue=hue,\n                    box_pairs=[((\"Thur\", \"No\"), (\"Fri\", \"No\")),\n                                 ((\"Sat\", \"Yes\"), (\"Sat\", \"No\")),\n                                 ((\"Sun\", \"No\"), (\"Thur\", \"Yes\"))\n                                ],\n                    test='t-test_ind', text_format='full', loc='inside', comparisons_correction=None,\n                    line_offset_to_box=0.2, line_offset=0.1, line_height=0.05, text_offset=8,\n                    verbose=2)\nplt.legend(loc='upper left', bbox_to_anchor=(1.03, 1))\nsns.despine() # \ud544\uc694\uc5c6\ub294 axis border \uc81c\uac70\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nSat_Yes v.s. Sat_No: t-test independent samples, P_val=4.304e-01 stat=7.922e-01\nThur_No v.s. Fri_No: t-test independent samples, P_val=7.425e-01 stat=-3.305e-01\nThur_Yes v.s. Sun_No: t-test independent samples, P_val=5.623e-01 stat=-5.822e-01\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.5. \uc0ac\uc6a9\uc790 \uc815\uc758 p-value\ub97c \uc785\ub825\uc73c\ub85c \uc0ac\uc6a9\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[12]:\n\n    \ndf = sns.load_dataset(\"iris\")\nx = \"species\"\ny = \"sepal_length\"\n\nbox_pairs = [(\"setosa\", \"versicolor\"), (\"setosa\", \"virginica\"), (\"versicolor\", \"virginica\")]\n\nfrom scipy.stats import bartlett\n\ntest_short_name = 'Bartlett'\npvalues = []\nfor pair in box_pairs:\n    data1 = df.groupby(x)[y].get_group(pair[0])\n    data2 = df.groupby(x)[y].get_group(pair[1])\n    stat, p = bartlett(data1, data2)\n    print(\"Performing Bartlett statistical test for equal variances on pair:\",\n          pair, \"stat={:.2e} p-value={:.2e}\".format(stat, p))\n    pvalues.append(p)\nprint(\"pvalues:\", pvalues)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nPerforming Bartlett statistical test for equal variances on pair: ('setosa', 'versicolor') stat=6.89e+00 p-value=8.66e-03\nPerforming Bartlett statistical test for equal variances on pair: ('setosa', 'virginica') stat=1.60e+01 p-value=6.38e-05\nPerforming Bartlett statistical test for equal variances on pair: ('versicolor', 'virginica') stat=2.09e+00 p-value=1.48e-01\npvalues: [0.008659557933879902, 6.378941946712463e-05, 0.14778816016231236]\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \nax = sns.boxplot(data=df, x=x, y=y)\nsns.despine() # \ud544\uc694\uc5c6\ub294 axis border \uc81c\uac70\ntest_results = add_stat_annotation(ax, data=df, x=x, y=y,\n                                   box_pairs=box_pairs,\n                                   perform_stat_test=False, pvalues=pvalues, test_short_name=test_short_name,\n                                   text_format='star', verbose=2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\np-value annotation legend:\nns: 5.00e-02 < p <= 1.00e+00\n*: 1.00e-02 < p <= 5.00e-02\n**: 1.00e-03 < p <= 1.00e-02\n***: 1.00e-04 < p <= 1.00e-03\n****: p <= 1.00e-04\n\nsetosa v.s. versicolor: Custom statistical test, P_val:8.660e-03\nversicolor v.s. virginica: Custom statistical test, P_val:1.478e-01\nsetosa v.s. virginica: Custom statistical test, P_val:6.379e-05\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.6. \uc0ac\uc6a9\uc790 \uc815\uc758 \uc8fc\uc11d\ubb38\uad6c \ub123\uae30\u00b6\n\n\n\n\n\nIn\u00a0[14]:\n\n    \ndf = sns.load_dataset(\"tips\")\nx = \"day\"\ny = \"total_bill\"\norder = ['Sun', 'Thur', 'Fri', 'Sat']\nax = sns.boxplot(data=df, x=x, y=y, order=order)\nsns.despine() # \ud544\uc694\uc5c6\ub294 axis border \uc81c\uac70\ntest_results = add_stat_annotation(ax, data=df, x=x, y=y, order=order,\n                                   box_pairs=[(\"Thur\", \"Fri\"), (\"Thur\", \"Sat\"), (\"Fri\", \"Sun\")],\n                                   text_annot_custom=[\"first pair\", \"second pair\", \"third pair\"],\n                                   perform_stat_test=False, pvalues=[0, 0, 0],\n                                   loc='outside', verbose=0)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5. \ub9c8\uce58\uba70\u00b6\uae30\uc874\uc5d0\ub294 \ubc88\uac70\ub86d\uac8c \ud50c\ub78f\uc5d0 \ud1b5\uacc4\ubd84\uc11d\uc5d0 \ub300\ud55c \uc8fc\uc11d\uc744 \uc218\uc791\uc5c5\uc73c\ub85c \ub123\uc5c8\uc9c0\ub9cc, statannot \ud328\ud0a4\uc9c0\ub97c \uc0ac\uc6a9\ud558\uba74 \uac04\ud3b8\ud558\uac8c \uc8fc\uc11d\ucc98\ub9ac\ub97c \ud574\uc90d\ub2c8\ub2e4. \uac8c\ub2e4\uac00 \uae30\ubcf8 \uc124\uc815\uac12\ub3c4 \ucda9\uc2e4\ud574\uc11c \uc55e\uc73c\ub85c\ub294 statannot\uc744 \uacc4\uc18d \uc0ac\uc6a9\ud558\uac8c \ub420 \uac83 \uac19\uc2b5\ub2c8\ub2e4.",
      "tags": "seaborn,statistics,t-test",
      "url": "https://partrita.github.io/posts/statannot/"
    },
    {
      "title": "\ubc88\uc5ed\uc11c",
      "text": "\ud30c\uc774\uc36c\uc744 \ud65c\uc6a9\ud55c \uc0dd\uba85\uc815\ubcf4\ud559 2/e\u00b6\n\n\uc9c0\uc740\uc774: \ud2f0\uc544\uad6c \uc548\ud0c0\uc624\n\uc62e\uae34\uc774: \uae40\ud0dc\uc724\n\ucd9c\ud310\uc0ac: \uc5d0\uc774\ucf58 \ucd9c\ud310\n\n\uc6d0\uc81c : Bioinformatics with Python Cookbook - Second Edition\n\uc18c\uac1c\u00b6\uc0dd\uba85\uc815\ubcf4\ud559 \ub370\uc774\ud130\ub97c \ud30c\uc774\uc36c \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ubc95\uacfc \ud504\ub808\uc784\uc6cc\ud06c\ub97c \uc0ac\uc6a9\ud574 \ucc98\ub9ac\ud55c\ub2e4. \ucc28\uc138\ub300 \uc5fc\uae30\uc11c\uc5f4 \ubd84\uc11d, \uc720\uc804\uccb4\ud559, \uba54\ud0c0\uc9c0\ub178\ubbf9\uc2a4(metagenomics), \uc9d1\ub2e8 \uc720\uc804\ud559, \uacc4\ud1b5 \ubc1c\uc0dd\ud559, \ud504\ub85c\ud14c\uc624\ubbf9\uc2a4(proteomics)\uc758 \ub0b4\uc6a9\uc744 \ub2e4\ub8ec\ub2e4. \ub2e4\uc591\ud55c \ud30c\uc774\uc36c \ub3c4\uad6c\uc640 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c \ub370\uc774\ud130\ub97c \ubcc0\ud658, \ubd84\uc11d, \uc2dc\uac01\ud654\ud558\ub294 \ucd5c\uc2e0 \ud504\ub85c\uadf8\ub798\ubc0d \uae30\ubc95\uc744 \ubc30\uc6b4\ub2e4. \ucc28\uc138\ub300 \uc5fc\uae30\uc11c\uc5f4 \ubd84\uc11d \ub370\uc774\ud130\uc758 \ud544\ud130\ub9c1(filtering) \uae30\uc220\uacfc \ubcd1\ub82c\ucc98\ub9ac \ud504\ub808\uc784\uc6cc\ud06c(framework)\uc778 \ub300\uc2a4\ud06c(Dask)\uc640 \uc2a4\ud30c\ud06c(Spark)\ub3c4 \uc18c\uac1c\ud55c\ub2e4.\n\ubaa9\ucc28\u00b6\n1\uc7a5. \ud30c\uc774\uc36c\uacfc \uc8fc\ubcc0 \uc0dd\ud0dc\uacc4\n\n\uc18c\uac1c\n\uc544\ub098\ucf58\ub2e4\ub97c \uc0ac\uc6a9\ud55c \ud544\uc694 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc124\uce58\n\ub3c4\ucee4\ub97c \uc0ac\uc6a9\ud55c \ud544\uc694 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc124\uce58\nrpy2\ub97c \ud1b5\ud574 R\uacfc \uc778\ud130\ud398\uc774\uc2a4 \ub9cc\ub4e4\uae30\n\uc8fc\ud53c\ud130 \ub178\ud2b8\ubd81\uc5d0\uc11c R \ub9e4\uc9c1 \uba85\ub839\uc5b4 \uc0ac\uc6a9\ud558\uae30\n\n\n2\uc7a5. \ucc28\uc138\ub300 \uc5fc\uae30\uc11c\uc5f4 \ubd84\uc11d\n\n\uc18c\uac1c\nNCBI\uc640 \uc9c4\ubc45\ud06c \ub370\uc774\ud130\ubca0\uc774\uc2a4 \ub458\ub7ec\ubcf4\uae30\n\uc5fc\uae30\uc11c\uc5f4 \ubd84\uc11d\uc758 \uae30\ucd08\n\ubc30\uc6b0\uae30\nFASTQ \ud30c\uc77c \ub2e4\ub8e8\uae30\n\uc815\ub82c \ub370\uc774\ud130 \ub2e4\ub8e8\uae30\nVCF \ud30c\uc77c \ub370\uc774\ud130 \ubd84\uc11d\ud558\uae30\n\uac8c\ub188 \uc811\uadfc\uc131\uacfc SNP \ub370\uc774\ud130 \ud544\ud130\ud558\uae30\nHTSeq\ub85c NGS \ub370\uc774\ud130 \ucc98\ub9ac\ud558\uae30\n\n\n3\uc7a5. \uac8c\ub188 \ub370\uc774\ud130 \ub2e4\ub8e8\uae30\n\n\uc18c\uac1c\n\uc88b\uc740 \ud488\uc9c8\uc758 \ucc38\uc870 \uac8c\ub188 \ub2e4\ub8e8\uae30\n\ub0ae\uc740 \ud488\uc9c8\uc758 \ucc38\uc870 \uac8c\ub188 \ub2e4\ub8e8\uae30\n\uac8c\ub188 \uc8fc\uc11d \uc0b4\ud3b4\ubcf4\uae30\n\uac8c\ub188 \uc8fc\uc11d\uc73c\ub85c \uc6d0\ud558\ub294 \uc720\uc804\uc790 \ucd94\ucd9c\ud558\uae30\nEnsembl REST API\ub85c \uc624\uc18c\ub85c\uadf8\uac80\uc0c9\nEnsembl REST API\ub85c \uc720\uc804\uc790 \uc628\ud1a8\ub85c\uc9c0 \uc815\ubcf4 \uac80\uc0c9\n\n\n4\uc7a5. \uc9d1\ub2e8\uc720\uc804\ud559\n\n\uc18c\uac1c\nPLINK \ud615\uc2dd \ub370\uc774\ud130\uc14b \uad00\ub9ac\ud558\uae30\nGenepop \ud30c\uc77c \ud615\uc2dd \uc18c\uac1c\nBio.PopGen\uc73c\ub85c \ub370\uc774\ud130\uc14b \ud0d0\uc0c9\ud558\uae30\nF - \ud1b5\uacc4 \uacc4\uc0b0\ud558\uae30\n\uc8fc\uc131\ubd84 \ubd84\uc11d\ud558\uae30\nADMIXTURE \ud504\ub85c\uadf8\ub7a8\uc73c\ub85c \uc9d1\ub2e8 \uad6c\uc870 \uc870\uc0ac\ud558\uae30\n\n\n5\uc7a5. \uc9d1\ub2e8\uc720\uc804\ud559 \uc2dc\ubbac\ub808\uc774\uc158\n\n\uc18c\uac1c\n\uc21c\ubc29\ud5a5 \uc2dc\ubbac\ub808\uc774\ud130 \uc18c\uac1c\n\uc120\ud0dd \uc2dc\ubbac\ub808\uc774\uc158\n\uc12c \ubaa8\ub378\uacfc \ub514\ub524\ub3cc \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud55c \uc2dc\ubbac\ub808\uc774\uc158\n\ubcf5\uc7a1\ud55c \uc9d1\ub2e8 \ud1b5\uacc4 \ubaa8\ub378 \ub9cc\ub4e4\uae30\n\n\n6\uc7a5. \uacc4\ud1b5 \ubc1c\uc0dd\ud559\n\n\uc18c\uac1c\n\uacc4\ud1b5 \ubc1c\uc0dd\ud559 \ubd84\uc11d\uc744 \uc704\ud55c \ub370\uc774\ud130\uc14b \uc900\ube44\n\uc720\uc804\uc790\uc640 \uac8c\ub188 \ub370\uc774\ud130 \uc815\ub82c\n\uc11c\uc5f4 \ub370\uc774\ud130 \ube44\uad50\ud558\uae30\n\uacc4\ud1b5\uc218 \uadf8\ub9ac\uae30\n\uc7ac\uadc0\uc801\uc73c\ub85c \uacc4\ud1b5\uc218 \ub2e4\ub8e8\uae30\n\uacc4\ud1b5\uc218 \uc2dc\uac01\ud654\ud558\uae30\n\n\n7\uc7a5. \ub2e8\ubc31\uc9c8 \ub370\uc774\ud130 \ubc45\ud06c \uc0ac\uc6a9\ud558\uae30\n\n\uc18c\uac1c\n\ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \ub2e8\ubc31\uc9c8 \uc815\ubcf4 \ucc3e\uae30\nBio.PDB \uc18c\uac1c\nPDB \ud30c\uc77c\uc5d0\uc11c \ub354 \ub9ce\uc740 \uc815\ubcf4 \ucd94\ucd9c\ud558\uae30\nPDB \ud30c\uc77c\uc5d0\uc11c \ubd84\uc790\uac04 \uac70\ub9ac \uacc4\uc0b0\n\uae30\ud558\ud559\uc801 \uacc4\uc0b0\ud558\uae30\nPyMOL\ub85c \uc560\ub2c8\uba54\uc774\uc158 \ub9cc\ub4e4\uae30\nBiopython\uc744 \uc0ac\uc6a9\ud574 mmCIF \ud30c\uc77c \ud30c\uc2f1\ud558\uae30\n\n\n8\uc7a5. \uc0dd\uba85\uc815\ubcf4\ud559 \ud30c\uc774\ud504\ub77c\uc778\n\n\uc18c\uac1c\n\uac24\ub7ed\uc2dc \uc11c\ubc84 \uc18c\uac1c\nAPI\ub97c \uc0ac\uc6a9\ud574 \uac24\ub7ed\uc2dc \uc0ac\uc6a9\ud558\uae30\n\uac24\ub7ed\uc2dc \ub3c4\uad6c \uac1c\ubc1c\n\uc77c\ubc18\uc801\uc778 \ud30c\uc774\ud504\ub77c\uc778 \uc0ac\uc6a9\ubc95\nAirflow\ub97c \uc0ac\uc6a9\ud574 \uc720\uc804\ubcc0\uc774 \ubd84\uc11d \ud30c\uc774\ud504\ub77c\uc778 \ub9cc\ub4e4\uae30\n\n\n9\uc7a5. \ud30c\uc774\uc36c\uc73c\ub85c \uc720\uc804\uccb4 \ube45\ub370\uc774\ud130 \ub2e4\ub8e8\uae30\n\n\uc18c\uac1c\nHDF5 \ub370\uc774\ud130 \ud615\uc2dd\n\ub300\uc2a4\ud06c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c \ubcd1\ub82c\ubd84\uc0b0\ucc98\ub9ac\n\ud30c\ucf00\uc774 \ub370\uc774\ud130 \ud615\uc2dd\n\uc2a4\ud30c\ud06c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c \ubcd1\ub82c\ubd84\uc0b0\ucc98\ub9ac\n\uc0ac\uc774\uc36c\uacfc \ub214\ubc14\ub85c \ucf54\ub4dc \ucd5c\uc801\ud654\n\n\n10\uc7a5. \uc0dd\uba85\uc815\ubcf4\ud559\uc758 \ub2e4\ub978 \uc8fc\uc81c\ub4e4\n\n\uc18c\uac1c\nQIIME2\ub85c \uba54\ud0c0\uc9c0\ub178\ubbf9\uc2a4 \ubd84\uc11d\ud558\uae30\n\uc0dd\uc2dd\uc138\ud3ec\uacc4\uc5f4\ub85c \uacf5\ud1b5 \uc5fc\uc0c9\uccb4 \ucc3e\uae30\nREST API\ub85c GBIF \ub370\uc774\ud130\ubca0\uc774\uc2a4 \uc0ac\uc6a9\ud558\uae30\nGBIF\uc758 \uc9c0\ub9ac \ucc38\uc870 \ub370\uc774\ud130 \ub2e4\ub8e8\uae30\n\uc0ac\uc774\ud1a0\uc2a4\ucf00\uc774\ud504\ub85c \ub2e8\ubc31\uc9c8 \ub124\ud2b8\uc6cc\ud06c \uc2dc\uac01\ud654\n\n\n11\uc7a5. \uace0\uae09 \ucc28\uc138\ub300 \uc5fc\uae30\uc11c\uc5f4 \ubd84\uc11d\n\n\uc18c\uac1c\n\ubd84\uc11d\uc744 \uc704\ud55c \ub370\uc774\ud130\uc14b \uc900\ube44\ud558\uae30\n\uba58\ub378\ub9ac\uc5b8 \uc624\ub958\ub85c \ub370\uc774\ud130 \ud488\uc9c8 \uad00\ub9ac\n\uc758\uc0ac \uacb0\uc815 \ub098\ubb34\ub97c \uc0ac\uc6a9\ud55c \ub370\uc774\ud130 \ud0d0\uc0c9\n\ud45c\uc900 \ud1b5\uacc4\ub85c \ub370\uc774\ud130 \ud0d0\uc0c9\n\uc8fc\uc11d \ub370\uc774\ud130\ub85c \uc0dd\ubb3c\ud559\uc801 \ud2b9\uc131 \ucc3e\uae30\n\n\n\n\uad6c\uc785\ucc98\u00b6\n\uc54c\ub77c\ub518\nYES24\n\uad50\ubcf4\ubb38\uace0\n\uc778\ud130\ud30c\ud06c\n\ubc18\ub514\uc564\ub8e8\ub2c8\uc2a4",
      "tags": "books",
      "url": "https://partrita.github.io/pages/books/"
    },
    {
      "title": "Taeyoon Kim",
      "text": "Download PDF fomat : taeyoonkim_resume\n\nPersonal Hompage: http://partrita.iptime.org  \nGithub repo : https://github.com/partrita\n\nSummary\u00b6\nI am a biologist who is skilled in handling the HPLC and AKTA system. Also I am familiar with computer languages which qualified to Bioinformatics analysis. I enjoy being part of, as well as managing, motivating, learning and developing. A successful and productive team and I thrive in highly pressurised and challenging working environments.\n\nCreative biologist with a passion for computer programing.\nCommunicates complex ideas with clear explanations and visual analogies.\n\n\n\n\n\n\n\n\n\nWork Experience\u00b6Researcher, CKDpharm\u00b62019-PRESENT\nYongin, South Korea, http://www.ckdpharm.com/\n\nBioengineering\nPOC study(HPLC analysis, PK)\nProtein purification\n\nResearcher, Mogam Institute, Greencross\u00b62015-2019\nYongin, South Korea, http://www.mogam.re.kr/\n\nProtein engineering\nPOC study (HPLC analysis, PK, PD)\nConjugated protein (ADC, PEGylation)\n\nInternship, Korea Basic Science Institute\u00b62015-2015\nCheongju-si, South Korea, https://www.kbsi.re.kr/\n\nHigh-throughput Mass spectrometry data analysis\nCharts and report design for a small medical device company\n\nInternship, SK Bioland cop.\u00b62011-2011\nCheongju-si, South Korea, http://www.skbioland.com/\nSupport research and development group for diagnosis of HIV\n\nTesting HIV detection kits\n\n\n\n\n\n\n\n\n\nEducation\u00b6Master of Science, Structural biology\u00b62013-2015 \nPOSTECH, Pohang\nBachelor of Science, Microbiology\u00b62006-2013\nChungbuk National Univ, Cheongju\n\nSkills\u00b6\nEnvironmental genomics \nChromatography techniques (FPLC, HPLC)\nProtein expression & analysis\nDNA manipulation & analysis \nUnderstanding of DOE, QbD\nProficiency in a high-level programming language(Python, R, Julia)\nFluency in Linux\n\n\nInterests\u00b6\nLife science   \nComputer science\nWeb development\n\n\nPubilication\u00b6\nNatronomonas Gomsonensis Sp. Nov., Isolated from a Solar Saltern, Antonie van Leeuwenhoek, 2013   \nATP\u2010dependent DNA binding, unwinding, and resection by the Mre11/Rad50 complex, EMBO, 2015\n(\ubc88\uc5ed\uc11c) \ud30c\uc774\uc36c\uc744 \ud65c\uc6a9\ud55c \uc0dd\uba85\uc815\ubcf4\ud559 2/e, \uc5d0\uc774\ucf58\ucd9c\ud310, 2019, \uc6d0\uc81c: Bioinformatics with Python Cookbook - Second Edition\n\n\nReferences\u00b6\nSung-Keun Rhee, Ph. D\n\nrhees@chungbuk.ac.kr\nDepartment of Microbiology, Chungbuk national university, Cheongju-si, 361-763, S. Korea\n\n\nSoo-Je Park, Ph. D\n\nsjpark@jejunu.ac.kr\nDepartment of Biology, Jeju National University, Jeju-si, 690-756, S.Korea\n\n\nYunje Cho, Ph. D\n\nyunje@postech.ac.kr\nDept. of Life science,Pohang University of Science and Technology, Pohang, 790-784, S. Korea\n\n\nHyun sik Kim, Ph. D\n\nfticr@kbsi.re.kr\nDivision of Mass Spectrometry Research, Korea Basic Science Institute, S.Korea",
      "tags": "resume",
      "url": "https://partrita.github.io/pages/resume/"
    },
    {
      "title": "\ucf00\ub77c\uc2a4\ub85c \ub525\ub7ec\ub2dd\ud558\uae30",
      "text": "0. \uc2dc\uc791\ud558\uae30\uc804\uc5d0\u00b6\ucc45 \uae40\ud0dc\uc601, \ube14\ub85d\uacfc \ud568\uaed8\ud558\ub294 \ud30c\uc774\uc36c \ub525\ub7ec\ub2dd \ucf00\ub77c\uc2a4, \ub514\uc9c0\ud138\ubd81\uc2a4, 2017 \uc744 \uc77d\uace0 (\ubcf5\uc2b5\uc744 \uc704\ud574)\ub9c8\uc74c\ub300\ub85c \uc815\ub9ac\ud55c \uac83\uc785\ub2c8\ub2e4. \uc124\uba85\uc774 \ub9ce\uc774 \ubd80\uc871\ud558\ub2c8 \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ucc45\uc774\ub098 \uc800\uc790\uc758 \ube14\ub85c\uadf8\ub97c \ucc38\uace0\ud558\uc138\uc694.\n1. \ucf00\ub77c\uc2a4(Keras)\u00b6\ucf00\ub77c\uc2a4\ub294 Theano\uc640 TensorFlow\ub97c \ubc31\uc5d4\ub4dc(back-end)\ub85c \uc0ac\uc6a9\ud558\ub294 \ub525\ub7ec\ub2dd \ub77c\uc774\ube0c\ub7ec\ub9ac\ub85c\uc11c Torch\uc5d0\uc11c \uc601\uac10\uc744 \uc5bb\uc5b4 \uc9c1\uad00\uc801 API\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4. \ucc3d\uc2dc\uc790\ub294 Google\uc758 \uc18c\ud504\ud2b8\uc6e8\uc5b4 \uc5d4\uc9c0\ub2c8\uc5b4\uc778 Francois Chollet\uc785\ub2c8\ub2e4.\n\n\uc9c1\uad00\uc801 API\nTheano, TensorFlow\uac00 \ubc31\uc5d4\ub4dc\n\ube60\ub974\uac8c \uc131\uc7a5\ud558\uace0 \uc788\ub294 \ud504\ub808\uc784\uc6cc\ud06c\n\n1.1 \ucf00\ub77c\uc2a4\uc758 \uae30\ubcf8\uac1c\ub150\u00b6\ucf00\ub77c\uc2a4\ub85c \ub525\ub7ec\ub2dd\ubaa8\ub378\uc744 \ub9cc\ub4e4 \ub54c\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \uc21c\uc11c\ub85c \uc791\uc131\ud569\ub2c8\ub2e4.\n\n\ub370\uc774\ud130 \ubd88\ub7ec\uc624\uace0 \uc804\ucc98\ub9ac\n\ubaa8\ub378\uc744 \uad6c\uc131\ud558\uae30\n\ubaa8\ub378 \ud559\uc2b5\uacfc \ud3c9\uac00\ud558\uae30\n\ubaa8\ub378\ub85c \uc608\uce21\ud558\uae30\n\n\n\n\n\n\n\n\n2. \ub808\uc774\uc5b4\u00b6\ucf00\ub77c\uc2a4\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \ub808\uc774\uc5b4\ub294 \uce35\uce35\uc774 \uc313\uc544\uc11c \ubaa8\ub378\uc744 \ub9cc\ub4dc\ub294 \uac1c\ub150\uc785\ub2c8\ub2e4.\n2.1 \uc778\uacf5 \uc2e0\uacbd\ub9dd\u00b6\ucf00\ub77c\uc2a4\uc5d0\uc11c\ub294 Dense\ub77c\ub294 \ud074\ub798\uc2a4\ub85c \uad6c\ud604\uc774 \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc640 \uac19\uc774 \uc0ac\uc6a9\ud558\uc8e0.\nDense(8, input_dim = 4, activation = 'relu')\n\n\n\uccab\ubc88\uc9f8 \uc778\uc790 : \ucd9c\ub825 \ub274\ub7f0\uc758 \uc218\ninput_dim : \uc785\ub825 \ub274\ub7f0\uc758 \uc218, \uc785\ub825\uce35\uc5d0\uc11c\ub9cc \uc0ac\uc6a9\nactivation : \ud65c\uc131\ud654 \ud568\uc218\nlinear(default \uac12): \uacc4\uc0b0\ub41c \uac12\uc774 \uadf8\ub300\ub85c \ucd9c\ub825\nsigmoid : \uc774\uc9c4 \ubd84\ub958 \ubb38\uc81c\uc5d0 \uc8fc\ub85c \uc0ac\uc6a9\nrelu : \uc740\ub2c9\uce35\uc5d0 \uc8fc\ub85c \uc0ac\uc6a9\nsoftmax : \ucd9c\ub825\uce35\uc5d0 \uc8fc\ub85c \uc0ac\uc6a9\n\n\n\n2.2 \ub808\uc774\uc5b4 \uc313\uae30\u00b64\uac1c\uc758 \uc785\ub825\uac12\uc744 \ubc1b\uc544 \uc774\uc9c4 \ubd84\ub958\ud558\ub294 \ubaa8\ub378\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\nmodel = Sequential()\nmodel.add(Dense(8, input_dim = 4, activation = 'relu'))\nmodel.add(Dense(8, activation = 'relu'))\nmodel.add(Dense(1, activation = 'sigmoid'))\n\n2.3 \ub2e4\uce35 \ud37c\uc149\ud2b8\ub860 \uc2e0\uacbd\ub9dd \ubaa8\ub378\u00b6\uac04\ub2e8\ud55c \ub2e4\uce35 \ud37c\uc149\ud2b8\ub860 \uc2e0\uacbd\ub9dd \ubaa8\ub378\ub85c \uc774\uc9c4 \ubd84\ub958\ub97c \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc608\uc81c\ub85c \uc0ac\uc6a9\ud560 \ub370\uc774\ud130\ub294 Pima \uc778\ub514\uc5b8\uc758 \ub2f9\ub1e8\ubcd1 \ubc1c\ubcd1 \ub370\uc774\ud130 \uc785\ub2c8\ub2e4.\n1) \ub370\uc774\ud130 \uc900\ube44\ud558\uae30\u00b6\uc774\uc81c ics.uci.edu \uc5d0\uc11c\ub294 \ub354\uc774\uc0c1 \uc81c\uacf5\ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc800\ub294 Kaggle\uc5d0\uc11c diabetes.csv \ud30c\uc77c\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ud588\uc2b5\ub2c8\ub2e4. \uac04\ub7b5\ud558\uac8c \ud30c\uc77c\uc744 \uc0b4\ud3b4\ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n\uc778\uc2a4\ud134\uc2a4\uc758 \uc218 : 768\uac1c\n\uc18d\uc131\uc758 \uc218 : 8 (\uc790\uc138\ud55c\uac83\uc740 \uc0dd\ub7b5)\n\ud074\ub798\uc2a4\uc758 \uc218 : 2 (\ub2f9\ub1e8\ubcd1 \uc720/\ubb34)\n\npandas\ub85c \ub370\uc774\ud130\uc758 \ubaa8\uc591\uc744 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport pandas as pd\ndf = pd.read_csv('../diabetes.csv')\ndf.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[1]:\n\n\n\n\n\n\n  \n    \n      \n      Pregnancies\n      Glucose\n      BloodPressure\n      SkinThickness\n      Insulin\n      BMI\n      DiabetesPedigreeFunction\n      Age\n      Outcome\n    \n  \n  \n    \n      763\n      10\n      101\n      76\n      48\n      180\n      32.9\n      0.171\n      63\n      0\n    \n    \n      764\n      2\n      122\n      70\n      27\n      0\n      36.8\n      0.340\n      27\n      0\n    \n    \n      765\n      5\n      121\n      72\n      23\n      112\n      26.2\n      0.245\n      30\n      0\n    \n    \n      766\n      1\n      126\n      60\n      0\n      0\n      30.1\n      0.349\n      47\n      1\n    \n    \n      767\n      1\n      93\n      70\n      31\n      0\n      30.4\n      0.315\n      23\n      0\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n2) \ub370\uc774\ud130 \uc804\ucc98\ub9ac\u00b6\ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc624\uae30 \uc55e\uc11c, \ub79c\ub364 \uc2dc\ub4dc\ub97c \uba85\uc2dc\uc801\uc73c\ub85c \uc815\ud569\ub2c8\ub2e4. \uc774\uac83\uc744 \ud558\uc9c0 \uc54a\uc73c\uba74 \uc2e4\ud589\ud560 \ub54c\ub9c8\ub2e4 \ub2e4\ub978 \uacb0\uacfc\uac00 \ub098\uc624\ubbc0\ub85c \ud30c\ub77c\ubbf8\ud130 \uc870\uc815\uc2dc\uc5d0\ub294 \uace0\uc815\ud574 \uc8fc\ub294\uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nimport numpy as np\nnp.random.seed(5) # \ub79c\ub364\uc2dc\ub4dc \uace0\uc815\uc2dc\ud0a4\uae30\n# \ub2e4\uc6b4\ubc1b\uc740 \ud30c\uc77c\uc774 \uac19\uc740 \ud3f4\ub354\uc5d0 \uc788\ub2e4\uace0 \uac00\uc815\ud569\ub2c8\ub2e4.\ndataset = np.genfromtxt('../diabetes.csv', delimiter=',')\n# \ub370\uc774\ud130\ub97c \ud559\uc2b5\uc6a9\uacfc \uac80\uc99d\uc6a9\uc73c\ub85c \ub098\ub215\ub2c8\ub2e4.\nx_train = dataset[1:700, 0:8] # 700\uac1c\ub294 \ud559\uc2b5\uc6a9\uc73c\ub85c 68\uac1c\ub294 \uac80\uc99d\uc6a9\uc73c\ub85c \uc4f0\uaca0\uc2b5\ub2c8\ub2e4\ny_train = dataset[1:700, 8]\nx_test = dataset[700:, 0:8] \ny_test = dataset[700:, 8]\nx_train # \ub370\uc774\ud130\ub97c \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\narray([[   6.   ,  148.   ,   72.   , ...,   33.6  ,    0.627,   50.   ],\n       [   1.   ,   85.   ,   66.   , ...,   26.6  ,    0.351,   31.   ],\n       [   8.   ,  183.   ,   64.   , ...,   23.3  ,    0.672,   32.   ],\n       ..., \n       [   3.   ,  169.   ,   74.   , ...,   29.9  ,    0.268,   31.   ],\n       [   0.   ,   99.   ,    0.   , ...,   25.   ,    0.253,   22.   ],\n       [   4.   ,  127.   ,   88.   , ...,   34.5  ,    0.598,   28.   ]])\n\n\n\n\n\n\n\n\n\n\n\n3) \ubaa8\ub378 \uad6c\uc131\ud558\uae30\u00b6Dense \ub808\uc774\uc5b4\ub9cc\uc744 \uc0ac\uc6a9\ud558\uc5ec \ub2e4\uce35 \ud37c\uc149\ud2b8\ub860 \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc744 \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\uccab\ubc88\uc9f8 \ub808\uc774\uc5b4\ub294 \uc740\ub2c9\uce35\uc73c\ub85c 8\uac1c\uc758 \uc18d\uc131\uc744 \uc785\ub825\ubc1b\uc544 12\uac1c\ub85c \ucd9c\ub825\ud569\ub2c8\ub2e4.\n\ub450\ubc88\uc9f8 \ub808\uc774\uc5b4\ub294 \uc740\ub2c9\uce35\uc73c\ub85c 12\uac1c\uc758 \ub274\ub7f0\uc744 \uc785\ub825\ubc1b\uc544 8\uac1c\ub85c \ucd9c\ub825\ud569\ub2c8\ub2e4.\n\ub9c8\uc9c0\ub9c9 \ub808\uc774\uc5b4\ub294 \ucd9c\ub825 \ub808\uc774\uc5b4\ub85c 8\uac1c\uc758 \ub274\ub7f0\uc744 \uc785\ub825\ubc1b\uc544 1\uac1c\uc758 \ub274\ub7f0\uc744 \ucd9c\ub825\ud569\ub2c8\ub2e4.\n\n\uc740\ub2c9\uce35\uc740 relu \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uace0 \ucd9c\ub825\uce35\uc740 sigmoid \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense\n\n# \ubaa8\ub378 \ub9cc\ub4e4\uae30\nmodel = Sequential()\nmodel.add(Dense(12, input_dim = 8, activation = 'relu'))\nmodel.add(Dense(8, activation = 'relu'))\nmodel.add(Dense(1, activation = 'sigmoid'))\n# \ubaa8\ub378 \ud559\uc2b5\uacfc\uc815 \uc124\uc815\nmodel.compile(loss = 'binary_crossentropy', optimizer = 'adam', metrics =['accuracy'])\n# loss : \ud3c9\uac00\uc5d0 \uc0ac\uc6a9\ub41c \uc190\uc2e4 \ud568\uc218\uc785\ub2c8\ub2e4. \uc774\uc9c4 \ubd84\ub958\uc5d0\uc11c\ub294 binary_crossentropy\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4\n# optimizer : \ucd5c\uc801 \ud30c\ub77c\ubbf8\ud130\ub97c \ucc3e\ub294 \uc54c\uace0\ub9ac\uc998\uc73c\ub85c \uacbd\uc0ac \ud558\uac15\ubc95\uc758 \ud558\ub098\uc778 adam\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n# metrics : \ud3c9\uac00\ucc99\ub3c4, \ubd84\ub958\ubb38\uc81c\uc5d0\uc11c\ub294 \ubcf4\ud1b5 accuracy\ub97c \uc501\ub2c8\ub2e4.\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nUsing TensorFlow backend.\n\n\n\n\n\n\n\n\n\n\n\n4) \ud559\uc2b5\uacfc \ud3c9\uac00\u00b6\uba3c\uc800 fit() \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574 \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0b5\ub2c8\ub2e4. \ud544\uc694\ud55c \uc124\uc815\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n\uccab\ubc88\uc9f8 \uc778\uc790 : \uc785\ub825 \ubcc0\uc218, \uc5ec\uae30\uc11c\ub294 8\uac00\uc9c0 \uc18d\uc131\uc785\ub2c8\ub2e4.\n\ub450\ubc88\uc9f8 \uc778\uc790 : \ucd9c\ub825 \ubcc0\uc218, \uc5ec\uae30\uc11c\ub294 \ub2f9\ub1e8\ubcd1 \uc720/\ubb34 \uc785\ub2c8\ub2e4.\nbatch_size : \uac00\uc911\uce58\ub97c \uc5c5\ub370\uc774\ud2b8\ud560 \ubc30\uce58 \ud06c\uae30\nverbose : \ud559\uc2b5\uacfc\uc815 \ud45c\uc2dc\uc5ec\ubd80, \ubcf4\uace0 \uc2f6\ub2e4\uba74 1\n\n\uc2dc\ud5d8\uc14b\uc744 \uc774\uc6a9\ud574 \ud559\uc2b5\ud55c \ubaa8\ub378\uc744 \ud3c9\uac00\ud558\uaca0\uc2b5\ub2c8\ub2e4. evaluate() \uae30\ub2a5\uc744 \uc774\uc6a9\ud574 \uac04\ub2e8\ud788 \uc218\ud589\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nhist =  model.fit(x_train, y_train, epochs = 200, batch_size = 64, verbose=0)\n# \ubaa8\ub378 \ud3c9\uac00\ud558\uae30\nscore = model.evaluate(x_test,y_test)\nprint('\uc815\ud655\ub3c4\ub294 {}% \uc785\ub2c8\ub2e4.'.format(score[1]*100))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n69/69 [==============================] - 0s 306us/step\n\uc815\ud655\ub3c4\ub294 73.91304365102795% \uc785\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\n\n\n\n2.4 \ud788\uc2a4\ud1a0\ub9ac \uae30\ub2a5\u00b6\ud788\uc2a4\ud1a0\ub9ac \uae30\ub2a5\uc740 \ucf00\ub77c\uc2a4\uc5d0 \uae30\ubcf8\uc73c\ub85c \ud0d1\uc7ac\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ubcc4\ub3c4\uc758 \uc124\uc815\uc5c6\uc774 \uc544\ub798\uc640 \uac19\uc774 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\nfig,(ax0, ax1) = plt.subplots(nrows = 1, ncols = 2, sharey = False)\nax0.plot(hist.history[\"acc\"], label = 'acc')\nax0.set(title='Accuracy')\nax1.plot(hist.history[\"loss\"], label = 'loss')\nax1.set(title='Accuracy')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n[<matplotlib.text.Text at 0x7fd29067ec88>]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3. \ud569\uc131\uacf1(convolution) \uc2e0\uacbd\ub9dd \ub808\uc774\uc5b4\u00b6\ucf00\ub77c\uc2a4\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \ud569\uc131\uacf1 \ub808\uc774\uc5b4 \uc911 \uc601\uc0c1\ucc98\ub9ac\uc5d0 \uc8fc\ub85c \uc0ac\uc6a9\ub418\ub294 Conv2D \ub808\uc774\uc5b4\ub97c \uc0b4\ud3b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc544\ub798\ub294 \uc0ac\uc6a9 \uc608\uc81c \uc785\ub2c8\ub2e4.\nConv2D(1, (2, 2), padding = 'valid', input_shape = (4, 4, 1), activation = 'relu')\n\n\n\uccab\ubc88\uc9f8 \uc778\uc790: \ud569\uc131\uacf1 \ud544\ud130\uc758 \uc22b\uc790\n\ub450\ubc88\uc9f8 \uc778\uc790: \ud569\uc131\uacf1 \ucee4\ub110\uc758 (\ud589,\uc5f4)\npadding : \uacbd\uacc4 \ucc98\ub9ac \ubc29\ubc95\nvalid : \ucd9c\ub825\uc0ac\uc774\uc988\ub294 \uc785\ub825 \uc0ac\uc774\uc988\ubcf4\ub2e4 \uc791\uc544\uc9d1\ub2c8\ub2e4.\nsame : \ucd9c\ub825 \uc774\ubbf8\uc9c0 \uc0ac\uc774\uc988\uc640 \uc785\ub825 \uc0ac\uc774\uc988\uac00 \ub3d9\uc77c\ud569\ub2c8\ub2e4.\n\n\ninput_shape : \uc785\ub825\ud615\ud0dc, (\ud589, \uc5f4, \ucc44\ub110 \uc218); \ucc44\ub110\uc740 \ud751\ubc31\uc774\uba74 1, \uceec\ub7ec\uba74 3\uc785\ub2c8\ub2e4.\nactivation : \ud65c\uc131\ud654 \ud568\uc218\ub97c \uc124\uc815\n\n\uc0ac\uc18c\ud55c \ubcc0\ud654\ub97c \ubb34\uc2dc\ud558\ub294 Max Pooling \ub808\uc774\uc5b4\n1\ucc28\uc6d0\uc73c\ub85c \ubc14\uafb8\ub294 Flatten \ub808\uc774\uc5b4\n3.1 \ud569\uc131\uacf1(convolution) \uc2e0\uacbd\ub9dd \ubaa8\ub378 \ub9cc\ub4e4\uae30\u00b6\uc774\ubbf8\uc9c0 \uae30\ubc18\uc758 \ubd84\ub958\uc5d0\ub294 \ud569\uc131\uacf1 \uc2e0\uacbd\ub9d8 \ubaa8\ub378\uc774 \uc801\ud569\ud569\ub2c8\ub2e4. \uc5ec\uae30\uc11c \uc6b0\ub9ac\ub294 \uc774\ubbf8\uc9c0\ud30c\uc77c\uc758 \ubd84\ub958\ub97c \ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n1)  \ub370\uc774\ud130 \uc900\ube44\ud558\uae30\u00b6\uc800\uc790\uc758 \ube14\ub85c\uadf8 \uc5d0\uc11c \uc81c\uacf5\ud558\uace0 \uc788\ub294 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uace0 \uc0b4\ud3b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \n\uc6d0, \uc0ac\uac01\ud615, \uc0bc\uac01\ud615 \ub370\uc774\ud130\uc14b\uc744 \uc608\uc81c\ub85c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uad6c\uc131\uc740 \ud6c8\ub828\uc14b\uacfc \uc2dc\ud5d8\uc14b\uc73c\ub85c \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\uc544\ub798 \uadf8\ub9bc\uc740 \ud6c8\ub828\uc14b\uc785\ub2c8\ub2e4.\n\n Figure from tykimos.github.io \ub2e4\uc74c\uc740 \uc2dc\ud5d8\uc6a9 \ub370\uc774\ud130\uc785\ub2c8\ub2e4.\n\n Figure from tykimos.github.io \n\n\n\n\n\n\n2) \ub370\uc774\ud130 \uc804\ucc98\ub9ac\u00b6\uc218\uc815\ub41c \uc804\uccb4 \ucf54\ub4dc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \ucc38\uace0\ub85c \uc2dc\ud5d8\uc14b\uc740 \ub370\uc774\ud130 \ubd80\ud480\ub9ac\uae30\ub97c \ud560 \ud544\uc694\uac00 \uc5c6\uc73c\ub2c8, test_datagen \uac1d\uccb4 \uc0dd\uc131 \uc2dc\uc5d0\ub294 \ubcc4\ub3c4\uc758 \ud30c\ub77c\ubbf8\ud130\ub97c \ucd94\uac00\ud558\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 fit_generator\ud568\uc218\uc5d0\uc11c steps_per_epoch\uc758 \uac12\uc740 \uae30\uc874 15\uac1c\uc5d0\uc11c \ub354 \ub9ce\uc740 \uc218 (\ud604\uc7ac \uc608\ub294 1500\uac1c)\ub85c \uc124\uc815\ud569\ub2c8\ub2e4.\nbatch_size * steps_per_epoch\uac00 \uc804\uccb4 \uc0d8\ud50c \uc218 \uc778\ub370, \ub370\uc774\ud130 \ubd80\ud480\ub9ac\uae30\ub97c \ud558\uc9c0 \uc54a\uc744 \ub54c\ub294 \uae30\uc874\uc758 15\uac1c\uc758 \ubc30\uce58\uc0ac\uc774\uc988(3\uac1c)\ub85c \uc804\uccb4 45\uac1c\ub97c \ubaa8\ub450 \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc9c0\ub9cc, ImageDataGenerator\ud568\uc218\ub97c \ud1b5\ud574 \ub370\uc774\ud130 \ubd80\ud480\ub9ac\uae30\ub294 \ud560 \ub54c\ub294 \ud558\ub098\uc758 \uc0d8\ud50c\ub85c \uc5ec\ub7ec \uac1c\uc758 \uacb0\uacfc\ub97c \uc5bb\uae30 \ub54c\ubb38\uc5d0 \uc694\uccad\ud558\ub294 \ub370\ub85c \ubb34\ud55c\uc758 \uc0d8\ud50c\uc774 \uc81c\uacf5\ub429\ub2c8\ub2e4.\n\uc5ec\uae30\uc11c\ub294 100\ubc30 \uc815\ub3c4\uc778 1500\uac1c\ub85c \uc124\uc815\ud588\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \n# \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, Flatten, Dropout\nfrom keras.layers.convolutional import Conv2D, MaxPooling2D\nfrom keras.preprocessing.image import ImageDataGenerator\n# \ub79c\ub364\uc2dc\ub4dc \uace0\uc815\uc2dc\ud0a4\uae30\nnp.random.seed(5)\n# \ub370\uc774\ud130\uc14b \ubd88\ub7ec\uc624\uae30\ntrain_datagen = ImageDataGenerator(rescale=1./255, \n                                   rotation_range=10,\n                                   width_shift_range=0.2,\n                                   height_shift_range=0.2,\n                                   shear_range=0.7,\n                                   zoom_range=[0.9, 2.2],\n                                   horizontal_flip=True,\n                                   vertical_flip=True,\n                                   fill_mode='nearest')\n\ntrain_generator = train_datagen.flow_from_directory(\n        '../hard_handwriting_shape/train',\n        target_size=(24, 24),\n        batch_size=3,\n        class_mode='categorical')\n\ntest_datagen = ImageDataGenerator(rescale=1./255)\n\ntest_generator = test_datagen.flow_from_directory(\n        '../hard_handwriting_shape/test',\n        target_size=(24, 24),    \n        batch_size=3,\n        class_mode='categorical')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nFound 45 images belonging to 3 classes.\nFound 15 images belonging to 3 classes.\n\n\n\n\n\n\n\n\n\n\n\n3) \ubaa8\ub378 \ud559\uc2b5\ubc0f \ud3c9\uac00\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[\u00a0]:\n\n    \nimport warnings\nwarnings.filterwarnings(\"ignore\", message=\"numpy.dtype size changed\") \n# numpy\ub85c\uc778\ud55c \uacbd\uace0 \ubb34\uc2dc\n\nmodel = Sequential()\nmodel.add(Conv2D(32, kernel_size=(3, 3),\n                 activation='relu',\n                 input_shape=(24,24,3)))\nmodel.add(Conv2D(64, (3, 3), activation='relu'))\nmodel.add(MaxPooling2D(pool_size=(2, 2)))\nmodel.add(Flatten())\nmodel.add(Dense(128, activation='relu'))\nmodel.add(Dense(3, activation='softmax'))\n\n# \ubaa8\ub378 \uc124\uc815\ud558\uae30\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# \ubaa8\ub378 \ud559\uc2b5\uc2dc\ud0a4\uae30\nmodel.fit_generator(train_generator, steps_per_epoch=1000,\n        epochs=20, validation_data=test_generator, validation_steps=5, verbose = 0)\n\n# \ubaa8\ub378 \ud3c9\uac00\ud558\uae30\nscores = model.evaluate_generator(test_generator,steps = 5)\nprint(\"\uc608\uce21\uc758 \uc815\ud655\ub3c4\ub294 {} % \uc785\ub2c8\ub2e4.\".format(scores[1]*100))\n\n\n    \n\n\n\n\n\n\n\n4) \ubaa8\ub378\ub85c \uc608\uce21\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[7]:\n\n    \n# \ubaa8\ub378 \uc608\uce21\ud558\uae30\nprint(\"-- \uc608\uce21 --\")\noutput = model.predict_generator(test_generator, steps = 5)\nnp.set_printoptions(formatter={'float': lambda x: \"{0:0.3f}\".format(x)})\nprint(output)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\uc608\uce21\uc758 \uc815\ud655\ub3c4\ub294 73.33333373069763 % \uc785\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\n\n\n\n\ub3c4\ud615\uc744 \ubd84\ub958\ud558\ub294 \uac04\ub2e8\ud55c \ubb38\uc81c\uc5d0\uc11c \ub370\uc774\ud130 \ubd80\ud480\ub9ac\uae30 \ubc29\ubc95\uc5d0 \ub300\ud558\uc5ec \uc54c\uc544\ubcf4\uc558\uace0, \uac01 \ud30c\ub77c\ubbf8\ud130 \ubcc4\ub85c \uc5b4\ub5bb\uac8c \ub370\uc774\ud130\uac00 \ubd80\ud480\uc5b4\uc9c0\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\uc558\uc2b5\ub2c8\ub2e4.\n\ub370\uc774\ud130 \ubd80\ud480\ub9ac\uae30 \ubc29\ubc95\uc740 \ud559\uc2b5\uc6a9 \ub370\uc774\ud130\uac00 \ucda9\ubd84\ud558\uc9c0 \uc54a\uc744\ub54c \uc131\ub2a5 \uac1c\uc120\uc5d0 \ud070 \ub3c4\uc6c0\uc744 \uc90d\ub2c8\ub2e4.\n\n4. \uc21c\ud658 \uc2e0\uacbd\ub9dd \ubaa8\ub378 RNN (Recurrent Neural Network)\u00b6\uc21c\ud658 \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc740 \uc21c\ucc28\uc801\uc778 \uc790\ub8cc\uc5d0\uc11c \uaddc\uce59\uc744 \ucc3e\uc2b5\ub2c8\ub2e4. \ucf00\ub77c\uc2a4\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uc21c\ud658 \uc2e0\uacbd\ub9dd \ub808\uc774\uc5b4\uc911 \uac00\uc7a5 \ud754\ud788 \uc4f0\uc774\ub294 LSTM(Long Short-Term Memory units) \ub808\uc774\uc5b4\ub97c \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\nLSTM \ub808\uc774\uc5b4\u00b6\uc0ac\uc6a9\ubc95\uc740 Dense \ub808\uc774\uc5b4\uc640 \ube44\uc2b7\ud558\uc9c0\ub9cc, \uc2dc\ud000\uc2a4 \ucd9c\ub825\uc5ec\ubd80\uc640 \uc0c1\ud0dc \uc720\uc9c0 \uc124\uc815\uc73c\ub85c \ub2e4\uc591\ud55c \ud615\ud0dc\ub85c \uad6c\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nLSTM(3, input_dim= 1, input_length=4)\n\n\n\uccab\ubc88\uc9f8 \uc778\uc790:\ninput_dim\ninput_length:\n\n4.1 \uc21c\ud658 \uc2e0\uacbd\ub9dd \ubaa8\ub378 \ub9cc\ub4e4\uae30\u00b6\uc55e\uc11c \uc0b4\ud3b4\ubcf8 LSTM \ub808\uc774\uc5b4\ub97c \uc0ac\uc6a9\ud574 \uc21c\ud658 \uc2e0\uacbd\ub9dd \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n1) \ub370\uc774\ud130 \uc900\ube44\u00b6\uc900\ube44\ud55c \ub370\uc774\ud130\ub294 \uc0ac\ub78c\uc758 Y\uc5fc\uc0c9\uccb4 DNA\uc11c\uc5f4\uc911 \ubc18\ubcf5\uc11c\uc5f4\uc774 \uc788\ub294 \uc870\uac01\uc785\ub2c8\ub2e4. \uc11c\uc5f4\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\nAGATAGACAGATTAGATGATAGGGAGATGATACATAGAAGGTAGATAGA\nTAGATAGATAGATAGATAGATAGATAGATAGATAGATAATACATAGATA\nATTAATGGATAGATATATAGA\n\n\n\uc57d 87%\uc758 \uc815\ud655\ub3c4\ub85c AGAT\uac00 \ubc18\ubcf5\ub429\ub2c8\ub2e4. \uae38\uc774\ub294 \uc57d 30\ubc88 \ubc18\ubcf5\uc774\uace0\uc694.\nDNA \uc11c\uc5f4 \ucc98\ub7fc \ubb38\uc790\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\ub294 \uac83\uc740 \ubaa8\ub378 \uc785\ucd9c\ub825\uc73c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc5d0 \uac01\uac01\uc744 \ub97c \uc22b\uc790\ub85c \ubcc0\ud658\ud560 \uc218 \uc788\ub294 \uc0ac\uc804\uc744 \ud558\ub098 \ub9cc\ub4e4\uc5b4\ubd05\ub2c8\ub2e4.\n\uccab\ubc88\uc9f8 \uc0ac\uc804\uc740 DNA\ub97c \uc22b\uc790\ub85c, \ub450\ubc88\uc9f8 \uc0ac\uc804\uc740 \uc22b\uc790\ub97c DNA\ub85c \ub9cc\ub4e4\uc5b4 \uc90d\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[22]:\n\n    \n# \uc0ac\uc6a9\ud560 \ud328\ud0a4\uc9c0 \ubd88\ub7ec\uc624\uae30\nimport keras\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM\nfrom keras.utils import np_utils\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# \ucf54\ub4dc \uc0ac\uc804 \uc815\uc758\ncode2idx = {'A':0, 'C':1, 'T':2, 'G':3}\nidx2code = {0:'A', 1:'C', 2:'T', 3:'G'}\n\n\n    \n\n\n\n\n\n\n\n\uc774\uc81c DNA \uc11c\uc5f4\uc744 \uac00\uc9c0\uace0 \ud559\uc2b5\uc6a9 \ub370\uc774\ud130\ub85c \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[23]:\n\n    \n# 2. \ub370\uc774\ud130\uc14b \uc0dd\uc131\ud558\uae30\nseq = list('AGATAGACAGATTAGATGATAGGGAGATGATACATAGAAGG\\\nTAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAATACATA\\\nGATAATTAATGGATAGATATATAGA')\n\n# \ub370\uc774\ud130\uc14b \uc0dd\uc131 \ud568\uc218   \ndef seq2dataset(seq, window_size):\n    dataset = []\n    for i in range(len(seq)-window_size):\n        subset = seq[i:(i+window_size+1)]\n        dataset.append([code2idx[item] for item in subset])\n    return np.array(dataset)\n\ndataset = seq2dataset(seq, window_size = 4)\n\nprint(dataset.shape)\nprint(dataset[:4]) # \uc55e\ucabd 4\uac1c\ub9cc \ud655\uc778\ud558\uae30\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n(115, 5)\n[[0 3 0 2 0]\n [3 0 2 0 3]\n [0 2 0 3 0]\n [2 0 3 0 1]]\n\n\n\n\n\n\n\n\n\n\n\nDNA \uc11c\uc5f4\uc744 5\uac1c\uc529 \uc790\ub974\uace0 \uac01\uac01\uc5d0 DNA\ub97c \uc22b\uc790\ub85c \ubcc0\ud658\ud588\uc2b5\ub2c8\ub2e4.\n2) \ub370\uc774\ud130 \uc804\ucc98\ub9ac\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[24]:\n\n    \n# \uc785\ub825(X)\uacfc \ucd9c\ub825(Y) \ubcc0\uc218\ub85c \ubd84\ub9ac\ud558\uae30\nx_train = dataset[:,0:4]\ny_train = dataset[:,4]\n\nmax_idx_value = 13\n\n# \uc785\ub825\uac12 \uc815\uaddc\ud654 \uc2dc\ud0a4\uae30\nx_train = x_train / float(max_idx_value)\n\n# \uc785\ub825\uc744 (\uc0d8\ud50c \uc218, \ud0c0\uc785\uc2a4\ud15d, \ud2b9\uc131 \uc218)\ub85c \ud615\ud0dc \ubcc0\ud658\nx_train = np.reshape(x_train, (115, 4, 1))\n\n# \ub77c\ubca8\uac12\uc5d0 \ub300\ud55c one-hot \uc778\ucf54\ub529 \uc218\ud589\ny_train = np_utils.to_categorical(y_train)\n\none_hot_vec_size = y_train.shape[1]\n\nprint(\"one hot encoding vector size is \", one_hot_vec_size)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\none hot encoding vector size is  4\n\n\n\n\n\n\n\n\n\n\n\n3) \ubaa8\ub378 \ud559\uc2b5 \ubc0f \ud3c9\uac00\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[25]:\n\n    \n# 3. \ubaa8\ub378 \uad6c\uc131\ud558\uae30\nmodel = Sequential()\nmodel.add(LSTM(128, input_shape = (4, 1)))\nmodel.add(Dense(one_hot_vec_size, activation='softmax'))\n\n# 4. \ubaa8\ub378 \ud559\uc2b5\uacfc\uc815 \uc124\uc815\ud558\uae30\nmodel.compile(loss='categorical_crossentropy', optimizer='adam', metrics=['accuracy'])\n\n# \uc190\uc2e4 \uc774\ub825 \ud074\ub798\uc2a4 \uc815\uc758\nclass LossHistory(keras.callbacks.Callback):\n    def init(self):\n        self.losses = []\n        \n    def on_epoch_end(self, batch, logs={}):\n        self.losses.append(logs.get('loss'))\n\nhistory = LossHistory() # \uc190\uc2e4 \uc774\ub825 \uac1d\uccb4 \uc0dd\uc131\nhistory.init()\n\n# 5. \ubaa8\ub378 \ud559\uc2b5\uc2dc\ud0a4\uae30\nmodel.fit(x_train, y_train, epochs=2000, batch_size=14, callbacks=[history], \n          verbose = 0)\n\n# 6. \ud559\uc2b5\uacfc\uc815 \uc2dc\uac01\ud654\nplt.plot(history.losses)\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.show()\n\n# 7. \ubaa8\ub378 \ud3c9\uac00\ud558\uae30\nscores = model.evaluate(x_train, y_train)\nprint(\"\uc815\ud655\ub3c4\ub294 {} % \uc785\ub2c8\ub2e4.\".format(scores[1]*100))\n\n# 8. \ubaa8\ub378 \uc0ac\uc6a9\ud558\uae30\npred_count = 115 # \ucd5c\ub300 \uc608\uce21 \uac1c\uc218 \uc815\uc758\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n115/115 [==============================] - 0s 810us/step\n\uc815\ud655\ub3c4\ub294 87.82608742299287 % \uc785\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\n\n\n\n4) \ubaa8\ub378\ub85c \uc608\uce21\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[26]:\n\n    \n# \ud55c \uad6c\uc808\ub9cc \uc608\uce21\n# AGAT\nseq_out = ['A', 'G', 'A', 'T']\npred_out = model.predict(x_train)\n\nfor i in range(pred_count):\n    idx = np.argmax(pred_out[i]) # one-hot \uc778\ucf54\ub529\uc744 \uc778\ub371\uc2a4 \uac12\uc73c\ub85c \ubcc0\ud658\n    seq_out.append(idx2code[idx]) # seq_out\ub294 \ucd5c\uc885 \uc11c\uc5f4\uc774\ubbc0\ub85c \uc778\ub371\uc2a4 \uac12\uc744 \ucf54\ub4dc\ub85c \ubcc0\ud658\ud558\uc5ec \uc800\uc7a5\n    \nprint(\"\uc870\uac01\uc529 \uc11c\uc5f4 \uc608\uce21\ud558\uae30  : \", ''.join(seq_out))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\uc870\uac01\uc529 \uc11c\uc5f4 \uc608\uce21\ud558\uae30  :  AGATAGATAGATAAGATAATAGAGAGATAATAGATAGATGGTAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGTGCATAGATAGTGAGTGGATAGATAGAGAGA\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[27]:\n\n    \n# \uace1 \uc804\uccb4 \uc608\uce21\n\nseq_in = ['A', 'G', 'A', 'T']\nseq_out = seq_in\n# \ucf54\ub4dc\ub97c \uc778\ub371\uc2a4\uac12\uc73c\ub85c \ubcc0\ud658\nseq_in = [code2idx[it] / float(max_idx_value) for it in seq_in] \n\nfor i in range(pred_count):\n    sample_in = np.array(seq_in)\n    sample_in = np.reshape(sample_in, (1, 4, 1)) # \uc0d8\ud50c \uc218, \ud0c0\uc785\uc2a4\ud15d \uc218, \uc18d\uc131 \uc218\n    pred_out = model.predict(sample_in)\n    idx = np.argmax(pred_out)\n    seq_out.append(idx2code[idx])\n    seq_in.append(idx / float(max_idx_value))\n    seq_in.pop(0)\n\nprint(\"\ud55c\ubc88\uc5d0 \uc11c\uc5f4 \uc608\uce21\ud558\uae30: \", ''.join(seq_out))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\ud55c\ubc88\uc5d0 \uc11c\uc5f4 \uc608\uce21\ud558\uae30:  AGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGA\n\n\n\n\n\n\n\n\n\n\n\n\uc608\uce21\uacb0\uacfc \ud655\uc778\u00b6Sequence alignment \ud55c \uacb0\uacfc\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\nOriginal       AGATAGACAGATTAGATGATAGGGAGATGATACATAGAAGGTAGATAGATAGATAGATAG 60\nstep-wise      AGATAGATGGATAAGATAATAGAGAGATAATAGATAGATGGTAGATAGATAGATAGATAG 60\nwhole          AGATAGATAGATAGATAGATAGATAGAT--AGATAGATAGATAGATAGATAGATAGATAG 58\n               *******  ***      ****  ****           * *******************\n\nOriginal       ATAGATAGATAGATAGATAGATAGATAATACATAGATAATT--AATGGATAGATATATAG 118\nstep-wise      ATAGATAGATAGATAGATAGATAGATAGTACATAGATAGTA--AGTAAATAGATAGATAT 118\nwhole          ATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAGATAG 118\n               ***************************                  *  ******* *** \n\nOriginal       A    119\nstep-wise      A    119\nwhole          A    119\n               *\n\n\n\uc870\uac01\uc870\uac01 \uc608\uce21\ud558\ub294 \ubc29\ubc95\uc774 \uc804\uccb4\ub97c \ud55c\ubc88\uc5d0 \uc608\uce21\ud558\ub294 \uac83 \ubcf4\ub2e4\ub294 \uc815\ud655\ud55c \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\n\n5. \uc0c1\ud0dc\uc720\uc9c0 LSTM \ubaa8\ub378\u00b6\uc774\ubc88\uc5d0\ub294 \uc0c1\ud0dc\uc720\uc9c0(Stateful) LSTM \ubaa8\ub378\uc5d0 \ub300\ud574\uc11c \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c \uc0c1\ud0dc\uc720\uc9c0\ub77c\ub294 \uac83\uc740 \ud604\uc7ac \ud559\uc2b5\ub41c \uc0c1\ud0dc\uac00 \ub2e4\uc74c \ud559\uc2b5 \uc2dc \ucd08\uae30 \uc0c1\ud0dc\ub85c \uc804\ub2ec\ub41c\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4\n\uc0c1\ud0dc \uc720\uc9c0 \ubaa8\ub4dc\uc5d0\uc11c\ub294 \ud604\uc7ac \uc0d8\ud50c\uc758 \ud559\uc2b5 \uc0c1\ud0dc\uac00 \ub2e4\uc74c \uc0d8\ud50c\uc758 \ucd08\uae30 \uc0c1\ud0dc\n\n\uae34 \uc2dc\ud000\uc2a4 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud560 \ub54c \uad8c\uc7a5\ub429\ub2c8\ub2e4. \nLSTM \ub808\uc774\uc5b4 \uc0dd\uc131\uc2dc \ub2e4\uc74c\uacfc \uac19\uc774 \ucc98\ub9ac\ud558\uba74 \ub429\ub2c8\ub2e4.\nmodel = Sequential()\nmodel.add(LSTM(128, batch_input_shape = (1, 4, 1), stateful = True))\nmodel.add(Dense(one_hot_vec_size, activation='softmax'))\n\n5.1 \uc0c1\ud0dc\uc720\uc9c0 \uc21c\ud658 \uc2e0\uacbd\ub9dd RNN \ubaa8\ub378 \ub9cc\ub4e4\uae30\u00b61) \ub370\uc774\ud130 \uc900\ube44\u00b6\uc2dc\uac04\uc758 \ud750\ub984\uc5d0 \ub530\ub77c \uc9c4\ud3ed\uc774 -1 \uc5d0\uc11c 1\uc0ac\uc774\ub85c \ubcc0\ud558\ub294 \ucf54\uc0ac\uc778 \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ub370\uc774\ud130\ub97c \uc2dc\uacc4\uc5f4 \uc218\uce58\ub77c\uace0 \ud558\uc8e0.\n\n\n\n\n\n\nIn\u00a0[55]:\n\n    \n# 0. \uc0ac\uc6a9\ud560 \ud328\ud0a4\uc9c0 \ubd88\ub7ec\uc624\uae30\nimport numpy as np\nfrom keras.models import Sequential\nfrom keras.layers import Dense, LSTM, Dropout\nfrom sklearn.preprocessing import MinMaxScaler\nimport matplotlib.pyplot as plt\n%matplotlib inline\n# 1. \ub370\uc774\ud130\uc14b \uc0dd\uc131\ud558\uae30\nsignal_data = np.cos(np.arange(1000)*(20*np.pi/1000))[:,None]\nplt.plot(np.arange(1000), signal_data) # \uc0dd\uc131\ud55c \ub370\uc774\ud130 \uc2dc\uac01\ud654\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[55]:\n\n\n\n\n\n[<matplotlib.lines.Line2D at 0x7fd12f04d588>]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2) \ub370\uc774\ud130 \uc804\ucc98\ub9ac\u00b6\ub370\uc774\ud130\ub97c \ubaa8\ub378\uc5d0 \ud559\uc2b5\uc2dc\ud0a4\uae30 \uc704\ud574\uc11c \uc804\ucc98\ub9ac\uac00 \ud544\uc694\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[56]:\n\n    \ndef create_dataset(signal_data, look_back=1):\n    dataX, dataY = [], []\n    for i in range(len(signal_data)-look_back):\n        dataX.append(signal_data[i:(i+look_back), 0])\n        dataY.append(signal_data[i + look_back, 0])\n    return np.array(dataX), np.array(dataY)\n\nclass CustomHistory(keras.callbacks.Callback):\n    def init(self):\n        self.train_loss = []\n        self.val_loss = []\n        \n    def on_epoch_end(self, batch, logs={}):\n        self.train_loss.append(logs.get('loss'))\n        self.val_loss.append(logs.get('val_loss'))\n\nlook_back = 40\n\n# \ub370\uc774\ud130 \uc804\ucc98\ub9ac\nscaler = MinMaxScaler(feature_range=(0, 1))\nsignal_data = scaler.fit_transform(signal_data)\n\n# \ub370\uc774\ud130 \ubd84\ub9ac\ntrain = signal_data[0:700]\nval = signal_data[600:700]\ntest = signal_data[700:]\n\n# \ub370\uc774\ud130\uc14b \uc0dd\uc131\nx_train, y_train = create_dataset(train, look_back)\nx_val, y_val = create_dataset(val, look_back)\nx_test, y_test = create_dataset(test, look_back)\n\n# \ub370\uc774\ud130\uc14b \uc804\ucc98\ub9ac\nx_train = np.reshape(x_train, (x_train.shape[0], x_train.shape[1], 1))\nx_val = np.reshape(x_val, (x_val.shape[0], x_val.shape[1], 1))\nx_test = np.reshape(x_test, (x_test.shape[0], x_test.shape[1], 1))\n\n\n    \n\n\n\n\n\n\n\n3) \ubaa8\ub378 \ud559\uc2b5\uacfc \ud3c9\uac00\u00b6\uc2dc\uacc4\uc5f4 \uc218\uce58\ub97c \uc785\ub825\ubc1b\uc544 \uc608\uce21\ud558\uae30 \uc704\ud574 \uc0c1\ud0dc \uc720\uc9c0 \ub2e4\uce35 \uc21c\ud658\uc2e0\uacbd\ub9dd \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4. \ucf54\ub4dc\ub294 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\ud559\uc2b5 \uc2dc\uac04\uc774 \uc544\uc8fc \uc624\ub798\uac78\ub9ac\ub2c8 \uc8fc\uc758\ud558\uc138\uc694.\n\n\n\n\n\n\n\nIn\u00a0[57]:\n\n    \n# 2. \ubaa8\ub378 \uad6c\uc131\ud558\uae30\nmodel = Sequential()\nfor i in range(2):\n    model.add(LSTM(32, batch_input_shape=(1, look_back, 1), stateful=True, \n                   return_sequences=True))\n    model.add(Dropout(0.3))\nmodel.add(LSTM(32, batch_input_shape=(1, look_back, 1), stateful=True))\nmodel.add(Dropout(0.3))\nmodel.add(Dense(1))\n\n# 3. \ubaa8\ub378 \ud559\uc2b5\uacfc\uc815 \uc124\uc815\ud558\uae30\nmodel.compile(loss='mean_squared_error', optimizer='adam')\n\n# 4. \ubaa8\ub378 \ud559\uc2b5\uc2dc\ud0a4\uae30\ncustom_hist = CustomHistory()\ncustom_hist.init()\n\nfor i in range(50):\n    model.fit(x_train, y_train, epochs=1, batch_size=1, shuffle=False, \n              callbacks=[custom_hist], validation_data=(x_val, y_val), verbose= 0)\n    model.reset_states()\n\n\n    \n\n\n\n\n\n\n\n\ud559\uc2b5\uacfc\uc815\uc744 \uc2dc\uac01\ud654\ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[58]:\n\n    \n# 5. \ud559\uc2b5\uacfc\uc815 \uc0b4\ud3b4\ubcf4\uae30\nplt.plot(custom_hist.train_loss)\nplt.plot(custom_hist.val_loss)\nplt.ylim(0.0, 0.15)\nplt.ylabel('loss')\nplt.xlabel('epoch')\nplt.legend(['train', 'val'])\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ubaa8\ub378\uc774 \uc5bc\ub9c8\ub098 \uc815\ud655\ud55c\uc9c0 \ud655\uc778\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[59]:\n\n    \n# 6. \ubaa8\ub378 \ud3c9\uac00\ud558\uae30\ntrainScore = model.evaluate(x_train, y_train, batch_size=1, verbose=0)\nmodel.reset_states()\nprint('Train Score: ', trainScore)\nvalScore = model.evaluate(x_val, y_val, batch_size=1, verbose=0)\nmodel.reset_states()\nprint('Validataion Score: ', valScore)\ntestScore = model.evaluate(x_test, y_test, batch_size=1, verbose=0)\nmodel.reset_states()\nprint('Test Score: ', testScore)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nTrain Score:  0.00237784640335\nValidataion Score:  0.000651868844193\nTest Score:  0.00211231139425\n\n\n\n\n\n\n\n\n\n\n\n4) \ubaa8\ub378\ub85c \uc608\uce21\ud558\uae30\u00b6\ubaa8\ub378\uc744 \uac00\uc9c0\uace0 \ucf54\uc0ac\uc778 \uace1\uc120\uc774 \uadf8\ub824\uc9c0\ub294\uc9c0 \uc608\uce21\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc6d0\ubcf8\uacfc \uacb9\uccd0\uc11c \uc2dc\uac01\ud654\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[61]:\n\n    \n# 7. \ubaa8\ub378 \uc0ac\uc6a9\ud558\uae30\nlook_ahead = 260\nxhat = x_test[0]\npredictions = np.zeros((look_ahead,1))\nfor i in range(look_ahead):\n    prediction = model.predict(np.array([xhat]), batch_size=1)\n    predictions[i] = prediction\n    xhat = np.vstack([xhat[1:],prediction])\n    \nplt.figure(figsize=(12,5))\nplt.plot(np.arange(look_ahead),predictions,'r',label=\"prediction\")\nplt.plot(np.arange(look_ahead),y_test[:look_ahead],label=\"test function\")\nplt.legend()\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uadf8\ub9bc\uc5d0\uc11c \ubcfc \uc218 \uc788\ub4ef\uc774 \uc9c4\ud3ed\uacfc \uc8fc\uae30\uac00 \uc720\uc0ac\ud55c \ud615\ud0dc\uc758 \uacb0\uacfc\ub97c \uc5bb\uc5c8\uc2b5\ub2c8\ub2e4. \uc0c1\ud0dc\uc720\uc9c0 \ubaa8\ub4dc\uc5d0\uc11c\ub294 \ubcf4\ud1b5 \ubc30\uce58 \uc0ac\uc774\uc988\ub97c 1\ub85c \uc124\uc815\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc11c\ub85c \uc131\uaca9\uc774 \ub2e4\ub978 \uc2dc\uacc4\uc5f4 \uc790\ub8cc\uac00 \uc788\ub2e4\uba74 \uac2f\uc218\ub97c \ucd94\uac00\ud574\uc57c \ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uc8fc\uc2dd 3\uc885\ubaa9\uc744 \ud559\uc2b5\ud55c\ub2e4\uba74 \ubc30\uce58 \uc0ac\uc774\uc988\ub294 3\uc774 \ub418\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n\ub9c8\uce58\uba70\u00b6\ub525\ub7ec\ub2dd \ub77c\uc774\ube0c\ub7ec\ub9ac \ucf00\ub77c\uc2a4\uc5d0 \ub300\ud574 \uc54c\uc544 \ubcf4\uc558\uc2b5\ub2c8\ub2e4. \ucf00\ub77c\uc2a4\ub294 \ub108\ubb34\ub098\ub3c4 \ud3b8\ub9ac\ud569\ub2c8\ub2e4. \uc9e7\uc740 \ucf54\ub4dc\ub85c \ub2e4\uc591\ud55c \ub525\ub7ec\ub2dd \ubaa8\ub378(\ub2e4\uce35 \ud37c\uc149\ud2b8\ub860, \ud569\uc131\uacf1 \uc2e0\uacbd\ub9dd, \uc21c\ud658 \uc2e0\uacbd\ub9dd\ub4f1)\uc744 \uc27d\uac8c \uc0dd\uc131\ud558\uace0 \ud14c\uc2a4\ud2b8 \ud574\ubcfc\uc218 \uc788\uc8e0.\n\uc9c4\uc9dc \ubb38\uc81c\ub294 \uc5b4\ub290 \uc0c1\ud669\uc5d0 \uc5b4\ub5a0\ud55c \ubaa8\ub378\uc744 \uc4f0\uace0 \uc801\uc808\ud55c \ud30c\ub77c\ubbf8\ud130 \uac12\uc740 \ubb34\uc5c7\uc778\uc9c0 \uc544\ub294 \uac83\uc785\ub2c8\ub2e4. \uc774\uac83\uc740 \uc880 \ub354 \ub9ce\uc740 \uacbd\ud5d8\uacfc \uacf5\ubd80\uac00 \ud544\uc694 \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.",
      "tags": "deeplearning,KERAS,machine learning,Python",
      "url": "https://partrita.github.io/posts/CNN-with-KERAS/"
    },
    {
      "title": "\ud150\uc11c\ud50c\ub85c(Tensorflow)\ub85c \ubc30\uc6b0\ub294 \ub525\ub7ec\ub2dd",
      "text": "\ucd9c\ucc98: \ub2e4\uce74\uc774 \uc5d0\uce20\uc9c0, \ud150\uc11c\ud50c\ub85c\ub85c \uc2dc\uc791\ud558\ub294 \ub525\ub7ec\ub2dd, Jpub, 2017\n\uc2dc\uc791\ud558\uba70\u00b6\ud150\uc11c\ud50c\ub85c\ub85c \uc2dc\uc791\ud558\ub294 \ub525\ub7ec\ub2dd\uc774\ub77c\ub294 \ucc45\uc744 \uc77d\uace0 \ubcf5\uc2b5\ud558\uae30 \uc704\ud55c jupyter notebook\uc785\ub2c8\ub2e4. \ub9c8\uc74c\ub300\ub85c \uc815\ub9ac\ud55c \uac83\uc774\ub2e4 \ubcf4\ub2c8, \uc124\uba85\uc740 \ucda9\ubd84\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uad6c\uccb4\uc801\uc778 \ub0b4\uc6a9\uc740 \ucc45\uc744 \uc77d\uc5b4\ubcf4\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.\n\ud30c\uc774\uc36c\uacfc \ud150\uc11c\ud50c\ub85c\uc758 \ucd5c\uadfc \ubc84\uc804\uc5d0 \ub9de\ucd94\uc5b4 \ucf54\ub4dc\ub97c \uc870\uae08\uc529 \uc218\uc815\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n1\uc7a5. \ud150\uc11c\ud50c\ub85c \uc785\ubb38\u00b6\ud150\uc11c\ud50c\ub85c(TensorFlow)\ub294 \uad6c\uae00\uc774 \uc624\ud508 \uc18c\uc2a4\ub85c \uacf5\uac1c\ud55c \uba38\uc2e0\ub7ec\ub2dd \ub77c\uc774\ube0c\ub7ec\ub9ac \uc785\ub2c8\ub2e4.\n\uba38\uc2e0\ub7ec\ub2dd\uc758 3\ub2e8\uacc4\u00b6\uba38\uc2e0\ub7ec\ub2dd\uc740 \ub370\uc774\ud130 \uc18d\uc5d0 \uc788\ub294 \uc218\ud559\uc801 \uaddc\uce59\uc744 \ucef4\ud4e8\ud130\ub85c \ubc1c\uacac\ud574 \ub0b4\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 \ub2e4\uc74c\uc758 3\ub2e8\uacc4\uc5d0 \uac78\uccd0\uc11c \uba38\uc2e0\ub7ec\ub2dd\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.\n\n\uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\ub85c \ubbf8\uc9c0\uc758 \ub370\uc774\ud130\ub97c \uc608\uce21\ud558\ub294 \uc218\uc2dd\uc744 \uc0dd\uac01\ud55c\ub2e4.\n\uc218\uc2dd\uc5d0 \ud3ec\ud568\ub41c \ud30c\ub77c\ubbf8\ud130\ub97c \ud310\ub2e8\ud558\ub294 \uc624\ucc28 \ud568\uc218\ub97c \uc900\ube44\ud55c\ub2e4.\n\uc624\ucc28 \ud568\uc218\ub97c \ucd5c\uc18c\ud654 \ud560 \uc218 \uc788\ub3c4\ub85d \ud30c\ub77c\ubbf8\ud130 \uac12\uc744 \uacb0\uc815\ud55c\ub2e4.\n\n\ud150\uc11c\ud50c\ub85c \uc608\uc81c\u00b6\uba3c\uc800 \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 tensorflow\uc640 \uc218\uce58\uacc4\uc0b0\uc5d0 \ud544\uc694\ud55c Numpy\uc640 \uc2dc\uac01\ud654\ub97c \uc704\ud55c matplotlib\uc744 \ucd94\uac00\ub85c \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\n\ntf.__version__ # \uc0ac\uc6a9\ud55c \ud150\uc11c\ud50c\ub85c \ubc84\uc804 \ud655\uc778\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[1]:\n\n\n\n\n\n'1.3.0'\n\n\n\n\n\n\n\n\n\n\n\n\ubb38\uc81c \uc124\uba85\u00b6\uc6d4\ubcc4 \ud3c9\uade0 \uae30\uc628\uc744 \uc608\uce21\ud558\ub294 \ubb38\uc81c\ub97c \ud150\uc11c\ud50c\ub85c\ub97c \uc0ac\uc6a9\ud574 \ud480\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc740 1\ub144\uac04 \uc6d4\ubcc4 \ud3c9\uade0 \uae30\uc628\uc785\ub2c8\ub2e4.\n\n\n1\uc6d4\n2\uc6d4\n3\uc6d4\n4\uc6d4\n5\uc6d4\n6\uc6d4\n7\uc6d4\n8\uc6d4\n9\uc6d4\n10\uc6d4\n11\uc6d4\n12\uc6d4\n\n\n\n\n5.2\n5.7\n8.6\n14.9\n18.2\n20.4\n25.5\n26.4\n22.8\n17.5\n11.1\n6.6\n\n\n\n\uc774 \ub370\uc774\ud130\ub97c \uae30\ubc18\uc73c\ub85c \ub0b4\ub144\uc758 \uc6d4\ubcc4 \ud3c9\uade0 \uae30\uc628\uc744 \uc608\uce21\ud558\ub824\uba74 \uc5b4\ub5bb\uac8c \ud574\uc57c \ud560\uae4c\uc694?\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \n# \uc6d4\ubcc4 \ud3c9\uade0\uae30\uc628\uc744 \uc2dc\uac01\ud654 \ud558\uae30\ntemp =[5.2, 5.7, 8.6, 14.9, 18.2, 20.4, 25.5, 26.4, 22.8, 17.5, 11.1, 6.6]\nplt.plot(temp, 'o-' )\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\n[<matplotlib.lines.Line2D at 0x7f5b04830470>]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uadf8\ub9bc\uc5d0\uc11c \ubcfc \uc218 \uc788\ub4ef\uc774, \uc6d4\ubcc4 \ud3c9\uade0 \uae30\uc628\uc5d0\uc11c\ub294 \uaddc\uce59\uc131\uc774 \uc788\uc5b4 \ubcf4\uc785\ub2c8\ub2e4. \uc774\ucc98\ub7fc \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\uc5d0\uc11c \ubc95\uce59\uc744 \ubc1c\uacac\ud55c\ub2e4\uba74 \ub0b4\ub144\uc758 \uae30\uc628\uc744 \uacc4\uc0b0\ud560 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4. \uc544\ub798\uc758 \ucf54\ub4dc\ub294 \ud150\uc11c\ud50c\ub85c\ub97c \uc0ac\uc6a9\ud574 \uaddc\uce59\uc744 \ucc3e\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.\n\uc8fc\uc694 \uc6a9\uc5b4 \uc124\uba85\u00b6\nX\ub294 \ud2b8\ub808\uc774\ub2dd \uc138\ud2b8\ub85c\uc11c \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ud150\uc11c\ud50c\ub85c\uc5d0\uc11c\ub294 \uc774\ub7ec\ud55c \ubcc0\uc218\ub97c placeholder\ub77c\uace0 \ud569\ub2c8\ub2e4.\nw \ucd5c\uc801\ud654\ud560 \uac12\uc785\ub2c8\ub2e4. \uc774\uacfc \uac19\uc740 \ubcc0\uc218\ub97c variable\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4.\ny\ub294 placeholder\uc640 variable\ub85c\ubd80\ud130 \uacc4\uc0b0\ub41c \uac12\uc785\ub2c8\ub2e4. \n\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \n# Placeholder x\ub97c \uc815\uc758\ud55c\ub2e4.\nx = tf.placeholder(tf.float32, [None, 5])\n# Variable w\ub97c \uc815\uc758\ud55c\ub2e4.\nw = tf.Variable(tf.zeros([5, 1]))\n# \uacc4\uc0b0\uc2dd y\ub97c \uc815\uc758\ud55c\ub2e4.\ny = tf.matmul(x, w)\n# Placeholder t\ub97c \uc815\uc758\ud55c\ub2e4.\nt = tf.placeholder(tf.float32, [None, 1])\n# \uc624\ucc28 \ud568\uc218 loss\ub97c \uc815\uc758\ud55c\ub2e4.\nloss = tf.reduce_sum(tf.square(y-t))\n# \ud2b8\ub808\uc774\ub2dd \uc54c\uace0\ub9ac\uc998 train_step\uc744 \uc815\uc758\ud55c\ub2e4.\n# AdamOptimizer\ub294 \ud2b8\ub808\uc774\ub2dd \uc54c\uace0\ub9ac\uc998 \uc911 \ud55c \uc885\ub958\ntrain_step = tf.train.AdamOptimizer().minimize(loss)\n# \uc138\uc158\uc744 \uc900\ube44\ud558\uace0 Variable\uc744 \ucd08\uae30\ud654\ud55c\ub2e4.\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\n# \ud2b8\ub808\uc774\ub2dd \uc138\ud2b8 \ub370\uc774\ud130\ub97c \uc900\ube44\ud55c\ub2e4.\ntrain_t = np.array([5.2, 5.7, 8.6, 14.9, 18.2, 20.4,\n                    25.5, 26.4, 22.8, 17.5, 11.1, 6.6])\ntrain_t = train_t.reshape([12,1])\ntrain_x = np.zeros([12, 5])\nfor row, month in enumerate(range(1, 13)):\n    for col, n in enumerate(range(0, 5)):\n        train_x[row][col] = month**n\n# \uacbd\uc0ac \ud558\uac15\ubc95\uc744 \uc774\uc6a9\ud55c \ud30c\ub77c\ubbf8\ud130 \ucd5c\uc801\ud654\ub97c 100000\ud68c \ubc18\ubcf5\ud55c\ub2e4.\ni = 0\nfor _ in range(100000):\n    i += 1\n    sess.run(train_step, feed_dict={x:train_x, t:train_t})\n    if i % 20000 == 0:\n        loss_val = sess.run(loss, feed_dict={x:train_x, t:train_t})\n        print ('Step: %d, Loss: %f' % (i, loss_val))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nStep: 20000, Loss: 29.290693\nStep: 40000, Loss: 27.663746\nStep: 60000, Loss: 24.766474\nStep: 80000, Loss: 22.974419\nStep: 100000, Loss: 22.416885\n\n\n\n\n\n\n\n\n\n\n\n\uacbd\uc0ac \ud558\uac15\ubc95\uc73c\ub85c \ud30c\ub77c\ubbf8\ud130\ub97c \ucd5c\uc801\ud654\ud558\uba74\uc11c \ud30c\ub77c\ubbf8\ud130 \ubcf4\uc815\uc744 10\ub9cc\ud68c \ubc18\ubcf5\ud569\ub2c8\ub2e4. 1\ub9cc \ud68c \uc2e4\ud589\ud560 \ub54c\ub9c8\ub2e4 \uc624\ucc28 \ud568\uc22b\uac12(Loss)\uc744 \uacc4\uc0b0\ud574\uc11c \ucd9c\ub825\ud569\ub2c8\ub2e4.\n\uc2e4\ud589\uacb0\uacfc\ub97c \ubcf4\uba74 \ud30c\ub77c\ubbf8\ud130 \ubcf4\uc815\uc744 \ubc18\ubcf5\ud558\uba74 \uc624\ucc28\uac12\uc774 \uac10\uc18c\ud568\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \uc2e4\uc81c\ub85c \uc5b8\uc81c\uae4c\uc9c0 \uac10\uc18c\ud558\ub294\uc9c0 \uc608\uce21\ud558\ub294\uac83\uc740 \uac04\ub2e8\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 \uc77c\ub2e8\uc740 \ud559\uc2b5\uc744 \uc911\ub2e8\ud558\uace0 \uae30\uc628\uc744 \uc608\uce21\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \n# \ud2b8\ub808\uc774\ub2dd \ud6c4 \ud30c\ub77c\ubbf8\ud130 \uac12\uc744 \ud655\uc778\ud55c\ub2e4.\nw_val = sess.run(w)\nprint(\"\ud30c\ub77c\ubbf8\ud130 \uac12 : \", w_val)\n# \ud2b8\ub808\uc774\ub2dd \ud6c4 \ud30c\ub77c\ubbf8\ud130\ub97c \uc774\uc6a9\ud574 \uc608\uce21\uae30\uc628\uc744 \uacc4\uc0b0\ud558\ub294 \ud568\uc218\ub97c \uc815\uc758\ud55c\ub2e4.\ndef predict(x):\n    result = 0.0\n    for n in range(0, 5):\n        result += w_val[n][0] * x**n\n    return result\n# \uc608\uce21\uae30\uc628 \uadf8\ub798\ud504\ub97c \uadf8\ub9b0\ub2e4.\nfig = plt.figure()\nsubplot = fig.add_subplot(1,1,1)\nsubplot.set_xlim(1,12)\nsubplot.scatter(range(1,13), train_t)\nlinex = np.linspace(1,12,100)\nliney = predict(linex)\nsubplot.plot(linex, liney, color = 'b')\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\ud30c\ub77c\ubbf8\ud130 \uac12 :  [[ 3.76468992]\n [-1.58954322]\n [ 1.78510237]\n [-0.20117806]\n [ 0.00539352]]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc5bb\uc5b4\uc9c4 \uacb0\uacfc\ub97c \uc2dc\uac01\ud654\ud558\uc600\uc2b5\ub2c8\ub2e4. \uc810\uc73c\ub85c \ucc0d\ud600\uc9c4 \uc2e4\uc81c \ub370\uc774\ud130 \uc0ac\uc774\ub85c \uc608\uce21 \uace1\uc120\uc774 \uc9c0\ub098\uac00\ub294 \uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\uce21\uc120\uc744 \ud1b5\ud574\uc11c \uc628\ub3c4\ub97c \uc608\uc0c1\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub807\uac8c \ud150\uc11c\ud50c\ub85c\uc758 \uae30\ubcf8\uc801\uc778 \uacfc\uc815\uc744 \uc0b4\ud3b4\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc55e\uc73c\ub85c\ub3c4 \uba38\uc2e0\ub7ec\ub2dd\uc758 3\ub2e8\uacc4\ub97c \uc798 \uae30\uc5b5\ud574 \ub450\uae30 \ubc14\ub78d\ub2c8\ub2e4.\n2\uc7a5. \ubd84\ub958 \uc54c\uace0\ub9ac\uc998\uc758 \uae30\ucd08\u00b6\uc774\ud56d \ubd84\ub958\uae30\u00b6\ub370\uc774\ud130\ub97c \ub450 \uc885\ub958\ub85c \ubd84\ub958\ud558\ub294 \uac83\uc744 \uc774\ud56d \ubd84\ub958\uae30(binary classifier) \ub77c\uace0 \ud569\ub2c8\ub2e4. \ub2e4\uc2dc\ud55c\ubc88 \uba38\uc2e0\ub7ec\ub2dd \ubaa8\ub378\uc758 3\ub2e8\uacc4\uc5d0 \ub530\ub77c \ub2e8\uacc4\uc801\uc73c\ub85c \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\uc5ec\uae30\uc11c\ub294 \uac04\ub2e8\ud55c \uc608\ub85c \ubc14\uc774\ub7ec\uc2a4 \uac10\uc5fc \ud655\ub960\uc744 \uacc4\uc0b0\ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc8fc\uc5b4\uc9c4 \ub370\uc774\ud130\ub97c \uac10\uc5fc\ub418\uc5c8\ub2e4/\uac10\uc5fc\ub418\uc9c0 \uc54a\uc558\ub2e4\ub85c \ubd84\ub958\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\ubd84\uc11d\ud560 \uc784\uc758\uc758 \ub370\uc774\ud130\ub97c \ub2e4\uc74c\uac19\uc774 \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \n# \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\nimport tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom numpy.random import multivariate_normal, permutation\nimport pandas as pd\nfrom pandas import DataFrame, Series\n\n# \ud2b8\ub808\uc774\ub2dd \ub370\uc774\ud130\ub97c \uc900\ube44\ud55c\ub2e4.\nnp.random.seed(20180311) # \ub09c\uc218 \uc0dd\uc131\n\nn0, mu0, variance0 = 20, [10, 11], 20\ndata0 = multivariate_normal(mu0, np.eye(2)*variance0 ,n0)\ndf0 = DataFrame(data0, columns=['x1','x2'])\ndf0['t'] = 0  # \ube44\uac10\uc5fc\uc790 \ub370\uc774\ud130\n\nn1, mu1, variance1 = 15, [18, 20], 22\ndata1 = multivariate_normal(mu1, np.eye(2)*variance1 ,n1)\ndf1 = DataFrame(data1, columns=['x1','x2'])\ndf1['t'] = 1  # \uac10\uc5fc\uc790 \ub370\uc774\ud130\n\ndf = pd.concat([df0, df1], ignore_index=True)\ntrain_set = df.reindex(permutation(df.index)).reset_index(drop=True) \ntrain_set.head() # \ud2b8\ub808\uc774\ub2dd \ub370\uc774\ud130 \ud655\uc778\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n\n  \n    \n      \n      x1\n      x2\n      t\n    \n  \n  \n    \n      0\n      8.757376\n      13.871496\n      0\n    \n    \n      1\n      10.477299\n      6.924247\n      0\n    \n    \n      2\n      18.508789\n      16.273824\n      1\n    \n    \n      3\n      14.363211\n      18.352569\n      1\n    \n    \n      4\n      24.465507\n      18.948523\n      1\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\nt\uc758 \uac12\uc774 0\uc774\uba74 \ube44\uac10\uc5fc\uc790, \uac10\uc5fc\uc790\uba74 1\ub85c \uad6c\ubd84\ud569\ub2c8\ub2e4. \ud45c\ub294 \ubcf4\uae30\uac00 \ubd88\ud3b8\ud558\ub2c8 \uc2dc\uac01\ud654\ub97c \ud574\ubcf4\uc8e0.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nfig = plt.figure(figsize=(6,6))\nsubplot = fig.add_subplot(1,1,1)\nsubplot.set_ylim([0,30])\nsubplot.set_xlim([0,30])\nsubplot.scatter(df1.x1, df1.x2, marker='x', label = 'Infected')\nsubplot.scatter(df0.x1, df0.x2, marker='o', label = 'Normal')\nplt.legend()\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc9c1\uad00\uc801\uc73c\ub85c \uac10\uc5fc\uc790\ub97c \uad6c\ubd84\ud560 \uc218 \uc788\ub294 \uac00\uc0c1\uc758 \uc120\uc744 \uadf8\ub824\ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \ud150\uc11c\ud50c\ub85c\ub97c \uc0ac\uc6a9\ud574 \ud480\uc5b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\ud150\uc11c\ud50c\ub85c\ub85c \uacc4\uc0b0\ud560 \ub54c\ub294 \ub370\uc774\ud130\ub97c numpy\uc758 array\ub85c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4.\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \ntrain_x = train_set[['x1','x2']].as_matrix()\ntrain_t = train_set['t'].as_matrix().reshape([len(train_set), 1])\n\n\n    \n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \n#  \ud2b8\ub808\uc774\ub2dd \uc138\ud2b8 \ub370\uc774\ud130\uc5d0 \ub300\ud574 t=1\uc77c \ud655\ub960\uc744 \uad6c\ud558\ub294 \uacc4\uc0b0\uc2dd p\ub97c \uc900\ube44\ud55c\ub2e4.\nx = tf.placeholder(tf.float32, [None, 2])\nw = tf.Variable(tf.zeros([2, 1]))\nw0 = tf.Variable(tf.zeros([1]))\nf = tf.matmul(x, w) + w0\np = tf.sigmoid(f) # \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0\n# \uc624\ucc28 \ud568\uc218 loss\uc640 \ud2b8\ub808\uc774\ub2dd \uc54c\uace0\ub9ac\uc998 train_step\uc744 \uc815\uc758\ud55c\ub2e4.\nt = tf.placeholder(tf.float32, [None, 1])\nloss = -tf.reduce_sum(t*tf.log(p) + (1-t)*tf.log(1-p))\ntrain_step = tf.train.AdamOptimizer().minimize(loss) # \ucd5c\uc6b0\ucd94\uc815\ubc95\n# \uc815\ub2f5\ub960 accuracy\ub97c \uc815\uc758\ud55c\ub2e4.\ncorrect_prediction = tf.equal(tf.sign(p-0.5), tf.sign(t-0.5))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n# \uc138\uc158\uc744 \uc900\ube44\ud558\uace0 Variable\uc744 \ucd08\uae30\ud654\ud55c\ub2e4.\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\n# \uacbd\uc0ac \ud558\uac15\ubc95\uc5d0 \uc758\ud55c \ud30c\ub77c\ubbf8\ud130 \ucd5c\uc801\ud654\ub97c 20000\ud68c \ubc18\ubcf5\ud55c\ub2e4.\ni = 0\nfor _ in range(20000):\n    i += 1\n    sess.run(train_step, feed_dict={x:train_x, t:train_t})\n    if i % 4000 == 0:\n        loss_val, acc_val = sess.run(\n            [loss, accuracy], feed_dict={x:train_x, t:train_t})\n        print ('Step: %d, Loss: %f, Accuracy: %f'\n               % (i, loss_val, acc_val))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nStep: 4000, Loss: 13.849513, Accuracy: 0.885714\nStep: 8000, Loss: 9.701274, Accuracy: 0.885714\nStep: 12000, Loss: 7.537327, Accuracy: 0.942857\nStep: 16000, Loss: 6.264729, Accuracy: 0.942857\nStep: 20000, Loss: 5.439410, Accuracy: 0.971429\n\n\n\n\n\n\n\n\n\n\n\n\uc2e4\ud589 \uacb0\uacfc\uc5d0\uc11c \uc624\ucc28 \ud568\uc218\uc758 \uac12\uc740 \uacc4\uc18d \uac10\uc18c\ud558\uc9c0\ub9cc, \uc815\ud655\ub3c4\ub294 \uc77c\uc815\ud55c \uac12\uc774\uc0c1 \uc62c\ub77c\uac00\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\ucbe4\uc5d0\uc11c \ud559\uc2b5\uc744 \uc911\ub2e8\ud558\uace0 \ud30c\ub77c\ubbf8\ud130\uac12\uc744 \ud655\uc778\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nw0_val, w_val = sess.run([w0, w])\nw0_val, w1_val, w2_val = w0_val[0], w_val[0][0], w_val[1][0]\nprint(\"\ud30c\ub77c\ubbf8\ud130\uc758 \uac12: \",w0_val, w1_val, w2_val)\n#  \ucd94\ucd9c\ud55c \ud30c\ub77c\ubbf8\ud130 \uac12\uc744 \uc774\uc6a9\ud574 \uacb0\uacfc\ub97c \uadf8\ub798\ud504\ub85c \ucd9c\ub825\ud55c\ub2e4.\ntrain_set0 = train_set[train_set['t']==0]\ntrain_set1 = train_set[train_set['t']==1]\n\nfig = plt.figure(figsize=(6,6))\nsubplot = fig.add_subplot(1,1,1)\nsubplot.set_ylim([0,30])\nsubplot.set_xlim([0,30])\nsubplot.scatter(train_set1.x1, train_set1.x2, marker='x')\nsubplot.scatter(train_set0.x1, train_set0.x2, marker='o')\n\nlinex = np.linspace(0,30,10)\nliney = - (w1_val*linex/w2_val + w0_val/w2_val) # \uacbd\uacc4\uc120 \uadf8\ub9ac\uae30\nsubplot.plot(linex, liney)\n\nfield = [[(1 / (1 + np.exp(-(w0_val + w1_val*x1 + w2_val*x2))))\n          for x1 in np.linspace(0,30,100)]\n         for x2 in np.linspace(0,30,100)]\nsubplot.imshow(field, origin='lower', extent=(0,30,0,30),\n               cmap=plt.cm.gray_r, alpha=0.5)\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\ud30c\ub77c\ubbf8\ud130\uc758 \uac12:  -16.915 0.583585 0.481423\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub18d\ub2f4(\uc9c4\ud558\uba74 \uac10\uc5fc\uc790)\uc740 \ud655\ub960\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uac00\uc0c1\uc758 \uc120\uc758 \uacbd\uacc4\ubd80\uadfc\uc5d0\uc11c \uac10\uc5fc/\ube44\uac10\uc5fc \ub370\uc774\ud130\uac00 \ud63c\uc7ac\ub418\uc5b4 \uc788\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ud14c\uc2a4\ud2b8 \uc138\ud2b8\ub97c \ud1b5\ud55c \uac80\uc99d\u00b6\uba38\uc2e0\ub7ec\ub2dd\uc5d0\uc11c \ud2b8\ub808\uc774\ub2dd \uc138\ud2b8\uc5d0 \ub300\ud55c \uc815\ud655\ub3c4\ub97c \uacc4\uc0b0\ud558\ub294 \uac83\uc740 \uadf8\ub2e4\uc9c0 \uc758\ubbf8\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uc911\uc694\ud55c\uac83\uc740 \ubbf8\uc9c0\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc608\uce21 \uc815\ud655\ub3c4\ub97c \ud5a5\uc0c1\uc2dc\ud0a4\ub294 \uac83\uc774\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n\ub2e4\uc218\uc758 \ud30c\ub77c\ubbf8\ud130\ub97c \ud3ec\ud568\ud558\ub294 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uba74 \ud2b8\ub808\uc774\ub2dd \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc815\ud655\ub3c4\ub294 \ub192\uc740 \ubc18\uba74, \ubbf8\uc9c0\uc758 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc608\uce21\uc740 \uc815\ud655\ud558\uc9c0 \ubabb\ud55c \uacfc\uc801\ud569(overfitting) \uc774 \uc77c\uc5b4\ub0a0 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uacfc\uc801\ud569\uc744 \ud53c\ud558\uae30 \uc704\ud55c \ubc29\ubc95\uc73c\ub85c\ub294 \ud2b8\ub808\uc774\ub2dd \ub370\uc774\ud130\ub97c \uc784\uc758\ub85c \ub098\ub204\uc5b4 (\ubcf4\ud1b5, 80%\uc740 \ud2b8\ub808\uc774\ub2dd, 20%\ub294 \ud14c\uc2a4\ud2b8\uc6a9) \ub193\ub294 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 \uc55e\uc11c \uc0ac\uc6a9\ud55c \ucf54\ub4dc\ub97c \uc218\uc815\ud574 \ud655\uc778\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \n# \ud2b8\ub808\uc774\ub2dd \ub370\uc774\ud130 \uc900\ube44\nn0, mu0, variance0 = 800, [10, 11], 20\ndata0 = multivariate_normal(mu0, np.eye(2)*variance0 ,n0)\ndf0 = DataFrame(data0, columns=['x','y'])\ndf0['t'] = 0\nn1, mu1, variance1 = 600, [18, 20], 22\ndata1 = multivariate_normal(mu1, np.eye(2)*variance1 ,n1)\ndf1 = DataFrame(data1, columns=['x','y'])\ndf1['t'] = 1\ndf = pd.concat([df0, df1], ignore_index=True)\ndf = df.reindex(permutation(df.index)).reset_index(drop=True)\n# \ud2b8\ub808\uc774\ub2dd \uc138\ud2b8 \ub370\uc774\ud130\uc5d0\uc11c 20%\uc758 \ub370\uc774\ud130\ub97c \ud14c\uc2a4\ud2b8 \uc138\ud2b8\ub85c \ubd84\ub9ac\ud55c\ub2e4.\nnum_data = int(len(df)*0.8)\ntrain_set = df[:num_data]\ntest_set = df[num_data:]\n# (x, y)\uc640 t\ub97c \uac01\uac01 \ubaa8\uc740 \uac83\uc744 NumPy\uc758 array \uc624\ube0c\uc81d\ud2b8\ub85c \ucd94\ucd9c\ud574\ub454\ub2e4.\ntrain_x = train_set[['x','y']].as_matrix()\ntrain_t = train_set['t'].as_matrix().reshape([len(train_set), 1])\ntest_x = test_set[['x','y']].as_matrix()\ntest_t = test_set['t'].as_matrix().reshape([len(test_set), 1])\n# \uac01\uc885 \uacc4\uc0b0\uc2dd\uc744 \uc815\uc758\ud55c\ub2e4.\nx = tf.placeholder(tf.float32, [None, 2])\nw = tf.Variable(tf.zeros([2, 1]))\nw0 = tf.Variable(tf.zeros([1]))\nf = tf.matmul(x, w) + w0\np = tf.sigmoid(f)\nt = tf.placeholder(tf.float32, [None, 1])\nloss = -tf.reduce_sum(t*tf.log(p) + (1-t)*tf.log(1-p))\ntrain_step = tf.train.AdamOptimizer().minimize(loss)\ncorrect_prediction = tf.equal(tf.sign(p-0.5), tf.sign(t-0.5))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n# \uc138\uc158\uc744 \uc900\ube44\ud558\uace0 Variable\uc744 \ucd08\uae30\ud654\ud55c\ub2e4.\nsess = tf.Session()\nsess.run(tf.global_variables_initializer())\n# \uacbd\uc0ac \ud558\uac15\ubc95\uc5d0 \uc758\ud55c \ud30c\ub77c\ubbf8\ud130 \ucd5c\uc801\ud654\ub97c 2500\ud68c \ubc18\ubcf5\ud558\uba74\uc11c \ud2b8\ub808\uc774\ub2dd \uc138\ud2b8\uc640 \ud14c\uc2a4\ud2b8 \uc138\ud2b8\uc5d0 \ub300\ud55c \uc815\ub2f5\ub960 \ubcc0\ud654\ub97c \uae30\ub85d\ud55c\ub2e4.\ntrain_accuracy = []\ntest_accuracy = []\nfor _ in range(2500):\n    sess.run(train_step, feed_dict={x:train_x, t:train_t})\n    acc_val = sess.run(accuracy, feed_dict={x:train_x, t:train_t})\n    train_accuracy.append(acc_val)\n    acc_val = sess.run(accuracy, feed_dict={x:test_x, t:test_t})\n    test_accuracy.append(acc_val)\n# \uacb0\uacfc\ub97c \uadf8\ub798\ud504\ub85c \ucd9c\ub825\ud55c\ub2e4.\nfig = plt.figure(figsize=(8,6))\nsubplot = fig.add_subplot(1,1,1)\nsubplot.plot(range(len(train_accuracy)), train_accuracy,\n             linewidth=2, label='Training set')\nsubplot.plot(range(len(test_accuracy)), test_accuracy,\n             linewidth=2, label='Test set')\nsubplot.legend(loc='upper left')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\n<matplotlib.legend.Legend at 0x7f5aa863dcc0>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud604\uc800\ud558\uc9c0\ub294 \uc54a\uc9c0\ub9cc, \ud2b8\ub808\uc774\ub2dd \uc138\ud2b8\uc640 \ub370\uc2a4\ud2b8 \uc138\ud2b8\uc5d0\uc11c \uc815\ub2f5\ub960\uc758 \ubcc0\ud654 \uc591\uc0c1\uc774 \ub2e4\ub974\ub2e4\ub294 \uac83\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc784\uc758\ub85c \ub9cc\ub4e0 \ub09c\uc218 \ub370\uc774\ud130\uc774\uae30 \ub54c\ubb38\uc5d0 \ucc28\uc774\uac00 \uc801\uc744 \uc218 \ubc16\uc5d0 \uc5c6\uc2b5\ub2c8\ub2e4.\n\n\uc55e\uc11c \uc124\uba85\ud588\ub4ef \uba38\uc2e0\ub7ec\ub2dd\uc73c\ub85c \uc5bb\uc5b4\uc9c4 \ubaa8\ub378\uc758 \uc131\ub2a5\uc740 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc815\ud655\ub3c4\ub85c \ud310\uc815\ud574\uc57c \ud55c\ub2e4\ub294 \uac83\uc744 \uae30\uc5b5\ud558\uc138\uc694.\n3\uc7a5. \ub2e8\uce35 \uc2e0\uacbd\ub9dd\uc744 \uc774\uc6a9\ud55c \ubd84\ub958\u00b6\ub2e8\uce35 \uc2e0\uacbd\ub9dd\uc5d0 \ub300\ud55c \uc124\uba85\u00b6\nfigure from [inbi](http://www.inbi.ai/case_study.html) \uc55e\uc758 \ubc14\uc774\ub7ec\uc2a4 \uac10\uc5fc\ud655\ub960\uc744 \uacc4\uc0b0\ud558\ub294 \ubb38\uc81c\uc5d0\uc11c \ub2e8\uce35 \uc2e0\uacbd\ub9dd\uc744 \uc0ac\uc6a9\ud574 \ubd84\ub958\ub97c \uc9c4\ud589 \ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 \uc740\ub2c9 \uacc4\uce35\uc774 \ub3c4\uc785\ub428\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c0\ub294 \uac83\uc5d0 \uc9d1\uc911\ud558\uc138\uc694. \uba3c\uc800, \ud544\uc694\ud55c \ubaa8\ub4c8\uc744 \ubd88\ub7ec\uc624\uace0, \ud2b8\ub808\uc774\ub2dd \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[24]:\n\n    \nimport tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom numpy.random import multivariate_normal, permutation\nimport pandas as pd\nfrom pandas import DataFrame, Series\n# \ub09c\uc218\ub97c \uc0dd\uc131\ud55c\ub2e4.\nnp.random.seed(20180311)\ntf.set_random_seed(20180311)\n# \ud2b8\ub808\uc774\ub2dd \uc138\ud2b8 \ub370\uc774\ud130\ub97c \uc0dd\uc131\ud55c\ub2e4.\ndef generate_datablock(n, mu, var, t):\n    data = multivariate_normal(mu, np.eye(2)*var, n)\n    df = DataFrame(data, columns=['x1','x2'])\n    df['t'] = t\n    return df\n\ndf0 = generate_datablock(15, [7,7], 22, 0)\ndf1 = generate_datablock(15, [22,7], 22, 0)\ndf2 = generate_datablock(10, [7,22], 22, 0)\ndf3 = generate_datablock(25, [20,20], 22, 1)\n\ndf = pd.concat([df0, df1, df2, df3], ignore_index=True)\ntrain_set = df.reindex(permutation(df.index)).reset_index(drop=True)\n\n# (x1, x2)\uc640 t\ub97c \uac01\uac01 \ubaa8\uc740 \uac83\uc744 NumPy\uc758 array \uc624\ube0c\uc81d\ud2b8\ub85c \ucd94\ucd9c\ud574\ub454\ub2e4.\ntrain_x = train_set[['x1','x2']].as_matrix()\ntrain_t = train_set['t'].as_matrix().reshape([len(train_set), 1])\n\ndf.tail() # \uc0dd\uc131\ub41c \ud2b8\ub808\uc774\ub2dd \ub370\uc774\ud130\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[24]:\n\n\n\n\n\n\n  \n    \n      \n      x1\n      x2\n      t\n    \n  \n  \n    \n      60\n      19.706643\n      24.780606\n      1\n    \n    \n      61\n      17.686418\n      12.477638\n      1\n    \n    \n      62\n      14.573116\n      24.185052\n      1\n    \n    \n      63\n      26.026245\n      12.522857\n      1\n    \n    \n      64\n      23.832026\n      29.230884\n      1\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[25]:\n\n    \n#  \ub2e8\uce35 \uc2e0\uacbd\ub9dd\uc744 \uc774\uc6a9\ud55c \uc774\ud56d \ubd84\ub958\uae30 \ubaa8\ub378\uc744 \uc815\uc758\ud55c\ub2e4.\nnum_units = 2\nmult = train_x.flatten().mean()\nx = tf.placeholder(tf.float32, [None, 2])\nw1 = tf.Variable(tf.truncated_normal([2, num_units]))\nb1 = tf.Variable(tf.zeros([num_units]))\nhidden1 = tf.nn.tanh(tf.matmul(x, w1) + b1*mult) # \ud65c\uc131\ud654 \ud568\uc218\ub97c \ud558\uc774\ud37c\ubcfc\ub9ad \ud0c4\uc820\ud2b8\ub85c\nw0 = tf.Variable(tf.zeros([num_units, 1]))\nb0 = tf.Variable(tf.zeros([1]))\np = tf.nn.sigmoid(tf.matmul(hidden1, w0) + b0*mult)\n\n# \uc624\ucc28 \ud568\uc218 loss, \ud2b8\ub808\uc774\ub2dd \uc54c\uace0\ub9ac\uc998 train_step, \uc815\ub2f5\ub960 accuracy\ub97c \uc815\uc758\ud55c\ub2e4.\nt = tf.placeholder(tf.float32, [None, 1])\nloss = -tf.reduce_sum(t*tf.log(p) + (1-t)*tf.log(1-p))\n# \uc9c0\uae08\uae4c\uc9c0 \uc774\uc6a9\ud588\ub358 Adamoptimizer\ub300\uc2e0 GradientDescentOptimzer\ub97c \uc0ac\uc6a9\ud588\ub2e4.\ntrain_step = tf.train.GradientDescentOptimizer(0.001).minimize(loss)\ncorrect_prediction = tf.equal(tf.sign(p-0.5), tf.sign(t-0.5))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n# \uc138\uc158\uc744 \uc900\ube44\ud558\uace0 Variable\uc744 \ucd08\uae30\ud654\ud55c\ub2e4.\nsess = tf.InteractiveSession()\nsess.run(tf.global_variables_initializer())\n\n# \ud30c\ub77c\ubbf8\ud130 \ucd5c\uc801\ud654\ub97c 1000\ud68c \ubc18\ubcf5\ud55c\ub2e4.\ni = 0\nfor _ in range(1000):\n    i += 1\n    sess.run(train_step, feed_dict={x:train_x, t:train_t})\n    if i % 200 == 0:\n        loss_val, acc_val = sess.run(\n            [loss, accuracy], feed_dict={x:train_x, t:train_t})\n        print('Step: {}, Loss: {}, Accuracy: {}'.format(i, loss_val, acc_val))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nStep: 200, Loss: 58.25847244262695, Accuracy: 0.6615384817123413\nStep: 400, Loss: 31.748950958251953, Accuracy: 0.8461538553237915\nStep: 600, Loss: 19.171358108520508, Accuracy: 0.9076923131942749\nStep: 800, Loss: 19.16461944580078, Accuracy: 0.9076923131942749\nStep: 1000, Loss: 19.15259552001953, Accuracy: 0.9076923131942749\n\n\n\n\n\n\n\n\n\n\n\n2\uc7a5\uc5d0\uc11c\ub294 \ud30c\ub77c\ubbf8\ud130\uac00 \ucd5c\uc801\uac12\uc5d0 \uc218\ub834\ud558\uae30 \uc704\ud574 2\ub9cc\ud68c \ubc18\ubcf5\ud574\uc57c \ud588\uc9c0\ub9cc, \uc5ec\uae30\uc11c\ub294 \uadf8\ubcf4\ub2e4 \ud6e8\uc52c \uc801\uc740 1000\ud68c\ub85c \ucd5c\uc801\uac12\uc5d0 \uc218\ub834\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 \ud559\uc2b5 \uc54c\uace0\ub9ac\uc998\uc758 \ubcc0\uacbd\uc5d0 \uc758\ud55c \ud6a8\uacfc\ub85c \uadf8 \uc911\uc694\uc131\uc744 \ubc18\uc99d\ud569\ub2c8\ub2e4. \uc774\uc81c \uacb0\uacfc\ub97c \uadf8\ub798\ud504\ub85c \ucd9c\ub825\ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[26]:\n\n    \n# \uc2dc\uac01\ud654 \ud568\uc218\ub97c \ub9cc\ub4e4\uc5b4 \uc7ac\uc0ac\uc6a9\ud569\ub2c8\ub2e4.\ndef make_plot():\n    train_set1 = train_set[train_set['t']==1]\n    train_set2 = train_set[train_set['t']==0]\n    fig = plt.figure(figsize=(6,6))\n    subplot = fig.add_subplot(1,1,1)\n    subplot.set_ylim([0,30])\n    subplot.set_xlim([0,30])\n    subplot.scatter(train_set1.x1, train_set1.x2, marker='x')\n    subplot.scatter(train_set2.x1, train_set2.x2, marker='o')\n    locations = []\n    for x2 in np.linspace(0,30,100):\n        for x1 in np.linspace(0,30,100):\n            locations.append((x1,x2))\n    p_vals = sess.run(p, feed_dict={x:locations})\n    p_vals = p_vals.reshape((100,100))\n    subplot.imshow(p_vals, origin='lower', extent=(0,30,0,30),\n                   cmap=plt.cm.gray_r, alpha=0.5) # \uc5bb\uc5b4\uc9c4 \ud655\ub960\uc744 \uc0c9\uc758 \ub18d\ub2f4\uc73c\ub85c \uadf8\ub9bc\uc5d0 \ud45c\uc2dc\ud55c\ub2e4.\n\nmake_plot()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ubc14\uc774\ub7ec\uc2a4 \uac10\uc5fc\ud655\ub960\uc744 \ub18d\ub2f4\uc73c\ub85c \ud45c\ud604\ud55c \uac83\uc73c\ub85c \uc740\ub2c9\uacc4\uce35\uc5d0 \uc758\ud574 4\uac1c\uc758 \uc601\uc5ed\uc73c\ub85c \ubd84\ud560\ub418\uc5b4 \uc788\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc624\ub978\ucabd \uc704\uc758 \uc601\uc5ed\uc740 \ud655\ub960\uc774 50% \uc774\uc0c1\uc73c\ub85c \ub418\uace0, \uadf8 \uc606\uc758 \uc601\uc5ed\uc740 50%\uc774\ud558\ub77c\uace0 \uc0dd\uac01\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc774\ub807\uac8c \ud574\uc11c \ub2e8\uc77c \uc2e0\uacbd\ub9dd\uc758 \uc740\ub2c9 \uacc4\uce35 \ud6a8\uacfc\ub97c \uad6c\uccb4\uc801\uc73c\ub85c \ud655\uc778 \ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8 \ub2e4\uc74c\uc73c\ub85c \uc2e0\uacbd\ub9dd\uc758 \ub178\ub4dc \uac1c\uc218\uc640 \ud65c\uc131\ud654 \ud568\uc218 \ubcc0\uacbd \ud6a8\uacfc\uc5d0 \ub300\ud574\uc11c \uc54c\uc544 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n3.2 \ub178\ub4dc\uc758 \uac1c\uc218\ub97c \ub298\ub838\uc744 \ub54c\uc758 \ud6a8\uacfc\u00b6\ub178\ub4dc\uc758 \uac1c\uc218\ub97c \ub298\ub9ac\ub294 \uac83\uc740 \uadf8\ub9bc\uc5d0\uc11c \uc601\uc5ed\uc774 \ubd84\ud560\ub418\ub294 \uac1c\uc218\ub97c \ub298\ub9ac\ub294\uac83\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uc544\ub798 \ucf54\ub4dc\ub97c \uc2e4\ud589\ud574 \ubd05\uc2dc\ub2e4.\n\n\n\n\n\n\nIn\u00a0[27]:\n\n    \n# (x1, x2)\uc640 t\ub97c \uac01\uac01 \ubaa8\uc740 \uac83\uc744 NumPy\uc758 array \uc624\ube0c\uc81d\ud2b8\ub85c \ucd94\ucd9c\ud574\ub454\ub2e4.\ntrain_x = train_set[['x1','x2']].as_matrix()\ntrain_t = train_set['t'].as_matrix().reshape([len(train_set), 1])\n\n#  \ub2e8\uce35 \uc2e0\uacbd\ub9dd\uc744 \uc774\uc6a9\ud55c \uc774\ud56d \ubd84\ub958\uae30 \ubaa8\ub378\uc744 \uc815\uc758\ud55c\ub2e4.\nnum_units = 4 # \ub178\ub4dc\uc758 \uac1c\uc218\ub97c 4\uac1c\ub85c \ubcc0\uacbd\nmult = train_x.flatten().mean()\nx = tf.placeholder(tf.float32, [None, 2])\nw1 = tf.Variable(tf.truncated_normal([2, num_units]))\nb1 = tf.Variable(tf.zeros([num_units]))\nhidden1 = tf.nn.tanh(tf.matmul(x, w1) + b1*mult)\nw0 = tf.Variable(tf.zeros([num_units, 1]))\nb0 = tf.Variable(tf.zeros([1]))\np = tf.nn.sigmoid(tf.matmul(hidden1, w0) + b0*mult)\n\n# \uc624\ucc28 \ud568\uc218 loss, \ud2b8\ub808\uc774\ub2dd \uc54c\uace0\ub9ac\uc998 train_step, \uc815\ub2f5\ub960 accuracy\ub97c \uc815\uc758\ud55c\ub2e4.\nt = tf.placeholder(tf.float32, [None, 1])\nloss = -tf.reduce_sum(t*tf.log(p) + (1-t)*tf.log(1-p))\ntrain_step = tf.train.GradientDescentOptimizer(0.001).minimize(loss)\ncorrect_prediction = tf.equal(tf.sign(p-0.5), tf.sign(t-0.5))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n# \uc138\uc158\uc744 \uc900\ube44\ud558\uace0 Variable\uc744 \ucd08\uae30\ud654\ud55c\ub2e4.\nsess = tf.InteractiveSession()\nsess.run(tf.global_variables_initializer())\n\n# \ud30c\ub77c\ubbf8\ud130 \ucd5c\uc801\ud654\ub97c 1000\ud68c \ubc18\ubcf5\ud55c\ub2e4.\ni = 0\nfor _ in range(1000):\n    i += 1\n    sess.run(train_step, feed_dict={x:train_x, t:train_t})\n    if i % 1000 == 0:\n        loss_val, acc_val = sess.run(\n            [loss, accuracy], feed_dict={x:train_x, t:train_t})\n        print('Step: {}, Loss: {}, Accuracy: {}'.format(i, loss_val, acc_val))\n        \n# \uc2dc\uac01\ud654 \ud558\uae30\nmake_plot()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nStep: 1000, Loss: 13.514551162719727, Accuracy: 0.9230769276618958\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uacb0\uacfc\ub97c \ubcf4\uba74 \uc0c9\uc774 \uc9d9\uc740 \ubd80\ubd84\uc758 \ubaa8\uc591\uc774 \ubcc0\ud55c\uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubc14\uc774\ub7ec\uc2a4\uc5d0 \uac10\uc5fc\ub41c \ub370\uc774\ud130\ub97c \ubcf4\ub2e4 \uc815\ud655\ud558\uac8c \uac10\uc2f8\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc640 \uac19\uc774 \ub178\ub4dc\uc758 \uac1c\uc218\ub97c \uc99d\uac00\uc2dc\ud0b4\uc73c\ub85c \ubcf4\ub2e4 \ubcf5\uc7a1\ud55c \ub370\uc774\ud130\uc5d0 \ub300\uc751\ud560 \uc218 \uc788\uac8c \ub429\ub2c8\ub2e4.\n3.3 \ud65c\uc131\ud654 \ud568\uc218\ub97c \ubcc0\uacbd \ud560 \ub54c\u00b6\uc2e0\uacbd\ub9dd\uc5d0\uc11c \ub4e4\uc5b4\uc624\ub294 \uc785\ub825\uc2e0\ud638\uc758 \ucd1d\ud569\uc744 \ucd9c\ub825\uc2e0\ud638\ub85c \ubcc0\ud658\ud558\ub294 \ud568\uc218\ub97c \ud65c\uc131\ud654\ud568\uc218(activation function)\ub77c\uace0 \ud569\ub2c8\ub2e4. \ud65c\uc131\ud654 \ud568\uc218\ub97c \uae30\uc874\uc758 \ud558\uc774\ud37c\ubcfc\ub9ad \ud0c4\uc820\ud2b8\uc5d0\uc11c ReLU(\uc815\uaddc\ud654 \uc120\ud615 \ud568\uc218;Rectufued Linear Unit)\ub85c \ubcc0\uacbd\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[28]:\n\n    \n#  \ub2e8\uce35 \uc2e0\uacbd\ub9dd\uc744 \uc774\uc6a9\ud55c \uc774\ud56d \ubd84\ub958\uae30 \ubaa8\ub378\uc744 \uc815\uc758\ud55c\ub2e4.\nnum_units = 2\nmult = train_x.flatten().mean()\nx = tf.placeholder(tf.float32, [None, 2])\nw1 = tf.Variable(tf.truncated_normal([2, num_units]))\nb1 = tf.Variable(tf.zeros([num_units]))\nhidden1 = tf.nn.relu(tf.matmul(x, w1) + b1*mult) # \ud65c\uc131\ud654 \ud568\uc218\ub97c ReLU\ub85c \ubcc0\uacbd\ud55c\ub2e4.\nw0 = tf.Variable(tf.zeros([num_units, 1]))\nb0 = tf.Variable(tf.zeros([1]))\np = tf.nn.sigmoid(tf.matmul(hidden1, w0) + b0*mult)\n\n# \uc624\ucc28 \ud568\uc218 loss, \ud2b8\ub808\uc774\ub2dd \uc54c\uace0\ub9ac\uc998 train_step, \uc815\ub2f5\ub960 accuracy\ub97c \uc815\uc758\ud55c\ub2e4.\nt = tf.placeholder(tf.float32, [None, 1])\nloss = -tf.reduce_sum(t*tf.log(p) + (1-t)*tf.log(1-p))\ntrain_step = tf.train.GradientDescentOptimizer(0.001).minimize(loss)\ncorrect_prediction = tf.equal(tf.sign(p-0.5), tf.sign(t-0.5))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n# \uc138\uc158\uc744 \uc900\ube44\ud558\uace0 Variable\uc744 \ucd08\uae30\ud654\ud55c\ub2e4.\nsess = tf.InteractiveSession()\nsess.run(tf.global_variables_initializer())\n\n# \ud30c\ub77c\ubbf8\ud130 \ucd5c\uc801\ud654\ub97c 1000\ud68c \ubc18\ubcf5\ud55c\ub2e4.\ni = 0\nfor _ in range(1000):\n    i += 1\n    sess.run(train_step, feed_dict={x:train_x, t:train_t})\n    if i % 1000 == 0:\n        loss_val, acc_val = sess.run([loss, accuracy],\n                                     feed_dict={x:train_x, t:train_t})\n        print('Step: {}, Loss: {}, Accuracy: {}'.format(i, loss_val, acc_val))\n\n# \uc2dc\uac01\ud654\ud558\uae30\nmake_plot()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nStep: 1000, Loss: 17.51049041748047, Accuracy: 0.892307698726654\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uadf8\ub9bc\uc744 \uc790\uc138\ud788 \ubcf4\uba74 \uc54c \uc218 \uc788\ub4ef\uc774 \uacbd\uacc4\uac00 \uc644\ub9cc\ud558\uac8c \ubcc0\ud55c \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uacbd\uacc4\uc758 \ubaa8\uc591\uc744 \ubc14\uafb8\ub294\uac83\uc774 ReLU\ub97c \uc0ac\uc6a9\ud558\ub294 \ubcf8\uc9c8\uc801\uc778 \uc774\uc720\ub294 \uc544\ub2c8\uc9c0\ub9cc, \uc774\uacfc \uac19\uc740 \uc608\ub97c \ud1b5\ud574 \uc9c1\uac10\uc801\uc778 \ud6a8\uacfc\ub97c \uc774\ud574 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ub2e4\uc218\uc758 \ud30c\ub77c\ubbf8\ud130\ub97c \uac16\ub294 \uc2e0\uacbd\ub9dd\uc5d0\uc11c\ub294  ReLU\uac00 \ucd5c\uc801\ud654\uac00 \ub354 \uc798 \uc774\ub8e8\uc5b4\uc9d1\ub2c8\ub2e4.\n\n3.3 \ub2e4\uce35 \uc2e0\uacbd\ub9dd\uc73c\ub85c\uc758 \ud655\uc7a5\u00b6\uc9c0\uae08\uae4c\uc9c0\ub294 \uc740\ub2c9 \uacc4\uce35\uc774 \ud558\ub098\uc778 \ub2e8\uce35 \uc2e0\uacbd\ub9dd\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c \ub2e8\uacc4\ub85c \uc740\ub2c9 \uacc4\uce35\uc744 \uc99d\uac00\uc2dc\ud0a8 \ub2e4\uce35 \uc2e0\uacbd\ub9dd\uc744 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\ub2e4\uce35 \uc2e0\uacbd\ub9dd\uc744 \uc368\uc57c \ud558\ub294 \uc774\uc720\u00b6\ub2e8\uce35 \uc2e0\uacbd\ub9dd\uc744 \uc774\uc6a9\ud574 \uc544\ub798 \uadf8\ub9bc\uacfc \uac19\uc740 \ub370\uc774\ud130\ub97c \uc81c\ub300\ub85c \ubd84\ub958\ud560 \uc218 \uc5c6\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \ndef generate_datablock(n, mu, var, t):\n    data = multivariate_normal(mu, np.eye(2)*var, n)\n    df = DataFrame(data, columns=['x1','x2'])\n    df['t'] = t\n    return df\n\ndf0 = generate_datablock(30, [-7,-7], 18, 1)\ndf1 = generate_datablock(30, [-7,7], 18, 0)\ndf2 = generate_datablock(30, [7,-7], 18, 0)\ndf3 = generate_datablock(30, [7,7], 18, 1)\n\ndf = pd.concat([df0, df1, df2, df3], ignore_index=True)\ntrain_set = df.reindex(permutation(df.index)).reset_index(drop=True)\n\ntrain_set1 = train_set[train_set['t']==1]\ntrain_set2 = train_set[train_set['t']==0]\n\nfig = plt.figure(figsize=(6,6))\nsubplot = fig.add_subplot(1,1,1)\nsubplot.set_ylim([-15,15])\nsubplot.set_xlim([-15,15])\nsubplot.scatter(train_set1.x1, train_set1.x2, marker='x')\nsubplot.scatter(train_set2.x1, train_set2.x2, marker='o')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[16]:\n\n\n\n\n\n<matplotlib.collections.PathCollection at 0x7f5aa0e44e48>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uae30\uc874\uc758 \ub2e8\uc77c \uc2e0\uacbd\ub9dd\uc740 \ucd9c\ub825 \uacc4\uce35\uc774 \ud3c9\uba74\uc744 \ub2e8\uc21c\ud558\uac8c \uc9c1\uc120\uc73c\ub85c \ubd84\ud560 \ud558\ub824\ub294\ub370 \ubb38\uc81c\uac00 \uc788\uc5b4\uc694. \ub530\ub77c\uc11c \ucd9c\ub825 \uacc4\uce35\uc744 \ud655\uc7a5\ud558\ub294 \ub2e4\uce35 \uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud574\uc57c\ud568\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4. \uc544\ub798\uc758 \ucf54\ub4dc\ucc98\ub7fc \uc2e0\uacbd\ub9dd\uc744 \ucd94\uac00\ud574\uc11c \ud480\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[17]:\n\n    \n# (x1, x2)\uc640 t\ub97c \uac01\uac01 \ubaa8\uc740 \uac83\uc744 NumPy\uc758 array \uc624\ube0c\uc81d\ud2b8\ub85c \ucd94\ucd9c\ud574\ub454\ub2e4.\ntrain_x = train_set[['x1','x2']].as_matrix()\ntrain_t = train_set['t'].as_matrix().reshape([len(train_set), 1])\n\n# 2\uacc4\uce35 \uc2e0\uacbd\ub9dd\uc744 \uc774\uc6a9\ud55c \uc774\ud56d \ubd84\ub958\uae30 \ubaa8\ub378\uc744 \uc815\uc758\ud55c\ub2e4.\nnum_units1 = 2\nnum_units2 = 2\n\nx = tf.placeholder(tf.float32, [None, 2])\nw1 = tf.Variable(tf.truncated_normal([2, num_units1]))\nb1 = tf.Variable(tf.zeros([num_units1]))\nhidden1 = tf.nn.tanh(tf.matmul(x, w1) + b1)\nw2 = tf.Variable(tf.truncated_normal([num_units1, num_units2]))\nb2 = tf.Variable(tf.zeros([num_units2]))\nhidden2 = tf.nn.tanh(tf.matmul(hidden1, w2) + b2)\nw0 = tf.Variable(tf.zeros([num_units2, 1]))\nb0 = tf.Variable(tf.zeros([1]))\np = tf.nn.sigmoid(tf.matmul(hidden2, w0) + b0)\n\n# \uc624\ucc28 \ud568\uc218 loss, \ud2b8\ub808\uc774\ub2dd \uc54c\uace0\ub9ac\uc998 train_step, \uc815\ub2f5\ub960 accuracy\ub97c \uc815\uc758\ud55c\ub2e4.\nt = tf.placeholder(tf.float32, [None, 1])\nloss = -tf.reduce_sum(t*tf.log(p) + (1-t)*tf.log(1-p))\ntrain_step = tf.train.GradientDescentOptimizer(0.001).minimize(loss)\ncorrect_prediction = tf.equal(tf.sign(p-0.5), tf.sign(t-0.5))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n# \uc138\uc158\uc744 \uc900\ube44\ud558\uace0 Variable\uc744 \ucd08\uae30\ud654\ud55c\ub2e4.\nsess = tf.InteractiveSession()\nsess.run(tf.global_variables_initializer())\n\n# \ud30c\ub77c\ubbf8\ud130 \ucd5c\uc801\ud654\ub97c 3000\ud68c \ubc18\ubcf5\ud55c\ub2e4.\ni = 0\nfor _ in range(5000):\n    i += 1\n    sess.run(train_step, feed_dict={x:train_x, t:train_t})\n    if i % 1000 == 0:\n        loss_val, acc_val = sess.run(\n            [loss, accuracy], feed_dict={x:train_x, t:train_t})\n        print ('Step: %d, Loss: %f, Accuracy: %f'\n               % (i, loss_val, acc_val))\n\n# \uc5bb\uc5b4\uc9c4 \ud655\ub960\uc744 \uc0c9\uc758 \ub18d\ub2f4\uc73c\ub85c \uadf8\ub9bc\uc5d0 \ud45c\uc2dc\ud55c\ub2e4.\ntrain_set1 = train_set[train_set['t']==1]\ntrain_set2 = train_set[train_set['t']==0]\n\nfig = plt.figure(figsize=(6,6))\nsubplot = fig.add_subplot(1,1,1)\nsubplot.set_ylim([-15,15])\nsubplot.set_xlim([-15,15])\nsubplot.scatter(train_set1.x1, train_set1.x2, marker='x')\nsubplot.scatter(train_set2.x1, train_set2.x2, marker='o')\n\nlocations = []\nfor x2 in np.linspace(-15,15,100):\n    for x1 in np.linspace(-15,15,100):\n        locations.append((x1,x2))\np_vals = sess.run(p, feed_dict={x:locations})\np_vals = p_vals.reshape((100,100))\nsubplot.imshow(p_vals, origin='lower', extent=(-15,15,-15,15),\n               cmap=plt.cm.gray_r, alpha=0.5)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nStep: 1000, Loss: 80.748276, Accuracy: 0.625000\nStep: 2000, Loss: 57.396599, Accuracy: 0.733333\nStep: 3000, Loss: 55.855778, Accuracy: 0.725000\nStep: 4000, Loss: 26.411263, Accuracy: 0.941667\nStep: 5000, Loss: 24.682444, Accuracy: 0.941667\n\n\n\n\n\n\n    Out[17]:\n\n\n\n\n\n<matplotlib.image.AxesImage at 0x7f5aa00f8748>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uadf8\ub9bc\uc5d0\uc11c \ubcfc \uc218 \uc788\ub4ef\uc774 \ub450 \uac1c\uc758 \uc2e0\uacbd\ub9dd\uc744 \uad6c\uc131\ud568\uc73c\ub85c\uc11c \ub370\uc774\ud130\ub97c \uc81c\ub300\ub85c \ubd84\ub958 \ud560 \uc218 \uc788\ub294\uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c\uae4c\uc9c0 \uc608\uc2dc\ub4e4\uc740 \uc124\uba85\uc744 \uc704\ud55c \uac04\ub2e8\ud55c \uac83\uc73c\ub85c \uc55e\uc73c\ub85c \uc0b4\ud3b4\ubcfc \ubcf5\uc7a1\ud55c \ub370\uc774\ud130\uc5d0\uc11c\ub294 \uc774\uac83\ub9cc\uc73c\ub85c \ucda9\ubd84\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n4\uc7a5. \ud569\uc131\uacf1 \ud544\ud130(Convolution Filter)\ub97c \uc774\uc6a9\ud55c \uc774\ubbf8\uc9c0\ubd84\ub958\u00b6\ud569\uc131\uacf1 \ud544\ud130\u00b6\uad6c\uccb4\uc801\uc778 \ub0b4\uc6a9\uc740 \ub2e4\uc74c \ub9c1\ud06c\uc5d0 \uc815\ub9ac\uac00 \uc798 \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\uac04\ub2e8\ud558\uac8c \ub9d0\ud558\uc790\uba74 \uc785\ub825 \ub370\uc774\ud130\uc758 \ud2b9\uc9d5\ub9cc \ucd94\ub824\ub0b4\ub294 \ubc29\ubc95\uc774\ub77c\uace0 \ud560 \uc218 \uc788\uaca0\uc2b5\ub2c8\ub2e4.\n\n4.3 \ud569\uc131\uacf1 \ud544\ud130\ub97c \uc774\uc6a9\ud55c \ud544\uae30\uccb4 \ubd84\ub958\u00b6\ub2e8\uce35 \ud569\uc131\uacf1 \ud544\ud130(CNN)\ub97c \uc0ac\uc6a9\ud574 MNIST \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[18]:\n\n    \n# \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc624\uace0 \ub09c\uc218\uc758 \uc2dc\ub4dc\ub97c \uc124\uc815\ud55c\ub2e4.\nimport tensorflow as tf\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom tensorflow.examples.tutorials.mnist import input_data\n\nnp.random.seed(20180312)\ntf.set_random_seed(20180312)\n\n# MNIST \ub370\uc774\ud130 \uc138\ud2b8\ub97c \uc900\ube44\ud55c\ub2e4.\n\nmnist = input_data.read_data_sets(\"/tmp/data/\", one_hot=True)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nSuccessfully downloaded train-images-idx3-ubyte.gz 9912422 bytes.\nExtracting /tmp/data/train-images-idx3-ubyte.gz\nSuccessfully downloaded train-labels-idx1-ubyte.gz 28881 bytes.\nExtracting /tmp/data/train-labels-idx1-ubyte.gz\nSuccessfully downloaded t10k-images-idx3-ubyte.gz 1648877 bytes.\nExtracting /tmp/data/t10k-images-idx3-ubyte.gz\nSuccessfully downloaded t10k-labels-idx1-ubyte.gz 4542 bytes.\nExtracting /tmp/data/t10k-labels-idx1-ubyte.gz\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[19]:\n\n    \n# \ud544\ud130\uc5d0 \ud574\ub2f9\ud558\ub294 Variable\uc744 \uc900\ube44\ud558\uace0 \uc785\ub825 \ub370\uc774\ud130\uc5d0 \ud544\ud130\uc640 \ud480\ub9c1 \uacc4\uce35\uc744 \uc801\uc6a9\ud558\ub294 \uacc4\uc0b0\uc2dd\uc744 \uc815\uc758\ud55c\ub2e4.\nnum_filters = 16 # \uc0ac\uc6a9\ud560 \ud544\ud130\uc758\uc218 \uc784\uc758\uc758 \uc22b\uc790\nx = tf.placeholder(tf.float32, [None, 784])\nx_image = tf.reshape(x, [-1,28,28,1])\nW_conv = tf.Variable(tf.truncated_normal([5,5,1,num_filters],\n                                        stddev=0.1))\nh_conv = tf.nn.conv2d(x_image, W_conv,\n                      strides=[1,1,1,1], padding='SAME')\nh_pool =tf.nn.max_pool(h_conv, ksize=[1,2,2,1],\n                       strides=[1,2,2,1], padding='SAME')\n\n# \ud480\ub9c1 \uacc4\uce35\uc758 \ucd9c\ub825\uc744 \uc804 \uacb0\ud569\uce35\uc744 \uacbd\uc720\ud574\uc11c \uc18c\ud504\ud2b8\ub9e5\uc2a4 \ud568\uc218\ub85c \uc785\ub825\ud558\ub294 \uacc4\uc0b0\uc2dd\uc744 \uc815\uc758\ud55c\ub2e4.\nh_pool_flat = tf.reshape(h_pool, [-1, 14*14*num_filters])\nnum_units1 = 14*14*num_filters\nnum_units2 = 1024\n\nw2 = tf.Variable(tf.truncated_normal([num_units1, num_units2]))\nb2 = tf.Variable(tf.zeros([num_units2]))\nhidden2 = tf.nn.relu(tf.matmul(h_pool_flat, w2) + b2)\n\nw0 = tf.Variable(tf.zeros([num_units2, 10]))\nb0 = tf.Variable(tf.zeros([10]))\np = tf.nn.softmax(tf.matmul(hidden2, w0) + b0)\n\n# \uc624\ucc28 \ud568\uc218 loss, \ud2b8\ub808\uc774\ub2dd \uc54c\uace0\ub9ac\uc998 train_step, \uc815\ub2f5\ub960 accuracy\ub97c \uc815\uc758\ud55c\ub2e4.\nt = tf.placeholder(tf.float32, [None, 10])\nloss = -tf.reduce_sum(t * tf.log(p))\ntrain_step = tf.train.AdamOptimizer(0.0005).minimize(loss)\ncorrect_prediction = tf.equal(tf.argmax(p, 1), tf.argmax(t, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n# \uc138\uc158\uc744 \uc900\ube44\ud558\uace0 Variable\uc744 \ucd08\uae30\ud654\ud55c\ub2e4.\nsess = tf.InteractiveSession()\nsess.run(tf.global_variables_initializer())\n\n# \ud30c\ub77c\ubbf8\ud130 \ucd5c\uc801\ud654\ub97c 4000\ud68c \ubc18\ubcf5\ud55c\ub2e4.\ni = 0\nfor _ in range(4000):\n    i += 1\n    batch_xs, batch_ts = mnist.train.next_batch(100)\n    sess.run(train_step, feed_dict={x: batch_xs, t: batch_ts})\n    if i % 1000 == 0:\n        loss_val, acc_val = sess.run([loss, accuracy],\n            feed_dict={x:mnist.test.images, t:mnist.test.labels})\n        print ('Step: %d, Loss: %f, Accuracy: %f'\n               % (i, loss_val, acc_val))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nStep: 1000, Loss: 792.982544, Accuracy: 0.974400\nStep: 2000, Loss: 633.976257, Accuracy: 0.980800\nStep: 3000, Loss: 646.613098, Accuracy: 0.981300\nStep: 4000, Loss: 699.803589, Accuracy: 0.981300\n\n\n\n\n\n\n\n\n\n\n\n\uc774\ucc98\ub7fc MNIST \ud544\uae30\uccb4 \ub370\uc774\ud130\uc5d0 \ub2e8\uce35 CNN\uc744 \uc0ac\uc6a9\ud574\uc11c \uc57d 98%\uc758 \uc815\ud655\ub3c4\ub97c \ub2ec\uc131\ud588\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c\n\n\n\n\n\n\nIn\u00a0[20]:\n\n    \n# \ud569\uc131\uacf1 \ud544\ud130\uc758 \uac12\uacfc \ucd5c\ucd08 9\uac1c\uc758 \uc774\ubbf8\uc9c0 \ub370\uc774\ud130\uc5d0 \ub300\ud574 \ud569\uc131\uacf1 \ud544\ud130\uc640 \ud480\ub9c1 \uacc4\uce35\uc744 \uc801\uc6a9\ud55c \uacb0\uacfc\ub97c \uc5bb\ub294\ub2e4.\nfilter_vals, conv_vals, pool_vals = sess.run(\n    [W_conv, h_conv, h_pool], feed_dict={x:mnist.test.images[:9]})\n\n# \ud569\uc131\uacf1 \ud544\ud130\uc640 \ud480\ub9c1\uacc4\uce35\ub97c \uc801\uc6a9\ud55c \uacb0\uacfc\ub97c \uc774\ubbf8\uc9c0\ub85c \ucd9c\ub825\ud55c\ub2e4.\n# \ud569\uc131\uacf1 \ud544\ud130\ub97c \uc801\uc6a9\ud55c \ud6c4\uc5d0\ub294 \ud53d\uc140\uac12\uc774 \uc74c\uc758 \uac12\uc744 \uac16\ub294 \uacbd\uc6b0\ub3c4 \uc788\uc73c\ubbc0\ub85c \ubc30\uacbd(\ud53d\uc140\uac12 0) \ubd80\ubd84\uc774 \ud770\uc0c9\uc774 \ub418\uc9c0 \uc54a\ub294\ub2e4\ub294 \uc810\uc5d0 \uc8fc\uc758\ud558\uae30 \ubc14\ub780\ub2e4.\n\nfig = plt.figure(figsize=(10,num_filters+1))\n\nfor i in range(num_filters):\n    subplot = fig.add_subplot(num_filters+1, 10, 10*(i+1)+1)\n    subplot.set_xticks([])\n    subplot.set_yticks([])\n    subplot.imshow(filter_vals[:,:,0,i],\n                   cmap=plt.cm.gray_r, interpolation='nearest')\n\nfor i in range(9):\n    subplot = fig.add_subplot(num_filters+1, 10, i+2)\n    subplot.set_xticks([])\n    subplot.set_yticks([])\n    subplot.set_title('%d' % np.argmax(mnist.test.labels[i]))\n    subplot.imshow(mnist.test.images[i].reshape((28,28)),\n                   vmin=0, vmax=1,\n                   cmap=plt.cm.gray_r, interpolation='nearest')\n\n    for f in range(num_filters):\n        subplot = fig.add_subplot(num_filters+1, 10, 10*(f+1)+i+2)\n        subplot.set_xticks([])\n        subplot.set_yticks([])\n        subplot.imshow(pool_vals[i,:,:,f],\n                       cmap=plt.cm.gray_r, interpolation='nearest') \n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uadf8\ub9ac \uba85\ub8cc\ud558\uc9c0\ub294 \uc54a\uc9c0\ub9cc \uc798 \uc0b4\ud3b4\ubcf4\uba74 \ud2b9\uc815 \ubc29\ud5a5\uc758 \ubaa8\uc11c\ub9ac\ub97c \ucd94\ucd9c\ud558\ub294 \ud544\ud130\uc640 \ud480\ub9b4 \uacc4\uce35\uc5d0 \uc758\ud574 \uc774\ubbf8\uc9c0\uac00 \ucd95\uc18c\ub41c \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ub05d\uc73c\ub85c, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0\uc11c \uc62c\ubc14\ub974\uac8c \ubd84\ub958\ud560 \uc218 \uc5c6\uc5c8\ub358 \ub370\uc774\ud130\uc5d0 \ub300\ud574 \ud655\uc778\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uac01 \ub370\uc774\ud130\uc5d0 \ub300\ud574 0~9 \uc77c \ud655\ub960\uc744 \ub9c9\ub300\uadf8\ub798\ud504\ub85c \ud45c\uc2dc\ud588\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[21]:\n\n    \n# \uc62c\ubc14\ub974\uac8c \ubd84\ub958\ud560 \uc218 \uc5c6\uc5c8\ub358 \uba87\uba87 \ub370\uc774\ud130\uc5d0 \ub300\ud574 \uac01\uac01\uc758 \ubb38\uc790\uc77c \ud655\ub960\uc744 \ud655\uc778\ud55c\ub2e4.\n\nfig = plt.figure(figsize=(12,10))\nc=0\nfor (image, label) in zip(mnist.test.images, \n                          mnist.test.labels):\n    p_val = sess.run(p, feed_dict={x:[image]})\n    pred = p_val[0]\n    prediction, actual = np.argmax(pred), np.argmax(label)\n    if prediction == actual:\n        continue\n    subplot = fig.add_subplot(5,4,c*2+1)\n    subplot.set_xticks([])\n    subplot.set_yticks([])\n    subplot.set_title('%d / %d' % (prediction, actual))\n    subplot.imshow(image.reshape((28,28)), vmin=0, vmax=1,\n                   cmap=plt.cm.gray_r, interpolation=\"nearest\")\n    subplot = fig.add_subplot(5,4,c*2+2)\n    subplot.set_xticks(range(10))\n    subplot.set_xlim(-0.5,9.5)\n    subplot.set_ylim(0,1)\n    subplot.bar(range(10), pred, align='center')\n    c += 1\n    if c == 10:\n        break\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uac01\uac01\uc758 \uc774\ubbf8\uc9c0 \uc704\uc5d0 \uc788\ub294 \uc22b\uc790\ub294 \uc608\uce21/\uc815\ub2f5\uc744 \ub098\ud0c0\ub0b4\uace0 \uc624\ub978\ucabd \uadf8\ub798\ud504\ub294 \uac01\uac01\uc758 \ud655\ub960\uc744 \ub098\ud0c0\ub0b4\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uacb0\uacfc\ub97c \ubcf4\uba74 \uc815\ub9d0 \uc5c9\ub6b1\ud558\uac8c \uc608\uce21\ud55c \uac12\ub3c4 \uc788\ub294 \ubc18\uba74, \uc0ac\ub78c\uc774 \ud310\ub2e8\ud558\uae30\uc5d0\ub3c4 \uc560\ub9e4\ud55c \uc22b\uc790\ub3c4 \ubcf4\uc785\ub2c8\ub2e4.\n5\uc7a5. \ub2e4\uce35 \ud569\uc131\uacf1 \ud544\ud130 \uc2e0\uacbd\ub9dd\u00b6\ub4dc\ub514\uc5b4 \ud569\uc131\uacf1 \uc2e0\uacbd\ub9dd\uc758 \uc804\uccb4 \uad6c\uc870\ub97c \uc644\uc131 \uc2dc\ucf1c\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc774\uc804 \uc7a5\uc5d0\uc11c \ud569\uc131\uacf1 \ud544\ud130 -> \ud480\ub9c1 \uacc4\uce35 -> \uc804 \uacb0\ud569\uce35 -> \uc18c\ud504\ud2b8\ub9e5\uc2a4 \ud568\uc218\ub77c\ub294 \uacfc\uc815\uc744 \ud1b5\ud574 98%\uc758 \uc815\ud655\ub3c4\ub97c \ub2ec\uc131\ud588\ub294\ub370, \uc774\ubc88\uc5d0\ub294 \ud569\uc131\uacf1 \ud544\ud130\ub97c \ub2e4\uce35\ud654\ud55c CNN\uc744 \uad6c\uc131\ud574\uc11c \uc5bc\ub9c8\ub098 \uc815\ud655\ud55c \ud559\uc2b5\uc744 \ud558\ub294\uc9c0 \ud655\uc778\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[22]:\n\n    \n# \ub370\uc774\ud130\ub97c \uc900\ube44\ud55c\ub2e4.\nmnist = input_data.read_data_sets(\"/tmp/data/\", one_hot=True)\n\n# \uccab \ubc88\uc9f8 \ub2e8\uacc4\uc758 \ud569\uc131\uacf1 \ud544\ud130\uc640 \ud480\ub9c1 \uacc4\uce35\uc744 \uc815\uc758\ud55c\ub2e4.\nnum_filters1 = 32\nx = tf.placeholder(tf.float32, [None, 784])\nx_image = tf.reshape(x, [-1,28,28,1])\nW_conv1 = tf.Variable(tf.truncated_normal([5,5,1,num_filters1],\n                                          stddev=0.1))\nh_conv1 = tf.nn.conv2d(x_image, W_conv1,\n                       strides=[1,1,1,1], padding='SAME')\nb_conv1 = tf.Variable(tf.constant(0.1, shape=[num_filters1]))\nh_conv1_cutoff = tf.nn.relu(h_conv1 + b_conv1)\nh_pool1 = tf.nn.max_pool(h_conv1_cutoff, ksize=[1,2,2,1],\n                         strides=[1,2,2,1], padding='SAME')\n\n# \ub450 \ubc88\uc9f8 \ub2e8\uacc4\uc758 \ud569\uc131\uacf1 \ud544\ud130\uc640 \ud480\ub9c1 \uacc4\uce35\uc744 \uc815\uc758\ud55c\ub2e4.\nnum_filters2 = 64\nW_conv2 = tf.Variable(\n            tf.truncated_normal([5,5,num_filters1,num_filters2],\n                                stddev=0.1))\nh_conv2 = tf.nn.conv2d(h_pool1, W_conv2,\n                       strides=[1,1,1,1], padding='SAME')\nb_conv2 = tf.Variable(tf.constant(0.1, shape=[num_filters2]))\nh_conv2_cutoff = tf.nn.relu(h_conv2 + b_conv2)\nh_pool2 = tf.nn.max_pool(h_conv2_cutoff, ksize=[1,2,2,1],\n                         strides=[1,2,2,1], padding='SAME')\n\n# \uc804 \uacb0\ud569\uce35, \ub4dc\ub86d\uc544\uc6c3 \uacc4\uce35, \uc18c\ud504\ud2b8\ub9e5\uc2a4 \ud568\uc218\ub97c \uc815\uc758\ud55c\ub2e4.\nh_pool2_flat = tf.reshape(h_pool2, [-1, 7*7*num_filters2])\nnum_units1 = 7*7*num_filters2\nnum_units2 = 1024\nw2 = tf.Variable(tf.truncated_normal([num_units1, num_units2]))\nb2 = tf.Variable(tf.constant(0.1, shape=[num_units2]))\nhidden2 = tf.nn.relu(tf.matmul(h_pool2_flat, w2) + b2)\nkeep_prob = tf.placeholder(tf.float32)\nhidden2_drop = tf.nn.dropout(hidden2, keep_prob)\nw0 = tf.Variable(tf.zeros([num_units2, 10]))\nb0 = tf.Variable(tf.zeros([10]))\np = tf.nn.softmax(tf.matmul(hidden2_drop, w0) + b0)\n\n# \uc624\ucc28 \ud568\uc218 loss, \ud2b8\ub808\uc774\ub2dd \uc54c\uace0\ub9ac\uc998 train_step, \uc815\ub2f5\ub960 accuracy\uc744 \uc815\uc758\ud55c\ub2e4.\nt = tf.placeholder(tf.float32, [None, 10])\nloss = -tf.reduce_sum(t * tf.log(p))\ntrain_step = tf.train.AdamOptimizer(0.0001).minimize(loss)\ncorrect_prediction = tf.equal(tf.argmax(p, 1), tf.argmax(t, 1))\naccuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))\n\n# \uc138\uc158\uc744 \uc900\ube44\ud558\uace0 Variable\uc744 \ucd08\uae30\ud654\ud55c\ub2e4.\nsess = tf.InteractiveSession()\nsess.run(tf.global_variables_initializer())\n\n# \ud30c\ub77c\ubbf8\ud130 \ucd5c\uc801\ud654\ub97c 4000\ud68c \ubc18\ubcf5\ud55c\ub2e4.\ni = 0\nfor _ in range(4000):\n    i += 1\n    batch_xs, batch_ts = mnist.train.next_batch(50)\n    sess.run(train_step,\n             feed_dict={x:batch_xs, t:batch_ts, keep_prob:0.5})\n    if i % 1000 == 0:\n        loss_vals, acc_vals = [], []\n        for c in range(4):\n            start = len(mnist.test.labels) / 4 * c\n            end = len(mnist.test.labels) / 4 * (c+1)\n            loss_val, acc_val = sess.run([loss, accuracy],\n                feed_dict={x:mnist.test.images[int(start):int(end)], # numpy \ubcc0\uacbd\uc0ac\ud56d\n                           t:mnist.test.labels[int(start):int(end)],\n                           keep_prob:1.0})\n            loss_vals.append(loss_val)\n            acc_vals.append(acc_val)\n        loss_val = np.sum(loss_vals)\n        acc_val = np.mean(acc_vals)\n        print('Step: %d, Loss: %f, Accuracy: %f' % (i, loss_val, acc_val))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nExtracting /tmp/data/train-images-idx3-ubyte.gz\nExtracting /tmp/data/train-labels-idx1-ubyte.gz\nExtracting /tmp/data/t10k-images-idx3-ubyte.gz\nExtracting /tmp/data/t10k-labels-idx1-ubyte.gz\nStep: 1000, Loss: 960.280762, Accuracy: 0.970400\nStep: 2000, Loss: 634.499390, Accuracy: 0.979900\nStep: 3000, Loss: 580.983398, Accuracy: 0.981700\nStep: 4000, Loss: 461.817566, Accuracy: 0.985200\n\n\n\n\n\n\n\n\n\n\n\n\uc544\uc8fc \ud070 \ucc28\uc774\ub294 \uc544\ub2c8\uc9c0\ub9cc, \ub2e4\uc911 CNN \ud544\ud130\ub97c \uc0ac\uc6a9\ud558\uba74 0.4%\uc758 \uc815\ud655\ub3c4\uac00 \uc99d\uac00\ud588\uc2b5\ub2c8\ub2e4.\n\ub9c8\uce58\uba70\u00b6\ucc45 \ud150\uc11c\ud50c\ub85c\ub85c \uc2dc\uc791\ud558\ub294 \ub525\ub7ec\ub2dd\uc740 \ub450\uaecd\uc9c0\ub294 \uc54a\uc9c0\ub9cc \ub525\ub7ec\ub2dd\uc758 \uac1c\ub150\uc744 \uc124\uba85\ud558\ub294\ub370 \ub9ce\uc740 \ub178\ub825\uc744 \uae30\uc6b8\uc774\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc26c\uc6b4 \uc608\uc2dc\uc640 \uc218\ud559\uc801 \uc99d\uba85\uc740 \uc800\uc640 \uac19\uc740 \ucd08\ubcf4\uc790\uac00 \uac10\uc744 \uc7a1\ub294\ub370 \ub3c4\uc6c0\uc744 \uc90d\ub2c8\ub2e4. \ub525\ub7ec\ub2dd\uacfc \ud150\uc11c\ud50c\ub85c\ub97c \uc774\uc81c \uacf5\ubd80\ud558\ub824\uace0 \ud55c\ub2e4\uba74 \ud55c\ubc88\ucbe4 \uc77d\uc5b4 \ubcf4\uc2dc\ub294\uac83\uc744 \ucd94\ucc9c\ub4dc\ub9bd\ub2c8\ub2e4.",
      "tags": "deeplearning,machine learning,Python,tensorflow",
      "url": "https://partrita.github.io/posts/tensorflow-deeplearning/"
    },
    {
      "title": "\ud30c\uc774\uc36c\uc73c\ub85c \uc54c\uace0\ub9ac\uc998 \ubc30\uc6b0\uae30",
      "text": "0. \uc2dc\uc791\ud558\uae30\uc804\uc5d0\u00b6\ucc45 \uc774\uc2b9\ucc2c, \ubaa8\ub450\uc758 \uc54c\uace0\ub9ac\uc998 with \ud30c\uc774\uc36c, \uae38\ubc97, 2017 \uc744 \uc77d\uace0 \ubcf5\uc2b5\uc744 \uc704\ud574 \uc815\ub9ac\ud55c \uac83\uc785\ub2c8\ub2e4. \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ucc45\uc744 \uc77d\uc5b4\uc8fc\uc138\uc694.\n1. \uc54c\uace0\ub9ac\uc998 \uae30\ucd08\u00b6\uc54c\uace0\ub9ac\uc998\uc774\ub780 \uac04\ub2e8\ud788 \ub9d0\ud574 \uc5b4\ub5a4 \ubb38\uc81c\ub97c \ud480\uae30 \uc704\ud55c \uc808\ucc28\ub098 \ubc29\ubc95 \uc785\ub2c8\ub2e4. \uac04\ub2e8\ud55c \ubb38\uc81c\ub97c \ud480\uc5b4 \ubcf4\uba74\uc11c \uc54c\uace0\ub9ac\uc998\uc5d0 \ub300\ud574 \uc0b4\ud3b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\ubb38\uc81c.1 1\ubd80\ud130 n\uae4c\uc9c0\uc758 \ud569\uad6c\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n# \ud574\ubc951\ndef sum_n(n):\n    s = 0\n    for i in range(1, n+1):\n        s += i\n    return s\n\nsum_n(1000)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[1]:\n\n\n\n\n\n500500\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \n# \ud574\ubc95 2\ndef sum_n2(n):\n    return n*(n+1)//2\nsum_n2(1000)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\n500500\n\n\n\n\n\n\n\n\n\n\n\n\uc785\ub825 \ud06c\uae30\uc640 \uacc4\uc0b0 \ud69f\uc218\u00b6\uc785\ub825\uc758 \ud06c\uae30(n)\uc5d0 \ub530\ub77c\uc11c \ud574\ubc95\uc5d0 \ucc28\uc774\uac00 \uc0dd\uae41\ub2c8\ub2e4.\n\n\ud574\ubc951\uc758 \uacbd\uc6b0\ub294: \ub367\uc148 n \ubc88\n\ud574\ubc952\uc758 \uacbd\uc6b0 \ub367\uc148, \uacf1\uc148, \ub098\ub217\uc148 \ucd1d 3\ubc88\n\uc785\ub825\uc758 \ud06c\uae30\uac00 \uc791\uc744\ub54c\ub294 \ud070 \ucc28\uc774\uac00 \uc5c6\uc9c0\ub9cc, n\uc758 \ud06c\uae30\uac00 \ucee4\uc9c8\uc218\ub85d \uc18d\ub3c4\uc5d0 \uc5c4\uccad\ub09c \ucc28\uc774\uac00 \ub0a9\ub2c8\ub2e4.\n\nO \ud45c\uae30\ubc95\u00b6\uacc4\uc0b0\ubcf5\uc7a1\ub3c4\ub97c \ud45c\ud5cc\ud558\ub294 \ubc29\ubc95 \uc911 \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4. \ube45 \uc624\ud45c\uae30\ubc95\uc774\ub77c\uace0\ub3c4 \ubd80\ub985\ub2c8\ub2e4. \uac04\ub2e8\ud55c \uc608\ub97c \ub4e4\uba74, \uc785\ub825 \ud06c\uae30 n\uc5d0 \ub300\ud574 \uacc4\uc0b0\uc744 n\ubc88 \ud55c\ub2e4\uba74, \uacc4\uc0b0 \ubcf5\uc7a1\ub3c4\ub97c O(n)\uc774\ub77c\uace0 \ud45c\ud604\ud569\ub2c8\ub2e4.\n\nO(n) : \ud544\uc694\ud55c \uacc4\uc0b0 \ud69f\uc218\uac00 \uc785\ub825\ud06c\uae30 n\uacfc \ube44\ub840\ud560 \ub54c\nO(1): \ud544\uc694\ud55c \uacc4\uc0b0 \ud69f\uc218\uac00 \uc785\ub825\ud06c\uae30\uc640 \ubb34\uad00\ud560 \ub54c \nO(n2) : n\uc758 \uc81c\uacf1\uc5d0 \ube44\ub840\ud558\uc5ec \uacc4\uc0b0 \uc2dc\uac04\uc774 \uc99d\uac00\ud568\nO(2n) : 2\uc758 n \uc81c\uacf1\uc5d0 \ube44\ub840\ud558\uc5ec \uacc4\uc0b0 \uc2dc\uac04\uc774 \uc99d\uac00\ud568\n\nJupyter notebook\uc758 %%time \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574 \uc704\uc758 \ub450\uac00\uc9c0 \ud574\ubc95\uc758 \uc18d\ub3c4\ub97c \ube44\uad50\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \n%%time\nsum_n(100000)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nCPU times: user 12 ms, sys: 0 ns, total: 12 ms\nWall time: 12.3 ms\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n5000050000\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \n%%time\nsum_n2(100000)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nCPU times: user 0 ns, sys: 0 ns, total: 0 ns\nWall time: 10.5 \u00b5s\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n5000050000\n\n\n\n\n\n\n\n\n\n\n\n\uc704\uc758 \ub450\uac00\uc9c0 \uc54c\uace0\ub9ac\uc998\uc740 \uac19\uc740 \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uc9c0\ub9cc \uc2dc\uac04\uc5d0\uc11c \uc57d \uc5f4\ubc30\uc758 \ucc28\uc774\ub97c \ubcf4\uc5ec \uc8fc\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub354 \ub9ce\uc740 \uc591\uc758 \uc785\ub825\uc774 \ub4e4\uc5b4\uc624\uba74 \ucc28\uc774\ub294 \ub354\uc6b1\ub354 \ucee4\uc9c0\uac8c \ub420\uac81\ub2c8\ub2e4. \n\ubb38\uc81c\ub97c \ud574\uacb0\ud558\ub294\ub370 \uc788\uc5b4\uc11c \ub2e4\uc591\ud55c \ubc29\ubc95\uc774 \uc874\uc7ac\ud560 \uc218 \uc788\uc9c0\ub9cc \uc6b0\ub9ac\uac00 \uac00\ub2a5\ud558\uba74 \ube60\ub978 \uc54c\uace0\ub9ac\uc998\uc744 \uc9dc\uc57c\ud560 \uc774\uc720\ub294 \uc774 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\ubb38\uc81c2. \ucd5c\ub313\uac12 \ucc3e\uae30\u00b6\uc8fc\uc5b4\uc9c4 \uc22b\uc790 n\uac1c \uc911 \uac00\uc7a5 \ud070 \uc22b\uc790\ub97c \ucc3e\ub294 \uc54c\uace0\ub9ac\uc998\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uc138\uc694\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \ndef find_max(x):\n    n = len(x)\n    max_v = x[0]\n    for i in range(1,n):\n        if x[i] > max_v:\n            max_v = x[i]\n    return max_v\n\nv = [1,2,3,4,5,6]\nfind_max(v)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n6\n\n\n\n\n\n\n\n\n\n\n\n\ucd5c\ub313\uac12\uc758 \uc704\uce58\ub97c \uad6c\ud558\ub294 \uc54c\uace0\ub9ac\uc998\u00b6\n\n\n\n\n\nIn\u00a0[6]:\n\n    \ndef find_index(x):\n    n = len(x)\n    max_index = 0\n    for i in range(1,n):\n        if x[i] > x[max_index]:\n            max_index = i\n    return max_index + 1 # 0\ubd80\ud130 \uc2dc\uc791\ub418\uae30\ub54c\ubb38\uc5d0 1\uc744 \ub354\ud574\uc90c\n\nv = [1,2,3,4,5,6]\nfind_index(v)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\n6\n\n\n\n\n\n\n\n\n\n\n\n\ubb38\uc81c3. \uac19\uc740 \uac12 \ucc3e\uae30\u00b6n\uac1c\uc758 \ub370\uc774\ud130 \uc911\uc5d0\uc11c \uac19\uc740 \uc774\ub984\uc744 \ucc3e\uc544 \uc9d1\ud568\uc73c\ub85c \ub3cc\ub824\uc8fc\ub294 \uc54c\uace0\ub9ac\uc998\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \ndef find_same_data(a):\n    n = len(a)\n    result = set() # \uacb0\uacfc \uc800\uc7a5\uc6a9 \ube48 \uc9d1\ud569\n    for i in range(0, n-1):\n        for j in range(i+1, n):\n            if a[i] == a[j]:\n                result.add(a[i])\n    return result\ndata = ['C','Cm','D7','E','Cm']\nfind_same_data(data)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n{'Cm'}\n\n\n\n\n\n\n\n\n\n\n\n2. \uc7ac\uadc0\ud638\ucd9c\u00b6\uc7ac\uadc0\ud638\ucd9c\uc740 \ud568\uc218\uac00 \uc790\uae30 \uc790\uc2e0\uc744 \ub2e4\uc2dc \ud638\ucd9c \ud558\ub294 \uac83\uc744 \ub73b\ud569\ub2c8\ub2e4.\ndef hi():\n    print('hi')\n    hi() # hi\ud568\uc218\ub97c \ub2e4\uc2dc \ud638\ucd9c\n\n\uc774\uac83\uc774 \ubc14\ub85c \uc7ac\uadc0 \ud638\ucd9c\uc785\ub2c8\ub2e4. 'hi'\ub77c\ub294 \ubb38\uc7a5\uc744 \ucd9c\ub825\ud55c \ub2e4\uc74c \ub2e4\uc2dc \uc790\uae30 \uc790\uc2e0\uc778 hi()\ub97c \ud638\ucd9c \ud558\ubbc0\ub85c \uc601\uc6d0\ud788 \ubc18\ubcf5\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n\ubb38\uc81c4. \ud329\ud1a0\ub9ac\uc5bc \uad6c\ud558\uae30\u00b61\ubd80\ud130 n\uae4c\uc9c0 \uc5f0\uc18d\ud55c \uc815\uc218\uc758 \uacf1\uc744 \uad6c\ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uc138\uc694.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \n# \ud574\ubc95 1 \ndef fact1(n):\n    result = 1\n    for i in range(1, n+1):\n        result *= i\n    return result\nfact1(10)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n3628800\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \n# \ud574\ubc952, \uc7ac\uadc0 \ud638\ucd9c \uc0ac\uc6a9\ndef fact2(n):\n    if n <= 1:\n        return 1\n    return n*fact2(n-1)\nfact2(10)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\n3628800\n\n\n\n\n\n\n\n\n\n\n\n1\ubd80\ud130 n\uae4c\uc9c0 \ud569\uc744 \uad6c\ud558\ub294 \ubb38\uc81c1\uc744 \uc7ac\uadc0\ud638\ucd9c\ub85c \ub2e4\uc2dc \ud55c\ubc88 \ud480\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \ndef sum_n(n):\n    if n == 0:\n        return 0\n    return sum_n(n-1) + n\nsum_n(100)\n    \n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\n5050\n\n\n\n\n\n\n\n\n\n\n\n\ubb38\uc81c5. \ucd5c\ub300\uacf5\uc57d\uc218 \uad6c\ud558\uae30\u00b6\ub450 \uc790\uc5f0\uc218 a\uc640 b\uc758 \ucd5c\ub300\uacf5\uc57d\uc218\ub97c \uad6c\ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uc138\uc694.\n\ucd5c\ub300\uacf5\uc57d\uc218\ub294 \ub450 \uac1c \uc774\uc0c1\uc758 \uc815\uc218\uc758 \uacf5\ud1b5\uc57d\uc218\uc911\uc5d0\uc11c \uac00\uc7a5 \ud070 \uac12\uc744 \uc758\ubbf8 \ud569\ub2c8\ub2e4.\n\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \n# \ud574\ubc951\ndef gcd(a,b):\n    i = min(a,b)\n    while True:\n        if a%i == 0 and b%i == 0:\n            return i\n        i = i -1\ngcd(102,414)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[11]:\n\n\n\n\n\n6\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \n# \ud574\ubc952, \uc720\ud074\ub9ac\ub4dc \uc54c\uace0\ub9ac\uc998\uc744 \uc774\uc6a9\ud574 \ucd5c\ub300 \uacf5\uc57d\uc218\ub97c \uad6c\ud558\ub294 \uc54c\uace0\ub9ac\uc998\ndef gcd(a,b):\n    if b == 0:\n        return a\n    return gcd(b, a % b)\ngcd(102,414)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[12]:\n\n\n\n\n\n6\n\n\n\n\n\n\n\n\n\n\n\n\ubb38\uc81c6. \ud558\ub178\uc774 \ud0d1 \uc62e\uae30\uae30\u00b6\uc6d0\ubc18\uc774 n\uac1c\uc778 \ud558\ub178\uc774 \ud0d1\uc744 \uc62e\uae30\uae30 \uc704\ud55c \uc774\ub3d9\uc21c\uc11c\ub97c \ucd9c\ub825\ud574\ubcf4\uc138\uc694.\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \ndef hanoi(n, from_pos, to_pos, aux_pos):\n    if n == i:\n        print(from_pos, ' >> ', to_pos)\n        return\n    hanoi(n-1, from_pos, aux_pos, to_pos)\n    print(from_pos, ' >> ', to_pos)\n    hanoi(n-1, aux_pos, to_pos, from_pos)\n    \n\n\n    \n\n\n\n\n\n\n\n3. \ud0d0\uc0c9\uacfc \uc815\ub82c\u00b6\ud0d0\uc0c9\uc740 \uc5ec\ub7ec \uac1c\uc758 \uc790\ub8cc \uc911\uc5d0\uc11c \uc6d0\ud558\ub294 \uac83\uc744 \ucc3e\uc544\ub0b4\ub294 \uac83\uc774\uace0 \uc815\ub82c\uc740 \uc8fc\uc5b4\uc9c4 \uc790\ub8cc\ub97c \uc21c\uc11c\uc5d0 \ub9de\ucdb0 \ub098\uc5f4\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n\ubb38\uc81c7. \uc21c\ucc28\ud0d0\uc0c9\u00b6\ub9ac\uc2a4\ud2b8\uc5d0 \uc788\ub294 \uccab \ubc88\uc9f8 \uc790\ub8cc\ubd80\ud130 \ud558\ub098\ud558\ub098 \ube44\uad50\ud558\uba74\uc11c \ud0d0\uc0c9\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \n# \ud574\ubc95 1\ndef search_list(a,x):\n    n = len(a)\n    for i in range(0, n):\n        if x == a[i]:\n            return i+1\n        else:\n            pass\n    return 'None' # \uc5c6\uc73c\uba74 None\uc744 \ucd9c\ub825\ud569\ub2c8\ub2e4.\n\nv = [14,12,512,23,15,63,84,23,6]\nsearch_list(v,23)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[14]:\n\n\n\n\n\n4\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \n# \ud574\ubc952: \ub9ac\uc2a4\ud2b8\uc5d0 \uac19\uc740 \uac12\uc774 \uc5ec\ub7ec\uac1c \uc788\uc744 \uacbd\uc6b0 \n# \ubaa8\ub4e0 \uc704\uce58\ub97c \ub9ac\uc2a4\ud2b8\ub85c \ub3cc\ub824\uc8fc\ub294 \uc54c\uace0\ub9ac\uc998\ndef search_list(a,x):\n    n = len(a)\n    result = []\n    for i in range(0, n):\n        if x == a[i]:\n            result.append(i+1)\n        else:\n            pass\n    return result \n\nv = [14,12,512,23,15,63,84,23,6]\nsearch_list(v,23)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[15]:\n\n\n\n\n\n[4, 8]\n\n\n\n\n\n\n\n\n\n\n\n\ubb38\uc81c8. \uc120\ud0dd \uc815\ub82c\u00b6\ub9ac\uc2a4\ud2b8 \uc548\uc758 \uc790\ub8cc\ub97c \ud55c \ubc88\uc529 \ube44\uad50\ud558\ub294 \ubc29\ubc95\uacfc \uac70\uc758 \uac19\uc2b5\ub2c8\ub2e4. \ube44\uad50\ud69f\uc218\uac00 \uc785\ub825 \ud06c\uae30\uc758 \uc81c\uacf1\uc5d0 \ube44\ub840\ud558\ub294 O(n2) \uc54c\uace0\ub9ac\uc998\uc774\ubbc0\ub85c \uc2dc\uac04\uc774 \uad49\uc7a5\ud788 \uc624\ub798 \uac78\ub9bd\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \ndef sel_sort(a):\n    n = len(a)\n    for i in range(0, n-1):\n        min_index = i\n        for j in range(i+1, n):\n            if a[j] < a[min_index]:\n                min_index = j\n                a[i],a[min_index] = a[min_index],a[i]\n    print(a)\nd = [2,4,5,1,7]\nsel_sort(d)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[1, 2, 4, 5, 7]\n\n\n\n\n\n\n\n\n\n\n\n\ubb38\uc81c9. \uc0bd\uc785 \uc815\ub82c\u00b6\uc0bd\uc785 \uc815\ub82c\uc740 \ud2b9\uc815 \uad65\uc6b0\ub97c \uc81c\uc678\ud558\uba74 \uc120\ud0dd\uc815\ub82c\uacfc \uac19\uc778 O(n2)\uc54c\uace0\ub9ac\uc998 \uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc2dc\uac04\uc774 \uad49\uc7a5\ud788 \uc624\ub798 \uac78\ub9bd\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[17]:\n\n    \ndef ins_sort(a):\n    n = len(a)\n    for i in range(1,n):\n        key = a[i]\n        j = i -1\n        while j >= 0 and a[j] > key:\n            a[j+1] = a[j]\n            j -= 1\n        a[j + 1] = key\n        \nd = [2,4,5,1,7]\nins_sort(d)\nprint(d)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[1, 2, 4, 5, 7]\n\n\n\n\n\n\n\n\n\n\n\n\ubb38\uc81c10. \ubcd1\ud569 \uc815\ub82c\u00b6\uc8fc\uc5b4\uc9c4 \ubb38\uc81c\ub97c \uc808\ubc18\uc73c\ub85c \ub098\ub208 \ub2e4\uc74c \uac01\uac01\uc744 \uc7ac\uadc0 \ud638\ucd9c\ub85c \ud480\uc5b4\uac00\ub294 \ubc29\uc2dd\uc785\ub2c8\ub2e4. \uc774\ub7f0 \uae30\ubc95\uc744 \ubd84\ud560 \uc815\ubcf5 \uc774\ub77c\uace0 \ubd80\ub985\ub2c8\ub2e4. \uacc4\uc0b0\uc758 \ubcf5\uc7a1\ub3c4\ub294 O(n*logn)\uc73c\ub85c \uc120\ud0dd\uc815\ub82c\uc774\ub098 \uc0bd\uc785\uc815\ub82c\ubcf4\ub2e4 \ube60\ub985\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[18]:\n\n    \ndef merge_sort(a):\n    n = len(a)\n    if n <= 1:\n        return \n    mid = n//2\n    group1 = a[:mid]\n    group2 = a[mid:]\n    merge_sort(group1)\n    merge_sort(group2)\n    i1 = 0\n    i2 = 0\n    ia = 0\n    while i1 < len(group1) and i2 < len(group2):\n        if group1[i1] < group2[i2]:\n            a[ia] = group1[i1]\n            i1 += 1\n            ia += 1\n        else:\n            a[ia] = group2[i2]\n            i2 += 1\n            ia += 1\n            \n    while i1 < len(group1):\n        a[ia] = group1[i1]\n        i1 += 1\n        ia += 1\n    while i2 < len(group2):\n        a[ia] = group2[i2]\n        i2 += 1\n        ia += 1\n\nd = [6,3,2,6,10,23,1]\nmerge_sort(d)\nprint(d)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[1, 2, 3, 6, 6, 10, 23]\n\n\n\n\n\n\n\n\n\n\n\n\ubb38\uc81c11. \ud035 \uc815\ub82c\u00b6\uadf8\ub8f9\uc744 \ub458\ub85c \ub098\ub220 \uc7ac\uadc0\ud638\ucd9c\uc744\ud558\ub294 \ubc29\uc2dd\uc73c\ub85c \uc55e\uc11c\ubcf8 \ubcd1\ub78d \uc815\ub82c\uacfc \uc720\uc0ac\ud558\uc9c0\ub9cc, \uadf8\ub8f9\uc744 \ub098\ub20c \ub584 \ubbf8\ub9ac \uae30\uc900\uacfc \ube44\uad50\ud574\uc11c \ub098\ub204\ub294 \uac83\uc774 \ub2e4\ub985\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[19]:\n\n    \ndef quick_sort(a,start,end):\n    if end - start <= 0:\n        return\n    pivot = a[end]\n    i = start\n    for j in range(start, end):\n        if a[j] <= pivot:\n            a[i],a[j] = a[j],a[i]\n            i += 1\n    a[i],a[end] = a[end],a[i]\n    quick_sort(a,start,i-1)\n    quick_sort(a,i+1,end)\n\ndef quick_sort_(a):\n    quick_sort(a,0,len(a)-1)\n\nd = [6,8,3,9,10,1,2,4]\nquick_sort_(d)\nprint(d)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[1, 2, 3, 4, 6, 8, 9, 10]\n\n\n\n\n\n\n\n\n\n\n\n\uae30\uc900\uac12\uc758 \uc911\uc694\uc131\u00b6\ud035 \uc815\ub82c\uc5d0\uc11c \uc88b\uc740 \uae30\uc900\uc744 \uc815\ud558\ub294 \uac83\uc774 \uad49\uc7a5\ud788 \uc911\uc694\ud569\ub2c8\ub2e4.\n\ubb38\uc81c12. \uc774\ubd84 \ud0d0\uc0c9\u00b6\uc790\ub8cc\uac00 \ud06c\uae30 \uc21c\uc11c\ub300\ub85c \uc815\ub82c\ub41c \ub9ac\uc2a4\ud2b8\uc5d0\uc11c \ud2b9\uc815\ud55c\uac12\uc774 \uc788\ub294\uc9c0 \ucc3e\uc544 \uc704\uce58\ub97c \ub3cc\ub824\uc8fc\ub294 \uc54c\uace0\ub9ac\uc998\uc744 \ub9cc\ub4e4\uc5b4\ubcf4\uc138\uc694.\n\uc774\ubd84 \ub2f4\uc0c9\uc740 '\ub458\ub85c \ub098\ub208\ub2e4'\ub294 \ub73b\uc785\ub2c8\ub2e4.\n\n\ud0d0\uc0c9\ud560 \uc790\ub8cc\ub97c \ub458\ub85c \ub098\ub204\uc5b4 \ucc3e\ub294 \uac83\uc774\ub77c \uc21c\ucc28 \ud0d0\uc0c9\ubcf4\ub2e4 \ud6e8\uc52c \ube68\ub9ac \ucc3e\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[20]:\n\n    \ndef binary_search(a,x):\n    start = 0\n    end = len(a)-1\n    while start <= end:\n        mid = (start+end)//2\n        if x == a[mid]:\n            return mid+1 # \uc22b\uc7901\uc744 \ub354\ud574\uc11c \uc54c\uae30\uc27d\uac8c\n        elif x > a[mid]:\n            start = mid + 1\n        else:\n            end = mid -1\n    return None # \ucc3e\uc9c0 \ubabb\ud588\uc744\ub54c\nd = [6,8,3,9,10,1,2,4]\nprint(binary_search(d,8))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n4. \uc790\ub8cc\uad6c\uc870\u00b6\uc5ec\ub7ec\uac00\uc9c0 \uc790\ub8cc\uc640 \uc815\ubcf4\ub97c \ucef4\ud4e8\ud130 \uc548\uc5d0 \uc800\uc7a5\ud558\uace0 \ubcf4\uad00\ud558\ub294 \ubc29\uc2dd\n\ubb38\uc81c13. \ud68c\ubb38 \ucc3e\uae30\u00b6\ud68c\ubb38\uc740 \uac70\uafb8\ub85c \uc77d\uc5b4\ub3c4 \ub0b4\uc6a9\uc774 \uac19\uc740 \ubb38\uc7a5\ub97c \ub73b\ud569\ub2c8\ub2e4.\n\n\uc608\ub97c \ub4e4\uba74 '\uae30\ub7ec\uae30', '\uc77c\uc694\uc77c' \ub4f1\uc774 \uc788\uc8e0.\n\n\n\n\n\n\nIn\u00a0[21]:\n\n    \ndef palindrome(s):\n    que =[]\n    stack = []\n    for x in s:\n        if x.isalpha():\n            que.append(x.lower())\n            stack.append(x.lower())\n    while que:\n        if que.pop(0) != stack.pop():\n            return False\n    return True\nprint(palindrome('Kayak'))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nTrue\n\n\n\n\n\n\n\n\n\n\n\n\ubb38\uc81c14. \ub515\uc154\ub108\ub9ac\ub85c \uac19\uc740 \uc774\ub984 \ucc3e\uae30\u00b6\ud30c\uc774\uc36c\uc758 \ub515\uc154\ub108\ub9ac\ub77c\ub294 \uc790\ub8cc \uad6c\uc870\ub97c \uc0ac\uc6a9\ud574 \ud480\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[22]:\n\n    \ndef find_name(a):\n    name_dic = {}\n    for name in a:\n        if name in name_dic:\n            name_dic[name] += 1\n        else:\n            name_dic[name] = 1\n    result = set()\n    for name in name_dic:\n        if name_dic[name] >= 2:\n            result.add(name)\n    return result\nname = ['Jake','Jim','Jake']\nfind_name(name)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[22]:\n\n\n\n\n\n{'Jake'}\n\n\n\n\n\n\n\n\n\n\n\n\ubb38\uc81c15. \uce5c\uad6c\uc758 \uce5c\uad6c\ucc3e\uae30\u00b6\uce5c\uad6c\uad00\uacc4\ub97c \uc774\uc6a9\ud574 \uc9c1\uac04\uc811\uc801\uc73c\ub85c \uc544\ub294 \ubaa8\ub4e0 \uc0ac\ub78c\uc744 \ucd9c\ub825\ud558\ub294 \uc54c\uace0\ub9ac\uc998\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uc138\uc694.\n\n\n\n\n\n\nIn\u00a0[23]:\n\n    \ndef print_all_friends(g, start):\n    que = []\n    done = set()\n    que.append(start)\n    done.add(start)\n    while que:\n        p = que.pop(0)\n        print(p)\n        for x in g[p]:\n            if x not in done:\n                que.append(x)\n                done.add(x)\nfriends = {\n    'Summer':['John','Jake','Mike'],\n    'John':['Summer','Mike'],\n    'June':['Jake','Tom'],\n    'Jake':['Tom'],\n    'Tom':['Summer'],\n    'Mike':['Summer']\n    \n}\nprint_all_friends(friends, 'Summer')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nSummer\nJohn\nJake\nMike\nTom\n\n\n\n\n\n\n\n\n\n\n\n\ub05d\uc73c\ub85c\u00b6\uc54c\uace0\ub9ac\uc998\uc774\ub780 \ubb34\uc5c7\uc778\uac00? \ub77c\ub294 \uc9c8\ubb38\uc5d0\uc11c \uc2dc\uc791\ud574 15\uac00\uc9c0\uc758 \ubb38\uc81c\ub97c \ud1b5\ud574 \uc54c\uc544\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \ud480\uc5b4 \ubcf8 \ubb38\uc81c\ub4e4\uc740 \uc26c\uc6b4 \ubb38\uc81c\uc9c0\ub9cc \uc54c\uace0\ub9ac\uc998\uc5d0 \ub300\ud55c \uc811\uadfc\ubc95\uc740 \ub3d9\uc77c\ud569\ub2c8\ub2e4. \uc55e\uc73c\ub85c\ub3c4 \uc5ec\ub7ec\ubd84\ub4e4\uc774 \ub354 \ub9ce\uc740 \ubb38\uc81c\uc640 \ud574\ub2f5\uc744 \uc704\ud55c \ub178\ub825\uc744 \uae30\uc6b8\uc774\uae38 \uae30\uc6d0\ud569\ub2c8\ub2e4.",
      "tags": "algorithm,Python,\uc54c\uace0\ub9ac\uc998",
      "url": "https://partrita.github.io/posts/algorithms4every1/"
    },
    {
      "title": "\uba38\uc2e0\ub7ec\ub2dd\uc73c\ub85c \ub2e8\ubc31\uc9c8 \uc6a9\ud574\ub3c4 \uc608\uce21\ud558\uae30",
      "text": "0. \ub2e8\ubc31\uc9c8 \uc6a9\ud574\ub3c4 \uc608\uce21\u00b6\uc720\uc804\uc790 \uc7ac\uc870\ud569\uc744 \ud1b5\ud574 \ud2b9\uc815 \ub2e8\ubc31\uc9c8\uc744 \uacfc\ubc1c\ud604\uc2dc\ud0a4\ub294 \uac83\uc740 \uc0dd\uba85\uacfc\ud559\uc5d0\uc11c \uc544\uc8fc \uc911\uc694\ud55c \uc77c\uc785\ub2c8\ub2e4. \uadf8\ub7ec\ub098 \ub300\ubd80\ubd84\uc758 \uacfc\ubc1c\ud604 \ub2e8\ubc31\uc9c8\uc740 inclusion bodies\ub97c \ud615\uc131\ud574 \uc6a9\ud574\ub3c4\uac00 \ub9e4\uc6b0 \ub0ae\uc740 \ubb38\uc81c\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub807\uae30 \ub54c\ubb38\uc5d0 \ub2e8\ubc31\uc9c8 \uc6a9\ud574\ub3c4\ub97c \uc608\uce21\ud558\ub294 \uc77c\uc740 \uc2e4\ud5d8\uc758 \uc2dc\ud589\ucc29\uc624\ub97c \uc904\uc774\ub294\ub370 \ub3c4\uc6c0\uc774 \ub429\ub2c8\ub2e4.\n\uc5ec\uae30\uc11c\ub294 \ub300\uc7a5\uade0\uc5d0\uc11c \ubc1c\ud604\ub418\ub294 \ub2e8\ubc31\uc9c8 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uace0 \uae30\uacc4\ud559\uc2b5\uc73c\ub85c \uc6a9\ud574\ub3c4\ub97c \uc608\uce21\ud558\ub294 \ubb38\uc81c\ub97c \ud480\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n1. eSOL \ub370\uc774\ud130\uc14b \uc124\uba85\u00b6\ubd84\uc11d\uc5d0 \uc0ac\uc6a9\ud55c eSOL(Solubility database of all E.coli proteins) \ub370\uc774\ud130\uc14b\uc740 Targeted Proteins Research Project\uc744 \ud1b5\ud574 http://tp-esol.genes.nig.ac.jp/ \uc5d0 \uacf5\uac1c \ub418\uc5b4\uc788\uc2b5\ub2c8\ub2e4.\n\uacf5\uc2dd \ud398\uc774\uc9c0\uc5d0\uc11c\ub294 \ud574\ub2f9 \ub370\uc774\ud130\uc14b\uc5d0 \ub300\ud574 \ub2e4\uc74c\uacfc \uac19\uc774 \uc124\uba85 \ud569\ub2c8\ub2e4.\n\neSOL is a database on the solubility of entire ensemble E.coli proteins (Niwa T, Ying BW, Saito K, Jin W, Takada S, Ueda T and Taguchi H, 2009) individually synthesized by PURE system that is chaperone free.\n\ub300\uc7a5\uade0(E.coli) \ub2e8\ubc31\uc9c8\uc758 \uc6a9\ud574\ub3c4(Solubility)\ub294 \uc544\ub798\uc758 \uacf5\uc2dd\uc744 \ud1b5\ud574 \uacc4\uc0b0\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n$$ Solubility = \\frac{Supernatant fraction}{uncentrifuged fraction} * 100 $$\ub530\ub77c\uc11c \uc8fc\uc758\ud574\uc57c \ud560 \uac83\uc740 \uc6a9\ud574\ub3c4\uac00 \ub3d9\uc77c\ud574\ub3c4 \uc804\uccb4 \ubc1c\ud604\ub7c9\uc740 \ub3d9\uc77c\ud558\uc9c0 \uc54a\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n2. \ub370\uc774\ud130\uc14b \ubd88\ub7ec\uc624\uae30\u00b6pandas \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud574 \ub370\uc774\ud130\uc14b\uc744 \ubd88\ub7ec\uc635\ub2c8\ub2e4. \uc6d0\ubcf8 \ub370\uc774\ud130\uc14b\uc740 tsv\ud615\uc2dd\uc73c\ub85c \ub418\uc5b4 \uc788\uc9c0\ub9cc, \ud3b8\uc758\ub97c \uc704\ud574 csv\ud615\uc2dd\uc73c\ub85c \ubcc0\uacbd\ud558\uace0 \ub2e8\ubc31\uc9c8 \uc11c\uc5f4 \uc815\ubcf4\ub97c \ucd94\uac00\ud588\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport pandas as pd \n\ndf = pd.read_csv('E_coli_protein.csv')\ndf.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[1]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Number\n      Gene\n      Solubility\n      Sequence\n    \n  \n  \n    \n      3143\n      3148\n      ytfG\n      106\n      MIAITGATGQLGHYVIESLMKTVPASQIVAIVRNPAKAQALAAQGI...\n    \n    \n      3144\n      3149\n      ytfN\n      32\n      MSLWKKISLGVVIVILLLLGSVAFLVGTTSGLHLVFKAADRWVPGL...\n    \n    \n      3145\n      3150\n      yzcX\n      27\n      MNDSEFHRLADQLWLTIEERLDDWDGDSDIDCEINGGVLTITFENG...\n    \n    \n      3146\n      3151\n      yzfA\n      88\n      MRIFVYGSLRHKQGNSHWMTNAQLLGDFSIDNYQLYSLGHYPGAVP...\n    \n    \n      3147\n      3152\n      yzgL\n      30\n      MQNRKWILTSLVMTFFGIPILAQFLAVVIAMLGVGLAGIIEVCNIL...\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ubd88\ub7ec\uc628 \ub370\uc774\ud130\uc14b\uc758 \ub9c8\uc9c0\ub9c9 5\uac1c \ub370\uc774\ud130\ub294 \uc704\uc640 \uac19\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130\uc14b\uc5d0\ub294 \ucd1d 3147\uac1c\uc758 \ub2e8\ubc31\uc9c8\uc758 \uc720\uc804\uc790\uc774\ub984\uacfc \uc11c\uc5f4\uc815\ubcf4 \uadf8\ub9ac\uace0 \uc6a9\ud574\ub3c4\uac12\uc774 \ub4e4\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n3. \ucd94\uac00 \ub370\uc774\ud130 \uc5f4 \ub9cc\ub4e4\uae30\u00b6\ub2e8\ubc31\uc9c8 \uc11c\uc5f4\uc740 \uc0c1\uc9c1\uc801(symbolic) \uc815\ubcf4\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub97c \ud3ec\ud568\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ub2e4\uc591\ud55c \ubd84\uc11d\ubc95\uc744 \ud1b5\ud574 \uae30\uacc4\ud559\uc2b5\uc5d0 \uc720\uc6a9\ud55c \ud2b9\uc131(feature)\ub97c \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uba3c\uc800 \uc804\uccb4 \ub2e8\ubc31\uc9c8 \uc11c\uc5f4\uc5d0\uc11c \uac01\uac01\uc758 \uc544\ubbf8\ub178\uc0b0\uc758 \ube44\uc728\uc5d0 \ub300\ud55c \ub370\uc774\ud130\ub97c \ucd94\uac00\ud574\ubd05\ub2c8\ub2e4. \ud30c\uc774\uc36c \uae30\ubcf8 \ud568\uc218\uc778 count()\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n3.1. \uc544\ubbf8\ub178\uc0b0\uc758 \ube44\uc728\u00b6\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nAA = ['A','C','D','E','F','G','H','I','K','L','M','N','P','Q','R','S','T','V','W','Y']\n\nfor i in AA:\n    df[i] = [x.count(i)/len(x) for x in df['Sequence']]   \n\n\n    \n\n\n\n\n\n\n\n\uc774\uc81c Biopython \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \uc788\ub294 \ub3c4\uad6c\ub97c \uc0ac\uc6a9\ud574 \ucd94\uac00\uc801\uc778 \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n3.2. \ub2e8\ubc31\uc9c8\uc758 \ubd84\uc790\ub7c9\u00b6Biopython.ProteinAnalysis \uac1d\uccb4\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nfrom Bio.SeqUtils.ProtParam import ProteinAnalysis\n\ndf['molecular_weight']= [ProteinAnalysis(x).molecular_weight() for x in df['Sequence']]\n\n\n    \n\n\n\n\n\n\n\n3.3. \ub2e4\uc591\ud55c \uacc4\uc0b0\uac12\u00b6\ub2e8\ubc31\uc9c8\uc758 \ubc29\ud5a5\uc871(aromaticity) \uc544\ubbf8\ub178\uc0b0 \ube44\uc728, \ubd88\uc548\uc815\uc131(instability index), \ub4f1\uc804\uc810(isoelectric point)\ub4f1\uc5d0 \uad00\ud55c \uac12\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \ndf['aromaticity']= [ProteinAnalysis(x).aromaticity() for x in df['Sequence']]\ndf['instability_index']= [ProteinAnalysis(x).instability_index() for x in df['Sequence']]\ndf['isoelectric_point']= [ProteinAnalysis(x).isoelectric_point() for x in df['Sequence']]\ndf['gravy']= [ProteinAnalysis(x).gravy() for x in df['Sequence']]\n\n\n    \n\n\n\n\n\n\n\n3.4. \ub2e8\ubc31\uc9c8 2\ucc28 \uad6c\uc870\u00b6\ub2e8\ubc31\uc9c8 2\ucc28 \uad6c\uc870\uc758 \ube44\uc728\uc5d0 \ub300\ud55c \uac12\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4. \ud604\uc7ac \ub2e8\ubc31\uc9c8 \uc11c\uc5f4\uc744 \ud1b5\ud574 2\ucc28 \uad6c\uc870\ub97c \uc608\uce21\ud558\ub294 \uac83\uc740 \uc0c1\ub2f9\ud788 \uc815\ud655\ud55c \ud3b8\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \ndf['structure_fraction_helix']= [ProteinAnalysis(x).secondary_structure_fraction()[0] for x in df['Sequence']]\ndf['structure_fraction_turn']= [ProteinAnalysis(x).secondary_structure_fraction()[1] for x in df['Sequence']]\ndf['structure_fraction_sheet']= [ProteinAnalysis(x).secondary_structure_fraction()[2] for x in df['Sequence']]\n\n\n    \n\n\n\n\n\n\n\n3.5. \ud761\uad11 \uacc4\uc218\u00b6\ub2e8\ubc31\uc9c8\uc758 \ud761\uad11 \uacc4\uc218\ub294 \uc8fc\ub85c \ub18d\ub3c4\ub97c \uacc4\uc0b0\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\ub294 \uac12\uc73c\ub85c \uc18c\uc218\uc131 \uc544\ubbf8\ub178\uc0b0\uacfc \uc2dc\uc2a4\ud14c\uc778(cysteine)\uc758 \ube44\uc728\uacfc \uad00\ub828\uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \ndf['extinction_coefficient_reduced']= [ProteinAnalysis(x).molar_extinction_coefficient()[0] for x in df['Sequence']]\ndf['extinction_coefficient_non_reduced']= [ProteinAnalysis(x).molar_extinction_coefficient()[1] for x in df['Sequence']]\n\n\n    \n\n\n\n\n\n\n\n3.6. \ub2e8\ubc31\uc9c8 \uc720\uc5f0\uc131 \uc815\ubcf4\u00b6\ub2e8\ubc31\uc9c8 \uc11c\uc5f4\uc758 \uac01 \uc704\uce58\uc5d0 \ub300\ud55c \uc544\ubbf8\ub178\uc0b0 \uc720\uc5f0\uc131\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4. \uadf8\ub7f0\ub2e4\uc74c \ud3c9\uade0\uac12\uacfc \ud45c\uc900\ud3b8\ucc28, \uc911\uac04\uac12\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nimport numpy as np\n\ndf['flexibility_mean']= [np.mean(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\ndf['flexibility_std']= [np.std(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\ndf['flexibility_median']= [np.median(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\n\n\n    \n\n\n\n\n\n\n\n\uac01 \uc544\ubbf8\ub178\uc0b0\uc758 \uc720\uc5f0\uc131\uc5d0 \ub300\ud55c \uc870\ud654\ud3c9\uade0, \uae30\ud558\ud3c9\uade0, \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12, \uc65c\ub3c4, \ucca8\ub3c4\uac12\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nfrom scipy.stats.mstats import hmean, gmean\nfrom scipy.stats import skew, kurtosis\n\ndf['flexibility_hmean']= [hmean(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\ndf['flexibility_gmean']= [gmean(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\ndf['flexibility_min']= [np.min(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\ndf['flexibility_max']= [np.max(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\ndf['flexibility_skew']= [skew(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\ndf['flexibility_kurtosis']= [kurtosis(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\n\n\n    \n\n\n\n\n\n\n\n\ucd94\uac00\ud55c \ub370\uc774\ud130\ub97c \ud655\uc778\ud574 \ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \ndf.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[12]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Number\n      Gene\n      Solubility\n      Sequence\n      A\n      C\n      D\n      E\n      F\n      G\n      ...\n      gravy\n      flexibility_mean\n      flexibility_std\n      flexibility_median\n      flexibility_hmean\n      flexibility_gmean\n      flexibility_min\n      flexibility_max\n      flexibility_skew\n      flexibility_kurtosis\n    \n  \n  \n    \n      3143\n      3148\n      ytfG\n      106\n      MIAITGATGQLGHYVIESLMKTVPASQIVAIVRNPAKAQALAAQGI...\n      0.171329\n      0.000000\n      0.052448\n      0.052448\n      0.017483\n      0.087413\n      ...\n      0.051748\n      1.000323\n      0.021540\n      0.999869\n      0.999860\n      1.000092\n      0.948167\n      1.054274\n      0.116313\n      -0.504896\n    \n    \n      3144\n      3149\n      ytfN\n      32\n      MSLWKKISLGVVIVILLLLGSVAFLVGTTSGLHLVFKAADRWVPGL...\n      0.066720\n      0.003177\n      0.065925\n      0.054805\n      0.023828\n      0.090548\n      ...\n      -0.182685\n      1.003100\n      0.024786\n      1.002798\n      1.002490\n      1.002794\n      0.932905\n      1.079036\n      0.175824\n      -0.293648\n    \n    \n      3145\n      3150\n      yzcX\n      27\n      MNDSEFHRLADQLWLTIEERLDDWDGDSDIDCEINGGVLTITFENG...\n      0.047170\n      0.018868\n      0.113208\n      0.094340\n      0.047170\n      0.084906\n      ...\n      -0.591509\n      1.001490\n      0.022863\n      1.000571\n      1.000967\n      1.001229\n      0.951655\n      1.048607\n      -0.084948\n      -0.807064\n    \n    \n      3146\n      3151\n      yzfA\n      88\n      MRIFVYGSLRHKQGNSHWMTNAQLLGDFSIDNYQLYSLGHYPGAVP...\n      0.061947\n      0.000000\n      0.070796\n      0.035398\n      0.017699\n      0.115044\n      ...\n      -0.514159\n      0.995326\n      0.020807\n      0.995381\n      0.994891\n      0.995108\n      0.951667\n      1.043298\n      -0.000384\n      -0.537425\n    \n    \n      3147\n      3152\n      yzgL\n      30\n      MQNRKWILTSLVMTFFGIPILAQFLAVVIAMLGVGLAGIIEVCNIL...\n      0.075269\n      0.021505\n      0.010753\n      0.021505\n      0.086022\n      0.107527\n      ...\n      1.395699\n      0.969298\n      0.019198\n      0.963935\n      0.968922\n      0.969109\n      0.930988\n      1.022298\n      0.639452\n      -0.070879\n    \n  \n\n5 rows \u00d7 43 columns\n\n\n\n\n\n\n\n\n\n\n\n\n\uc6d0\ub798 4\uac1c\uc758 \ud589\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\ub358 \ub370\uc774\ud130\uc14b\uc5d0 39\uac1c\uc758 \ud589\uc774 \ucd94\uac00\ub418\uc5b4 \ucd1d 43\uac1c \ud589\uc744 \uac16\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc218\uce58\ub85c \ub418\uc5b4\uc788\ub294 \ud589\uc5d0 \ub300\ud55c \uc0b0\uc220 \ud1b5\uacc4\uac12\uc744 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \ndf.describe()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[11]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Number\n      Solubility\n      A\n      C\n      D\n      E\n      F\n      G\n      H\n      I\n      ...\n      gravy\n      flexibility_mean\n      flexibility_std\n      flexibility_median\n      flexibility_hmean\n      flexibility_gmean\n      flexibility_min\n      flexibility_max\n      flexibility_skew\n      flexibility_kurtosis\n    \n  \n  \n    \n      count\n      3148.000000\n      3148.000000\n      3148.000000\n      3148.000000\n      3148.000000\n      3148.000000\n      3148.000000\n      3148.000000\n      3148.000000\n      3148.000000\n      ...\n      3148.000000\n      3148.000000\n      3148.000000\n      3148.000000\n      3148.000000\n      3148.000000\n      3148.000000\n      3148.000000\n      3148.000000\n      3148.000000\n    \n    \n      mean\n      1574.665502\n      49.002541\n      0.093592\n      0.012910\n      0.053903\n      0.061896\n      0.036498\n      0.070578\n      0.023977\n      0.058930\n      ...\n      -0.147113\n      0.997623\n      0.024610\n      0.997044\n      0.997011\n      0.997317\n      0.940615\n      1.060624\n      0.105105\n      -0.541406\n    \n    \n      std\n      909.158084\n      33.398919\n      0.027916\n      0.011823\n      0.017879\n      0.022727\n      0.016239\n      0.023758\n      0.013145\n      0.020419\n      ...\n      0.337310\n      0.006706\n      0.002267\n      0.007453\n      0.006718\n      0.006712\n      0.008393\n      0.010076\n      0.174546\n      0.208449\n    \n    \n      min\n      1.000000\n      0.000000\n      0.012500\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      0.000000\n      ...\n      -1.712281\n      0.954846\n      0.015813\n      0.947970\n      0.954504\n      0.954674\n      0.912095\n      1.000571\n      -0.783561\n      -1.355014\n    \n    \n      25%\n      787.750000\n      18.000000\n      0.075758\n      0.005277\n      0.043011\n      0.047986\n      0.025890\n      0.055265\n      0.014509\n      0.044915\n      ...\n      -0.337482\n      0.995471\n      0.023156\n      0.994565\n      0.994902\n      0.995187\n      0.935369\n      1.054357\n      0.010429\n      -0.664991\n    \n    \n      50%\n      1574.500000\n      43.000000\n      0.091882\n      0.011033\n      0.054054\n      0.061473\n      0.034617\n      0.069767\n      0.022788\n      0.057020\n      ...\n      -0.182439\n      0.998133\n      0.024376\n      0.997607\n      0.997534\n      0.997832\n      0.941119\n      1.060905\n      0.104496\n      -0.552774\n    \n    \n      75%\n      2361.250000\n      79.000000\n      0.110102\n      0.017544\n      0.064695\n      0.074736\n      0.045304\n      0.085745\n      0.031821\n      0.070130\n      ...\n      -0.020990\n      1.001112\n      0.025751\n      1.000841\n      1.000496\n      1.000800\n      0.945979\n      1.067405\n      0.198835\n      -0.435561\n    \n    \n      max\n      3152.000000\n      147.000000\n      0.308789\n      0.102857\n      0.166667\n      0.197531\n      0.149254\n      0.237288\n      0.132653\n      0.185185\n      ...\n      1.889655\n      1.035619\n      0.042443\n      1.036857\n      1.035343\n      1.035481\n      0.994155\n      1.100286\n      1.039824\n      0.970267\n    \n  \n\n8 rows \u00d7 41 columns\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \ud14c\uc774\ube14\uc744 \ud1b5\ud574 \uc6a9\ud574\ub3c4\uc758 \ud45c\uc900\ud3b8\ucc28\uac12\uc774 \ub192\ub2e4\ub294 \uac83\uacfc \uc0dd\uc131\ud55c \ub370\uc774\ud130\ub4e4\uc774 \uc74c\uc218\uac12\ub3c4 \ud3ec\ud568\ud558\uace0 \uc788\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n3.7. \ub370\uc774\ud130 \ud589 \uc815\ub82c\u00b6\ub370\uc774\ud130 \ucc98\ub9ac\uc758 \ud3b8\uc758\ub97c \uc704\ud574 Solubility, Sequence \ud589\uc758 \uc704\uce58\ub97c \ubcc0\uacbd\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \ndf.columns.values\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[13]:\n\n\n\n\n\narray(['Number', 'Gene', 'Solubility', 'Sequence', 'A', 'C', 'D', 'E',\n       'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T',\n       'V', 'W', 'Y', 'molecular_weight', 'aromaticity',\n       'instability_index', 'isoelectric_point',\n       'structure_fraction_helix', 'structure_fraction_turn',\n       'structure_fraction_sheet', 'extinction_coefficient_reduced',\n       'extinction_coefficient_non_reduced', 'gravy', 'flexibility_mean',\n       'flexibility_std', 'flexibility_median', 'flexibility_hmean',\n       'flexibility_gmean', 'flexibility_min', 'flexibility_max',\n       'flexibility_skew', 'flexibility_kurtosis'], dtype=object)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \ncolumn_titles = ['Number', 'Gene', 'A', 'C', 'D', 'E',\n       'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T',\n       'V', 'W', 'Y', 'molecular_weight', 'aromaticity',\n       'instability_index', 'isoelectric_point',\n       'structure_fraction_helix', 'structure_fraction_turn',\n       'structure_fraction_sheet', 'extinction_coefficient_reduced',\n       'extinction_coefficient_non_reduced', 'gravy', 'flexibility_mean',\n       'flexibility_std', 'flexibility_median', 'flexibility_hmean',\n       'flexibility_gmean', 'flexibility_min', 'flexibility_max',\n       'flexibility_skew', 'flexibility_kurtosis','Sequence','Solubility']\n                  \ndf = df.reindex(columns=column_titles)\n\n\n    \n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \ndf.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[15]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Number\n      Gene\n      A\n      C\n      D\n      E\n      F\n      G\n      H\n      I\n      ...\n      flexibility_std\n      flexibility_median\n      flexibility_hmean\n      flexibility_gmean\n      flexibility_min\n      flexibility_max\n      flexibility_skew\n      flexibility_kurtosis\n      Sequence\n      Solubility\n    \n  \n  \n    \n      3143\n      3148\n      ytfG\n      0.171329\n      0.000000\n      0.052448\n      0.052448\n      0.017483\n      0.087413\n      0.027972\n      0.052448\n      ...\n      0.021540\n      0.999869\n      0.999860\n      1.000092\n      0.948167\n      1.054274\n      0.116313\n      -0.504896\n      MIAITGATGQLGHYVIESLMKTVPASQIVAIVRNPAKAQALAAQGI...\n      106\n    \n    \n      3144\n      3149\n      ytfN\n      0.066720\n      0.003177\n      0.065925\n      0.054805\n      0.023828\n      0.090548\n      0.007149\n      0.050040\n      ...\n      0.024786\n      1.002798\n      1.002490\n      1.002794\n      0.932905\n      1.079036\n      0.175824\n      -0.293648\n      MSLWKKISLGVVIVILLLLGSVAFLVGTTSGLHLVFKAADRWVPGL...\n      32\n    \n    \n      3145\n      3150\n      yzcX\n      0.047170\n      0.018868\n      0.113208\n      0.094340\n      0.047170\n      0.084906\n      0.028302\n      0.075472\n      ...\n      0.022863\n      1.000571\n      1.000967\n      1.001229\n      0.951655\n      1.048607\n      -0.084948\n      -0.807064\n      MNDSEFHRLADQLWLTIEERLDDWDGDSDIDCEINGGVLTITFENG...\n      27\n    \n    \n      3146\n      3151\n      yzfA\n      0.061947\n      0.000000\n      0.070796\n      0.035398\n      0.017699\n      0.115044\n      0.035398\n      0.044248\n      ...\n      0.020807\n      0.995381\n      0.994891\n      0.995108\n      0.951667\n      1.043298\n      -0.000384\n      -0.537425\n      MRIFVYGSLRHKQGNSHWMTNAQLLGDFSIDNYQLYSLGHYPGAVP...\n      88\n    \n    \n      3147\n      3152\n      yzgL\n      0.075269\n      0.021505\n      0.010753\n      0.021505\n      0.086022\n      0.107527\n      0.000000\n      0.118280\n      ...\n      0.019198\n      0.963935\n      0.968922\n      0.969109\n      0.930988\n      1.022298\n      0.639452\n      -0.070879\n      MQNRKWILTSLVMTFFGIPILAQFLAVVIAMLGVGLAGIIEVCNIL...\n      30\n    \n  \n\n5 rows \u00d7 43 columns\n\n\n\n\n\n\n\n\n\n\n\n\n3.8. \ub370\uc774\ud130\uc14b \ud30c\uc77c\ub85c \uc800\uc7a5\u00b6\uc544\ub798 \uba85\ub839\uc5b4\ub97c \ud1b5\ud574 \ub370\uc774\ud130\uc14b\uc744 \ud30c\uc77c\ub85c \uc800\uc7a5 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \n# df.to_csv(\"Engineered_E_coli_protein.csv\", mode='w', index=False)\n\n\n    \n\n\n\n\n\n\n\n4.  \uc2dc\uac01\ud654\ub85c EDA \ud558\uae30\u00b6\uac04\ub2e8\ud55c \uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \ub370\uc774\ud130\uc14b\uc774 \uc5b4\ub5bb\uac8c \ubd84\ud3ec\ub418\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\n4.1. Scatter plot\u00b6\n\n\n\n\n\nIn\u00a0[17]:\n\n    \nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nsns.scatterplot(y='Solubility',\n                x=\"molecular_weight\",\n                linewidth=0.1,\n                alpha=0.5,\n                sizes=(1,8),\n                data=df)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[17]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7f3e74620048>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc774\ubbf8 \uc54c\ub824\uc838\uc788\ub294\uac83 \ucc98\ub7fc \ub2e8\ubc31\uc9c8\uc758 \ud06c\uae30\uac00 \ud074\uc218\ub85d \uc6a9\ud574\ub3c4\uac00 \ub0ae\ub2e4\ub294 \uac83\uc744 \uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 Scatter plot\uc5d0\ub294 \uacb9\uccd0\uc9c4 \ub370\uc774\ud130\uac00 \ub108\ubb34 \ub9ce\uae30\ub54c\ubb38\uc5d0 \ub354 \ubcf4\uae30 \uc88b\uc740 \uadf8\ub9bc\uc744 \uadf8\ub824\ubd05\ub2c8\ub2e4.\n4.2. Kernel density estimation plot\u00b6\n\n\n\n\n\nIn\u00a0[18]:\n\n    \nsns.jointplot(x=\"molecular_weight\", y=\"Solubility\", data=df, kind=\"kde\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[18]:\n\n\n\n\n\n<seaborn.axisgrid.JointGrid at 0x7f3e7456be10>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \ub300\ubd80\ubd84\uc758 \ub2e8\ubc31\uc9c8\uc758 \ud06c\uae30\ub294 30kDa \uc8fc\ubcc0\uc5d0 \ubab0\ub824\uc788\uc73c\uba70, \uc6a9\ud574\ub3c4\ub294 20%\uc640 80% \uadf8\ub8f9\uc73c\ub85c \ub098\ub25c\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c \uc0c1\ub300\uc801\uc73c\ub85c \ub192\uc740 \uc6a9\ud574\ub3c4\uc758 \ub2e8\ubc31\uc9c8\uc740 25kDa \uc774\ud558\uc758 \ud06c\uae30\uc785\ub2c8\ub2e4.\n5. \ub370\uc774\ud130 \uc804\ucc98\ub9ac\u00b6\uae30\uacc4\ud559\uc2b5\uc744 \uc704\ud574 \ub370\uc774\ud130\uc14b\uc744 \ud2b9\uc131(feature)\uac12\uacfc \uacb0\uacfc\uac12\uc73c\ub85c \ubd84\ub9ac\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[19]:\n\n    \ndf_y = df['Solubility']\n\ndf_x = df.iloc[:,2:-2]\ndf_x.columns\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[19]:\n\n\n\n\n\nIndex(['A', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q',\n       'R', 'S', 'T', 'V', 'W', 'Y', 'molecular_weight', 'aromaticity',\n       'instability_index', 'isoelectric_point', 'structure_fraction_helix',\n       'structure_fraction_turn', 'structure_fraction_sheet',\n       'extinction_coefficient_reduced', 'extinction_coefficient_non_reduced',\n       'gravy', 'flexibility_mean', 'flexibility_std', 'flexibility_median',\n       'flexibility_hmean', 'flexibility_gmean', 'flexibility_min',\n       'flexibility_max', 'flexibility_skew', 'flexibility_kurtosis'],\n      dtype='object')\n\n\n\n\n\n\n\n\n\n\n\n5.1. \ud2b9\uc131\uac12 \uc815\uaddc\ud654\ud558\uae30\u00b6\uc815\uaddc\ud654\ub97c \ud1b5\ud574 \uae30\uacc4 \ud559\uc2b5 \ubaa8\ub378\uc774 \ud2b9\uc815 \ud2b9\uc131\uac12\uc5d0 \ubc14\uc774\uc5b4\uc2a4(Bias)\ub97c \uac16\uc9c0 \uc54a\uac8c \ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[20]:\n\n    \nfrom sklearn import preprocessing\nfrom sklearn.model_selection import train_test_split\n\nscaler = preprocessing.StandardScaler().fit(df_x)\nX_scaled = scaler.transform(df_x)\nX_train, X_test, y_train, y_test = train_test_split(\n    X_scaled, df_y, test_size=0.2, random_state=42)\n\n\n    \n\n\n\n\n\n\n\n6. \uae30\uacc4\ud559\uc2b5\ud558\uae30\u00b66.1. \ub2e4\uc591\ud55c \uae30\uacc4 \ubaa8\ub378 \ube44\uad50\u00b6\uac04\ub2e8\ud55c \uc120\ud615\ubaa8\ub378\ubd80\ud130 \ub2e4\uc591\ud55c \uae30\uacc4 \ud559\uc2b5 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud574\ubcf4\uace0 \ud3c9\uac00 \uc9c0\ud45c\ub97c \ud1b5\ud574 \uac00\uc7a5 \uc88b\uc740 \ubaa8\ub378\uc744 \ucc3e\uc2b5\ub2c8\ub2e4. \uc608\uce21\uc758 \uc815\ud655\ub3c4\ub97c \ud3c9\uac00\ud558\uae30 \uc704\ud574 MAPE(Mean absolute percentage error)\ub97c \ud3c9\uac00\uc9c0\ud45c\ub85c \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[21]:\n\n    \nfrom sklearn.linear_model import LinearRegression\nimport numpy as np\n\nlin_reg = LinearRegression(n_jobs=-1) # -1 means use all cpu core\nlin_reg.fit(X_train, y_train)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[21]:\n\n\n\n\n\nLinearRegression(copy_X=True, fit_intercept=True, n_jobs=-1, normalize=False)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[23]:\n\n    \nfrom sklearn.metrics import mean_absolute_error\n\ndef evaluate(model, X_test, y_test):\n    y_pred = model.predict(X_test)\n    mape = mean_absolute_error(y_test, y_pred)\n    accuracy = 100 - mape\n    return accuracy\n\naccuracy = evaluate(lin_reg, X_test, y_test)\nprint(f'Accuracy = {accuracy:.2f} %')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nAccuracy = 77.47 %\n\n\n\n\n\n\n\n\n\n\n\n\uc120\ud615\ubaa8\ub378\uc744 \uc0ac\uc6a9\ud588\uc744\ub54c \uc608\uce21\uc758 \uc815\ud655\ub3c4\ub294 \uc57d 77% \uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[24]:\n\n    \nfrom sklearn.tree import DecisionTreeRegressor\n\ntree_reg = DecisionTreeRegressor()\ntree_reg.fit(X_train, y_train)\n\naccuracy = evaluate(tree_reg, X_test, y_test)\nprint(f'Accuracy = {accuracy:.2f} %')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nAccuracy = 72.87 %\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[25]:\n\n    \nfrom sklearn.svm import SVR\n\nsvm_reg = SVR(kernel=\"linear\")\nsvm_reg.fit(X_train, y_train)\n\naccuracy = evaluate(svm_reg, X_test, y_test)\nprint(f'Accuracy = {accuracy:.2f} %')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nAccuracy = 77.65 %\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[26]:\n\n    \nfrom sklearn.ensemble import RandomForestRegressor\nforest_reg = RandomForestRegressor(n_estimators = 1000, n_jobs = -1)\nforest_reg.fit(X_train, y_train)\n\naccuracy = evaluate(forest_reg, X_test, y_test)\nprint(f'Accuracy = {accuracy:.2f} %')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nAccuracy = 79.42 %\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[27]:\n\n    \nfrom sklearn.ensemble import GradientBoostingRegressor\ngbr = GradientBoostingRegressor()\ngbr.fit(X_train, y_train)\n\naccuracy = evaluate(gbr, X_test, y_test)\nprint(f'Accuracy = {accuracy:.2f} %')\n# print(f'Score = {gbr.score(X_train, y_train)}') # R2 socre\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nAccuracy = 79.48 %\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[28]:\n\n    \nfrom sklearn.experimental import enable_hist_gradient_boosting\n# explicitly require this experimental feature\nfrom sklearn.ensemble import HistGradientBoostingRegressor\nhgr = HistGradientBoostingRegressor()\nhgr.fit(X_train, y_train)\n\naccuracy = evaluate(hgr, X_test, y_test)\nprint(f'Accuracy = {accuracy:.2f} %')\n# print(f'Score = {hgr.score(X_train, y_train)}') # R2 socre\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nAccuracy = 79.95 %\n\n\n\n\n\n\n\n\n\n\n\n\uac00\uc7a5 \ucd5c\uadfc\uc5d0 \ucd94\uac00\ub41c \uae30\ub2a5\uc778 HistGradientBoostingRegressor\uc774 \uac00\uc7a5 \uc88b\uc740 \uc131\ub2a5\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.\n6.2. \ud2b9\uc131\uc758 \uc911\uc694\ub3c4\u00b6\uc774\uc81c \ub370\uc774\ud130\uc758 \uc5b4\ub290 \ud2b9\uc131\uc774 \ubaa8\ub378 \uc608\uce21\uc5d0 \uc911\uc694\ud55c\uc9c0 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uac04\ub2e8\ud55c \uc2dc\uac01\ud654\ub85c \ub9c9\ub300\uadf8\ub798\ud504\ub97c \uadf8\ub824\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[40]:\n\n    \nfeature_importances = gbr.feature_importances_  \nplt.bar(range(len(feature_importances)), feature_importances)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[40]:\n\n\n\n\n\n<BarContainer object of 39 artists>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uadf8\ub9bc\uc744 \ud1b5\ud574 \uc608\uce21\uc5d0 \uc601\ud5a5\uc744 \uc8fc\ub294 \ud2b9\uc131\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc0c1\uc704 3\uac00\uc9c0\ub97c \uc54c\uc544\ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n\ubd84\uc790\ub7c9(21\ubc88\uc9f8 \ud2b9\uc131)\npI\uac12(29\ubc88\uc9f8 \ud2b9\uc131)\n\ubd84\uad11\uacc4\uc218(24\ubc88\uc9f8 \ud2b9\uc131)\n\n7. \ubaa8\ub378\uc758 \ub9e4\uac1c \ubcc0\uc218 \ucd5c\uc801\ud654\u00b6GridSearchCV\ub97c \uc0ac\uc6a9\ud574 \uac00\uc7a5 \uc88b\uc740 \uc131\ub2a5\uc744 \ub098\ud0c0\ub0b4\ub294 \ub9e4\uac1c\ubcc0\uc218 \uac12\uc744 \ucc3e\uc544\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[35]:\n\n    \nfrom sklearn.model_selection import GridSearchCV\nfrom scipy.stats import randint\nfrom sklearn.metrics import make_scorer\n\ndef evaluate(y_true, y_pred):\n    mape = mean_absolute_error(y_true, y_pred)\n    accuracy = 100 - mape\n    return accuracy\n\nscore = make_scorer(evaluate, greater_is_better=True)\n\nparam_grid = [{'learning_rate': [0.01, 0.1],\n               'max_depth': [10, 50, 100],\n               'min_samples_leaf': [10, 50, 100]\n              }]\n\nhgr_reg = HistGradientBoostingRegressor(random_state=42)\ngrid_search = GridSearchCV(hgr_reg, param_grid, cv=5,\n                          scoring=score, n_jobs=-1)\ngrid_search.fit(X_train, y_train)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[35]:\n\n\n\n\n\nGridSearchCV(cv=5, error_score='raise-deprecating',\n             estimator=HistGradientBoostingRegressor(l2_regularization=0.0,\n                                                     learning_rate=0.1,\n                                                     loss='least_squares',\n                                                     max_bins=256,\n                                                     max_depth=None,\n                                                     max_iter=100,\n                                                     max_leaf_nodes=31,\n                                                     min_samples_leaf=20,\n                                                     n_iter_no_change=None,\n                                                     random_state=42,\n                                                     scoring=None, tol=1e-07,\n                                                     validation_fraction=0.1,\n                                                     verbose=0),\n             iid='warn', n_jobs=-1,\n             param_grid=[{'learning_rate': [0.01, 0.1],\n                          'max_depth': [10, 50, 100],\n                          'min_samples_leaf': [10, 50, 100]}],\n             pre_dispatch='2*n_jobs', refit=True, return_train_score=False,\n             scoring=make_scorer(evaluate), verbose=0)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[36]:\n\n    \ncvres =  grid_search.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(f'Score = {mean_score:.2f}, Params = {params} ')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nScore = 77.32, Params = {'learning_rate': 0.01, 'max_depth': 10, 'min_samples_leaf': 10} \nScore = 77.28, Params = {'learning_rate': 0.01, 'max_depth': 10, 'min_samples_leaf': 50} \nScore = 76.85, Params = {'learning_rate': 0.01, 'max_depth': 10, 'min_samples_leaf': 100} \nScore = 77.29, Params = {'learning_rate': 0.01, 'max_depth': 50, 'min_samples_leaf': 10} \nScore = 77.29, Params = {'learning_rate': 0.01, 'max_depth': 50, 'min_samples_leaf': 50} \nScore = 76.85, Params = {'learning_rate': 0.01, 'max_depth': 50, 'min_samples_leaf': 100} \nScore = 77.29, Params = {'learning_rate': 0.01, 'max_depth': 100, 'min_samples_leaf': 10} \nScore = 77.29, Params = {'learning_rate': 0.01, 'max_depth': 100, 'min_samples_leaf': 50} \nScore = 76.85, Params = {'learning_rate': 0.01, 'max_depth': 100, 'min_samples_leaf': 100} \nScore = 80.19, Params = {'learning_rate': 0.1, 'max_depth': 10, 'min_samples_leaf': 10} \nScore = 80.18, Params = {'learning_rate': 0.1, 'max_depth': 10, 'min_samples_leaf': 50} \nScore = 80.45, Params = {'learning_rate': 0.1, 'max_depth': 10, 'min_samples_leaf': 100} \nScore = 80.25, Params = {'learning_rate': 0.1, 'max_depth': 50, 'min_samples_leaf': 10} \nScore = 80.17, Params = {'learning_rate': 0.1, 'max_depth': 50, 'min_samples_leaf': 50} \nScore = 80.39, Params = {'learning_rate': 0.1, 'max_depth': 50, 'min_samples_leaf': 100} \nScore = 80.25, Params = {'learning_rate': 0.1, 'max_depth': 100, 'min_samples_leaf': 10} \nScore = 80.17, Params = {'learning_rate': 0.1, 'max_depth': 100, 'min_samples_leaf': 50} \nScore = 80.39, Params = {'learning_rate': 0.1, 'max_depth': 100, 'min_samples_leaf': 100} \n\n\n\n\n\n\n\n\n\n\n\n\ucd5c\uace0\uc758 \uc131\ub2a5\uc744 \ubcf4\uc778 \ubaa8\ub378\uc758 \uc815\ud655\ub3c4\ub294 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[37]:\n\n    \ngrid_search.best_score_\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[37]:\n\n\n\n\n\n80.4455794771026\n\n\n\n\n\n\n\n\n\n\n\n\ub9e4\uac1c\ubcc0\uc218 \uac12\uc774 \uc544\ub798\uc640 \uac19\uc744\ub54c \ucd5c\uace0\uc758 \uc131\ub2a5\uc744 \ubcf4\uc5ec\uc8fc\uc5c8\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[38]:\n\n    \ngrid_search.best_params_\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[38]:\n\n\n\n\n\n{'learning_rate': 0.1, 'max_depth': 10, 'min_samples_leaf': 100}\n\n\n\n\n\n\n\n\n\n\n\n8. \ub9c8\uce58\uba70\u00b6\uc0dd\uc131\ud55c \uae30\uacc4 \ud559\uc2b5 \ubaa8\ub378\uc5d0 \uc784\uc758\uc758 \ub2e8\ubc31\uc9c8 \uc11c\uc5f4\uc744 \ub123\uc5b4 \uc6a9\ud574\ub3c4\ub97c \uc608\uce21\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc784\uc758\uc758 \uc11c\uc5f4 2\uac00\uc9c0\ub97c csv\ud30c\uc77c\uc5d0 \ub123\uc5b4 \ub370\uc774\ud130 \uc804\ucc98\ub9ac\uacfc\uc815\uc744 \ub3d9\uc77c\ud558\uac8c \uac70\uce69\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[42]:\n\n    \ndf2 = pd.read_csv('sol_predict.csv')\ndf2\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[42]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Number\n      Gene\n      Sequence\n    \n  \n  \n    \n      0\n      1\n      random\n      MAMIHHSAVQLSHGQTIMSGGQREGKSTLVQSIKVLTKQQQYPAPC...\n    \n    \n      1\n      2\n      DPO1_THEAQ\n      MRGMLPLFEPKGRVLLVDGHHLAYRTFHALKGLTTSRGEPVQAVYG...\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[43]:\n\n    \ndef feature_eng(df):\n    for i in AA:\n        df[i] = [x.count(i)/len(x) for x in df['Sequence']]\n    df['molecular_weight']= [ProteinAnalysis(x).molecular_weight() for x in df['Sequence']]\n    df['aromaticity']= [ProteinAnalysis(x).aromaticity() for x in df['Sequence']]\n    df['instability_index']= [ProteinAnalysis(x).instability_index() for x in df['Sequence']]\n    df['isoelectric_point']= [ProteinAnalysis(x).isoelectric_point() for x in df['Sequence']]\n    df['gravy']= [ProteinAnalysis(x).gravy() for x in df['Sequence']]\n    df['structure_fraction_helix']= [ProteinAnalysis(x).secondary_structure_fraction()[0] for x in df['Sequence']]\n    df['structure_fraction_turn']= [ProteinAnalysis(x).secondary_structure_fraction()[1] for x in df['Sequence']]\n    df['structure_fraction_sheet']= [ProteinAnalysis(x).secondary_structure_fraction()[2] for x in df['Sequence']]\n    df['extinction_coefficient_reduced']= [ProteinAnalysis(x).molar_extinction_coefficient()[0] for x in df['Sequence']]\n    df['extinction_coefficient_non_reduced']= [ProteinAnalysis(x).molar_extinction_coefficient()[1] for x in df['Sequence']]\n    df['flexibility_mean']= [np.mean(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\n    df['flexibility_std']= [np.std(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\n    df['flexibility_median']= [np.median(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\n    df['flexibility_hmean']= [hmean(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\n    df['flexibility_gmean']= [gmean(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\n    df['flexibility_min']= [np.min(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\n    df['flexibility_max']= [np.max(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\n    df['flexibility_skew']= [skew(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\n    df['flexibility_kurtosis']= [kurtosis(ProteinAnalysis(x).flexibility()) for x in df['Sequence']]\n    return df\n\ndf2 = feature_eng(df2)\ndf2\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[43]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Number\n      Gene\n      Sequence\n      A\n      C\n      D\n      E\n      F\n      G\n      H\n      ...\n      extinction_coefficient_non_reduced\n      flexibility_mean\n      flexibility_std\n      flexibility_median\n      flexibility_hmean\n      flexibility_gmean\n      flexibility_min\n      flexibility_max\n      flexibility_skew\n      flexibility_kurtosis\n    \n  \n  \n    \n      0\n      1\n      random\n      MAMIHHSAVQLSHGQTIMSGGQREGKSTLVQSIKVLTKQQQYPAPC...\n      0.025000\n      0.015\n      0.030000\n      0.030000\n      0.035000\n      0.070000\n      0.055000\n      ...\n      64065\n      0.995175\n      0.025666\n      0.995929\n      0.994514\n      0.994844\n      0.94081\n      1.061024\n      0.103835\n      -0.531963\n    \n    \n      1\n      2\n      DPO1_THEAQ\n      MRGMLPLFEPKGRVLLVDGHHLAYRTFHALKGLTTSRGEPVQAVYG...\n      0.109375\n      0.000\n      0.050481\n      0.104567\n      0.032452\n      0.069712\n      0.021635\n      ...\n      112760\n      1.000747\n      0.024468\n      0.999750\n      1.000151\n      1.000448\n      0.93856\n      1.077405\n      0.169728\n      -0.601805\n    \n  \n\n2 rows \u00d7 42 columns\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[49]:\n\n    \ncolumn_titles = ['Number', 'Gene', 'A', 'C', 'D', 'E',\n       'F', 'G', 'H', 'I', 'K', 'L', 'M', 'N', 'P', 'Q', 'R', 'S', 'T',\n       'V', 'W', 'Y', 'molecular_weight', 'aromaticity',\n       'instability_index', 'isoelectric_point',\n       'structure_fraction_helix', 'structure_fraction_turn',\n       'structure_fraction_sheet', 'extinction_coefficient_reduced',\n       'extinction_coefficient_non_reduced', 'gravy', 'flexibility_mean',\n       'flexibility_std', 'flexibility_median', 'flexibility_hmean',\n       'flexibility_gmean', 'flexibility_min', 'flexibility_max',\n       'flexibility_skew', 'flexibility_kurtosis','Sequence']\n\ndf2 = df2.reindex(columns=column_titles)\ndf_x2 = df2.iloc[:,2:-1]\nX2_scaled = scaler.transform(df_x2)\n\n\n    \n\n\n\n\n\n\n\n\uc774\uc81c \uae30\uacc4\ud559\uc2b5 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud574 \uc6a9\ud574\ub3c4\uac12\uc744 \uc608\uce21\ud574\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[61]:\n\n    \npred_sol = grid_search.best_estimator_.predict(X2_scaled)\ngene = ['random', 'DPO1_THEAQ']\nfor idx, val in enumerate(gene):\n    print(f'Predicted solubility of {val} is {pred_sol[idx]:.2f}%')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nPredicted solubility of random is 28.88%\nPredicted solubility of DPO1_THEAQ is 46.57%\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \ucf54\ub4dc\ub97c \ud1b5\ud574 \uac01\uac01\uc758 \uc11c\uc5f4\uc5d0 \ub300\ud55c \uc6a9\ud574\ub3c4\uac12\uc744 \uc608\uce21 \ud560 \uc218 \uc788\uc5c8\uc9c0\ub9cc \uc2e4\uc81c\uac12\uacfc \ub3d9\uc77c\ud55c\uc9c0\ub294 \uc2e4\uc81c \uc2e4\ud5d8\uc744 \ud574\ubd10\uc57c\ud560 \uac83\uc785\ub2c8\ub2e4.",
      "tags": "machine learning,Protein,Python,Solubility prediction,\ub2e8\ubc31\uc9c8,\uba38\uc2e0\ub7ec\ub2dd,\uc6a9\ud574\ub3c4",
      "url": "https://partrita.github.io/posts/solubility/"
    },
    {
      "title": "H20 AutoML\ub85c \uc720\ubc29\uc554 \uc885\uc591 \ud310\ubcc4\ud558\uae30",
      "text": "\ub0b4\uc6a9\u00b6\n0. \ub4e4\uc5b4\uac00\uba70  \n1. \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30  \n2. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30  \n3. \ub370\uc774\ud130 \ud655\uc778\ud558\uae30  \n4. \ub370\uc774\ud130 \ud0d0\uc0c9\ud558\uae30\n5. \uc608\uce21 \ubaa8\ub378 \ub9cc\ub4e4\uae30    \n6. \ucc38\uace0\n\n\n\n\n\n\n\n\n 0. \ub4e4\uc5b4\uac00\uba70\u00b6\ub370\uc774\ud130\uc14b \uc124\uba85\u00b6\uc5ec\uae30\uc11c \uc0ac\uc6a9\ud55c \ub370\uc774\ud130\uc14b\uc740 \uc704\uc2a4\ucf58\uc2e0 \uc720\ubc29\uc554 \uc9c4\ub2e8 \ub370\uc774\ud130 \uc785\ub2c8\ub2e4.[1] \uc774 \ub370\uc774\ud130\uc14b\uc5d0\ub294 30\uac1c\uc758 \ud2b9\uc131(features)\uac12\uc774 \ub4e4\uc5b4\uc788\uace0 \uc720\ubc29\uc554\uc758 \uc9c4\ub2e8\uacb0\uacfc\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ucd1d \ub370\uc774\ud130\uc758 \uc218\ub294 596\uac1c\uc774\uba70 \uc704\uc2a4\ucf58\uc2e0 \ub300\ud559\uad50\uc5d0\uc11c \uc81c\uacf5\ud55c \uc720\ubc29\uc554 \uc9c4\ub2e8\uacb0\uacfc \ub370\uc774\ud130 \uc785\ub2c8\ub2e4. \ub370\uc774\ud130\uc14b\uc5d0 \ud3ec\ud568\ub41c \ud2b9\uc131\uc5d0 \ub300\ud55c \uac04\ub7b5\ud55c \uc124\uba85\uc744 \uc544\ub798 \ud45c\uc5d0 \ub098\ud0c0\ub0b4\uc5c8\uc2b5\ub2c8\ub2e4.\n\n\n\ud2b9\uc131\n\uc124\uba85\n\n\n\n\nid\n\ud658\uc790 \uc2dd\ubcc4 \ubc88\ud638\n\n\ndignosis\n\uc720\ubc29\uc554 \uc885\uc591(M=\uc545\uc131, B=\uc591\uc131)\n\n\nradius\n\uc138\ud3ec\uc758 \ud06c\uae30\n\n\ntexture\n\uc9c8\uac10(\ud751\ubc31 \ucc98\ub9ac\ud588\uc744\ub54c\uc758 \ud45c\uc900\ud3b8\ucc28 \uac12\uc73c\ub85c \uacc4\uc0b0) \n\n\nperimeter\n\ub458\ub808\n\n\narea\n\uba74\uc801\n\n\nsmoothness\n\ub9e4\ub044\ub7ec\uc6c0(\ubc18\uacbd\uc758 \uad6d\uc18c\uc801 \ubcc0\ud654 \uce21\uc815)\n\n\ncompactness\n\uc791\uc740 \uc815\ub3c4($perimeter2/area-1$\ub85c \uacc4\uc0b0)\n\n\nconcavity\n\uc624\ubaa9\ud568(\uc724\uacfd\uc758 \uc624\ubaa9\ud55c \ubd80\ubd84\uc758 \uc815\ub3c4)\n\n\nconcave points\n\uc624\ubaa9\ud55c\uacf3\uc758 \uc218\n\n\nsymmetry\n\ub300\uce6d\uc131\n\n\nfractal dimension\n\ud504\ub799\ud0c8 \ucc28\uc6d0($coastline approximation-1$\ub85c \uacc4\uc0b0)  \n\n\n\n\uac01\uac01\uc758 \uce21\uc815\uac12\ub4e4\uc740 _mean(\ud3c9\uade0\uac12), _SE(\ud45c\uc900\uc624\ucc28), _worst(\uc81c\uc77c \ud070\uac12 3\uac1c\uc758 \ud3c9\uade0)\uc73c\ub85c \ub098\ud0c0\ub0b4\uc5b4 \ucd1d 30\uac1c\uc758 \ud2b9\uc131\uac12\uc744 \uac16\ub294\ub2e4.\nH2O\u00b6H2O \ub294 \uc790\ubc14(Java) \uae30\ubc18\uc758 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub85c \ub370\uc774\ud130 \ubaa8\ub378\ub9c1\uc5d0 \uc0ac\uc6a9\ub41c\ub2e4. H2O\uc758 \uccab\ubc88\uc9f8 \ubaa9\uc801\uc740 \ubcd1\ub82c \ucef4\ud4e8\ud305\uc744 \ud1b5\ud574 \ub9ce\uc740 CPU\uc640 \uba54\ubaa8\ub9ac\ub97c \ud504\ub85c\uc138\uc2a4 \ud558\ub294 \uac83\uc774\ub2e4. \uc790\ubc14 \uae30\ubc18\uc774\uc9c0\ub9cc \ud30c\uc774\uc36c\uacfc R \uc778\ud130\ud398\uc774\uc2a4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4[2].\n\ubd84\uc11d\ud558\uae30\u00b6\uba3c\uc800 \uc720\ubc29\uc554 \uc9c4\ub2e8\uc5d0 \ub300\ud558\uc5ec \uc774\ud574\ud558\uae30 \uc704\ud574 \ub370\uc774\ud130\uc14b\uc758 \ud2b9\uc131\uac12\uc744 \ubd84\uc11d\ud574\ubd05\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c \ub450 \uac00\uc9c0 \uc54c\uace0\ub9ac\uc998\uc744 \uc0ac\uc6a9\ud558\uc5ec \ubaa8\ub378\uc744 \uc0dd\uc131\ud558\uace0 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc720\ubc29\uc554\uc744 \uc608\uce21\ud574\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\n\n 1. \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30\u00b6\ubd84\uc11d\uc5d0 \uc0ac\uc6a9\ud560 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\nfrom sklearn import metrics\nimport time\nimport itertools\nimport h2o\nfrom h2o.estimators.gbm import H2OGradientBoostingEstimator\n%matplotlib inline\n\n\n    \n\n\n\n\n\n\n\n\ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc624\ub294\ub370 H2O\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uba3c\uc800 H2O\ub97c \ucd08\uae30\ud654\ud574\uc57c \ud569\ub2c8\ub2e4.\n1.1. H2O \uc2dc\uc791\ud558\uae30\u00b6H2O\ub294 \uba3c\uc800 \uae30\uc874 \uc778\uc2a4\ud134\uc2a4\uc5d0 \uc5f0\uacb0\uc744 \uc2dc\ub3c4\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc0ac\uc6a9 \uac00\ub2a5\ud55c \uac83\uc774 \uc5c6\ub2e4\uba74 \uc0c8\ub85c \uc778\uc2a4\ud134\uc2a4\ub97c \ub9cc\ub4ed\ub2c8\ub2e4. \uc0c8 \uc778\uc2a4\ud134\uc2a4\uc5d0 \ub300\ud55c \uc815\ubcf4\uac00 \ucf58\uc194\ucc3d\uc5d0 \ucd9c\ub825\ub418\uba74 H2O\ub97c \uc0ac\uc6a9\ud560 \uc900\ube44\ub294 \ubaa8\ub450 \ub41c \uac83\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nh2o.init()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nChecking whether there is an H2O instance running at http://localhost:54321 ..... not found.\nAttempting to start a local H2O server...\n  Java Version: openjdk version \"1.8.0_222\"; OpenJDK Runtime Environment (build 1.8.0_222-8u222-b10-1~deb9u1-b10); OpenJDK 64-Bit Server VM (build 25.222-b10, mixed mode)\n  Starting server from /opt/conda/lib/python3.6/site-packages/h2o/backend/bin/h2o.jar\n  Ice root: /tmp/tmp1sor8o01\n  JVM stdout: /tmp/tmp1sor8o01/h2o_unknownUser_started_from_python.out\n  JVM stderr: /tmp/tmp1sor8o01/h2o_unknownUser_started_from_python.err\n  Server is running at http://127.0.0.1:54321\nConnecting to H2O server at http://127.0.0.1:54321 ... successful.\n\n\n\n\n\n\n    \n\n\n\n\nH2O cluster uptime:\n02 secs\nH2O cluster timezone:\nEtc/UTC\nH2O data parsing timezone:\nUTC\nH2O cluster version:\n3.26.0.5\nH2O cluster version age:\n18 days \nH2O cluster name:\nH2O_from_python_unknownUser_8bo2vb\nH2O cluster total nodes:\n1\nH2O cluster free memory:\n3.556 Gb\nH2O cluster total cores:\n4\nH2O cluster allowed cores:\n4\nH2O cluster status:\naccepting new members, healthy\nH2O connection url:\nhttp://127.0.0.1:54321\nH2O connection proxy:\nNone\nH2O internal security:\nFalse\nH2O API Extensions:\nAmazon S3, XGBoost, Algos, AutoML, Core V3, TargetEncoder, Core V4\nPython version:\n3.6.6 final\n\n\n\n\n\n\n\n\n\n\n\nH2O \ud074\ub7ec\uc2a4\ud130 \uac00\ub3d9 \uc2dc\uac04, \uc2dc\uac04\ub300, \ubc84\uc804, \ubc84\uc804 \uc218\uba85, \ud074\ub7ec\uc2a4\ud130 \uc774\ub984, \ud560\ub2f9 \ub41c \ud558\ub4dc\uc6e8\uc5b4 \ub9ac\uc18c\uc2a4 (\ub178\ub4dc \uc218, \uba54\ubaa8\ub9ac, \ucf54\uc5b4 \uc218), \uc5f0\uacb0 URL, \ub178\ucd9c \ub41c H2O API \ud655\uc7a5 \ubc0f \uc0ac\uc6a9 \ub41c \ud30c\uc774\uc36c \ubc84\uc804\uacfc \uac19\uc740 \ucd94\uac00 \uc815\ubcf4\uac00 \ucd9c\ub825\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\n\n 2. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\u00b6\uc774\uc81c \uc544\ub798 \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud574 H2O\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130\ub97c \uac00\uc838\uc635\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \ndata_df = h2o.import_file(\"../input/data.csv\", destination_frame=\"data_df\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nParse progress: |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100%\n\n\n\n\n\n\n\n\n\n\n\n 3. \ub370\uc774\ud130 \ud655\uc778\ud558\uae30\u00b6H2O\uc758 describe() \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574 \ubd88\ub7ec\uc628 \ub370\uc774\ud130\uc14b\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.\ndescribe() \ud568\uc218\ub97c \ud638\ucd9c\ud558\ub294 \uac83\uc740 summary() \ub97c \ud638\ucd9c\ud558\ub294 \uac83\uacfc \ub3d9\uc77c\ud55c \uae30\ub2a5\uc744 \ud569\ub2c8\ub2e4.\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \ndata_df.describe()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nRows:569\nCols:33\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n       id                diagnosis  radius_mean       texture_mean      perimeter_mean   area_mean        smoothness_mean     compactness_mean    concavity_mean     concave points_mean  symmetry_mean       fractal_dimension_mean  radius_se          texture_se        perimeter_se      area_se          smoothness_se       compactness_se      concavity_se        concave points_se   symmetry_se         fractal_dimension_se  radius_worst      texture_worst     perimeter_worst   area_worst       smoothness_worst    compactness_worst  concavity_worst    concave points_worst  symmetry_worst     fractal_dimension_worst  C33  \n\n\ntype   int               enum       real              real              real             real             real                real                real               real                 real                real                    real               real              real              real             real                real                real                real                real                real                  real              real              real              real             real                real               real               real                  real               real                     int  \nmins   8670.0                       6.981             9.71              43.79            143.5            0.05263             0.01938             0.0                0.0                  0.106               0.04996                 0.1115             0.3602            0.757             6.802            0.001713            0.002252            0.0                 0.0                 0.007882            0.0008948             7.93              12.02             50.41             185.2            0.07117             0.02729            0.0                0.0                   0.1565             0.05504                  NaN  \nmean   30371831.43233744            14.12729173989455419.28964850615114691.96903339191564654.88910369068550.09636028119507907 0.10434098418277679 0.0887993158172232 0.04891914586994728  0.18116186291739894 0.06279760984182778     0.405172056239015751.21685342706502642.866059226713532340.337079086116  0.0070409789103690670.0254781388400702950.0318937163444639740.0117961370826010540.0205422987697715250.0037949038664323374 16.26918980667838425.677223198594024107.26121265377856880.58312829525480.1323685940246046  0.2542650439367311 0.272188483304042160.11460622319859404   0.2900755711775044 0.0839458172231986       0.0  \nmaxs   911320502.0                  28.11             39.28             188.5            2501.0           0.1634              0.3454              0.4268             0.2012               0.304               0.09744                 2.873              4.885             21.98             542.2            0.03113             0.1354              0.396               0.05279             0.07895             0.02984               36.04             49.54             251.2             4254.0           0.2226              1.058              1.252              0.291                 0.6638             0.2075                   NaN  \nsigma  125020585.61222367           3.524048826212078 4.301035768166949 24.2989810387549 351.914129181653 0.0140641281376736160.0528127579325121940.079719808707893480.038802844859153605 0.0274142813360357120.00706036279508446     0.2773127329861039 0.55164839261720232.021854554042107645.491005516131810.0030025179438390660.0179081793256773880.0301860603229884080.00617028517404687 0.0082663715287983990.002646070967089195  4.833241580469323 6.14625762303832  33.602542269036356569.356992669949 0.0228324294048354650.157336488913742  0.2086242806081323 0.06573234119594207   0.061867467537518690.018061267348893986     -0.0 \nzerosnmissingn0      842302.0          M          17.99             10.38             122.8            1001.0           0.1184              0.2776              0.3001             0.1471               0.2419              0.07871                 1.095              0.9053            8.589             153.4            0.006399            0.04904             0.05373             0.01587             0.03003             0.006193              25.38             17.33             184.6             2019.0           0.1622              0.6656             0.7119             0.2654                0.4601             0.1189                   nan  \n1      842517.0          M          20.57             17.77             132.9            1326.0           0.08474             0.07864             0.0869             0.07017              0.1812              0.05667                 0.5435             0.7339            3.398             74.08            0.005225            0.01308             0.0186              0.0134              0.01389             0.003532              24.99             23.41             158.8             1956.0           0.1238              0.1866             0.2416             0.186                 0.275              0.08902                  nan  \n2      84300903.0        M          19.69             21.25             130.0            1203.0           0.1096              0.1599              0.1974             0.1279               0.2069              0.05999                 0.7456             0.7869            4.585             94.03            0.00615             0.04006             0.03832             0.02058             0.0225              0.004571              23.57             25.53             152.5             1709.0           0.1444              0.4245             0.4504             0.243                 0.3613             0.08758                  nan  \n3      84348301.0        M          11.42             20.38             77.58            386.1            0.1425              0.2839              0.2414             0.1052               0.2597              0.09744                 0.4956             1.156             3.445             27.23            0.00911             0.07458             0.05661             0.01867             0.05963             0.009208              14.91             26.5              98.87             567.7            0.2098              0.8663             0.6869             0.2575                0.6638             0.173                    nan  \n4      84358402.0        M          20.29             14.34             135.1            1297.0           0.1003              0.1328              0.198              0.1043               0.1809              0.05883                 0.7572             0.7813            5.438             94.44            0.01149             0.02461             0.05688             0.01885             0.01756             0.005115              22.54             16.67             152.2             1575.0           0.1374              0.205              0.4                0.1625                0.2364             0.07678                  nan  \n5      843786.0          M          12.45             15.7              82.57            477.1            0.1278              0.17                0.1578             0.08089              0.2087              0.07613                 0.3345             0.8902            2.217             27.19            0.00751             0.03345             0.03672             0.01137             0.02165             0.005082              15.47             23.75             103.4             741.6            0.1791              0.5249             0.5355             0.1741                0.3985             0.1244                   nan  \n6      844359.0          M          18.25             19.98             119.6            1040.0           0.09463             0.109               0.1127             0.074                0.1794              0.05742                 0.4467             0.7732            3.18              53.91            0.004314            0.01382             0.02254             0.01039             0.01369             0.002179              22.88             27.66             153.2             1606.0           0.1442              0.2576             0.3784             0.1932                0.3063             0.08368                  nan  \n7      84458202.0        M          13.71             20.83             90.2             577.9            0.1189              0.1645              0.09366            0.05985              0.2196              0.07451                 0.5835             1.377             3.856             50.96            0.008805            0.03029             0.02488             0.01448             0.01486             0.005412              17.06             28.14             110.6             897.0            0.1654              0.3682             0.2678             0.1556                0.3196             0.1151                   nan  \n8      844981.0          M          13.0              21.82             87.5             519.8            0.1273              0.1932              0.1859             0.09353              0.235               0.07389                 0.3063             1.002             2.406             24.32            0.005731            0.03502             0.03553             0.01226             0.02143             0.003749              15.49             30.73             106.2             739.3            0.1703              0.5401             0.539              0.206                 0.4378             0.1072                   nan  \n9      84501001.0        M          12.46             24.04             83.97            475.9            0.1186              0.2396              0.2273             0.08543              0.203               0.08243                 0.2976             1.599             2.039             23.94            0.007149            0.07217             0.07743             0.01432             0.01789             0.01008               15.09             40.68             97.65             711.4            0.1853              1.058              1.105              0.221                 0.4366             0.2075                   nan  \n\n\n\n\n\n\n\n\n\n\n\n\n\n569\uac1c\uc758 \ud589(rows)\uacfc 33\uac1c\uc758 \uc5f4columns)\ub85c \uad6c\uc131\uc774 \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \n\uc774\uac83\uc73c\ub85c \uac01\uac01\uc758 \uc5f4\uc5d0 \ub300\ud558\uc5ec \ub370\uc774\ud130 \ud0c0\uc785, \ucd5c\ub300 \ucd5c\uc18c \uac12\ub4f1\uc758 \uc815\ubcf4\ub97c \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\n\n4. \ub370\uc774\ud130 \ud0d0\uc0c9\ud558\uae30\u00b6H2O\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574 \ub370\uc774\ud130\ub97c \ud0d0\uc0c9\ud574\ubd05\ub2c8\ub2e4.\n\uc885\uc591\uc758 \uc9c4\ub2e8\uc5d0 \uad00\ud55c diagnosis \uac12\uc73c\ub85c \uadf8\ub8f9\uc744 \ub9cc\ub4e4\uc5b4 \uc591\uc131\uacfc \uc545\uc131 \uc885\uc591\uc758 \ub370\uc774\ud130 \uc218\ub97c \ud655\uc778\ud574 \ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \ndf_group=data_df.group_by(\"diagnosis\").count()\ndf_group.get_frame()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\ndiagnosis    nrow\n\n\nB             357\nM             212\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc591\uc131(B)\uacfc \uc545\uc131(M)\uc774 \uac01\uac01 357, 212\uac1c \uc874\uc7ac\ud558\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc774\uc81c \uac01 \ud2b9\uc131(feature)\uac12\uc5d0 \ub530\ub77c \uc591\uc131\uacfc \uc545\uc131 \uc885\uc591\uc758 \ubd84\ud3ec\uac00 \uc5b4\ub5bb\uac8c \ub418\ub294\uc9c0 \uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nfeatures = [f for f in data_df.columns if f not in ['id', 'diagnosis', 'C33']]\n\ni = 0\nt0 = data_df[data_df['diagnosis'] == 'M'].as_data_frame()\nt1 = data_df[data_df['diagnosis'] == 'B'].as_data_frame()\n\n# sns.set_style('whitegrid')\nplt.figure()\nfig, ax = plt.subplots(6,5,figsize=(16,24))\n\nfor feature in features:\n    i += 1\n    plt.subplot(6,5,i)\n    sns.kdeplot(t0[feature], bw=0.5,label=\"Malignant\")\n    sns.kdeplot(t1[feature], bw=0.5,label=\"Benign\")\n    plt.xlabel(feature, fontsize=12)\n    locs, labels = plt.xticks()\n    plt.tick_params(axis='both', which='major', labelsize=12)\nplt.show();\n    \n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n<Figure size 432x288 with 0 Axes>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uadf8\ub9bc\uc744 \ud1b5\ud574 \uc6b0\ub9ac\ub294 \uc591\uc131\uacfc \uc545\uc131 \uc885\uc591\uc744 \uad6c\ubd84\ud560 \uc218 \uc788\ub294 \ud2b9\uc131\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc5d0\ub294 \uadf8\ub7f0 \ud2b9\uc131\ub4e4\uc758 \ubaa9\ub85d\uc785\ub2c8\ub2e4.\n\nradius_mean  \ntexture_mean \nperimeter_mean\narea_mean\nradius_worst  \ntexture_worst \nperimeter_worst\narea_worst\n\n\uadf8\ub7ec\ub098 \uc591\uc131\uacfc \uc545\uc131\uc744 \uc804\ud600 \uad6c\ubd84\ud560 \uc218 \uc5c6\ub294 \ud2b9\uc131\ub4e4\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \ud2b9\uc131\uc740 \ub450 \uac00\uc9c0 \uc885\uc591\uc5d0\uc11c \ucc28\uc774\uac00 \ub098\ud0c0\ub098\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n\ncompactness_se\nconcavity_se\nconcave_points_se\nsimmetry_se \nsmoothness_se\n\n\uc774\uc81c \ud2b9\uc131\uac04\uc758 \uc0c1\uad00\uad00\uacc4(correlation) Heat map\uc744 \uadf8\ub824\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \nplt.figure(figsize=(16,16))\ncorr = data_df[features].cor().as_data_frame()\ncorr.index = features\nsns.heatmap(corr, annot = True, cmap='coolwarm', linecolor=\"white\",\n            vmin=-1, vmax=1, cbar_kws={\"orientation\": \"vertical\"})\nplt.title(\"Correlation Heatmap\", fontsize=14)\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc544\ub798 \uc77c\ubd80 \ud2b9\uc131\uc740 \uc11c\ub85c \ubc00\uc811\ud558\uac8c \uad00\ub828\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\nradius_mean \uacfc perimeter_mean\nradius_mean \uacfc texture_mean \nperimeter_worst \uc640 radius_worst\nperimeter_worst \uc640 area_worst \narea_se \uc640 perimeter_se\n\n\n\n\n\n\n\n\n 5. \uc608\uce21 \ubaa8\ub378\ub9cc\ub4e4\uae30\u00b6 5.1. \ub370\uc774\ud130 \ub098\ub204\uae30\u00b6\ud559\uc2b5, \uac80\uc99d, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc73c\ub85c \ub370\uc774\ud130\ub97c \ubd84\ud560\ud569\ub2c8\ub2e4. \uac01\uac01 60%, 20%, 20% \ub85c \ubd84\ud560\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \ntrain_df, valid_df, test_df = data_df.split_frame(ratios=[0.6,0.2], seed=2018)\ntarget = \"diagnosis\"\ntrain_df[target] = train_df[target].asfactor()\nvalid_df[target] = valid_df[target].asfactor()\ntest_df[target] = test_df[target].asfactor()\nprint(\"\ud559\uc2b5, \uac80\uc99d, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc758 \uc218 : \", train_df.shape[0], valid_df.shape[0], test_df.shape[0])\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\ud559\uc2b5, \uac80\uc99d, \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc758 \uc218 :  344 124 101\n\n\n\n\n\n\n\n\n\n\n\n 5.2. GBM(Gradient Boosting Algorithm) \ubaa8\ub378\ub85c \ud559\uc2b5\ud558\uae30\u00b6GBM \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud574 \uae30\uacc4 \ud559\uc2b5\uc744 \ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \npredictors = features\ngbm = H2OGradientBoostingEstimator()\ngbm.train(x=predictors, y=target, training_frame=train_df)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\ngbm Model Build progress: |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100%\n\n\n\n\n\n\n\n\n\n\n\n 5.3. \ubaa8\ub378 \ud3c9\uac00\ud558\uae30\u00b6\ud6c8\ub828 \ub41c \ubaa8\ub378\uc744 \uac80\uc0ac \ud574\ubd05\ub2c8\ub2e4. \uba3c\uc800 \ubaa8\ub378\uc5d0 \ub300\ud55c \uc694\uc57d\uc744 \ucd9c\ub825\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \ngbm.summary()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\nModel Summary: \n\n\n\n\n\n    \n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      \n      number_of_trees\n      number_of_internal_trees\n      model_size_in_bytes\n      min_depth\n      max_depth\n      mean_depth\n      min_leaves\n      max_leaves\n      mean_leaves\n    \n  \n  \n    \n      0\n      \n      50.0\n      50.0\n      9916.0\n      4.0\n      5.0\n      4.98\n      7.0\n      14.0\n      11.18\n    \n  \n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc774\uac83\uc740 \uc6b0\ub9ac\uac00 \ub9cc\ub4e0 \ubaa8\ub378\uc774 50\uac1c\uc758 tree\uc640 50 \uac1c\uc758 internal tree\ub97c \uc0ac\uc6a9\ud588\uc74c\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4. \ub610\ud55c \ucd5c\uc18c 4\uac1c \ucd5c\ub300 5\uac1c\uc758 tree \uae4a\uc774, \ucd5c\uc18c 7\uac1c \ucd5c\ub300 14\uac1c\uc758 leaf \uc218\ub97c \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ucd94\uac00\uc801\uc73c\ub85c \uac80\uc99d \ub370\uc774\ud130\uc14b\uc5d0 \ub300\ud55c \ubaa8\ub378\uc758 \uc131\ub2a5\uc744 \ud655\uc778\ud574 \ubd05\uc2dc\ub2e4.\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nprint(gbm.model_performance(valid_df))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\nModelMetricsBinomial: gbm\n** Reported on test data. **\n\nMSE: 0.013297212568117986\nRMSE: 0.11531354026357003\nLogLoss: 0.050535167368489856\nMean Per-Class Error: 0.012820512820512775\nAUC: 0.9987933634992459\npr_auc: 0.9719453672942044\nGini: 0.9975867269984917\n\nConfusion Matrix (Act/Pred) for max f1 @ threshold = 0.5851063290701174: \n\n\n\n\n\n    \n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      \n      B\n      M\n      Error\n      Rate\n    \n  \n  \n    \n      0\n      B\n      85.0\n      0.0\n      0.0\n      (0.0/85.0)\n    \n    \n      1\n      M\n      1.0\n      38.0\n      0.0256\n      (1.0/39.0)\n    \n    \n      2\n      Total\n      86.0\n      38.0\n      0.0081\n      (1.0/124.0)\n    \n  \n\n\n\n\n\n\n\n\n    \n\n\n\n\nMaximum Metrics: Maximum metrics at their respective thresholds\n\n\n\n\n\n\n    \n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      metric\n      threshold\n      value\n      idx\n    \n  \n  \n    \n      0\n      max f1\n      0.585106\n      0.987013\n      34.0\n    \n    \n      1\n      max f2\n      0.149309\n      0.979899\n      39.0\n    \n    \n      2\n      max f0point5\n      0.585106\n      0.994764\n      34.0\n    \n    \n      3\n      max accuracy\n      0.585106\n      0.991935\n      34.0\n    \n    \n      4\n      max precision\n      0.995426\n      1.000000\n      0.0\n    \n    \n      5\n      max recall\n      0.149309\n      1.000000\n      39.0\n    \n    \n      6\n      max specificity\n      0.995426\n      1.000000\n      0.0\n    \n    \n      7\n      max absolute_mcc\n      0.585106\n      0.981341\n      34.0\n    \n    \n      8\n      max min_per_class_accuracy\n      0.585106\n      0.974359\n      34.0\n    \n    \n      9\n      max mean_per_class_accuracy\n      0.585106\n      0.987179\n      34.0\n    \n    \n      10\n      max tns\n      0.995426\n      85.000000\n      0.0\n    \n    \n      11\n      max fns\n      0.995426\n      38.000000\n      0.0\n    \n    \n      12\n      max fps\n      0.002134\n      85.000000\n      107.0\n    \n    \n      13\n      max tps\n      0.149309\n      39.000000\n      39.0\n    \n    \n      14\n      max tnr\n      0.995426\n      1.000000\n      0.0\n    \n    \n      15\n      max fnr\n      0.995426\n      0.974359\n      0.0\n    \n    \n      16\n      max fpr\n      0.002134\n      1.000000\n      107.0\n    \n    \n      17\n      max tpr\n      0.149309\n      1.000000\n      39.0\n    \n  \n\n\n\n\n\n\n\n\n    \n\n\n\n\nGains/Lift Table: Avg response rate: 31.45 %, avg score: 31.14 %\n\n\n\n\n\n\n    \n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      \n      group\n      cumulative_data_fraction\n      lower_threshold\n      lift\n      cumulative_lift\n      response_rate\n      score\n      cumulative_response_rate\n      cumulative_score\n      capture_rate\n      cumulative_capture_rate\n      gain\n      cumulative_gain\n    \n  \n  \n    \n      0\n      \n      1\n      0.016129\n      0.995336\n      3.179487\n      3.179487\n      1.000000\n      0.995382\n      1.000000\n      0.995382\n      0.051282\n      0.051282\n      217.948718\n      217.948718\n    \n    \n      1\n      \n      2\n      0.048387\n      0.995332\n      3.179487\n      3.179487\n      1.000000\n      0.995332\n      1.000000\n      0.995348\n      0.102564\n      0.153846\n      217.948718\n      217.948718\n    \n    \n      2\n      \n      3\n      0.056452\n      0.995242\n      3.179487\n      3.179487\n      1.000000\n      0.995250\n      1.000000\n      0.995334\n      0.025641\n      0.179487\n      217.948718\n      217.948718\n    \n    \n      3\n      \n      4\n      0.104839\n      0.994650\n      3.179487\n      3.179487\n      1.000000\n      0.995004\n      1.000000\n      0.995182\n      0.153846\n      0.333333\n      217.948718\n      217.948718\n    \n    \n      4\n      \n      5\n      0.153226\n      0.993092\n      3.179487\n      3.179487\n      1.000000\n      0.993745\n      1.000000\n      0.994728\n      0.153846\n      0.487179\n      217.948718\n      217.948718\n    \n    \n      5\n      \n      6\n      0.201613\n      0.989837\n      3.179487\n      3.179487\n      1.000000\n      0.991822\n      1.000000\n      0.994031\n      0.153846\n      0.641026\n      217.948718\n      217.948718\n    \n    \n      6\n      \n      7\n      0.298387\n      0.595463\n      3.179487\n      3.179487\n      1.000000\n      0.910300\n      1.000000\n      0.966875\n      0.307692\n      0.948718\n      217.948718\n      217.948718\n    \n    \n      7\n      \n      8\n      0.403226\n      0.028560\n      0.489152\n      2.480000\n      0.153846\n      0.191962\n      0.780000\n      0.765397\n      0.051282\n      1.000000\n      -51.084813\n      148.000000\n    \n    \n      8\n      \n      9\n      0.500000\n      0.005443\n      0.000000\n      2.000000\n      0.000000\n      0.010610\n      0.629032\n      0.619309\n      0.000000\n      1.000000\n      -100.000000\n      100.000000\n    \n    \n      9\n      \n      10\n      0.596774\n      0.004044\n      0.000000\n      1.675676\n      0.000000\n      0.004568\n      0.527027\n      0.519622\n      0.000000\n      1.000000\n      -100.000000\n      67.567568\n    \n    \n      10\n      \n      11\n      0.701613\n      0.003461\n      0.000000\n      1.425287\n      0.000000\n      0.003730\n      0.448276\n      0.442534\n      0.000000\n      1.000000\n      -100.000000\n      42.528736\n    \n    \n      11\n      \n      12\n      0.814516\n      0.003102\n      0.000000\n      1.227723\n      0.000000\n      0.003131\n      0.386139\n      0.381627\n      0.000000\n      1.000000\n      -100.000000\n      22.772277\n    \n    \n      12\n      \n      13\n      0.895161\n      0.003047\n      0.000000\n      1.117117\n      0.000000\n      0.003081\n      0.351351\n      0.347524\n      0.000000\n      1.000000\n      -100.000000\n      11.711712\n    \n    \n      13\n      \n      14\n      1.000000\n      0.002134\n      0.000000\n      1.000000\n      0.000000\n      0.002776\n      0.314516\n      0.311381\n      0.000000\n      1.000000\n      -100.000000\n      0.000000\n    \n  \n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud63c\ub3d9 \ud589\ub82c\uc744 \ud1b5\ud574 \uc624\uc9c1 \ud558\ub098\uc758 \uac12\ub9cc \uc798\ubabb \uc608\uce21\ub418\uc5c8\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubaa8\ub378\uc758 \uc131\ub2a5\uc740 AUC\uac00 0.9987\uc774\uace0 Gini coeff\uac00 0.997, LogLoss\ub294 0.05 \uc784\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc774\uc640 \uac19\uc774 \uc88b\uc740 \uacb0\uacfc\uac12\uc744 \uc5bb\uc73c\uba74 \ub354\uc774\uc0c1 \ubaa8\ub378\uc744 \ub354 \uc870\uc815\ud560 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4. \uc774\uc81c \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc14b\uc744 \uc774\uc6a9\ud574 \uac12\uc744 \uc608\uce21\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uadf8\ub7ec\uae30\uc804\uc5d0 \uba3c\uc800 \ubaa8\ub378\uc5d0 \ub4e4\uc5b4\uac00\ub294 \ubcc0\uc218\ub4e4\uc758 \uc911\uc694\ub3c4 \ud50c\ub86f\uc744 \ud655\uc778\ud574\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \ngbm.varimp_plot()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uadf8\ub9bc\uc744 \ud1b5\ud574 \uac00\uc7a5 \uc911\uc694\ud55c \ubcc0\uc218\ub294 perimeter_worst, concave_points_mean, radius_worst, concave_points_worst\ub77c\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc774\uc81c \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud574 \uc608\uce21\uc744 \ud574\ubd05\ub2c8\ub2e4.\n 5.4. \uc608\uce21\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[13]:\n\n    \npred_val = list(gbm.predict(test_df[predictors])[0])\ntrue_val = list(test_df[target])\nprediction_acc = np.mean(pred_val == true_val)\nprint(\"Prediction accuracy: \", prediction_acc)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\ngbm prediction progress: |\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588| 100%\nPrediction accuracy:  1.0\n\n\n\n\n\n\n\n\n\n\n\n\uc815\ud655\ub3c4\ub294 1\uc785\ub2c8\ub2e4(100 % \uc815\ud655\ud558\uac8c \uc608\uce21 \ub41c \uac12).\n\n\n\n\n\n\n\n 6.\ucc38\uace0\u00b6[1] Breast Cancer Wisconsin (Diagnostic) Data Set, https://www.kaggle.com/uciml/breast-cancer-wisconsin-data\n[2] SRK, Getting started with H2O,  https://www.kaggle.com/sudalairajkumar/getting-started-with-h2o",
      "tags": "Automl,breast cancer,H20,\uba38\uc2e0\ub7ec\ub2dd,\uc720\ubc29\uc554",
      "url": "https://partrita.github.io/posts/H2O/"
    },
    {
      "title": "\ubc14\uc774\uc624\ud30c\uc774\uc36c \uc608\uc81c\ucf54\ub4dc",
      "text": "\uc544\ub798 \ub0b4\uc6a9\uc740 \ucc45 \ud55c\uc8fc\ud604, \ubc14\uc774\uc624\ud30c\uc774\uc36c\uc73c\ub85c \ub9cc\ub098\ub294 \uc0dd\ubb3c\uc815\ubcf4\ud559, \ube44\uc81c\uc774\ud37c\ube14\ub9ad, 2019\uc744 \uc77d\uace0 \uc2e4\uc2b5\ud55c \ucf54\ub4dc\ub97c \uc815\ub9ac\ud55c \uac83\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport Bio\nprint(Bio.__doc__)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nCollection of modules for dealing with biological data in Python.\n\nThe Biopython Project is an international association of developers\nof freely available Python tools for computational molecular biology.\n\nhttp://biopython.org\n\n\n\n\n\n\n\n\n\n\n\n\nDNA \uc11c\uc5f4 \ub2e4\ub8e8\uae30\u00b6\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nfrom Bio import Entrez\nfrom Bio import SeqIO\nEntrez.email = \"A.N.Other@example.com\"\nwith Entrez.efetch(db=\"nucleotide\", rettype=\"fasta\", retmode=\"text\", id=\"1490011893\") as handle:\n    seq_record = SeqIO.read(handle, \"fasta\")\n\nseq_record\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\nSeqRecord(seq=Seq('ATGGAGGAGATGCTGCCCCTCTTTGAGCCCAAGGGCCGGGTCCTCCTGGTGGAC...GAG', SingleLetterAlphabet()), id='MG727867.1', name='MG727867.1', description='MG727867.1 Synthetic construct Taq DNA polymerase gene, partial cds', dbxrefs=[])\n\n\n\n\n\n\n\n\n\n\n\n\uc11c\uc5f4 \uac1c\uc218 \uc138\uae30\u00b6\n\n\n\n\n\nIn\u00a0[3]:\n\n    \ntaq = seq_record.seq\nlen(taq)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n2496\n\n\n\n\n\n\n\n\n\n\n\nGC_content \uacc4\uc0b0\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nfrom Bio.SeqUtils import GC\n\nGC(taq)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n67.70833333333333\n\n\n\n\n\n\n\n\n\n\n\n\ub300\uc18c\ubb38\uc790 \ubcc0\ud658\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[5]:\n\n    \ntaq.upper()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\nSeq('ATGGAGGAGATGCTGCCCCTCTTTGAGCCCAAGGGCCGGGTCCTCCTGGTGGAC...GAG', SingleLetterAlphabet())\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \ntaq.lower()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\nSeq('atggaggagatgctgcccctctttgagcccaagggccgggtcctcctggtggac...gag', SingleLetterAlphabet())\n\n\n\n\n\n\n\n\n\n\n\nDNA \uc11c\uc5f4 Translation, Transcription\u00b6\n\n\n\n\n\nIn\u00a0[7]:\n\n    \ntaq.transcribe()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\nSeq('AUGGAGGAGAUGCUGCCCCUCUUUGAGCCCAAGGGCCGGGUCCUCCUGGUGGAC...GAG', RNAAlphabet())\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \ntaq.translate()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\nSeq('MEEMLPLFEPKGRVLLVDGHHLAYRTFHALKGLTTSRGEPVQAVYGFAKSLLKA...AKE', ExtendedIUPACProtein())\n\n\n\n\n\n\n\n\n\n\n\nMolecular weight \uad6c\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nfrom Bio.SeqUtils import molecular_weight\n\nmolecular_weight(taq)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\n771589.062500014\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nmolecular_weight(taq.translate())\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\n94387.32270000054\n\n\n\n\n\n\n\n\n\n\n\n\ucf54\ub3c8 \ud14c\uc774\ube14\u00b6\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nfrom Bio.Data import CodonTable\n\nprint(CodonTable.unambiguous_dna_by_name['Standard'])\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nTable 1 Standard, SGC0\n\n  |  T      |  C      |  A      |  G      |\n--+---------+---------+---------+---------+--\nT | TTT F   | TCT S   | TAT Y   | TGT C   | T\nT | TTC F   | TCC S   | TAC Y   | TGC C   | C\nT | TTA L   | TCA S   | TAA Stop| TGA Stop| A\nT | TTG L(s)| TCG S   | TAG Stop| TGG W   | G\n--+---------+---------+---------+---------+--\nC | CTT L   | CCT P   | CAT H   | CGT R   | T\nC | CTC L   | CCC P   | CAC H   | CGC R   | C\nC | CTA L   | CCA P   | CAA Q   | CGA R   | A\nC | CTG L(s)| CCG P   | CAG Q   | CGG R   | G\n--+---------+---------+---------+---------+--\nA | ATT I   | ACT T   | AAT N   | AGT S   | T\nA | ATC I   | ACC T   | AAC N   | AGC S   | C\nA | ATA I   | ACA T   | AAA K   | AGA R   | A\nA | ATG M(s)| ACG T   | AAG K   | AGG R   | G\n--+---------+---------+---------+---------+--\nG | GTT V   | GCT A   | GAT D   | GGT G   | T\nG | GTC V   | GCC A   | GAC D   | GGC G   | C\nG | GTA V   | GCA A   | GAA E   | GGA G   | A\nG | GTG V   | GCG A   | GAG E   | GGG G   | G\n--+---------+---------+---------+---------+--\n\n\n\n\n\n\n\n\n\n\n\nTm \uac12 \uacc4\uc0b0\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[13]:\n\n    \nfrom Bio.SeqUtils import MeltingTemp\nfrom Bio.Seq import Seq\n\nprimer_DNA = Seq('ATGGAGGAGATGCTGCCCCTCT')\nMeltingTemp.Tm_Wallace(primer_DNA)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[13]:\n\n\n\n\n\n70.0\n\n\n\n\n\n\n\n\n\n\n\n\uc544\ubbf8\ub178\uc0b0 \uc11c\uc5f4 \uc57d\uc790 \ubcc0\ud658\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[14]:\n\n    \nfrom Bio.SeqUtils import seq1, seq3\n\nseq3('MEEMLPLFEPKGRVLLVDGHHLAYRTFHALKGLTTSRGEPVQAVYGFAKSLLKA')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[14]:\n\n\n\n\n\n'MetGluGluMetLeuProLeuPheGluProLysGlyArgValLeuLeuValAspGlyHisHisLeuAlaTyrArgThrPheHisAlaLeuLysGlyLeuThrThrSerArgGlyGluProValGlnAlaValTyrGlyPheAlaLysSerLeuLeuLysAla'\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \nseq1('MetGluGluMetLeuProLeuPheGluProLysGlyArgValLeuLeuValAspGlyHisHisLeuAlaTyrArgThrPheHisAlaLeuLysGlyLeuThrThrSerArgGlyGluProValGlnAlaValTyrGlyPheAlaLysSerLeuLeuLysAla')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[15]:\n\n\n\n\n\n'MEEMLPLFEPKGRVLLVDGHHLAYRTFHALKGLTTSRGEPVQAVYGFAKSLLKA'\n\n\n\n\n\n\n\n\n\n\n\nWeblogo \uadf8\ub9ac\uae30\u00b6\n\n\n\n\n\nIn\u00a0[16]:\n\n    \nfrom Bio import AlignIO\nfrom Bio.motifs import Motif\nfrom Bio import motifs\nfrom Bio.Seq import Seq\nfrom Bio.Alphabet import IUPAC\nfrom IPython.display import Image\n\nalignment = AlignIO.read('./data/HBA.aln','clustal')\ninstance = []\n\nfor record in alignment:\n    s = Seq(str(record.seq), IUPAC.protein)\n    instance.append(s)\n\nm = motifs.create(instance)\nMotif.weblogo(m,'HBA_logo.png')\nImage('HBA_logo.png')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[16]:\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uacc4\ud1b5\uc218(phylogenetic tree) \uadf8\ub9ac\uae30\u00b6\n\n\n\n\n\nIn\u00a0[17]:\n\n    \nimport matplotlib.pyplot as plt\n%matplotlib inline\nfrom Bio import Phylo\n\ntree = Phylo.read('./data/HBA.newick', 'newick')\nPhylo.draw(tree)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEntrez \ub370\uc774\ud130 \ubca0\uc774\uc2a4 \uac80\uc0c9\u00b6\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nfrom Bio import Entrez\n\nEntrez.email = 'your@email.com'\nhandle = Entrez.esearch(db='pubmed', term='machine learning')\nrecord = Entrez.read(handle)\nprint('Pubmed\uc5d0 machine learning\ub97c \uac80\uc0c9\ud558\uba74 \ucd1d {}\uac1c\uc758 \uacb0\uacfc'.format(record['Count']))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nPubmed\uc5d0 machine learning\ub97c \uac80\uc0c9\ud558\uba74 \ucd1d 29978\uac1c\uc758 \uacb0\uacfc\n\n\n\n\n\n\n\n\n\n\n\nKEGG API \uc0ac\uc6a9\u00b6\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nfrom Bio.KEGG import REST\n\nhuman_pathways = REST.kegg_list('pathway', 'hsa').read()\n\npathways = []\nfor line in human_pathways.rstrip().split('\\n'):\n    entry, description = line.split('\\t')\n    if 'repair' in description.lower():\n        pathways.append(entry)\n        print(entry, description)\nprint(pathways)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\npath:hsa03410 Base excision repair - Homo sapiens (human)\npath:hsa03420 Nucleotide excision repair - Homo sapiens (human)\npath:hsa03430 Mismatch repair - Homo sapiens (human)\n['path:hsa03410', 'path:hsa03420', 'path:hsa03430']\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \ngenes = []\nfor pathway in pathways:\n    pathway_file = REST.kegg_get(pathway).read()\n    current_section = None\n    for line in pathway_file.rstrip().split('\\n'):\n        section = line[:12].strip()\n        if not section == '':\n            current_section = section\n            if current_section == 'GENE':\n                gene_identifiers, gene_description = line[12:].split('; ')\n                gene_id, gene_symbol = gene_identifiers.split()\n                if not gene_symbol in genes:\n                    genes.append(gene_symbol)\nprint('pathway\uc5d0 \uc5f0\uad00\ub41c \uc720\uc804\uc790\ub294 {} \uc774\ub2e4'.format(','.join(genes)))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\npathway\uc5d0 \uc5f0\uad00\ub41c \uc720\uc804\uc790\ub294 OGG1,RBX1,SSBP1 \uc774\ub2e4",
      "tags": "Biopython,Python,tutorial,\ubc14\uc774\uc624\ud30c\uc774\uc36c",
      "url": "https://partrita.github.io/posts/biopython/"
    },
    {
      "title": "96well \ubaa8\uc591\uc73c\ub85c \uc2dc\uac01\ud654\ud558\uae30",
      "text": "\ub17c\ubb38\uc744 \uc77d\ub2e4 \ubcf4\uba74 \uc704\uc758 \uadf8\ub9bc\uc758 A \ucc98\ub7fc 96well \ud615\ud0dc\ub85c \uc2dc\uac01\ud654\ud55c\uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac00\ub9cc\ud788 \uc0dd\uac01\ud574\ubcf4\uba74 \uc704\uc758 \uadf8\ub9bc\uc740 \uc0b0\uc810\ub3c4(scatter plot)\uc744 \uadf8\ub9ac\uace0 Binding \uac12\uc744 \uc810\uc758 \ud06c\uae30\ub85c \ud45c\ud604\ud558\uba74 \ub420 \uac83\uac19\uc2b5\ub2c8\ub2e4. \uc624\ub298\uc740 \uadf8\ub7f0 \uadf8\ub9bc\uc744 \ud30c\uc774\uc36c\uc73c\ub85c \uadf8\ub824\ubd05\ub2c8\ub2e4.\n\ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30\u00b6\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\nfrom IPython.display import set_matplotlib_formats\nset_matplotlib_formats('retina')\n\n\n    \n\n\n\n\n\n\n\n\ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\u00b6\uc2dc\uac01\ud654\ud560 \ub370\uc774\ud130\ub97c pandas\ub85c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \ndf = pd.read_csv('../data/20190213_test.csv')\ndf.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      HC\n      LC\n      Binding\n    \n  \n  \n    \n      44\n      DC\n      NL\n      8425\n    \n    \n      45\n      DC\n      CC\n      2700\n    \n    \n      46\n      DC\n      NC\n      20775\n    \n    \n      47\n      DC\n      DL\n      14750\n    \n    \n      48\n      DC\n      DC\n      8425\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub370\uc774\ud130\ud504\ub808\uc784\uc744 \ucd9c\ub825\ud574\ubcf4\uba74 48\uac1c\uc758 \ub370\uc774\ud130\uac00 \uc788\uace0, HC, LC, Binding \ud589\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. Binding \ud589\uc5d0 \ub300\ud574 \uae30\uc220 \ud1b5\uacc4\ubd84\uc11d\uc744 \ud574\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \ndf.describe()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Binding\n    \n  \n  \n    \n      count\n      49.000000\n    \n    \n      mean\n      13840.306122\n    \n    \n      std\n      8812.934115\n    \n    \n      min\n      2700.000000\n    \n    \n      25%\n      2700.000000\n    \n    \n      50%\n      14750.000000\n    \n    \n      75%\n      20775.000000\n    \n    \n      max\n      26800.000000\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704\uc758 \uacb0\uacfc\ub97c \ud1b5\ud574 Binding\uc758 \ucd5c\ub300\uac12\uc740 26800, \ucd5c\uc18c\uac12\uc740 2700, \ud3c9\uade0\uc740 13840\uc778\uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nSeaborn \uc0ac\uc6a9\ud558\uae30\u00b6seaborn \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud574 \uc2dc\uac01\ud654\ud574\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nplt.ylim(-1,7)\nplt.xlim(-1,7)\nax = sns.scatterplot(x=\"LC\", y=\"HC\", hue=\"Binding\", size=\"Binding\", data=df,\n                    sizes=(100, 500))\n# Put the legend out of the figure\nax.legend(loc='upper left', bbox_to_anchor=(1.04, 1), ncol=1)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n<matplotlib.legend.Legend at 0x186e5198>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub611\uac19\uc9c0\ub294 \uc54a\uc9c0\ub9cc \ube44\uc2b7\ud55c \uadf8\ub798\ud504\ub97c \uadf8\ub9b4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac8c\ub2e4\uac00 \ucf54\ub4dc\ub3c4 \uac04\ub2e8\ud569\ub2c8\ub2e4.\nMatplotlib \uc0ac\uc6a9\ud558\uae30\u00b6matplotlib\uc744 \uc0ac\uc6a9\ud574 \uad6c\ud604\ud574\ubd05\ub2c8\ub2e4. seaborn\ubcf4\ub2e4\ub294 \ubcf5\uc7a1\ud558\uc9c0\ub9cc \uc880 \ub354 \uc720\uc5f0\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nplt.scatter(\n    df['HC'].values, df['LC'].values,\n    c=df['Binding'].values, s=df['Binding'].values/50,\n    cmap='Purples')\nplt.ylim(-1,7)\nplt.xlim(-1,7)\n\ng1 = plt.scatter([],[], s=0, marker='o', color='#555555')\ng2 = plt.scatter([],[], s=200, marker='o', color='#555555')\ng3 = plt.scatter([],[], s=300, marker='o', color='#555555')\ng4 = plt.scatter([],[], s=400, marker='o', color='#555555')\n\nplt.legend((g1,g2,g3,g4),\n       ('0', '10000', '20000','30000'),\n       scatterpoints=1,\n       loc='upper left',\n       ncol=1, bbox_to_anchor=(1.04,1))\n\nplt.show()",
      "tags": "96well,Bioinformatics,Python",
      "url": "https://partrita.github.io/posts/96well-binding/"
    },
    {
      "title": "\uc8fc\ud0dd\uac00\uaca9 \uc608\uce21\ud558\uae30",
      "text": "\ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30\u00b6\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport pandas as pd\nimport numpy as np\nimport os\nimport tarfile\nfrom six.moves import urllib\nimport matplotlib.pyplot as plt\n\n# \ud56d\uc0c1 \ub3d9\uc77c\ud55c \uacb0\uacfc\ub97c \uc5bb\uae30 \uc704\ud574 random.seed \uac12\uc744 \uc124\uc815\ud55c\ub2e4\nnp.random.seed(42)\n\n# \uc8fc\ud53c\ud130 \ub178\ud2b8\ubd81 \uc548\uc5d0 \uadf8\ub9bc\uc774 \ub098\uc624\ub3c4\ub85d \uc124\uc815\n%matplotlib inline\n\n\n    \n\n\n\n\n\n\n\n0. \ubd84\uc11d\ud560 \ub370\uc774\ud130\uc14b\u00b6\uc544\ub798\uc758 \ucf54\ub4dc\ub294 \ubd84\uc11d\ud560 \ub370\uc774\ud130\uc14b\uc744 \ub85c\uceec \ub514\uc2a4\ud06c\uc5d0 \ub2e4\uc6b4\ub85c\ub4dc \ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nDOWNLOAD_ROOT = \"https://raw.githubusercontent.com/ageron/handson-ml/master/\"\nHOUSING_PATH = os.path.join(\"input\", \"housing\")\nHOUSING_URL = DOWNLOAD_ROOT + \"datasets/housing/housing.tgz\"\n\ndef fetch_housing_data(housing_url=HOUSING_URL, housing_path=HOUSING_PATH):\n    if not os.path.isdir(housing_path):\n        os.makedirs(housing_path)\n    tgz_path = os.path.join(housing_path, \"housing.tgz\")\n    urllib.request.urlretrieve(housing_url, tgz_path)\n    housing_tgz = tarfile.open(tgz_path)\n    housing_tgz.extractall(path=housing_path)\n    housing_tgz.close()\n    \nfetch_housing_data()\n\n\n    \n\n\n\n\n\n\n\n1. pandas\ub85c EDA \ud558\uae30\u00b6EDA\ub294 Exploratory data analysis\uc758 \uc900\ub9d0\ub85c, \ub370\uc774\ud130\uc14b\uc744 \ub458\ub7ec\ubcf4\uba74 \uc5b4\ub5a0\ud55c \ud2b9\uc9d5(feature)\ub4e4\uc744 \uac00\uc84c\ub294\uc9c0 \ud655\uc778\ud574\ubd04\ub2c8\ub2e4.\n1.1. \ub2e4\uc6b4\ub85c\ub4dc\ud55c CSV\ud30c\uc77c\uc744 \ubd88\ub7ec\uc640\uc11c \ud45c \ucd9c\ub825\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[27]:\n\n    \nhousing = pd.read_csv('./input/housing/housing.csv')\nhousing.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[27]:\n\n\n\n\n\n\n  \n    \n      \n      longitude\n      latitude\n      housing_median_age\n      total_rooms\n      total_bedrooms\n      population\n      households\n      median_income\n      median_house_value\n      ocean_proximity\n    \n  \n  \n    \n      20635\n      -121.09\n      39.48\n      25.0\n      1665.0\n      374.0\n      845.0\n      330.0\n      1.5603\n      78100.0\n      INLAND\n    \n    \n      20636\n      -121.21\n      39.49\n      18.0\n      697.0\n      150.0\n      356.0\n      114.0\n      2.5568\n      77100.0\n      INLAND\n    \n    \n      20637\n      -121.22\n      39.43\n      17.0\n      2254.0\n      485.0\n      1007.0\n      433.0\n      1.7000\n      92300.0\n      INLAND\n    \n    \n      20638\n      -121.32\n      39.43\n      18.0\n      1860.0\n      409.0\n      741.0\n      349.0\n      1.8672\n      84700.0\n      INLAND\n    \n    \n      20639\n      -121.24\n      39.37\n      16.0\n      2785.0\n      616.0\n      1387.0\n      530.0\n      2.3886\n      89400.0\n      INLAND\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ucd1d 20639 \uac1c\uc758 \uac1c\ubcc4 \ub370\uc774\ud130\uac00 \uc788\ub294\uac83\uacfc \uc88c\ud45c\ub97c \ub73b\ud558\ub294 longitude, latitude \ud589\uc774 \uc55e\ucabd\uc5d0 \uc788\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ub610\ud55c, \uc9d1\uc5d0 \ub300\ud55c \uc815\ubcf4\ub4e4\uc774 \uc5ec\ub7ec \ud589\uc73c\ub85c \uad6c\ubd84\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n1.2. \uae30\ucd08 \ud1b5\uacc4\ubd84\uc11d \ud558\uae30\u00b6\uc704\uc5d0\uc11c \uc0b4\ud3b4\ubcf8 \ud45c\ub294 \ub300\ubd80\ubd84 \uc218\uce58(\uc22b\uc790)\ud615\uc73c\ub85c \ub098\uc640\uc788\uc74c\uc73c\ub85c, \uac04\ub2e8\ud558\uac8c describe()\ud568\uc218\ub85c \uae30\ucd08 \ud1b5\uacc4\ubd84\uc11d\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nhousing.describe()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n\n  \n    \n      \n      longitude\n      latitude\n      housing_median_age\n      total_rooms\n      total_bedrooms\n      population\n      households\n      median_income\n      median_house_value\n    \n  \n  \n    \n      count\n      20640.000000\n      20640.000000\n      20640.000000\n      20640.000000\n      20433.000000\n      20640.000000\n      20640.000000\n      20640.000000\n      20640.000000\n    \n    \n      mean\n      -119.569704\n      35.631861\n      28.639486\n      2635.763081\n      537.870553\n      1425.476744\n      499.539680\n      3.870671\n      206855.816909\n    \n    \n      std\n      2.003532\n      2.135952\n      12.585558\n      2181.615252\n      421.385070\n      1132.462122\n      382.329753\n      1.899822\n      115395.615874\n    \n    \n      min\n      -124.350000\n      32.540000\n      1.000000\n      2.000000\n      1.000000\n      3.000000\n      1.000000\n      0.499900\n      14999.000000\n    \n    \n      25%\n      -121.800000\n      33.930000\n      18.000000\n      1447.750000\n      296.000000\n      787.000000\n      280.000000\n      2.563400\n      119600.000000\n    \n    \n      50%\n      -118.490000\n      34.260000\n      29.000000\n      2127.000000\n      435.000000\n      1166.000000\n      409.000000\n      3.534800\n      179700.000000\n    \n    \n      75%\n      -118.010000\n      37.710000\n      37.000000\n      3148.000000\n      647.000000\n      1725.000000\n      605.000000\n      4.743250\n      264725.000000\n    \n    \n      max\n      -114.310000\n      41.950000\n      52.000000\n      39320.000000\n      6445.000000\n      35682.000000\n      6082.000000\n      15.000100\n      500001.000000\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uae30\ucd08 \ud1b5\uacc4\ubd84\uc11d\uc744 \ud1b5\ud574 \ud3c9\uade0\uac12(mean), \ud45c\uc900\ud3b8\ucc28(std), \ucd5c\uc18c\uac12(min), \ucd5c\ub300\uac12(max), \uac01\uc885 \ubc31\ubd84\uc704\uc218(25%, 50% 75%) \ub4f1\uc744 \uc54c\uc218 \uc788\uc2b5\ub2c8\ub2e4.\n1.3. \ud788\uc2a4\ud1a0\uadf8\ub7a8 \uadf8\ub9ac\uae30\u00b6\uac04\ub2e8\ud55c \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc744 \uadf8\ub824 \uc804\uccb4 \ub370\uc774\ud130\uc758 \ubaa8\uc591\uc744 \uc5b4\ub5bb\uac8c \uc0dd\uacbc\ub294\uc9c0 \ud655\uc778\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nfig = housing.hist(bins=50, figsize=(20,15))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.4. \uc9c0\ub9ac\uc801 \ub370\uc774\ud130 \uc2dc\uac01\ud654\u00b6\uc0ac\uc6a9\ud55c \ub370\uc774\ud130\uc14b\uc5d0\ub294 \uac01\uac01\uc758 \uc704\ub3c4 \uacbd\ub3c4\uac12\uc774 \ub4e4\uc5b4\uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc744 \uc774\uc6a9\ud574 \uc9c0\ub9ac\uc801 \uc815\ubcf4\ub97c \uc2dc\uac01\ud654 \ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nimport matplotlib.image as mpimg\ncalifornia_img=mpimg.imread('./input/housing/california.png')\nax = housing.plot(kind=\"scatter\", x=\"longitude\", y=\"latitude\", figsize=(10,7),\n                       s=housing['population']/100, label=\"population\",\n                       c=\"median_house_value\", cmap=plt.get_cmap(),\n                       colorbar=False, alpha=0.5,\n                      )\nplt.imshow(california_img, extent=[-124.55, -113.80, 32.45, 42.05], alpha=0.6)\nprices = housing[\"median_house_value\"]\ntick_values = np.linspace(prices.min(), prices.max(), 11)\ncbar = plt.colorbar()\ncbar.ax.set_yticklabels([\"$%dk\"%(round(v/1000)) for v in tick_values], fontsize=14)\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.5. \uc0c1\uad00\uad00\uacc4 \uc870\uc0ac\u00b6\uc22b\uc790\ud615 \ud2b9\uc131\uc774 11\uac1c\uc774\ubbc0\ub85c \ub9cc\uc57d \ubaa8\ub4e0 \uc0c1\uad00\uad00\uacc4\ub97c \uc870\uc0ac\ud55c\ub2e4\uba74 \ucd1d 121\uac1c\uc758 \uadf8\ub798\ud504\uac00 \uadf8\ub824\uc9d1\ub2c8\ub2e4.\n\uadf8\ub807\uac8c \ub9ce\uc740 \uadf8\ub798\ud504\ub97c \ud558\ub098\ub85c \ud45c\ud604\ud558\uba74 \uc624\ud788\ub824 \ub354 \uc54c\uc544\ubcf4\uae30 \ud798\ub4e4\uae30 \ub54c\ubb38\uc5d0 \uc5ec\uae30\uc5d0\uc11c\ub294 \uc55e\uc11c \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc5d0\uc11c \uc0c1\uad00\uad00\uacc4\uac00 \ub192\uc544\ubcf4\uc774\ub294 \ud2b9\uc131 \uba87 \uac1c\ub9cc \ucd94\ub824\uc11c \uc2dc\uac01\ud654 \ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \nfrom pandas.tools.plotting import scatter_matrix\n\ncorr_matrix = housing.corr()\nattributes = ['median_house_value','median_income', 'total_rooms','housing_median_age']\nfig = scatter_matrix(housing[attributes], figsize = (10,10), alpha = 0.2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uacb0\uacfc\ub97c \ubcf4\uba74 \uc911\uac04 \uc18c\ub4dd(median_income)\uc774 \uc911\uac04 \uc8fc\ud0dd \uac00\uaca9(median_house_value)\uacfc \uac00\uc7a5 \uc0c1\uad00 \uad00\uacc4\uac00 \uc788\uc5b4\ubcf4\uc785\ub2c8\ub2e4.\n\uc880\ub354 \ud06c\uac8c \uc0b0\uc810\ub3c4\ub97c \uadf8\ub824\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nhousing.plot(kind=\"scatter\", x=\"median_income\", y=\"median_house_value\",\n             alpha=0.1)\nplt.axis([0, 16, 0, 550000])\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n[0, 16, 0, 550000]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2. \ub370\uc774\ud130 \uc804\ucc98\ub9ac\u00b62.1. \ud2b9\uc131 \ucd94\uac00\ud558\uae30\u00b6\uae30\uacc4\ud559\uc2b5\uc758 \uc131\ub2a5\uc744 \ub192\uc774\uae30 \uc704\ud574 \uae30\uc874\uc758 \ud2b9\uc131\uc744 \uac00\uc9c0\uace0 \ucd94\uac00\ud2b9\uc131\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \uba3c\uc800 heatmap\uc744 \uadf8\ub824 \ud2b9\uc131\uac04\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[41]:\n\n    \nimport seaborn as sns\n\ncorr = housing.corr()\n\n# Set up the matplotlib figure\nf, ax = plt.subplots(figsize=(10, 7))\n\n# Draw the heatmap with the mask and correct aspect ratio\n\nwith sns.axes_style(\"white\"):\n    sns.heatmap(corr, vmax=.3, cmap='YlGnBu', square=True, linewidths=.3)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704\uc758 \uacb0\uacfc\ub97c \ud1b5\ud574 total_rooms, households, total_bedrooms, population\uac04\uc758 \ub192\uc740 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\ub2e4\uc74c\uacfc \uac19\uc740 \ud2b9\uc131\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4.\n\nrooms_per_household\nbedrooms_per_room\npopulation_per_household\n\n\n\n\n\n\n\nIn\u00a0[59]:\n\n    \nhousing[\"rooms_per_household\"] = housing[\"total_rooms\"]/housing[\"households\"]\nhousing[\"bedrooms_per_room\"] = housing[\"total_bedrooms\"]/housing[\"total_rooms\"]\nhousing[\"population_per_household\"]=housing[\"population\"]/housing[\"households\"]\n\n\n    \n\n\n\n\n\n\n\nrooms_per_household\uc640 \ud3c9\uade0 \uc8fc\ud0dd \uac00\uaca9\uc758 \uc0b0\uc810\ub3c4\ub97c \uadf8\ub824\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nhousing.plot(kind=\"scatter\", x=\"rooms_per_household\", y=\"median_house_value\",\n             alpha=0.2)\nplt.axis([0, 5, 0, 520000])\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.2. one-hot encoding\u00b6\ub370\uc774\ud130\uc14b\uc758 ocean_proximity\ud589\uc740 \uc218\uce58\ud615 \ub370\uc774\ud130\uac00 \uc544\ub2d9\ub2c8\ub2e4. \ub530\ub77c\uc11c \uae30\uacc4\ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574 get_dummies\uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574 one-hot encoding\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[60]:\n\n    \ndf = pd.get_dummies(data=housing, columns=['ocean_proximity'])\n\n\n    \n\n\n\n\n\n\n\n2.3. \uacb0\uce21\uce58\uc758 \ucc98\ub9ac\u00b6\ub370\uc774\ud130\uc14b\uc758 \uacb0\uce21\uac12\uc744 \uac01\uac01\uc758 \ud589\uc758 \ud3c9\uade0\uac12\uc73c\ub85c \uce58\ud658\ud574\uc8fc\ub294 \uc791\uc5c5\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[61]:\n\n    \nfrom sklearn.preprocessing import Imputer\n\nimputer = Imputer(strategy=\"median\")\n\n# housing_num = housing.drop('ocean_proximity', axis=1)\n# \ub2e4\ub978 \ubc29\ubc95: housing_num = housing.select_dtypes(include=[np.number])\nimputer.fit(df)\nX = imputer.transform(df)\nhousing_tr = pd.DataFrame(X, columns=df.columns)\nhousing_tr.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[61]:\n\n\n\n\n\n\n  \n    \n      \n      longitude\n      latitude\n      housing_median_age\n      total_rooms\n      total_bedrooms\n      population\n      households\n      median_income\n      median_house_value\n      rooms_per_household\n      bedrooms_per_room\n      population_per_household\n      ocean_proximity_<1H OCEAN\n      ocean_proximity_INLAND\n      ocean_proximity_ISLAND\n      ocean_proximity_NEAR BAY\n      ocean_proximity_NEAR OCEAN\n    \n  \n  \n    \n      20635\n      -121.09\n      39.48\n      25.0\n      1665.0\n      374.0\n      845.0\n      330.0\n      1.5603\n      78100.0\n      5.045455\n      0.224625\n      2.560606\n      0.0\n      1.0\n      0.0\n      0.0\n      0.0\n    \n    \n      20636\n      -121.21\n      39.49\n      18.0\n      697.0\n      150.0\n      356.0\n      114.0\n      2.5568\n      77100.0\n      6.114035\n      0.215208\n      3.122807\n      0.0\n      1.0\n      0.0\n      0.0\n      0.0\n    \n    \n      20637\n      -121.22\n      39.43\n      17.0\n      2254.0\n      485.0\n      1007.0\n      433.0\n      1.7000\n      92300.0\n      5.205543\n      0.215173\n      2.325635\n      0.0\n      1.0\n      0.0\n      0.0\n      0.0\n    \n    \n      20638\n      -121.32\n      39.43\n      18.0\n      1860.0\n      409.0\n      741.0\n      349.0\n      1.8672\n      84700.0\n      5.329513\n      0.219892\n      2.123209\n      0.0\n      1.0\n      0.0\n      0.0\n      0.0\n    \n    \n      20639\n      -121.24\n      39.37\n      16.0\n      2785.0\n      616.0\n      1387.0\n      530.0\n      2.3886\n      89400.0\n      5.254717\n      0.221185\n      2.616981\n      0.0\n      1.0\n      0.0\n      0.0\n      0.0\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n2.4. \ub370\uc774\ud130\uc14b \ub808\uc774\ube14 \ubd84\ub9ac\ud558\uae30\u00b6\uae30\uacc4\ud559\uc2b5\uc744 \uc704\ud574 \ub370\uc774\ud130\uc14b\uc758 \ud3c9\uade0\uc8fc\ud0dd\uac00\uaca9(median_house_value)\ud589\uc744 \ubd84\ub9ac\ud574 \ub808\uc774\ube14\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[62]:\n\n    \nhousing_labels = housing_tr[\"median_house_value\"].copy() # \ub808\uc774\ube14\ub85c \uc0ac\uc6a9\nhousing_tr.drop(\"median_house_value\", axis=1, inplace = True) # \ub808\uc774\ube14 \uc0ad\uc81c\n\n\n    \n\n\n\n\n\n\n\n2.5. \ub370\uc774\ud130\uc14b \uc815\uaddc\ud654\u00b6\uae30\uacc4\ud559\uc2b5\uc758 \uc131\ub2a5\uc744 \ub192\uc774\uae30 \uc704\ud574 \ub370\uc774\ud130\uc14b\uc744 \uc815\uaddc\ud654\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[63]:\n\n    \nfrom sklearn.preprocessing import StandardScaler\n\nscaler = StandardScaler()\n# scaler.fit(housing_tr)\nscaled_df = scaler.fit_transform(housing_tr)\nscaled_df.shape\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[63]:\n\n\n\n\n\n(20640, 16)\n\n\n\n\n\n\n\n\n\n\n\n\ucd1d \ub370\uc774\ud130\uc758 \uc22b\uc790\ub294 20640\uc774\uace0 16\uac1c\uc758 \ud2b9\uc131\uc73c\ub85c \uad6c\uc131\ub41c \ubc30\uc5f4\uc784\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n2.6. \ud559\uc2b5\uc6a9, \ud655\uc778\uc6a9 \ub370\uc774\ud130 \ub098\ub204\uae30\u00b6\ubb34\uc791\uc704 \uc0d8\ud50c\ub9c1\uc744 \ud1b5\ud574 \ub370\uc774\ud130\ub97c \ud559\uc2b5\uc6a9\uacfc \ud655\uc778\uc6a9\uc73c\ub85c \ub098\ub215\ub2c8\ub2e4. \ud559\uc2b5\uc6a9\uc744 80% \ud655\uc778\uc6a9\uc740 20% \ube44\uc728\ub85c \ubd84\ub9ac\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[64]:\n\n    \nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(scaled_df, housing_labels, test_size=0.2, random_state=42)\nprint(X_train.shape, X_test.shape)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n(16512, 16) (4128, 16)\n\n\n\n\n\n\n\n\n\n\n\n\ud559\uc2b5\uc6a9\uc740 16512\uac1c \ud655\uc778\uc6a9\uc740 4128\uac1c \uc785\ub2c8\ub2e4.\n3. \uae30\uacc4\ud559\uc2b5 \ud558\uae30\u00b63.1. \uc120\ud615\ud68c\uadc0 \ubaa8\ub378\u00b6\uc120\ud615\ud68c\uadc0\ub97c \uc0ac\uc6a9\ud55c \uae30\uacc4\ud559\uc2b5\uc73c\ub85c \ud3c9\uade0\uc8fc\ud0dd \uac00\uaca9\uc744 \uc608\uce21\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[68]:\n\n    \nfrom sklearn.linear_model import LinearRegression\n\nlin_reg = LinearRegression(n_jobs=-1) # -1 means use all cpu core\nlin_reg.fit(X_train, y_train)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[68]:\n\n\n\n\n\nLinearRegression(copy_X=True, fit_intercept=True, n_jobs=-1, normalize=False)\n\n\n\n\n\n\n\n\n\n\n\n\uc131\ub2a5\uc758 \ud3c9\uac00\ub97c \uc704\ud574 \uc608\uce21\uac12\uacfc \uc2e4\uc81c\uac12\uc758 RMS\ub97c \uad6c\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[70]:\n\n    \nfrom sklearn.metrics import mean_squared_error\ny_pred = lin_reg.predict(X_test)\nrms = np.sqrt(mean_squared_error(y_test, y_pred))\nprint(rms)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n69136.3530563\n\n\n\n\n\n\n\n\n\n\n\n\ub300\ubd80\ubd84\uc758 \uc8fc\ud0dd\uc758 \uc911\uac04\uac00\uaca9\uc774 120,000 ~ 265,000$ \uc778\ub370 \uc624\ucc28\uac00 \uc57d 70,000$ \uc778\uac83\uc740 \ub9cc\uc871\uc2a4\ub7fd\uc9c0 \ubabb\ud569\ub2c8\ub2e4.\n\uc774\uc81c \ub2e4\ub978 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud574 \uae30\uacc4\ud559\uc2b5\uc744 \ud574\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\n\n3.2. \uc758\uc0ac\uacb0\uc815\ud2b8\ub9ac \ubaa8\ub378\u00b6DecisionTreeRegressor \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud574\ubcf4\uace0 \uc131\ub2a5\uc740 \ub3d9\uc77c\ud558\uac8c RMS\ub97c \uad6c\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[73]:\n\n    \nfrom sklearn.tree import DecisionTreeRegressor\n\ntree_reg = DecisionTreeRegressor(n_jobs = -1)\ntree_reg.fit(X_train, y_train)\n\ny_pred = tree_reg.predict(X_test)\nrms = np.sqrt(mean_squared_error(y_test, y_pred))\nprint(rms)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n69856.8366586\n\n\n\n\n\n\n\n\n\n\n\n\uc624\ud788\ub824 \ub354 \ub098\uc05c \uacb0\uacfc\uac00 \ub098\uc654\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 \uc758\uc0ac\uacb0\uc815\ud2b8\ub9ac \ubaa8\ub378\uc774 \uacfc\uc811\ud569(overfitting)\ub418\uc5c8\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n\uc774\uc81c \ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud574\ubd05\ub2c8\ub2e4.\n3.3 \ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8 \ubaa8\ub378\u00b6\uc131\ub2a5\uc758 \ud3c9\uac00\ub294 RMS\ub97c \uce21\uc815\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[74]:\n\n    \nfrom sklearn.ensemble import RandomForestRegressor\nforest_reg = RandomForestRegressor(n_jobs = -1)\nforest_reg.fit(X_train, y_train)\n\ny_pred = forest_reg.predict(X_test)\nrms = np.sqrt(mean_squared_error(y_test, y_pred))\nprint(rms)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n52495.5185404\n\n\n\n\n\n\n\n\n\n\n\n\uac00\uc7a5 \ub098\uc740 \uc131\ub2a5\uc744 \ubcf4\uc5ec\uc8fc\uae34 \ud558\uc9c0\ub9cc \uadf8\ub9ac \ub9cc\uc871\uc2a4\ub7fd\uc9c0\ub294 \ubabb\ud569\ub2c8\ub2e4. \ub2e4\ub978 \ubaa8\ub378\uc778 \uc11c\ud3ec\ud2b8 \ubca1\ud130 \uba38\uc2e0(support vector machine, SVM)\ub3c4 \uc0ac\uc6a9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n3.4. \uc11c\ud3ec\ud2b8 \ubca1\ud130 \uba38\uc2e0\u00b6\n\n\n\n\n\nIn\u00a0[77]:\n\n    \nfrom sklearn.svm import SVR\n\nsvm_reg = SVR(kernel=\"linear\")\nsvm_reg.fit(X_train, y_train)\n\ny_pred = svm_reg.predict(X_test)\nrms = np.sqrt(mean_squared_error(y_test, y_pred))\nprint(rms)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n106532.353525\n\n\n\n\n\n\n\n\n\n\n\n\uac00\uc7a5 \ub098\uc05c \uc218\uce58\ub97c \ubcf4\uc5ec\uc8fc\ub124\uc694. \uc9c0\uae08 \uae4c\uc9c0 \uc54c\uc544\ubcf8 \ubaa8\ub378\uc911\uc5d0 \ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8\uac00 \uac00\uc7a5 \ub098\uc740 \uc131\ub2a5\uc744 \ubcf4\uc785\ub2c8\ub2e4.\n4. \uae30\uacc4\ud559\uc2b5 \ucd5c\uc801\ud654\ud558\uae30\u00b6\ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8 \ubaa8\ub378\uc758 \ub9e4\uac1c\ubcc0\uc218(parameter)\ub97c \ubcc0\uacbd\ud574 \uc131\ub2a5\uc744 \ub04c\uc5b4\uc62c\ub824 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n4.1 GridSearch\u00b6\ubcc0\uacbd\ud558\uace0 \uc2f6\uc740 \ub9e4\uac1c\ubcc0\uc218\uc758 \ubaa9\ub85d\uc744 \ub9cc\ub4e4\uc5b4 \uac01\uac01\uc758 \uc131\ub2a5\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.\n\uc774\uac83\uc740 \uc2dc\uac04\uc774 \ub9ce\uc774 \uac78\ub9ac\ub294 \uc791\uc5c5 \uc785\ub2c8\ub2e4.\n\n\n\n\n\n\n\nIn\u00a0[78]:\n\n    \nfrom sklearn.model_selection import GridSearchCV\n\nparam_grid = [\n    # try 12 (3\u00d74) combinations of hyperparameters\n    {'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]},\n    # then try 6 (2\u00d73) combinations with bootstrap set as False\n    {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]},\n  ]\n\nforest_reg = RandomForestRegressor(random_state=42, n_jobs=-1)\n# train across 5 folds, that's a total of (12+6)*5=90 rounds of training \ngrid_search = GridSearchCV(forest_reg, param_grid, cv=5,\n                           scoring='neg_mean_squared_error', return_train_score=True)\ngrid_search.fit(X_train, y_train)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[78]:\n\n\n\n\n\nGridSearchCV(cv=5, error_score='raise',\n       estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n           max_features='auto', max_leaf_nodes=None,\n           min_impurity_decrease=0.0, min_impurity_split=None,\n           min_samples_leaf=1, min_samples_split=2,\n           min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n           oob_score=False, random_state=42, verbose=0, warm_start=False),\n       fit_params=None, iid=True, n_jobs=1,\n       param_grid=[{'n_estimators': [3, 10, 30], 'max_features': [2, 4, 6, 8]}, {'bootstrap': [False], 'n_estimators': [3, 10], 'max_features': [2, 3, 4]}],\n       pre_dispatch='2*n_jobs', refit=True, return_train_score=True,\n       scoring='neg_mean_squared_error', verbose=0)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[86]:\n\n    \ncvres =  grid_search.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(np.sqrt(-mean_score), params)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n63746.5574472 {'max_features': 2, 'n_estimators': 3}\n54818.1369471 {'max_features': 2, 'n_estimators': 10}\n52761.066563 {'max_features': 2, 'n_estimators': 30}\n60211.8968318 {'max_features': 4, 'n_estimators': 3}\n52034.9078927 {'max_features': 4, 'n_estimators': 10}\n49983.1654019 {'max_features': 4, 'n_estimators': 30}\n57632.991143 {'max_features': 6, 'n_estimators': 3}\n51015.4104325 {'max_features': 6, 'n_estimators': 10}\n49392.4163034 {'max_features': 6, 'n_estimators': 30}\n58940.3719018 {'max_features': 8, 'n_estimators': 3}\n51942.3176781 {'max_features': 8, 'n_estimators': 10}\n49959.1368802 {'max_features': 8, 'n_estimators': 30}\n62059.1461145 {'bootstrap': False, 'max_features': 2, 'n_estimators': 3}\n53952.4642105 {'bootstrap': False, 'max_features': 2, 'n_estimators': 10}\n58047.57318 {'bootstrap': False, 'max_features': 3, 'n_estimators': 3}\n51474.6992514 {'bootstrap': False, 'max_features': 3, 'n_estimators': 10}\n59148.5539952 {'bootstrap': False, 'max_features': 4, 'n_estimators': 3}\n51707.4776245 {'bootstrap': False, 'max_features': 4, 'n_estimators': 10}\n\n\n\n\n\n\n\n\n\n\n\n\uacb0\uacfc\ub97c \ud45c\ub85c \ucd9c\ub825\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[87]:\n\n    \ncv = pd.DataFrame(grid_search.cv_results_)\ncv.head()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[87]:\n\n\n\n\n\n\n  \n    \n      \n      mean_fit_time\n      mean_score_time\n      mean_test_score\n      mean_train_score\n      param_bootstrap\n      param_max_features\n      param_n_estimators\n      params\n      rank_test_score\n      split0_test_score\n      ...\n      split2_test_score\n      split2_train_score\n      split3_test_score\n      split3_train_score\n      split4_test_score\n      split4_train_score\n      std_fit_time\n      std_score_time\n      std_test_score\n      std_train_score\n    \n  \n  \n    \n      0\n      0.133629\n      0.103405\n      -4.063624e+09\n      -1.094790e+09\n      NaN\n      2\n      3\n      {'max_features': 2, 'n_estimators': 3}\n      18\n      -3.912718e+09\n      ...\n      -4.054892e+09\n      -1.131086e+09\n      -4.054280e+09\n      -1.092380e+09\n      -4.397559e+09\n      -1.104997e+09\n      0.000421\n      0.000162\n      1.797902e+08\n      2.398293e+07\n    \n    \n      1\n      0.145697\n      0.106882\n      -3.005028e+09\n      -5.738667e+08\n      NaN\n      2\n      10\n      {'max_features': 2, 'n_estimators': 10}\n      11\n      -2.965064e+09\n      ...\n      -3.036337e+09\n      -5.956773e+08\n      -2.967483e+09\n      -5.805910e+08\n      -3.118674e+09\n      -5.775896e+08\n      0.000452\n      0.000160\n      6.549213e+07\n      1.593803e+07\n    \n    \n      2\n      0.272286\n      0.116512\n      -2.783730e+09\n      -4.358046e+08\n      NaN\n      2\n      30\n      {'max_features': 2, 'n_estimators': 30}\n      9\n      -2.783921e+09\n      ...\n      -2.813139e+09\n      -4.470262e+08\n      -2.722224e+09\n      -4.370232e+08\n      -2.861313e+09\n      -4.341716e+08\n      0.001962\n      0.000833\n      5.049988e+07\n      8.623569e+06\n    \n    \n      3\n      0.133654\n      0.103288\n      -3.625473e+09\n      -9.618490e+08\n      NaN\n      4\n      3\n      {'max_features': 4, 'n_estimators': 3}\n      16\n      -3.798650e+09\n      ...\n      -3.783640e+09\n      -9.712237e+08\n      -3.299407e+09\n      -9.286709e+08\n      -3.630501e+09\n      -9.372133e+08\n      0.000599\n      0.000177\n      1.796931e+08\n      2.476000e+07\n    \n    \n      4\n      0.205908\n      0.106540\n      -2.707632e+09\n      -5.113191e+08\n      NaN\n      4\n      10\n      {'max_features': 4, 'n_estimators': 10}\n      8\n      -2.697739e+09\n      ...\n      -2.769564e+09\n      -5.220880e+08\n      -2.671836e+09\n      -5.201207e+08\n      -2.693382e+09\n      -4.987163e+08\n      0.048003\n      0.000372\n      3.292795e+07\n      1.029301e+07\n    \n  \n\n5 rows \u00d7 23 columns\n\n\n\n\n\n\n\n\n\n\n\n\n\uac00\uc7a5 \uc88b\uc740 \ub9e4\uac1c\ubcc0\uc218\uc758 \uac12\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4. \uc774\ub54c\uc758 \uc131\ub2a5(RMS)\uac12\uc740 49392.4163034 \uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[82]:\n\n    \ngrid_search.best_params_\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[82]:\n\n\n\n\n\n{'max_features': 6, 'n_estimators': 30}\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[83]:\n\n    \ngrid_search.best_estimator_\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[83]:\n\n\n\n\n\nRandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n           max_features=6, max_leaf_nodes=None, min_impurity_decrease=0.0,\n           min_impurity_split=None, min_samples_leaf=1,\n           min_samples_split=2, min_weight_fraction_leaf=0.0,\n           n_estimators=30, n_jobs=-1, oob_score=False, random_state=42,\n           verbose=0, warm_start=False)\n\n\n\n\n\n\n\n\n\n\n\n4.3. \uc131\ub2a5\uc5d0 \uac00\uc7a5 \uc601\ud5a5\uc8fc\ub294 \ud2b9\uc131\u00b6gridsearch\uc5d0\uc11c \uac00\uc7a5 \uc88b\uc740 \uc131\ub2a5\uc758 \ubaa8\ub378\uc744 \uac00\uc9c0\uace0 \uc131\ub2a5\uc5d0 \uac00\uc7a5 \ud070 \uc601\ud5a5\uc744 \uc8fc\ub294 \ud2b9\uc131\uc744 \ud655\uc778\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[94]:\n\n    \nfeature_importances = grid_search.best_estimator_.feature_importances_\nplt.bar(range(len(feature_importances)), feature_importances)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[94]:\n\n\n\n\n\n<Container object of 16 artists>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n8\ubc88\uc9f8(0\ubd80\ud130 \uc2dc\uc791\ud558\uae30 \ub54c\ubb38)\uc758 \uac12\uc774 \uac00\uc7a5 \ud070 \uc601\ud5a5\uc744 \uc8fc\ub294\ub370, \uc774\uac83\uc740 \ud3c9\uade0\uc218\uc785(median_income)\uc5d0 \ub300\ud55c \uac12\uc785\ub2c8\ub2e4.\n4.2. RandomizedSearch\u00b6Gridsearch\ub294 \uacc4\uc0b0\uc2dc\uac04\uc774 \uc544\uc8fc \uc62c\ub798\uac78\ub9ac\uae30 \ub54c\ubb38\uc5d0 \ucd5c\uadfc\uc5d0\ub294 RandomizedSearch \ubc29\ubc95\uc73c\ub85c \ucd5c\uc801\ud654\ub97c \ub9ce\uc774 \uc9c4\ud589\ud569\ub2c8\ub2e4. \uc774\ub984\uc5d0\uc11c \uc54c \uc218 \uc788\ub4ef, \uc0ac\uc6a9\uc790\uac00 \ub9e4\uac1c\ubcc0\uc218\uc758 \ubc94\uc704\ub97c \uc9c0\uc815\ud574\uc8fc\uba74 \ubb34\uc791\uc704\ub85c \ub9e4\uac1c\ubcc0\uc218\ub97c \uc870\ud569\ud55c \uc131\ub2a5\uc744 \uce21\uc815\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[84]:\n\n    \nfrom sklearn.model_selection import RandomizedSearchCV\nfrom scipy.stats import randint\n\nparam_distribs = {\n        'n_estimators': randint(low=1, high=200),\n        'max_features': randint(low=1, high=8),\n    }\n\nforest_reg = RandomForestRegressor(random_state=42, n_jobs=-1)\nrnd_search = RandomizedSearchCV(forest_reg, param_distributions=param_distribs,\n                                n_iter=10, cv=5, scoring='neg_mean_squared_error', random_state=42)\nrnd_search.fit(X_train, y_train)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[84]:\n\n\n\n\n\nRandomizedSearchCV(cv=5, error_score='raise',\n          estimator=RandomForestRegressor(bootstrap=True, criterion='mse', max_depth=None,\n           max_features='auto', max_leaf_nodes=None,\n           min_impurity_decrease=0.0, min_impurity_split=None,\n           min_samples_leaf=1, min_samples_split=2,\n           min_weight_fraction_leaf=0.0, n_estimators=10, n_jobs=-1,\n           oob_score=False, random_state=42, verbose=0, warm_start=False),\n          fit_params=None, iid=True, n_iter=10, n_jobs=1,\n          param_distributions={'n_estimators': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7fe9181981d0>, 'max_features': <scipy.stats._distn_infrastructure.rv_frozen object at 0x7fe918104898>},\n          pre_dispatch='2*n_jobs', random_state=42, refit=True,\n          return_train_score='warn', scoring='neg_mean_squared_error',\n          verbose=0)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[88]:\n\n    \ncvres = rnd_search.cv_results_\nfor mean_score, params in zip(cvres[\"mean_test_score\"], cvres[\"params\"]):\n    print(np.sqrt(-mean_score), params)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n49093.7903483 {'max_features': 7, 'n_estimators': 180}\n51594.3819541 {'max_features': 5, 'n_estimators': 15}\n50107.6001672 {'max_features': 3, 'n_estimators': 72}\n50577.2720048 {'max_features': 5, 'n_estimators': 21}\n49181.7494258 {'max_features': 7, 'n_estimators': 122}\n50131.1870262 {'max_features': 3, 'n_estimators': 75}\n50001.880295 {'max_features': 3, 'n_estimators': 88}\n49438.7625614 {'max_features': 5, 'n_estimators': 100}\n49887.3160204 {'max_features': 3, 'n_estimators': 150}\n64777.9799569 {'max_features': 5, 'n_estimators': 2}\n\n\n\n\n\n\n\n\n\n\n\n\uac00\uc7a5 \uc88b\uc740 \uc131\ub2a5\uc758 \uacb0\uacfc\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[95]:\n\n    \nfinal_model = rnd_search.best_estimator_\ny_pred = final_model.predict(X_test)\nrms = np.sqrt(mean_squared_error(y_test, y_pred))\nprint(rms)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n48434.3695832\n\n\n\n\n\n\n\n\n\n\n\n5. \ub9c8\uce58\uba70\u00b6\uae30\uacc4\ud559\uc2b5\uc73c\ub85c \uce98\ub9ac\ud3ec\ub2c8\uc544\uc758 \uc8fc\ud0dd\uac00\uaca9\uc744 \uc608\uce21\ud574\ubcf4\ub294 \uac83\uc744 \uc0b4\ud3b4\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uacb0\ub860\uc801\uc73c\ub85c \uc8fc\ud0dd\uac00\uaca9\uc5d0 \uac00\uc7a5 \uc601\ud5a5\uc744 \uc8fc\ub294 \ud2b9\uc131\uc740 \ud3c9\uade0\uc18c\ub4dd\uc774\uc5c8\uc73c\uba70, \uc608\uce21 \uc624\ucc28\ub294 \uc57d 48434$ \uc785\ub2c8\ub2e4.",
      "tags": "machine learning,Python,\uc608\uce21,\uc8fc\ud0dd\uac00\uaca9,\uce98\ub9ac\ud3ec\ub2c8\uc544",
      "url": "https://partrita.github.io/posts/predict-housing/"
    },
    {
      "title": "Cloning_with_pyDNA",
      "text": "_             \n                | |            \n ____  _   _  __| |___   __ ___\n|  _ \\| | | |/ _  |  _ \\(____ |\n| |_| | |_| ( (_| | | | / ___ |\n|  __/ \\__  |\\____|_| |_\\_____|\n|_|   (____/\n\nPydna \ud30c\uc774\uc36c \ud328\ud0a4\uc9c0\ub294 \ubd84\uc790 \uc0dd\ubb3c\ud559\uc758 \ud074\ub85c\ub2dd\uc744 \ub3c4\uc640\uc90d\ub2c8\ub2e4. \uc81c\uacf5\ud558\ub294 \uae30\ub2a5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\nRestriction digestion\nLigation\nPCR\nPrimer design\nGibson assembly\nGolden gate assembly\nHomologous recombination\nGel electrophoresis of DNA with generation of gel images\n\nPCR simulation\u00b6\ud558\ub098 \uc608\ub97c \ub4e4\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub450 \uac00\uc9c0 PCR\uc744 \uc9c4\ud589\ud574\ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4 \uac01\uac01 C3, C5\ub77c\uace0 \uc774\ub984\uc744 \ubd99\uc600\uad6c\uc694. C3\ub294 \uc815\uc0c1\uc801\uc778 PCR \ubc18\uc751\uc774 \uac00\ub2a5\ud558\uace0, C5\ub294 Primer\uc5d0 \ubb38\uc81c\uac00 \uc788\uc5b4 PCR\uc774 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[23]:\n\n    \n# \ud544\uc694\ud55c pydna \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\nimport pydna.parsers as parsers\nfrom pydna.amplify import pcr\n\n\n    \n\n\n\n\n\n\n\n\uc11c\uc5f4 \ubd88\ub7ec\uc624\uae30\u00b6\uc0ac\uc6a9\ub41c \uc11c\uc5f4\uc740 ape \ud30c\uc77c\ub85c \uc800\uc7a5\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\n\nIn\u00a0[\u00a0]:\n\n    \n# template template loading\nC3 = pydna.parsers.parse('CEACAM3.ape',ds=True)\nC3_F = pydna.parsers.parse_primers('C3_F.ape')\nC3_R = pydna.parsers.parse_primers('C3_R.ape')\n\n\n    \n\n\n\n\n\n\n\nPCR \uc9c4\ud589\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[24]:\n\n    \n# PCR\nC3_pcr_prod = pcr(C3_F,C3_R,C3)\n\n\n    \n\n\n\n\n\n\n\nAgarose gel electrophoresis \uacb0\uacfc \uc608\uce21\u00b6\n\n\n\n\n\nIn\u00a0[25]:\n\n    \n%matplotlib inline\nfrom pydna.gel import weight_standard_sample, Gel\nst = weight_standard_sample('1kb+_GeneRuler')\nGel([ st,[C3_pcr_prod]] , gel_len=16).run()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nPCR \uc870\uac74 \uc608\uce21\u00b6\uc77c\ubc18\uc801\uc778 taq polymerase PCR\uacfc pFu\ub97c \uc0ac\uc6a9\ud55c PCR\uc758 \uc870\uac74\uc744 \uc608\uce21\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\uc77c\ubc18 PCR\u00b6\n\n\n\n\n\nIn\u00a0[26]:\n\n    \n# general PCR \nprint(C3_pcr_prod.program())\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\nTaq (rate 30 nt/s) 35 cycles             |1325bp\n95.0\u00b0C    |95.0\u00b0C                 |      |Tm formula: Biopython Tm_NN\n|_________|_____          72.0\u00b0C  |72.0\u00b0C|SaltC 50mM\n| 03min00s|30s  \\         ________|______|Primer1C 1.0\u00b5M\n|         |      \\ 58.6\u00b0C/ 0min40s| 5min |Primer2C 1.0\u00b5M\n|         |       \\_____/         |      |GC 54%\n|         |         30s           |      |4-12\u00b0C\n\n\n\n\n\n\n\n\n\n\n\nPfu PCR\u00b6\n\n\n\n\n\nIn\u00a0[27]:\n\n    \n# Pfu PCR\nprint(C3_pcr_prod.dbd_program())\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\nPfu-Sso7d (rate 15s/kb)                 |1325bp\nThree-step|          30 cycles   |      |Tm formula: Pydna tmbresluc\n98.0\u00b0C    |98.0\u00b0C                |      |SaltC 50mM\n__________|_____          72.0\u00b0C |72.0\u00b0C|Primer1C 1.0\u00b5M\n00min30s  |10s  \\ 58.0\u00b0C ________|______|Primer2C 1.0\u00b5M\n          |      \\______/ 0min19s|10min |GC 54%\n          |        10s           |      |4-12\u00b0C\n\n\n\n\n\n\n\n\n\n\n\n\nPrimer anealing \uc608\uce21\u00b6Primer\uac00 template DNA\uc5d0 \uc5b4\ub5bb\uac8c \ubd99\ub294\uc9c0\ub97c \uc608\uc0c1\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[28]:\n\n    \n# anealing results\nprint(C3_pcr_prod.figure())\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n         5ATGGGGCCCCCCTTGGC...AAAGGAGATGTGGCTTCT3\n                              |||||||||||||||||| tm 53.9 (dbd) 58.1\n                             3TTTCCTCTACACCGAAGATGCAGCTG5\n5GACAAGCCTATGGGGCCCCCCTTGGC3\n          ||||||||||||||||| tm 65.9 (dbd) 75.1\n         3TACCCCGGGGGGAACCG...TTTCCTCTACACCGAAGA5\n\n\n\n\n\n\n\n\n\n\n\n\ucd94\uac00\uc801\uc73c\ub85c C5\uc5d0 \ub300\ud55c Anealing\uc744 \uc608\uce21\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[29]:\n\n    \n# C5 PCR\nC5 = parsers.parse('CEACAM5.ape',ds=True)\nC5_F = parsers.parse_primers('Cyno_C5-F.ape')\nC5_R = parsers.parse_primers('Cyno_C5-R.ape')\nC5_pcr_prod = pcr(C5_F,C5_R,C5)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n---------------------------------------------------------------------------\nException                                 Traceback (most recent call last)\n<ipython-input-29-2ab9477161e8> in <module>()\n      3 C5_F = parsers.parse_primers('Cyno_C5-F.ape')\n      4 C5_R = parsers.parse_primers('Cyno_C5-R.ape')\n----> 5 C5_pcr_prod = pcr(C5_F,C5_R,C5)\n\nC:\\python\\envs\\py3\\lib\\site-packages\\pydna-2.0.2-py3.5.egg\\pydna\\amplify.py in pcr(*args, **kwargs)\n    451             return anneal_primers.products[0]\n    452         elif len(anneal_primers.products) == 0:\n--> 453             raise Exception(\"No PCR products! {}\".format(anneal_primers.report()))\n    454         else:\n    455             raise Exception(\"PCR not specific! {}\".format(anneal_primers.report()))\n\nException: No PCR products! Template CEACAM5 2118 nt linear:\nPrimer New_DNA anneals forward at position 18\n\nNo reverse primers anneal...\n\n\n\n\n\n\n\n\n\n\n\uc774\ub7f0 \uc5d0\ub7ec\uac00 \ub098\ub294\uad70\uc694.\nNo reverse primers anneal...\n\n\uc0ac\uc6a9\ub41c reverse primer\uac00 \uc798\ubabb\ub418\uc5c8\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4.\n\ub9c8\uce58\uba70\u00b6\uc704\uc5d0\uc11c \uc0b4\ud3b4\ubcf8 \uae30\ub2a5\ub4e4\uc740 \ub2e4\ub978 \uc0c1\uc6a9 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uc27d\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294\uac83\ub4e4\uc785\ub2c8\ub2e4. \uadf8\ub7fc\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 pydna\uac00 \uac00\uc9c0\ub294 \uac15\uc810\uc740 \uc790\ub3d9\ud654\uac00 \uc27d\ub2e4\ub294\ub370 \uc788\uc2b5\ub2c8\ub2e4. \uc218\ubc31\uac1c\uc758 \ud074\ub85c\ub2dd\uc744 \uc9c4\ud589\ud574\uc57c \ud560\ub54c\ub294 \ub9c8\uc6b0\uc2a4\ud074\ub9ad\ub9cc\uc73c\ub85c\ub294 \uc5b4\ub835\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ub610\ud55c \uacf5\uc2dd\ubb38\uc11c\ub97c \ucc38\uace0 \ud558\uc2dc\uba74 \ub354 \ub2e4\uc591\ud55c \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.",
      "tags": "Bioinformatics",
      "url": "https://partrita.github.io/posts/pydna/"
    },
    {
      "title": "ELISA \ubd84\uc11d\ud558\uae30",
      "text": "4PL\uc740 ELISA \uc2e4\ud5d8\uc5d0\uc11c standard curve\ub97c \uadf8\ub9b4\ub54c \uac00\uc7a5 \ud754\ud558\uac8c \uc0ac\uc6a9\ub418\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.\uc624\ub298\uc740 ELISA \ub370\uc774\ud130\uc5d0 \uc0ac\uc6a9\ub418\ub294 4 Parameter Logistic(\uc774\ud558,4PL) Regression\uc744 \ud30c\uc774\uc36c\uc744 \uac00\uc9c0\uace0 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n0. ELISA?\u00b6Enzyme-linked immunosorbent assay\uc758 \uc57d\uc790\uc778 ELISA\ub294 \ud56d\uccb4 \ud56d\uc6d0 \ubc18\uc751\uc744 \uc774\uc6a9\ud574 \ubaa9\uc801 \ub2e8\ubc31\uc9c8\uc758 \ud65c\uc131\uc774\ub098 \uacb0\ud569\ub825\uc744 \uc815\ub7c9\uc801\uc73c\ub85c \uce21\uc815\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4. \uc544\uc8fc \uae34 \uc5ed\uc0ac\uc640 \uc804\ud1b5\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uac83\uc73c\ub85c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc704\ud0a4\ud53c\ub514\uc544\ub97c \ucc38\uace0 \ud558\uc138\uc694.\n1. Four Parameter Logistic (4PL) Regression\u00b6\ub9ce\uc740 \uc0dd\ubb3c\ud559\uc801 \ub370\uc774\ud130\ub4e4\uc740 \uac04\ub2e8\ud55c \uc120\ud615\ud68c\uadc0 \ubaa8\ub378\uacfc\ub294 \ub9de\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \ubcf4\ub2e4 \ubcf5\uc7a1\ud55c \ubaa8\ub378\uc778 4PL\uc774 \ub354 \uc798 \ub9de\uc2b5\ub2c8\ub2e4. 4PL\uc740 dose response \ub098 receptor-ligand binding \uc2dc\ud5d8\uacfc \uac19\uc740 \uc2e4\ud5d8\uc5d0 \uc801\ud569\ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc720\uc6a9\ud558\uc8e0. \uc774\ub984\uc5d0\uc11c \uc54c \uc218 \uc788\ub4ef 4\uac1c\uc758 \ub9e4\uac1c\ubcc0\uc218\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 S\ud615\ud0dc\uc758 \ubaa8\uc591\uc744 \ub744\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc218\uc2dd\uc73c\ub85c \ud45c\ud604\ud558\uba74 \uc544\ub798\uc640 \uac19\uc8e0.\n$$ y = \\frac{A-D}{1.0+(\\frac{x}{C})B} + D $$\n\nx = \ub3c5\ub9bd \ubcc0\uc218(\uc608; \ucc98\ub9ac\ud55c \uc2dc\ub8cc\ub7c9)  \ny = \uc885\uc18d \ubcc0\uc218(\uc608; \uc2dc\ub8cc\ub7c9\uc5d0 \ub530\ub978 \uc2e4\ud5d8\uacb0\uacfc \uac12)\n\n4\uac1c\uc758 \ub9e4\uac1c \ubcc0\uc218\uac00 \ub73b\ud558\ub294\uac83\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\nA = \ucd5c\uc19f\uac12 (\uc608; \uc2dc\ub8cc\ub97c \ucc98\ub9ac\ud558\uc9c0 \uc54a\uc558\uc744\ub54c\uc758 \uc218\uce58)\nB = \ucee4\ube0c\uc758 \uacbd\uc0ac \uae30\uc6b8\uae30  \nC = \ucee4\ube0c\uc758 \uc911\uac04\uc810 (\uc608; \uacbd\uc0ac\uac00 \uae09\ud574\uc9c0\ub294 \ubd80\ubd84)\nD = \ucd5c\uace0\uac12\n\n\uc704\uc758 \uc218\uc2dd\uc744 \ub4a4\uc9d1\uc73c\uba74 \uc2e4\ud5d8\uc5d0\uc11c \uc5bb\uc740 \uacb0\uacfc \uac12(y)\ub85c \ubd80\ud130 \ub123\uc5b4\uc900 \ubbf8\uc9c0\uc758 \uc2dc\ub8cc\uc758 \uac12(x)\ub97c \uc54c\uc544\ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uacf5\uc2dd\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n$$ x = C\\left(\\frac{A-D}{y-D}-1.0\\right)\\frac{1}{B} $$2. \uc2e4\uc81c \uc751\uc6a9\u00b6ELISA \uc2e4\ud5d8\uc5d0\uc11c \uc5bb\uc740 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uace0, Standard curve\ub97c \uadf8\ub824 4\uac1c\uc758 \ub9e4\uac1c \ubcc0\uc218\uac12\uc744 \uad6c\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c \uc2e4\ud5d8 \uce21\uc815\uac12(y)\uc744 \ud1b5\ud574 \uac70\uafb8\ub85c \uc0ac\uc6a9\ud55c \uc2dc\ub8cc\uc758 \uc591(x)\uc744 \uad6c\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n2.1. Standard curve \uadf8\ub9ac\uae30\u00b6\uc0ac\uc6a9\ud560 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n# load modules\n%matplotlib inline\nimport numpy as np\nimport matplotlib.pyplot as plt\nfrom scipy.optimize import curve_fit\nimport pandas as pd\n\n\n    \n\n\n\n\n\n\n\nELISA reader\uc5d0\uc11c \uc5bb\uc740 \ub370\uc774\ud130\ub97c csv\ud30c\uc77c\ub85c \uc815\ub9ac\ud574\uc11c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \n# read data\ndf = pd.read_csv('./data/20171121_4PL_standard.csv')\ndf = df.iloc[::-1] # reverse row\ndf\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n\n  \n    \n      \n      Sample\n      Conc\n      Value\n    \n  \n  \n    \n      14\n      St15\n      0.010\n      -0.009\n    \n    \n      13\n      St14\n      0.031\n      -0.025\n    \n    \n      12\n      St13\n      0.094\n      -0.021\n    \n    \n      11\n      St12\n      0.282\n      -0.015\n    \n    \n      10\n      St11\n      0.847\n      -0.031\n    \n    \n      9\n      St10\n      2.540\n      -0.019\n    \n    \n      8\n      St09\n      7.621\n      -0.009\n    \n    \n      7\n      St08\n      22.862\n      0.019\n    \n    \n      6\n      St07\n      68.587\n      0.045\n    \n    \n      5\n      St06\n      205.761\n      0.094\n    \n    \n      4\n      St05\n      617.284\n      0.214\n    \n    \n      3\n      St04\n      1851.852\n      0.432\n    \n    \n      2\n      St03\n      5555.556\n      0.636\n    \n    \n      1\n      St02\n      16666.667\n      0.919\n    \n    \n      0\n      St01\n      50000.000\n      1.047\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uac04\ub2e8\ud558\uac8c \uc124\uba85\ud558\uba74 Standard \ubb3c\uc9c8\uc744 500,000 ng/ul\uc5d0\uc11c 3\ubc30\uc529 \uc5f0\uc18d\ud76c\uc11d\ud558\uc5ec \ucd1d 15\ubc88 \ud76c\uc11d\ud588\uc2b5\ub2c8\ub2e4. \uac01\uac01\uc758 \uc2dc\ub8cc\uc5d0\uc11c \uc5bb\uc740 OD \uacb0\uacfc\uac12\uc740 value\uac12\uc774\uace0, \ub18d\ub3c4\ub294 Conc\uc5f4\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \n\uadf8\ub7f0\ub2e4\uc74c 4PL \ud568\uc218\uc744 \uc815\uc758\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \n# define 4pl logistic\ndef logistic4(x, A, B, C, D):\n    \"\"\"4PL logoistic equation.\"\"\"\n    return ((A-D)/(1.0+((x/C)**B))) + D\n\n\n    \n\n\n\n\n\n\n\nscipy.optimize\uc758 curve_fit \uae30\ub2a5\uc744 \uc774\uc6a9\ud574\uc11c \uc218\uc2dd\uc758 \ub9e4\uac1c\ubcc0\uc218\ub97c \uad6c\ud558\uace0, \uac01\uac01\uc758 4\uac1c \ubcc0\uc218\ub97c \ub098\ud0c0\ub0b4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nxdata = df['Conc']\nydata = df['Value']\npopt, pcov = curve_fit(logistic4, xdata, ydata)\nprint(popt)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[ -1.93893872e-02   7.36156893e-01   4.39117217e+03   1.23620082e+00]\n\n\n\n\n\n\n\n\n\n\n\n\uc774\uc81c \uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \uc5bc\ub9c8\ub098 curve fitting\uc774 \uc798\ub418\uc5c8\ub294\uac00\ub97c \ud655\uc778\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc640 \uac19\uc774 numpy\ub97c \uc774\uc6a9\ud574 \uc120\uadf8\ub798\ud504\ub97c \uadf8\ub9ac\uae30 \uc704\ud55c \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uc5b4\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nimport numpy as np\nx_fit = np.linspace(0.01,50000,50000)\ny_fit = logistic4(x_fit, *popt)\ny_fit\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\narray([-0.01930128, -0.01676145, -0.01503393, ...,  1.05665527,\n        1.05665753,  1.0566598 ])\n\n\n\n\n\n\n\n\n\n\n\n\uc774\uc81c \uc2e4\uc81c \ub370\uc774\ud130\ub294 \uc810\uc73c\ub85c \ud45c\uc2dc\ud558\uace0, curve fitting\uc740 \uc120\uc73c\ub85c \ud45c\uc2dc\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \nplt.plot(xdata, ydata, 'o', label = 'data')\nplt.plot(x_fit, y_fit, label = 'fit')\n# plt.legend()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n[<matplotlib.lines.Line2D at 0x7f38d743b9b0>]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc55e\ucabd\uc758 \uac12\ub4e4\uc740 \ub108\ubb34 \uc881\uc544\uc11c \uc798 \ubcf4\uc774\uc9c0 \uc54a\ub124\uc694. \uc774\ub7f4\ub54c\ub294 x\ucd95\uc744 \ub85c\uadf8\uc2a4\ucf00\uc77c\ub85c \ubcc0\uacbd\ud558\uba74 \uc880 \ub354 \ud3b8\ud558\uac8c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nplt.plot(xdata, ydata, 'o', label = 'data')\nplt.plot(x_fit, y_fit, label = 'fit')\nplt.xscale('log')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uac70\uc758 \uc808\ubc18\uc758 \uc0d8\ud50c\uc5d0\uc11c 0\uc5d0 \uc218\ub834\ud558\ub294 \uacb0\uacfc\ub97c \uc5bb\uc5c8\uc9c0\ub9cc, \uc804\uccb4\uc801\uc73c\ub85c curve fitting\uc774 \uc798 \ub41c\uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n2.2 \ubbf8\uc9c0\uc758 \uc0d8\ud50c\ub18d\ub3c4 \uad6c\ud558\uae30\u00b6\uc774\uc81c \uc2e4\ud5d8 \uac12(y)\uc744 \uac00\uc9c0\uace0 standard curve\uc5d0 \ub300\uc785\ud574\uc11c \ub18d\ub3c4\uac12(x)\uc744 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc774 \uc9c4\uc9dc ELISA \uc2e4\ud5d8\uc744 \ud558\ub294 \uc774\uc720\uc785\ub2c8\ub2e4.\n\uba3c\uc800 \uc544\ub798\uc640 \uac19\uc740 \ud568\uc218\ub97c \uc815\uc758\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \n# \uc5ed\uc218\ub97c \uad6c\ud574\uc11c OD\uac12\uc5d0\uc11c conc \uac12 \uc54c\uc544\ub0b4\uae30\ndef solvex(y, A, B, C, D):\n    \"\"\"rearranged 4PL logoistic equation.\"\"\"\n    return C*(((A-D)/(y-D)-1.0)**(1.0/B))\n\n\n    \n\n\n\n\n\n\n\n\uc704\uc5d0\uc11c \uc815\uc758\ud55c \ud568\uc218\ub97c \uac00\uc9c0\uace0 y\uac12\uc774 1.0\uc77c\ub54c x\ucd95\uc758 \uac12\uc744 \uacc4\uc0b0\ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nsolvex(1.0,*popt) # OD\uac00 1.0\uc77c\ub54c Concentration \uac12\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\n32007.229532820107\n\n\n\n\n\n\n\n\n\n\n\n\uc815\ub9ac\ud558\uba70,\u00b6\uacb0\uacfc\uac12\uc774 32000\uc815\ub3c4 \ub098\uc654\ub294\ub370\uc694, Standard curve\uc5d0 \ub300\uc785\ud574\ubcf4\uba74 \uc5bc\ucd94 \ub9de\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4.",
      "tags": "Curve fitting,ELISA,Python",
      "url": "https://partrita.github.io/posts/ELISA-python-analysis/"
    },
    {
      "title": "\ud30c\uc774\uc36c\uc73c\ub85c \uc5c5\ub9ac\ud504\ud2b8 \ubaa8\ub378\ub9c1",
      "text": "\ucd9c\ucc98: \uc544\ub9ac\uac00 \ubbf8\uce58\uc544\ud0a4, \uba38\uc2e0\ub7ec\ub2dd \uc2e4\ubb34 \ud504\ub85c\uc81d\ud2b8, 2018, \ud55c\ube5b\ubbf8\ub514\uc5b4\n\uc5c5\ub9ac\ud504\ud2b8 \ubaa8\ub378\ub9c1(Uplift modeling)\uc740 \uc5ed\ud559\ud1b5\uacc4\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uae30\ubc95\uc73c\ub85c, \ubb34\uc791\uc704 \ub300\uc870\uc2dc\ud5d8\uc758 \uacb0\uacfc\ub97c \ubd84\uc11d\ud569\ub2c8\ub2e4. \uc774\ub97c \uc751\uc6a9\ud574 \uc2e0\uc57d \uac1c\ubc1c\uc5d0\uc11c \ud658\uc790\uc758 \uc5f0\ub839 \ubc0f \uc131\ubcc4, \uc720\uc804\uc790\ub4f1\uc744 \ud2b9\uc131\uc73c\ub85c \uba38\uc2e0\ub7ec\ub2dd\uc744 \uc218\ud589\ud558\uace0, \ubd80\uc791\uc6a9\uc774 \uc608\uc0c1\ub418\ub294 \ud658\uc790\ub97c \ubbf8\ub9ac \uc81c\uc678\ud574 \uac1c\uc778\ud654\ub41c \uc758\ub8cc \uc11c\ube44\uc2a4 \uc81c\uacf5\uc744 \uae30\ub300\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ubb34\uc791\uc704 \ub300\uc870\uc2dc\ud5d8: \ubaa8\uc9d1\ub2e8\uc744 \ubb34\uc791\uc704\ub85c \uc2e4\ud5d8\uad70\uacfc \ub300\uc870\uad70\uc73c\ub85c \ub098\ub204\ub294 \uac83\uc744 \ub9d0\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \uc2e0\uc57d \uac1c\ubc1c\uc5d0\uc11c \uc2e4\ud5d8\uad70\uc5d0\ub294 \uc2e0\uc57d\uc744 \ud22c\uc5ec\ud558\uace0 \ub300\uc870\uad70\uc5d0\ub294 \uac00\uc9dc \uc57d\uc744 \ud22c\uc5ec\ud558\ub294 \uac83 \uc785\ub2c8\ub2e4.\n\n0. \ub370\uc774\ud130 \uc124\uba85\u00b6\uacfc\uac70 12\uac1c\uc6d4 \ub3d9\uc548 \uad6c\ub9e4\uc774\ub825\uc774 \uc788\ub294 \uace0\uac1d\uc744 \ub300\uc0c1\uc73c\ub85c '\ub0a8\uc131 \ud0c0\uac9f \ud310\ucd09 \uba54\uc77c', '\uc5ec\uc131 \ud0c0\uac9f \ud310\ucd09 \uba54\uc77c', '\uba54\uc77c\uc744 \ubc1c\uc1a1\ud558\uc9c0 \uc54a\uc74c'\uc744 \uc218\ud589\ud558\uace0 \uc774 \ud589\ub3d9\uc774 \uc0ac\uc774\ud2b8 \ubc29\ubb38\uc73c\ub85c \uc774\uc5b4\uc84c\ub294\uc9c0 \uc870\uc0ac\ud55c \uac83\uc785\ub2c8\ub2e4.\n\n\n\ud544\ub4dc\uba85\n\ub0b4\uc6a9\n\n\n\n\nrecency\n\ub9c8\uc9c0\ub9c9 \uad6c\ub9e4 \uae30\ub85d\uc73c\ub85c\ubd80\ud130 \uacbd\uacfc\ud55c \uae30\uac04\n\n\nhistory_segment\n\ucd5c\uadfc 1\ub144 \uad6c\ub9e4 \uae08\uc561\uc5d0 \ub530\ub77c \ubd84\ub958\ud55c \uc720\ud615\n\n\nhistory\n\ucd5c\uadfc 1\ub144 \uad6c\ub9e4 \uae08\uc561\n\n\nmens\n\ucd5c\uadfc 1\ub144 \ub3d9\uc548 \ub0a8\uc131\uc6a9 \uc81c\ud488 \uad6c\ub9e4 \uc5ec\ubd80\n\n\nwomens\n\ucd5c\uadfc 1\ub144 \ub3d9\uc548 \uc5ec\uc131\uc6a9 \uc81c\ud488 \uad6c\ub9e4 \uc5ec\ubd80\n\n\nzip_code\n\uc6b0\ud3b8\ubc88\ud638\n\n\nnewbies\n\uc2e0\uaddc\uace0\uac1d \uc5ec\ubd80\n\n\nchannel\n\ucd5c\uadfc 1\ub144\ub3d9\uc548 \uad6c\ub9e4\ud55c \uacbd\ub85c\n\n\nsegment\n\uace0\uac1d\uc5d0\uac8c \ubcf4\ub0b8 \ud310\ucd09 \uba54\uc77c \uc720\ud615\n\n\nvisit\n\uba54\uc77c \uc218\uc2e0\ud6c4 2\uc8fc \ub0b4 \uc0ac\uc774\ud2b8 \ubc29\ubb38\uc5ec\ubd80\n\n\nconversion\n\uba54\uc77c \uc218\uc2e0\ud6c4 2\uc8fc\ub0b4 \uc0c1\ud488 \uad6c\ub9e4 \uc5ec\ubd80\n\n\nspend\n\uba54\uc77c \uc218\uc2e0\ud6c4 2\uc8fc\ub0b4 \uad6c\ub9e4 \uae08\uc561\n\n\n\n1. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\u00b6\uba3c\uc800 \ub370\uc774\ud130 \ud30c\uc77c\uc744 pandas\ub97c \uc774\uc6a9\ud574 \uc77d\uc5b4 \ub4e4\uc774\uace0 \uad6c\uc870\ub97c \ud655\uc778\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport pandas as pd\nsource_df = pd.read_csv('./data/Kevin_Hillstrom_MineThatData.csv')\nsource_df.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[1]:\n\n\n\n\n\n\n  \n    \n      \n      recency\n      history_segment\n      history\n      mens\n      womens\n      zip_code\n      newbie\n      channel\n      segment\n      visit\n      conversion\n      spend\n    \n  \n  \n    \n      63995\n      10\n      2) $100 - $200\n      105.54\n      1\n      0\n      Urban\n      0\n      Web\n      Mens E-Mail\n      0\n      0\n      0.0\n    \n    \n      63996\n      5\n      1) $0 - $100\n      38.91\n      0\n      1\n      Urban\n      1\n      Phone\n      Mens E-Mail\n      0\n      0\n      0.0\n    \n    \n      63997\n      6\n      1) $0 - $100\n      29.99\n      1\n      0\n      Urban\n      1\n      Phone\n      Mens E-Mail\n      0\n      0\n      0.0\n    \n    \n      63998\n      1\n      5) $500 - $750\n      552.94\n      1\n      0\n      Surburban\n      1\n      Multichannel\n      Womens E-Mail\n      0\n      0\n      0.0\n    \n    \n      63999\n      1\n      4) $350 - $500\n      472.82\n      0\n      1\n      Surburban\n      0\n      Web\n      Mens E-Mail\n      0\n      0\n      0.0\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n2. \ub370\uc774\ud130 \uc815\ub9ac\ud558\uae30\u00b62.1. \ubd88\ud544\uc694\ud55c \ub370\uc774\ud130 \uc81c\uac70\u00b6\uba54\uc77c\uc744 \ubc1b\uc9c0 \uc54a\uc740 \uace0\uac1d\uc758 \ub370\uc774\ud130\ub294 \ud544\uc694\ud558\uc9c0 \uc54a\uc74c\uc73c\ub85c \uc81c\uac70\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nmailed_df = source_df[source_df['segment'] != 'No E-mail'].reset_index(drop=True)\nmailed_df.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\n\n  \n    \n      \n      recency\n      history_segment\n      history\n      mens\n      womens\n      zip_code\n      newbie\n      channel\n      segment\n      visit\n      conversion\n      spend\n    \n  \n  \n    \n      63995\n      10\n      2) $100 - $200\n      105.54\n      1\n      0\n      Urban\n      0\n      Web\n      Mens E-Mail\n      0\n      0\n      0.0\n    \n    \n      63996\n      5\n      1) $0 - $100\n      38.91\n      0\n      1\n      Urban\n      1\n      Phone\n      Mens E-Mail\n      0\n      0\n      0.0\n    \n    \n      63997\n      6\n      1) $0 - $100\n      29.99\n      1\n      0\n      Urban\n      1\n      Phone\n      Mens E-Mail\n      0\n      0\n      0.0\n    \n    \n      63998\n      1\n      5) $500 - $750\n      552.94\n      1\n      0\n      Surburban\n      1\n      Multichannel\n      Womens E-Mail\n      0\n      0\n      0.0\n    \n    \n      63999\n      1\n      4) $350 - $500\n      472.82\n      0\n      1\n      Surburban\n      0\n      Web\n      Mens E-Mail\n      0\n      0\n      0.0\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub370\uc774\ud130\uc758 \ud615\ud0dc\ub97c \ud655\uc778\ud574 \ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nmailed_df.dtypes\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\nrecency              int64\nhistory_segment     object\nhistory            float64\nmens                 int64\nwomens               int64\nzip_code            object\nnewbie               int64\nchannel             object\nsegment             object\nvisit                int64\nconversion           int64\nspend              float64\ndtype: object\n\n\n\n\n\n\n\n\n\n\n\n\uc704\uc758 \uacb0\uacfc\uc5d0\uc11c zip_code, channe, segment\uac00 object\uc778\uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.  segment\ub294 label\ub85c \uc0ac\uc6a9\ub420 \uac83\uc785\ub2c8\ub2e4.\n2.2. \uc6d0\ud56b\uc778\ucf54\ub529(one-hot encoding)\u00b6zip_code, channel \uac12\uc740 \ubc94\uc8fc\ud615\uc784\uc73c\ub85c one-hot encoding\uc744 \uc218\ud589\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \ndummied_df = pd.get_dummies(mailed_df[[\"zip_code\", \"channel\"]], drop_first=True)\n#  \ud544\uc694\uc5c6\ub294 \ud589\uc744 \uc9c0\uc6c1\ub2c8\ub2e4.\nfeature_vector_df = mailed_df.drop([\"history_segment\", \"zip_code\", \"channel\", \"segment\", \"visit\", \"conversion\", \"spend\"], axis=1)\nfeature_vector_df = feature_vector_df.join(dummied_df)\nfeature_vector_df.head()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n\n  \n    \n      \n      recency\n      history\n      mens\n      womens\n      newbie\n      zip_code_Surburban\n      zip_code_Urban\n      channel_Phone\n      channel_Web\n    \n  \n  \n    \n      0\n      10\n      142.44\n      1\n      0\n      0\n      1\n      0\n      1\n      0\n    \n    \n      1\n      6\n      329.08\n      1\n      1\n      1\n      0\n      0\n      0\n      1\n    \n    \n      2\n      7\n      180.65\n      0\n      1\n      1\n      1\n      0\n      0\n      1\n    \n    \n      3\n      9\n      675.83\n      1\n      0\n      1\n      0\n      0\n      0\n      1\n    \n    \n      4\n      2\n      45.34\n      1\n      0\n      0\n      0\n      1\n      0\n      1\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub0a8\uc131 \ud0c0\uac9f \uba54\uc77c\uc744 \ubc1b\uc740 \uace0\uac1d\ub4e4 \uc911 \uc0ac\uc774\ud2b8\uc5d0 \ubc29\ubb38\ud55c \ub370\uc774\ud130\ub97c \ubd84\ub9ac\ud574 \uc90d\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nis_treat_list = list(mailed_df[\"segment\"] == \"Mens E-Mail\")\nis_cv_list = list(mailed_df[\"visit\"] == 1)\n\n\n    \n\n\n\n\n\n\n\n3. \ud559\uc2b5\ud558\uae30\u00b6\uba3c\uc800, \ub370\uc774\ud130\ub97c \ud559\uc2b5\uc6a9\uacfc \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub85c \ub098\ub204\uc5b4 \uc90d\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nfrom sklearn.model_selection import train_test_split\ntrain_is_cv_list, test_is_cv_list, train_is_treat_list, test_is_treat_list, \\\ntrain_feature_vector_df, test_feature_vector_df = train_test_split(\n    is_cv_list, is_treat_list, feature_vector_df, test_size=0.5,  random_state=42)\n\n\n    \n\n\n\n\n\n\n\n\uc774 \uc608\uc81c\uc5d0\uc11c\ub294 \uc804\uc1a1\ubc1b\uc740 \uc774\uba54\uc77c\uc5d0 \uc758\ud55c \uc0ac\uc774\ud2b8 \ubc29\ubb38\uc5ec\ubd80\ub97c \uc608\uce21\ud558\ub294 \uac83\uc774\ubbc0\ub85c LogisticRegression\uc744 \uc774\uc6a9\ud574 \ud559\uc2b5\uc744 \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \nfrom sklearn.linear_model import LogisticRegression\n\ntreat_model = LogisticRegression(C=0.01)\ncontrol_model = LogisticRegression(C=0.01)\n\ntrain_sample_num = len(train_is_cv_list)\n\ntreat_is_cv_list = [train_is_cv_list[i] for i in range(train_sample_num) if train_is_treat_list[i] == True]\ntreat_feature_vector_list = train_feature_vector_df[train_is_treat_list]\n\ncontrol_is_cv_list = [train_is_cv_list[i] for i in range(train_sample_num) if train_is_treat_list[i] == False]\ncontrol_feature_vector_list = train_feature_vector_df[list(map(lambda a:a == False ,train_is_treat_list))]\n\ntreat_model.fit(treat_feature_vector_list, treat_is_cv_list)\ncontrol_model.fit(control_feature_vector_list, control_is_cv_list)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\nLogisticRegression(C=0.01, class_weight=None, dual=False, fit_intercept=True,\n          intercept_scaling=1, max_iter=100, multi_class='ovr', n_jobs=1,\n          penalty='l2', random_state=None, solver='liblinear', tol=0.0001,\n          verbose=0, warm_start=False)\n\n\n\n\n\n\n\n\n\n\n\n4. \ubaa8\ub378 \ud3c9\uac00\ud558\uae30\u00b6\ud559\uc2b5\ud55c \ubaa8\ub378\uc744 \ud3c9\uac00\ud558\uae30 \uc704\ud55c \uc810\uc218 \uc2dc\uc2a4\ud15c\uc744 \ub9cc\ub4e4\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc5c5\ub9ac\ud504\ud2b8 \ubaa8\ub378\ub9c1\uc5d0\uc11c\ub294 treat_model, control_model\ub85c \ubd80\ud130 \ub450\uac1c\uc758 \uc608\uce21\uac12\uc744 \uc5bb\uac8c \ub429\ub2c8\ub2e4 . \uc5c5\ub9ac\ud504\ud2b8 \ubaa8\ub378\ub9c1 \uc810\uc218\ub294 \uc2e4\ud5d8\uad70 \uc608\uce21\uac12\uc744 \ub300\uc870\uad70 \uc608\uce21\uac12\uc73c\ub85c \ub098\ub208 \ube44\uc728\ub85c \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4. sklearn\uc758 predict_proba \ud568\uc218\ub97c \ud1b5\ud574 \uc544\ub798\uc640 \uac19\uc774 \uac04\ub2e8\ud788 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nfrom operator import itemgetter\n    \ntreat_score = treat_model.predict_proba(test_feature_vector_df) # \uc2e4\ud5d8\uad70 \uc608\uce21\uac12\ncontrol_score = control_model.predict_proba(test_feature_vector_df) # \ub300\uc870\uad70 \uc608\uce21\uac12\nscore_list = treat_score[:,1] / control_score[:,1] # \uc5c5\ub9ac\ud504\ud2b8 \ubaa8\ub378\ub9c1 \uc810\uc218\uacc4\uc0b0\n\nresult = list(zip(test_is_cv_list, test_is_treat_list, score_list))\nresult.sort(key=itemgetter(2),reverse=True) # \uc810\uc218\uac00 \ub192\uc740 \uc21c\uc73c\ub85c \uc815\ub82c\n    \n\n\n    \n\n\n\n\n\n\n\n4.1. \ubc31\ubd84\uc704\uc218 \ub2e8\uc704\ub85c \ub098\ud0c0\ub0b8 \uc804\ud658\uc728\u00b6\uba3c\uc800 \uc810\uc218\uac00 \ud070 \uc21c\uc11c\ub300\ub85c \uc815\ub82c\ud558\uace0 \ubc31\ubd84\uc704\uc218\ub9c8\ub2e4 \uc810\uc218\ub97c \uacc4\uc0b0\ud574\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nimport matplotlib.pyplot as plt\n%matplotlib inline \n\nqdf = pd.DataFrame(columns=('treat_cvr', 'control_cvr'))\n\nquantile_data = []\nfor n in range(10):\n    start = int(n * len(result) / 10) #\uacb0\uacfc\ub97c 10% \ub2e8\uc704\ub85c \ub098\ub208\ub2e4\n    end = int((n + 1) * len(result) / 10) - 1\n    quantiled_result = result[start:end]\n    # \uc2e4\ud5d8\uad70\uacfc \ub300\uc870\uad70\uc5d0\uc11c \uacb0\uacfc \ubaa8\uc73c\uae30\n    treat_uu = list(map(lambda item:item[1], quantiled_result)).count(True)\n    control_uu = list(map(lambda item:item[1], quantiled_result)).count(False)\n    # \uc2e4\ud5d8\uad70\uacfc \ub300\uc870\uad70\uc758 \uc804\ud658\uac74\uc218 \uc138\uae30\n    treat_cv = [item[0] for item in quantiled_result if item[1] == True].count(True)\n    control_cv = [item[0] for item in quantiled_result if item[1] == False].count(True)\n    \n    treat_cvr = treat_cv / treat_uu\n    control_cvr = control_cv / control_uu\n    \n    \n    quantile_data.append([treat_uu, control_uu, treat_cv, control_cv, treat_cvr, control_cvr])\n        \n    label = \"{}%~{}%\".format(n*10, (n+1)*10)\n    qdf.loc[label] = [treat_cvr, control_cvr]\n\nqdf.plot.bar()\nplt.xlabel(\"percentile\")\nplt.ylabel(\"conversion rate\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\n<matplotlib.text.Text at 0x7f060b4c23c8>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ubc31\ubd84\uc704\uc218 \ub2e8\uc704\ub85c \uc804\ud658\uc728\uc744 \uc2dc\uac01\ud654\ud574\ubcf4\ub2c8 \uc810\uc218\uac00 \uc0c1\uc704 60% \uae4c\uc9c0\ub294 \ub0a8\uc131 \ud0c0\uae43 \uba54\uc77c\uc744 \ubcf4\ub0b8 \ucabd\uc774 \uc5ec\uc131 \ud0c0\uae43 \uba54\uc77c\uc744 \ubcf4\ub0b8 \ucabd\ubcf4\ub2e4 \ubc18\uc751\uc774 \uc88b\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubc18\ub300\ub85c \ud558\uc704 40%\uae4c\uc9c0\ub294 \uc5ec\uc131 \ud0c0\uae43 \uba54\uc77c\uc774 \ubc18\uc751\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc0c1\uc704 60%\ub294 \ub0a8\uc131 \ud0c0\uae43 \uba54\uc77c\uc744 \ubcf4\ub0b4\uace0 \ud558\uc704 40%\ub294 \uc5ec\uc131 \ud0c0\uae43 \uba54\uc77c\uc744 \ubcf4\ub0b4\ub294 \uac83\uc774 \uc88b\uc74c\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n4.2. AUC\ub85c \ud3c9\uac00\ud558\uae30\u00b6\n\uc810\uc218\uac00 \ub192\uc740 \uc21c\uc11c\ub300\ub85c \uac01 \ub300\uc0c1\uc744 \ud6d1\uc73c\uba74\uc11c \ub9e4 \uc2dc\uc810\uc758 \uc810\uc218\ub97c \uce21\uc815\ud569\ub2c8\ub2e4.\n\uc810\uc218\uc758 \uac12 \ucc28\uc774\ub85c\ubd80\ud130 \uac1c\uc785\uc774 \uc77c\uc73c\ud0a8 \uc99d\uac00 \uac74\uc218(lift)\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\nlift\uc758 \uc6d0\uc810\uacfc \ub05d\uc810\uc744 \uc9c0\ub098\ub294 \uc9c1\uc120\uc744 \ubca0\uc774\uc2a4\ub77c\uc778\uc73c\ub85c \uc0bc\uc2b5\ub2c8\ub2e4.\nlift\uc640 \ubca0\uc774\uc2a4\ub77c\uc778 \uc0ac\uc774\uc758 \uba74\uc801\uc744 \uacc4\uc0b0\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \ntreat_uu = 0\ncontrol_uu = 0\ntreat_cv = 0\ncontrol_cv = 0\ntreat_cvr = 0.0\ncontrol_cvr = 0.0\nlift = 0.0\nstat_data = []\n\nfor is_cv, is_treat, score in result:\n    if is_treat:\n        treat_uu += 1\n        if is_cv:\n            treat_cv += 1\n        treat_cvr = treat_cv / treat_uu\n    else:\n        control_uu += 1\n        if is_cv:\n            control_cv += 1\n        control_cvr = control_cv / control_uu\n    lift = (treat_cvr - control_cvr) * treat_uu\n    stat_data.append([is_cv, is_treat, score, treat_uu, control_uu, treat_cv, control_cv, treat_cvr, control_cvr, lift])\n\ndf = pd.DataFrame(stat_data)\ndf.columns = [\"is_cv\", \"is_treat\", \"score\", \"treat_uu\", \"control_uu\", \"treat_cv\", \"control_cv\", \"treat_cvr\", \"control_cvr\", \"lift\"]\n\ndf[\"base_line\"] = df.index * df[\"lift\"][len(df.index) - 1] / len(df.index)\nf, ([ax0, ax1], [ax2, ax3]) = plt.subplots(nrows=2,ncols=2, sharex=True, figsize=(10, 8))\n\ndf.plot(y=[\"treat_cv\", \"control_cv\"], ax = ax0)\nax0.set_xlabel(\"uplift score rank\")\nax0.set_ylabel(\"conversion count\")\ndf.plot(y=[\"treat_cvr\", \"control_cvr\"], ylim=[0, 0.3], ax = ax1)\nax1.set_xlabel(\"uplift score rank\")\nax1.set_ylabel(\"conversion rate\")\ndf.plot(y=[\"lift\", \"base_line\"], ax=ax2)\nax2.set_xlabel(\"uplift score rank\")\nax2.set_ylabel(\"lift count\")\nax3.axis('off')\nplt.tight_layout()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub370\uc774\ud130\ub97c \uc815\uaddc\ud654\ud55c \uadf8\ub9bc\uc744 \ub2e4\uc2dc \uadf8\ub9bd\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nf, ([ax0, ax1], [ax2, ax3]) = plt.subplots(nrows=2,ncols=2, sharex=True, figsize=(10, 8))\ndf.plot(y=[\"treat_cv\", \"control_cv\"], x=\"score\", title=\"conversion count\", ax=ax0)\ndf.plot(y=[\"treat_cvr\", \"control_cvr\"], ylim=[0, 0.3], x=\"score\", title=\"conversion rate\", ax=ax1)\ndf.plot(y=[\"lift\", \"base_line\"], x=\"score\", title=\"lift\", ax=ax2)\nax3.axis('off')\nplt.tight_layout()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc5c5\ub9ac\ud504\ud2b8 \ubaa8\ub378\ub9c1\uc758 \uacb0\uacfc\uac00 \uc815\ud655\ud560 \uc218\ub85d \ubc29\ubb38\ud558\ub294 \uc2e4\ud5d8\uad70\uc758 \uace0\uac1d\uacfc \ubc29\ubb38\ud558\uc9c0 \uc54a\uc740 \ub300\uc870\uad70\uc758 \uace0\uac1d\uc774 \ub192\uc740 \uc810\uc218\ub300\ub85c \ubaa8\uc785\ub2c8\ub2e4.  \uadf8\ub9ac\uace0 \ub0ae\uc740 \uc810\uc218\ub300\uc5d0\uc11c\ub294 \ubc18\ub300\ud604\uc0c1\uc774 \uc77c\uc5b4\ub0a9\ub2c8\ub2e4. \uc774 \ub54c\ubb38\uc5d0 lift\uace1\uc120\uc740 \uc2e4\ud5d8\uad70\uc5d0\uc11c \ubc29\ubb38\ud558\ub294 \uace0\uac1d\uc5d0 \ud574\ub2f9\ud558\ub294 \ucd08\ubc18 \ubd80\ubd84\uc5d0\uc11c \uc591\uc758 \uae30\uc6b8\uae30\ub97c \uac00\uc9c0\uba70 \uc815\ud655\ub3c4\uac00 \ub192\uc744 \uc218\ub85d \uc774 \uae30\uc6b8\uae30\uac00 \uac00\ud30c\ub985\ub2c8\ub2e4. \uac19\uc740 \uc774\uc720\ub85c \uace1\uc120\uc758 \ud6c4\ubc18 \ubd80\ubd84\uc740 \uc74c\uc758 \uae30\uc6b8\uae30\ub97c \uac16\uc2b5\ub2c8\ub2e4. \ub610\ud55c \uc5c5\ub9ac\ud504\ud2b8\uc758 \ubaa8\ub378\ub9c1\uc758 \uc815\ud655\ub3c4\uac00 \ub192\uc744\uc218\ub85d \uc774 \uae30\uc6b8\uae30\ub3c4 \uac00\ud314\ub77c\uc9d1\ub2c8\ub2e4. \uacb0\uad6d \uc5c5\ub9ac\ud504\ud2b8 \ubaa8\ub378\ub9c1\uc758 \uacb0\uacfc\uac00 \uc815\ud655\ud560\uc218\ub85d \uace1\uc120\uc758 \ud615\ud0dc\uac00 \ubcfc\ub85d\ud574\uc9c0\uba70 lift\uc640 \ubca0\uc774\uc2a4\ub77c\uc778 \uc0ac\uc774\uc758 \uba74\uc801\uc774 \ub113\uc5b4\uc9c0\uae30 \ub54c\ubb38\uc5d0 AUC\uac12\uc774 \ucee4\uc9c0\uac8c \ub429\ub2c8\ub2e4.\n\uc774 \uc810\uc218\ub97c \uae30\ucd08\ub85c \uac1c\uc785\uc5ec\ubd80\ub97c \uacb0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. lift\uc810\uc218\uac00 \ucd5c\uace0\uc810\uc77c\ub54c \uac1c\uc785\ud558\uba74 \ub429\ub2c8\ub2e4.\n\n5. \ub9c8\uce58\uba70\u00b6\uc5c5\ub9ac\ud504\ud2b8 \ubaa8\ub378\ub9c1\uc744 \uc18c\uac1c\ud558\uace0 \uc608\ub97c \uc0b4\ud3b4\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc5c5\ub9ac\ud504\ud2b8 \ubaa8\ub378\ub9c1\uc740 \ubb34\uc791\uc704 \ub300\uc870\uc2dc\ud5d8\uacfc \uace0\uac1d \uc815\ubcf4\ub85c \ubd80\ud130 \ucd94\ucd9c\ud55c \ud2b9\uc9d5\uc744 \uc870\ud569\ud558\uc5ec, \ud6a8\uacfc\uac00 \uc88b\uc740 \uace0\uac1d\uc744 \uc608\uce21\ud574\uc8fc\ub294 \ubaa8\ub378\uc744 \uad6c\ucd95\ud558\ub294 \uae30\ubc95\uc785\ub2c8\ub2e4. \uc774 \uae30\ubc95\uc744 \uc0ac\uc6a9\ud558\uba74 \ube44\uc6a9\uc744 \uc808\uac10\ud558\uace0 \ud6a8\uacfc\ub97c \ucd5c\ub300\ud654 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.",
      "tags": "Python,uplift,\uc5c5\ub9ac\ud504\ud2b8",
      "url": "https://partrita.github.io/posts/python-uplift/"
    },
    {
      "title": "\ud68c\uadc0\uc758 \uc624\ub958 \uc9c0\ud45c \uc54c\uc544\ubcf4\uae30",
      "text": "\ud68c\uadc0\ubaa8\ub378\uc758 \uc624\ub958(Regression error metrics)\u00b6\n\uc120\ud615\ud68c\uadc0 \ubaa8\ub378\uc5d0\uc11c \uc624\ub958\ub97c \uce21\uc815\ud558\ub294 \ubc29\ubc95\uc73c\ub85c \uc544\ub798 4\uac00\uc9c0\ub97c \uc608\uc2dc\ub97c \ud1b5\ud574 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\nMean Absolute Error\nMean Absolute Percentage Error\nMean Square Error\nMean Percentage Error\n\n\ub370\uc774\ud130 \uc124\uba85\u00b6\uc774 \uae00\uc5d0\uc11c \uc0ac\uc6a9\ud55c \ub370\uc774\ud130\ub294 \uce90\uae00(Kaggle)\uc758 \ube44\ub514\uc624 \uac8c\uc784 \ud310\ub9e4 \uc785\ub2c8\ub2e4.\n\uba3c\uc800 pandas\ub85c csv\ub97c \ubd88\ub7ec\uc624\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport pandas as pd\ndf = pd.read_csv('./data/Video_Games_Sales_as_at_22_Dec_2016.csv').dropna().reset_index()\ndf.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[1]:\n\n\n\n\n\n\n  \n    \n      \n      index\n      Name\n      Platform\n      Year_of_Release\n      Genre\n      Publisher\n      NA_Sales\n      EU_Sales\n      JP_Sales\n      Other_Sales\n      Global_Sales\n      Critic_Score\n      Critic_Count\n      User_Score\n      User_Count\n      Developer\n      Rating\n    \n  \n  \n    \n      6820\n      16667\n      E.T. The Extra-Terrestrial\n      GBA\n      2001.0\n      Action\n      NewKidCo\n      0.01\n      0.00\n      0.0\n      0.0\n      0.01\n      46.0\n      4.0\n      2.4\n      21.0\n      Fluid Studios\n      E\n    \n    \n      6821\n      16677\n      Mortal Kombat: Deadly Alliance\n      GBA\n      2002.0\n      Fighting\n      Midway Games\n      0.01\n      0.00\n      0.0\n      0.0\n      0.01\n      81.0\n      12.0\n      8.8\n      9.0\n      Criterion Games\n      M\n    \n    \n      6822\n      16696\n      Metal Gear Solid V: Ground Zeroes\n      PC\n      2014.0\n      Action\n      Konami Digital Entertainment\n      0.00\n      0.01\n      0.0\n      0.0\n      0.01\n      80.0\n      20.0\n      7.6\n      412.0\n      Kojima Productions\n      M\n    \n    \n      6823\n      16700\n      Breach\n      PC\n      2011.0\n      Shooter\n      Destineer\n      0.01\n      0.00\n      0.0\n      0.0\n      0.01\n      61.0\n      12.0\n      5.8\n      43.0\n      Atomic Games\n      T\n    \n    \n      6824\n      16706\n      STORM: Frontline Nation\n      PC\n      2011.0\n      Strategy\n      Unknown\n      0.00\n      0.01\n      0.0\n      0.0\n      0.01\n      60.0\n      12.0\n      7.2\n      13.0\n      SimBin\n      E10+\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc804\uccb4\uc758 \ub370\uc774\ud130\uc911\uc5d0 Critic_Score, User_Score, Global_Sales\uc5f4\ub9cc \uc0ac\uc6a9\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nX = df[['Critic_Score','User_Score']].astype('float32')\n# X = [tuple(x) for x in subset.values]\n# X = list(subset.itertuples(index=False))\nsales = df['Global_Sales'].astype('float32')\n# y= list(sales.iteritems())\n# y = [tuple(x) for x in sales.values]\n# print(X.shape, sales.shape)\n\n\n    \n\n\n\n\n\n\n\n\ub370\uc774\ud130 \uc2dc\uac01\ud654\u00b6\uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \ub370\uc774\ud130\uc758 \ubaa8\uc591\uc744 \ud655\uc778\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nimport matplotlib.pyplot as plt\n%matplotlib inline\n\ndf[['Critic_Score','User_Score',\n    'Global_Sales']].astype('float').plot.scatter(x='Critic_Score',\n                                                  y='Global_Sales',\n                                                  c='User_Score')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7f0eba6d12b0>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nx\ucd95\uc740 \ud3c9\ub860\uac00 \uc810\uc218\uc774\uace0 y\ucd95\uc740 \ube44\ub514\uc624 \uac8c\uc784\uc758 \ud310\ub9e4\ub7c9\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc720\uc800\ub4e4\uc758 \ud3c9\uac00\ub294 \uc0c9\uc0c1\uc73c\ub85c \ud45c\ud604\ud588\uc2b5\ub2c8\ub2e4. \uc810\uc218\uac00 \ub192\uc744 \uc218\ub85d \ud310\ub9e4\ub7c9\uc774 \ub192\uc740 \ubd84\uba85\ud55c \uc120\ud615 \uad00\uacc4\uac00 \ubcf4\uc774\ub124\uc694. \uadf8\ub9ac\uace0 \uba87\uac1c\uc758 \ud2b9\uc774\uac12(outliners) \ubcf4\uc785\ub2c8\ub2e4.\n\uc120\ud615\ud68c\uadc0\u00b6\uc774\uc81c sklearn\uc744 \uc774\uc6a9\ud574 \uac04\ub2e8\ud788 \uc120\ud615\ud68c\uadc0 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uace0 \ubaa8\ub378\ub85c \ud310\ub9e4\ub7c9\uc744 \uc608\uce21\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nfrom sklearn.linear_model import LinearRegression\nlm = LinearRegression(n_jobs=-1)\nlm.fit(X, sales)\ny_true = sales.values\ny_pred = lm.predict(X)\n\n\n    \n\n\n\n\n\n\n\n\uc0dd\uc131\ud55c \uc120\ud615\ud68c\uadc0 \ubaa8\ub378\uc744 \ud3c9\uac00\ud558\ub294 \uc9c0\ud45c\ub4e4\uc744 \ucc28\ub840\ub85c \uc0b4\ud3b4\ubcf4\uc8e0. \uac01\uac01\uc758 \uc9c0\ud45c\ub294 \ud2b9\uc131\uc744 \uc774\ud574\ud558\uace0 \uc0c1\ud669\uc5d0 \ub9de\uac8c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4.\nMean Absolute Error (MAE)\u00b6\nMAE\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4. \n$$ MAE = \\frac { \\sum \\vert y - \\hat y \\vert }{n} $$\n\ubaa8\ub378\uc758 \uc608\uce21\uac12\uacfc \uc2e4\uc81c\uac12\uc758 \ucc28\uc774\ub97c \ubaa8\ub450 \ub354\ud55c\ub2e4\ub294 \uac1c\ub150\uc785\ub2c8\ub2e4.\n\n\uc808\ub300\uac12\uc744 \ucde8\ud558\uae30 \ub54c\ubb38\uc5d0 \uac00\uc7a5 \uc9c1\uad00\uc801\uc73c\ub85c \uc54c \uc218 \uc788\ub294 \uc9c0\ud45c\uc785\ub2c8\ub2e4. \nMSE \ubcf4\ub2e4 \ud2b9\uc774\uce58\uc5d0 robust\ud569\ub2c8\ub2e4.\n\uc808\ub300\uac12\uc744 \ucde8\ud558\uae30 \ub54c\ubb38\uc5d0 \ubaa8\ub378\uc774 underperformance \uc778\uc9c0 overperformance \uc778\uc9c0 \uc54c \uc218 \uc5c6\uc2b5\ub2c8\ub2e4.\nunderperformance: \ubaa8\ub378\uc774 \uc2e4\uc81c\ubcf4\ub2e4 \ub0ae\uc740 \uac12\uc73c\ub85c \uc608\uce21\noverperformance: \ubaa8\ub378\uc774 \uc2e4\uc81c\ubcf4\ub2e4 \ub192\uc740 \uac12\uc73c\ub85c \uc608\uce21\n\n\n\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nimport numpy as np\n\ndef MAE(y_true, y_pred): \n    return np.mean(np.abs((y_true - y_pred)))\n\nMAE(y_true, y_pred)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n0.76997957836731656\n\n\n\n\n\n\n\n\n\n\n\nMAE\ub294 sklearn.metrics\uc5d0\uc11c \uc9c0\uc6d0\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nfrom sklearn.metrics import mean_absolute_error\nmean_absolute_error(y_true, y_pred)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\n0.76997957836731656\n\n\n\n\n\n\n\n\n\n\n\n\uc6b0\ub9ac \ubaa8\ub378\uc758 MAE\ub294 0.760\uc774\uba70, \uc6b0\ub9ac\uc758 \ub370\uc774\ud130 \ud310\ub9e4 \ubc94\uc704\ub294 0.01\uc5d0\uc11c 83\uc774\uae30 \ub54c\ubb38\uc5d0 \uc0c1\ub2f9\ud788 \uad1c\ucc2e\uc740 \uac12\uc785\ub2c8\ub2e4.\nMean Squared Error(MSE)\u00b6\nMSE\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ub429\ub2c8\ub2e4.\n$$ MSE = \\frac { \\sum (y - \\hat y)2 }{n} $$\n\uc81c\uacf1\uc744 \ud558\uae30 \ub54c\ubb38\uc5d0 MAE\uc640\ub294 \ub2e4\ub974\uac8c \ubaa8\ub378\uc758 \uc608\uce21\uac12\uacfc \uc2e4\uc81c\uac12 \ucc28\uc774\uc758 \uba74\uc801\uc758 \ud569\uc785\ub2c8\ub2e4. \uc774\ub7f0 \ucc28\uc774\ub85c, \ud2b9\uc774\uac12\uc774 \uc874\uc7ac\ud558\uba74 \uc218\uce58\uac00 \ub9ce\uc774 \ub298\uc5b4\ub0a9\ub2c8\ub2e4.\n\n\ud2b9\uc774\uce58\uc5d0 \ubbfc\uac10\ud558\ub2e4\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \ndef MSE(y_true, y_pred):\n    return np.mean(np.square((y_true - y_pred)))\n\nMSE(y_true, y_pred)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n3.6227746702258123\n\n\n\n\n\n\n\n\n\n\n\nMSE \ub610\ud55c sklearn.metrics\ub85c \uac04\ub2e8\ud788 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nfrom sklearn.metrics import mean_squared_error\nmean_squared_error(y_true, y_pred)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n3.6227746702258123\n\n\n\n\n\n\n\n\n\n\n\nRoot Mean Squared Error(RMSE)\u00b6RMSE\ub294 MSE\uc5d0 \ub8e8\ud2b8\ub97c \uc50c\uc6cc \ub2e4\uc74c\uacfc \uac19\uc774 \uc815\uc758\ud569\ub2c8\ub2e4.\n$$ RMSE = \\sqrt { \\frac { \\sum (y - \\hat y)2 }{n} } $$RMSE\ub97c \uc0ac\uc6a9\ud558\uba74 \uc624\ub958 \uc9c0\ud45c\ub97c \uc2e4\uc81c \uac12\uacfc \uc720\uc0ac\ud55c \ub2e8\uc704\ub85c \ub2e4\uc2dc \ubcc0\ud658\ud558\uc5ec \ud574\uc11d\uc744 \uc27d\uac8c \ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nnp.sqrt(MSE(y_true, y_pred))\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\n1.9033587865207684\n\n\n\n\n\n\n\n\n\n\n\nMean Absolute Percentage Error(MAPE)\u00b6\nMAPE\ub294 MAE\ub97c \ud37c\uc13c\ud2b8\ub85c \ubcc0\ud658\ud55c \uac83\uc785\ub2c8\ub2e4.\n$$ MAPE = \\frac { \\sum \\vert \\frac { y - \\hat y}{y} \\vert }{n}*100\\% $$\n\nMAE\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c MSE\ubcf4\ub2e4 \ud2b9\uc774\uce58\uc5d0 robust\ud569\ub2c8\ub2e4.\nMAE\uc640 \uac19\uc740 \ub2e8\uc810\uc744 \uac00\uc9d1\ub2c8\ub2e4.\n\ucd94\uac00\uc801\uc73c\ub85c \ubaa8\ub378\uc5d0 \ub300\ud55c \ud3b8\ud5a5\uc774 \uc874\uc7ac\ud569\ub2c8\ub2e4.\n\uc774 \ub2e8\uc810\uc5d0 \ub300\uc751\ud558\uae30 \uc704\ud574 MPE\ub3c4 \ucd94\uac00\ub85c \ud655\uc778\ud558\ub294\uac8c \uc88b\uc2b5\ub2c8\ub2e4.\n0 \uadfc\ucc98\uc758 \uac12\uc5d0\uc11c\ub294 \uc0ac\uc6a9\ud558\uae30 \uc5b4\ub835\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \ndef MAPE(y_true, y_pred): \n    return np.mean(np.abs((y_true - y_pred) / y_true)) * 100\n\nMAPE(y_true, y_pred)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[11]:\n\n\n\n\n\n558.87888927059021\n\n\n\n\n\n\n\n\n\n\n\nMean Percentage Error(MPE)\u00b6\nMAPE\uc5d0\uc11c \uc808\ub300\uac12\uc744 \uc81c\uc678\ud55c \uc9c0\ud45c\uc785\ub2c8\ub2e4. \uc544\ub798\uc640 \uac19\uc774 \uc815\uc758\ud569\ub2c8\ub2e4.\n$$ MAE = \\frac { \\sum ( y - \\hat y ) }{n}* 100\\% $$MPE\uc758 \uac00\uc7a5 \ud070 \uc7a5\uc810\uc740\n\n\ubaa8\ub378\uc774 underperformance \uc778\uc9c0 overperformance \uc778\uc9c0 \ud310\ub2e8 \ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \ndef MPE(y_true, y_pred): \n    return np.mean((y_true - y_pred) / y_true) * 100\nMPE(y_true, y_pred)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[12]:\n\n\n\n\n\n-468.23269419120248\n\n\n\n\n\n\n\n\n\n\n\n\uc74c\uc218\uc758 \uac12\uc784\uc73c\ub85c, \ubaa8\ub378\uc774 overperformance\uc784\uc744 \uc54c \uc218\uc788\uc2b5\ub2c8\ub2e4.\n\ub9c8\uce58\uba70,\u00b6\ud14c\uc774\ube14\ub85c \uac04\ub2e8\ud558\uac8c \uc815\ub9ac\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\nName\nResidual Operation\nRobust To Outliers\n\n\n\n\nMean Absolute Error\nAbsolute Value\nYes\n\n\nMean Squared Error\nSquare\nNo\n\n\nRoot Mean Squared Error\nSquare\nNo\n\n\nMean Absolute Percentage Error\nAbsolute Value\nYes\n\n\nMean Percentage Error\nN/A\nYes\n\n\n\n\ud68c\uadc0\ubb38\uc81c\uc5d0\uc11c RMSE\uac00 \uc77c\ubc18\uc801\uc73c\ub85c \uc120\ud638\ub418\ub294 \ubc29\ubc95\uc774\uc9c0\ub9cc, \uc0c1\ud669\uc5d0 \ub9de\ub294 \ub2e4\ub978 \ubc29\uc2dd\uc744 \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4.  \ud2b9\uc774\uac12\uc774 \ub9ce\uc740 \uacbd\uc6b0\uc5d0\ub294 MAE\ub97c \uc0ac\uc6a9\ud558\ub294\uac8c \uc88b\uc8e0.\n\ucd9c\ucc98\u00b6\nscikit-learn \uacf5\uc2dd\ubb38\uc11c\nUnderstanding Regression Error Metrics",
      "tags": "LinearRegression,Python,regression,\ub370\uc774\ud130 \uacfc\ud559\uc790,\uc120\ud615\ud68c\uadc0,\ud68c\uadc0",
      "url": "https://partrita.github.io/posts/regression-error/"
    },
    {
      "title": "Altair\ub85c \uc2dc\uac01\ud654\ud558\uae30",
      "text": "Altair\ub294 Vega \ubc0f Vega-Lite\uc5d0 \uae30\ubc18\ud55c Python\uc6a9 \uc120\uc5b8\uc801 \ud1b5\uacc4 \uc2dc\uac01\ud654 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. GitHub\uc5d0\uc11c \uac1c\ubc1c\ud604\ud669\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nAltair\ub97c \uc0ac\uc6a9\ud558\uba74 \ub370\uc774\ud130\uc640 \uc758\ubbf8\ub97c \uc774\ud574\ud558\ub294 \ub370 \ub354 \ub9ce\uc740 \uc2dc\uac04\uc744 \uc4f8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. Altair\uc758 API\ub294 \uac04\ub2e8\ud558\uace0 \uce5c\uc219\ud558\uba70 \uc77c\uad00\uc131\uc774 \uc788\ub294 Vega-Lite \ubb38\ubc95 \uc704\uc5d0 \uad6c\ucd95\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774 \ub2e8\uc21c\ud568\uc740 \ucd5c\uc18c\ud55c\uc758 \ucf54\ub4dc\ub85c \uc544\ub984\ub2f5\uace0 \ud6a8\uacfc\uc801\uc778 \uc2dc\uac01\ud654\ub97c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ud2b9\uc9d5\u00b6\n\uc2e0\uc911\ud558\uac8c \uc124\uacc4\ub41c \uc120\uc5b8\uc801 Python API\n\uc790\ub3d9 \uc0dd\uc131 \ub418\ub294 \ub0b4\ubd80 API\ub294 Vega-Lite\uacfc \uc644\uc804\ud788 \uc77c\uce58\ud569\ub2c8\ub2e4.\nVega-Lite JSON \uc0ac\uc591\uc5d0 \ub9de\ub294 \ucf54\ub4dc\ub97c \uc790\ub3d9 \uc0dd\uc131\ud569\ub2c8\ub2e4.\nJupyter Notebook, JupyterLab, Nteract, nbviewer\uc5d0\uc11c \uc2dc\uac01\ud654\ub97c \ud45c\uc2dc\ud569\ub2c8\ub2e4.\n\uc2dc\uac01\ud654\ub97c PNG, SVG, HTML\ub85c \ub0b4\ubcf4\ub0bc\uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\uac24\ub7ec\ub9ac\uc5d0\uc11c \uc218\uc2ed \uac00\uc9c0 \uc608\uc81c\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.\n\nAltair + Jupyter notebook\u00b6Jupyter notebook\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0, \ubc84\uc804 5.3 \uc774\uc0c1\uc5d0\uc11c \uac00\uc7a5 \uc798 \uc791\ub3d9\ud569\ub2c8\ub2e4. \ub610\ud55c \ub178\ud2b8\ubd81\uc5d0\uc11c Altair\ub97c \uc0ac\uc6a9\ud558\ub824\uba74 vega \ud328\ud0a4\uc9c0\ub97c \ucd94\uac00\ub85c \uc124\uce58\ud574\uc57c \ud569\ub2c8\ub2e4.\nAltair \uc124\uce58\ubc29\ubc95\u00b6Conda\ub97c \uc774\uc6a9\ud574 Altair\ub97c \uc124\uce58\ud558\ub824\uba74 \ub2e4\uc74c \uba85\ub839\uc744 \uc2e4\ud589\ud558\uc2ed\uc2dc\uc624.\ninstall\nconda install -c conda-forge altair vega_datasets vega\n\n\uac04\ub2e8\ud55c \ub9db\ubcf4\uae30\u00b6\uc0b0\ud3ec\ub3c4(Scatter plot)\ub97c \ud55c \ubc88 \uadf8\ub824\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport altair as alt\nfrom vega_datasets import data\n\nalt.renderers.enable('notebook')\n\niris = data.iris()\n\nalt.Chart(iris).mark_point().encode(\n    x='petalLength',\n    y='petalWidth',\n    color='species'\n)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n.vega-embed .error p {\n    color: firebrick;\n    font-size: 14px;\n}\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\nvar element = $('#854c8b58-b0e2-4e38-9440-16513f67eb0d');\nvar spec = {\"config\": {\"view\": {\"width\": 400, \"height\": 300}}, \"data\": {\"values\": [{\"petalLength\": 1.4, \"petalWidth\": 0.2, \"sepalLength\": 5.1, \"sepalWidth\": 3.5, \"species\": \"setosa\"}, {\"petalLength\": 1.4, \"petalWidth\": 0.2, \"sepalLength\": 4.9, \"sepalWidth\": 3.0, \"species\": \"setosa\"}, {\"petalLength\": 1.3, \"petalWidth\": 0.2, \"sepalLength\": 4.7, \"sepalWidth\": 3.2, \"species\": \"setosa\"}, {\"petalLength\": 1.5, \"petalWidth\": 0.2, \"sepalLength\": 4.6, \"sepalWidth\": 3.1, \"species\": \"setosa\"}, {\"petalLength\": 1.4, \"petalWidth\": 0.2, \"sepalLength\": 5.0, \"sepalWidth\": 3.6, \"species\": \"setosa\"}, {\"petalLength\": 1.7000000000000002, \"petalWidth\": 0.4, \"sepalLength\": 5.4, \"sepalWidth\": 3.9, \"species\": \"setosa\"}, {\"petalLength\": 1.4, \"petalWidth\": 0.30000000000000004, \"sepalLength\": 4.6, \"sepalWidth\": 3.4, \"species\": \"setosa\"}, {\"petalLength\": 1.5, \"petalWidth\": 0.2, \"sepalLength\": 5.0, \"sepalWidth\": 3.4, \"species\": \"setosa\"}, {\"petalLength\": 1.4, \"petalWidth\": 0.2, \"sepalLength\": 4.4, \"sepalWidth\": 2.9, \"species\": \"setosa\"}, {\"petalLength\": 1.5, \"petalWidth\": 0.1, \"sepalLength\": 4.9, \"sepalWidth\": 3.1, \"species\": \"setosa\"}, {\"petalLength\": 1.5, \"petalWidth\": 0.2, \"sepalLength\": 5.4, \"sepalWidth\": 3.7, \"species\": \"setosa\"}, {\"petalLength\": 1.6, \"petalWidth\": 0.2, \"sepalLength\": 4.8, \"sepalWidth\": 3.4, \"species\": \"setosa\"}, {\"petalLength\": 1.4, \"petalWidth\": 0.1, \"sepalLength\": 4.8, \"sepalWidth\": 3.0, \"species\": \"setosa\"}, {\"petalLength\": 1.1, \"petalWidth\": 0.1, \"sepalLength\": 4.3, \"sepalWidth\": 3.0, \"species\": \"setosa\"}, {\"petalLength\": 1.2, \"petalWidth\": 0.2, \"sepalLength\": 5.8, \"sepalWidth\": 4.0, \"species\": \"setosa\"}, {\"petalLength\": 1.5, \"petalWidth\": 0.4, \"sepalLength\": 5.7, \"sepalWidth\": 4.4, \"species\": \"setosa\"}, {\"petalLength\": 1.3, \"petalWidth\": 0.4, \"sepalLength\": 5.4, \"sepalWidth\": 3.9, \"species\": \"setosa\"}, {\"petalLength\": 1.4, \"petalWidth\": 0.30000000000000004, \"sepalLength\": 5.1, \"sepalWidth\": 3.5, \"species\": \"setosa\"}, {\"petalLength\": 1.7000000000000002, \"petalWidth\": 0.30000000000000004, \"sepalLength\": 5.7, \"sepalWidth\": 3.8, \"species\": \"setosa\"}, {\"petalLength\": 1.5, \"petalWidth\": 0.30000000000000004, \"sepalLength\": 5.1, \"sepalWidth\": 3.8, \"species\": \"setosa\"}, {\"petalLength\": 1.7000000000000002, \"petalWidth\": 0.2, \"sepalLength\": 5.4, \"sepalWidth\": 3.4, \"species\": \"setosa\"}, {\"petalLength\": 1.5, \"petalWidth\": 0.4, \"sepalLength\": 5.1, \"sepalWidth\": 3.7, \"species\": \"setosa\"}, {\"petalLength\": 1.0, \"petalWidth\": 0.2, \"sepalLength\": 4.6, \"sepalWidth\": 3.6, \"species\": \"setosa\"}, {\"petalLength\": 1.7000000000000002, \"petalWidth\": 0.5, \"sepalLength\": 5.1, \"sepalWidth\": 3.3, \"species\": \"setosa\"}, {\"petalLength\": 1.9, \"petalWidth\": 0.2, \"sepalLength\": 4.8, \"sepalWidth\": 3.4, \"species\": \"setosa\"}, {\"petalLength\": 1.6, \"petalWidth\": 0.2, \"sepalLength\": 5.0, \"sepalWidth\": 3.0, \"species\": \"setosa\"}, {\"petalLength\": 1.6, \"petalWidth\": 0.4, \"sepalLength\": 5.0, \"sepalWidth\": 3.4, \"species\": \"setosa\"}, {\"petalLength\": 1.5, \"petalWidth\": 0.2, \"sepalLength\": 5.2, \"sepalWidth\": 3.5, \"species\": \"setosa\"}, {\"petalLength\": 1.4, \"petalWidth\": 0.2, \"sepalLength\": 5.2, \"sepalWidth\": 3.4, \"species\": \"setosa\"}, {\"petalLength\": 1.6, \"petalWidth\": 0.2, \"sepalLength\": 4.7, \"sepalWidth\": 3.2, \"species\": \"setosa\"}, {\"petalLength\": 1.6, \"petalWidth\": 0.2, \"sepalLength\": 4.8, \"sepalWidth\": 3.1, \"species\": \"setosa\"}, {\"petalLength\": 1.5, \"petalWidth\": 0.4, \"sepalLength\": 5.4, \"sepalWidth\": 3.4, \"species\": \"setosa\"}, {\"petalLength\": 1.5, \"petalWidth\": 0.1, \"sepalLength\": 5.2, \"sepalWidth\": 4.1, \"species\": \"setosa\"}, {\"petalLength\": 1.4, \"petalWidth\": 0.2, \"sepalLength\": 5.5, \"sepalWidth\": 4.2, \"species\": \"setosa\"}, {\"petalLength\": 1.5, \"petalWidth\": 0.2, \"sepalLength\": 4.9, \"sepalWidth\": 3.1, \"species\": \"setosa\"}, {\"petalLength\": 1.2, \"petalWidth\": 0.2, \"sepalLength\": 5.0, \"sepalWidth\": 3.2, \"species\": \"setosa\"}, {\"petalLength\": 1.3, \"petalWidth\": 0.2, \"sepalLength\": 5.5, \"sepalWidth\": 3.5, \"species\": \"setosa\"}, {\"petalLength\": 1.4, \"petalWidth\": 0.1, \"sepalLength\": 4.9, \"sepalWidth\": 3.6, \"species\": \"setosa\"}, {\"petalLength\": 1.3, \"petalWidth\": 0.2, \"sepalLength\": 4.4, \"sepalWidth\": 3.0, \"species\": \"setosa\"}, {\"petalLength\": 1.5, \"petalWidth\": 0.2, \"sepalLength\": 5.1, \"sepalWidth\": 3.4, \"species\": \"setosa\"}, {\"petalLength\": 1.3, \"petalWidth\": 0.30000000000000004, \"sepalLength\": 5.0, \"sepalWidth\": 3.5, \"species\": \"setosa\"}, {\"petalLength\": 1.3, \"petalWidth\": 0.30000000000000004, \"sepalLength\": 4.5, \"sepalWidth\": 2.3, \"species\": \"setosa\"}, {\"petalLength\": 1.3, \"petalWidth\": 0.2, \"sepalLength\": 4.4, \"sepalWidth\": 3.2, \"species\": \"setosa\"}, {\"petalLength\": 1.6, \"petalWidth\": 0.6000000000000001, \"sepalLength\": 5.0, \"sepalWidth\": 3.5, \"species\": \"setosa\"}, {\"petalLength\": 1.9, \"petalWidth\": 0.4, \"sepalLength\": 5.1, \"sepalWidth\": 3.8, \"species\": \"setosa\"}, {\"petalLength\": 1.4, \"petalWidth\": 0.30000000000000004, \"sepalLength\": 4.8, \"sepalWidth\": 3.0, \"species\": \"setosa\"}, {\"petalLength\": 1.6, \"petalWidth\": 0.2, \"sepalLength\": 5.1, \"sepalWidth\": 3.8, \"species\": \"setosa\"}, {\"petalLength\": 1.4, \"petalWidth\": 0.2, \"sepalLength\": 4.6, \"sepalWidth\": 3.2, \"species\": \"setosa\"}, {\"petalLength\": 1.5, \"petalWidth\": 0.2, \"sepalLength\": 5.3, \"sepalWidth\": 3.7, \"species\": \"setosa\"}, {\"petalLength\": 1.4, \"petalWidth\": 0.2, \"sepalLength\": 5.0, \"sepalWidth\": 3.3, \"species\": \"setosa\"}, {\"petalLength\": 4.7, \"petalWidth\": 1.4, \"sepalLength\": 7.0, \"sepalWidth\": 3.2, \"species\": \"versicolor\"}, {\"petalLength\": 4.5, \"petalWidth\": 1.5, \"sepalLength\": 6.4, \"sepalWidth\": 3.2, \"species\": \"versicolor\"}, {\"petalLength\": 4.9, \"petalWidth\": 1.5, \"sepalLength\": 6.9, \"sepalWidth\": 3.1, \"species\": \"versicolor\"}, {\"petalLength\": 4.0, \"petalWidth\": 1.3, \"sepalLength\": 5.5, \"sepalWidth\": 2.3, \"species\": \"versicolor\"}, {\"petalLength\": 4.6, \"petalWidth\": 1.5, \"sepalLength\": 6.5, \"sepalWidth\": 2.8, \"species\": \"versicolor\"}, {\"petalLength\": 4.5, \"petalWidth\": 1.3, \"sepalLength\": 5.7, \"sepalWidth\": 2.8, \"species\": \"versicolor\"}, {\"petalLength\": 4.7, \"petalWidth\": 1.6, \"sepalLength\": 6.3, \"sepalWidth\": 3.3, \"species\": \"versicolor\"}, {\"petalLength\": 3.3, \"petalWidth\": 1.0, \"sepalLength\": 4.9, \"sepalWidth\": 2.4, \"species\": \"versicolor\"}, {\"petalLength\": 4.6, \"petalWidth\": 1.3, \"sepalLength\": 6.6, \"sepalWidth\": 2.9, \"species\": \"versicolor\"}, {\"petalLength\": 3.9, \"petalWidth\": 1.4, \"sepalLength\": 5.2, \"sepalWidth\": 2.7, \"species\": \"versicolor\"}, {\"petalLength\": 3.5, \"petalWidth\": 1.0, \"sepalLength\": 5.0, \"sepalWidth\": 2.0, \"species\": \"versicolor\"}, {\"petalLength\": 4.2, \"petalWidth\": 1.5, \"sepalLength\": 5.9, \"sepalWidth\": 3.0, \"species\": \"versicolor\"}, {\"petalLength\": 4.0, \"petalWidth\": 1.0, \"sepalLength\": 6.0, \"sepalWidth\": 2.2, \"species\": \"versicolor\"}, {\"petalLength\": 4.7, \"petalWidth\": 1.4, \"sepalLength\": 6.1, \"sepalWidth\": 2.9, \"species\": \"versicolor\"}, {\"petalLength\": 3.6, \"petalWidth\": 1.3, \"sepalLength\": 5.6, \"sepalWidth\": 2.9, \"species\": \"versicolor\"}, {\"petalLength\": 4.4, \"petalWidth\": 1.4, \"sepalLength\": 6.7, \"sepalWidth\": 3.1, \"species\": \"versicolor\"}, {\"petalLength\": 4.5, \"petalWidth\": 1.5, \"sepalLength\": 5.6, \"sepalWidth\": 3.0, \"species\": \"versicolor\"}, {\"petalLength\": 4.1, \"petalWidth\": 1.0, \"sepalLength\": 5.8, \"sepalWidth\": 2.7, \"species\": \"versicolor\"}, {\"petalLength\": 4.5, \"petalWidth\": 1.5, \"sepalLength\": 6.2, \"sepalWidth\": 2.2, \"species\": \"versicolor\"}, {\"petalLength\": 3.9, \"petalWidth\": 1.1, \"sepalLength\": 5.6, \"sepalWidth\": 2.5, \"species\": \"versicolor\"}, {\"petalLength\": 4.8, \"petalWidth\": 1.8, \"sepalLength\": 5.9, \"sepalWidth\": 3.2, \"species\": \"versicolor\"}, {\"petalLength\": 4.0, \"petalWidth\": 1.3, \"sepalLength\": 6.1, \"sepalWidth\": 2.8, \"species\": \"versicolor\"}, {\"petalLength\": 4.9, \"petalWidth\": 1.5, \"sepalLength\": 6.3, \"sepalWidth\": 2.5, \"species\": \"versicolor\"}, {\"petalLength\": 4.7, \"petalWidth\": 1.2, \"sepalLength\": 6.1, \"sepalWidth\": 2.8, \"species\": \"versicolor\"}, {\"petalLength\": 4.3, \"petalWidth\": 1.3, \"sepalLength\": 6.4, \"sepalWidth\": 2.9, \"species\": \"versicolor\"}, {\"petalLength\": 4.4, \"petalWidth\": 1.4, \"sepalLength\": 6.6, \"sepalWidth\": 3.0, \"species\": \"versicolor\"}, {\"petalLength\": 4.8, \"petalWidth\": 1.4, \"sepalLength\": 6.8, \"sepalWidth\": 2.8, \"species\": \"versicolor\"}, {\"petalLength\": 5.0, \"petalWidth\": 1.7000000000000002, \"sepalLength\": 6.7, \"sepalWidth\": 3.0, \"species\": \"versicolor\"}, {\"petalLength\": 4.5, \"petalWidth\": 1.5, \"sepalLength\": 6.0, \"sepalWidth\": 2.9, \"species\": \"versicolor\"}, {\"petalLength\": 3.5, \"petalWidth\": 1.0, \"sepalLength\": 5.7, \"sepalWidth\": 2.6, \"species\": \"versicolor\"}, {\"petalLength\": 3.8, \"petalWidth\": 1.1, \"sepalLength\": 5.5, \"sepalWidth\": 2.4, \"species\": \"versicolor\"}, {\"petalLength\": 3.7, \"petalWidth\": 1.0, \"sepalLength\": 5.5, \"sepalWidth\": 2.4, \"species\": \"versicolor\"}, {\"petalLength\": 3.9, \"petalWidth\": 1.2, \"sepalLength\": 5.8, \"sepalWidth\": 2.7, \"species\": \"versicolor\"}, {\"petalLength\": 5.1, \"petalWidth\": 1.6, \"sepalLength\": 6.0, \"sepalWidth\": 2.7, \"species\": \"versicolor\"}, {\"petalLength\": 4.5, \"petalWidth\": 1.5, \"sepalLength\": 5.4, \"sepalWidth\": 3.0, \"species\": \"versicolor\"}, {\"petalLength\": 4.5, \"petalWidth\": 1.6, \"sepalLength\": 6.0, \"sepalWidth\": 3.4, \"species\": \"versicolor\"}, {\"petalLength\": 4.7, \"petalWidth\": 1.5, \"sepalLength\": 6.7, \"sepalWidth\": 3.1, \"species\": \"versicolor\"}, {\"petalLength\": 4.4, \"petalWidth\": 1.3, \"sepalLength\": 6.3, \"sepalWidth\": 2.3, \"species\": \"versicolor\"}, {\"petalLength\": 4.1, \"petalWidth\": 1.3, \"sepalLength\": 5.6, \"sepalWidth\": 3.0, \"species\": \"versicolor\"}, {\"petalLength\": 4.0, \"petalWidth\": 1.3, \"sepalLength\": 5.5, \"sepalWidth\": 2.5, \"species\": \"versicolor\"}, {\"petalLength\": 4.4, \"petalWidth\": 1.2, \"sepalLength\": 5.5, \"sepalWidth\": 2.6, \"species\": \"versicolor\"}, {\"petalLength\": 4.6, \"petalWidth\": 1.4, \"sepalLength\": 6.1, \"sepalWidth\": 3.0, \"species\": \"versicolor\"}, {\"petalLength\": 4.0, \"petalWidth\": 1.2, \"sepalLength\": 5.8, \"sepalWidth\": 2.6, \"species\": \"versicolor\"}, {\"petalLength\": 3.3, \"petalWidth\": 1.0, \"sepalLength\": 5.0, \"sepalWidth\": 2.3, \"species\": \"versicolor\"}, {\"petalLength\": 4.2, \"petalWidth\": 1.3, \"sepalLength\": 5.6, \"sepalWidth\": 2.7, \"species\": \"versicolor\"}, {\"petalLength\": 4.2, \"petalWidth\": 1.2, \"sepalLength\": 5.7, \"sepalWidth\": 3.0, \"species\": \"versicolor\"}, {\"petalLength\": 4.2, \"petalWidth\": 1.3, \"sepalLength\": 5.7, \"sepalWidth\": 2.9, \"species\": \"versicolor\"}, {\"petalLength\": 4.3, \"petalWidth\": 1.3, \"sepalLength\": 6.2, \"sepalWidth\": 2.9, \"species\": \"versicolor\"}, {\"petalLength\": 3.0, \"petalWidth\": 1.1, \"sepalLength\": 5.1, \"sepalWidth\": 2.5, \"species\": \"versicolor\"}, {\"petalLength\": 4.1, \"petalWidth\": 1.3, \"sepalLength\": 5.7, \"sepalWidth\": 2.8, \"species\": \"versicolor\"}, {\"petalLength\": 6.0, \"petalWidth\": 2.5, \"sepalLength\": 6.3, \"sepalWidth\": 3.3, \"species\": \"virginica\"}, {\"petalLength\": 5.1, \"petalWidth\": 1.9, \"sepalLength\": 5.8, \"sepalWidth\": 2.7, \"species\": \"virginica\"}, {\"petalLength\": 5.9, \"petalWidth\": 2.1, \"sepalLength\": 7.1, \"sepalWidth\": 3.0, \"species\": \"virginica\"}, {\"petalLength\": 5.6, \"petalWidth\": 1.8, \"sepalLength\": 6.3, \"sepalWidth\": 2.9, \"species\": \"virginica\"}, {\"petalLength\": 5.8, \"petalWidth\": 2.2, \"sepalLength\": 6.5, \"sepalWidth\": 3.0, \"species\": \"virginica\"}, {\"petalLength\": 6.6, \"petalWidth\": 2.1, \"sepalLength\": 7.6, \"sepalWidth\": 3.0, \"species\": \"virginica\"}, {\"petalLength\": 4.5, \"petalWidth\": 1.7000000000000002, \"sepalLength\": 4.9, \"sepalWidth\": 2.5, \"species\": \"virginica\"}, {\"petalLength\": 6.3, \"petalWidth\": 1.8, \"sepalLength\": 7.3, \"sepalWidth\": 2.9, \"species\": \"virginica\"}, {\"petalLength\": 5.8, \"petalWidth\": 1.8, \"sepalLength\": 6.7, \"sepalWidth\": 2.5, \"species\": \"virginica\"}, {\"petalLength\": 6.1, \"petalWidth\": 2.5, \"sepalLength\": 7.2, \"sepalWidth\": 3.6, \"species\": \"virginica\"}, {\"petalLength\": 5.1, \"petalWidth\": 2.0, \"sepalLength\": 6.5, \"sepalWidth\": 3.2, \"species\": \"virginica\"}, {\"petalLength\": 5.3, \"petalWidth\": 1.9, \"sepalLength\": 6.4, \"sepalWidth\": 2.7, \"species\": \"virginica\"}, {\"petalLength\": 5.5, \"petalWidth\": 2.1, \"sepalLength\": 6.8, \"sepalWidth\": 3.0, \"species\": \"virginica\"}, {\"petalLength\": 5.0, \"petalWidth\": 2.0, \"sepalLength\": 5.7, \"sepalWidth\": 2.5, \"species\": \"virginica\"}, {\"petalLength\": 5.1, \"petalWidth\": 2.4, \"sepalLength\": 5.8, \"sepalWidth\": 2.8, \"species\": \"virginica\"}, {\"petalLength\": 5.3, \"petalWidth\": 2.3, \"sepalLength\": 6.4, \"sepalWidth\": 3.2, \"species\": \"virginica\"}, {\"petalLength\": 5.5, \"petalWidth\": 1.8, \"sepalLength\": 6.5, \"sepalWidth\": 3.0, \"species\": \"virginica\"}, {\"petalLength\": 6.7, \"petalWidth\": 2.2, \"sepalLength\": 7.7, \"sepalWidth\": 3.8, \"species\": \"virginica\"}, {\"petalLength\": 6.9, \"petalWidth\": 2.3, \"sepalLength\": 7.7, \"sepalWidth\": 2.6, \"species\": \"virginica\"}, {\"petalLength\": 5.0, \"petalWidth\": 1.5, \"sepalLength\": 6.0, \"sepalWidth\": 2.2, \"species\": \"virginica\"}, {\"petalLength\": 5.7, \"petalWidth\": 2.3, \"sepalLength\": 6.9, \"sepalWidth\": 3.2, \"species\": \"virginica\"}, {\"petalLength\": 4.9, \"petalWidth\": 2.0, \"sepalLength\": 5.6, \"sepalWidth\": 2.8, \"species\": \"virginica\"}, {\"petalLength\": 6.7, \"petalWidth\": 2.0, \"sepalLength\": 7.7, \"sepalWidth\": 2.8, \"species\": \"virginica\"}, {\"petalLength\": 4.9, \"petalWidth\": 1.8, \"sepalLength\": 6.3, \"sepalWidth\": 2.7, \"species\": \"virginica\"}, {\"petalLength\": 5.7, \"petalWidth\": 2.1, \"sepalLength\": 6.7, \"sepalWidth\": 3.3, \"species\": \"virginica\"}, {\"petalLength\": 6.0, \"petalWidth\": 1.8, \"sepalLength\": 7.2, \"sepalWidth\": 3.2, \"species\": \"virginica\"}, {\"petalLength\": 4.8, \"petalWidth\": 1.8, \"sepalLength\": 6.2, \"sepalWidth\": 2.8, \"species\": \"virginica\"}, {\"petalLength\": 4.9, \"petalWidth\": 1.8, \"sepalLength\": 6.1, \"sepalWidth\": 3.0, \"species\": \"virginica\"}, {\"petalLength\": 5.6, \"petalWidth\": 2.1, \"sepalLength\": 6.4, \"sepalWidth\": 2.8, \"species\": \"virginica\"}, {\"petalLength\": 5.8, \"petalWidth\": 1.6, \"sepalLength\": 7.2, \"sepalWidth\": 3.0, \"species\": \"virginica\"}, {\"petalLength\": 6.1, \"petalWidth\": 1.9, \"sepalLength\": 7.4, \"sepalWidth\": 2.8, \"species\": \"virginica\"}, {\"petalLength\": 6.4, \"petalWidth\": 2.0, \"sepalLength\": 7.9, \"sepalWidth\": 3.8, \"species\": \"virginica\"}, {\"petalLength\": 5.6, \"petalWidth\": 2.2, \"sepalLength\": 6.4, \"sepalWidth\": 2.8, \"species\": \"virginica\"}, {\"petalLength\": 5.1, \"petalWidth\": 1.5, \"sepalLength\": 6.3, \"sepalWidth\": 2.8, \"species\": \"virginica\"}, {\"petalLength\": 5.6, \"petalWidth\": 1.4, \"sepalLength\": 6.1, \"sepalWidth\": 2.6, \"species\": \"virginica\"}, {\"petalLength\": 6.1, \"petalWidth\": 2.3, \"sepalLength\": 7.7, \"sepalWidth\": 3.0, \"species\": \"virginica\"}, {\"petalLength\": 5.6, \"petalWidth\": 2.4, \"sepalLength\": 6.3, \"sepalWidth\": 3.4, \"species\": \"virginica\"}, {\"petalLength\": 5.5, \"petalWidth\": 1.8, \"sepalLength\": 6.4, \"sepalWidth\": 3.1, \"species\": \"virginica\"}, {\"petalLength\": 4.8, \"petalWidth\": 1.8, \"sepalLength\": 6.0, \"sepalWidth\": 3.0, \"species\": \"virginica\"}, {\"petalLength\": 5.4, \"petalWidth\": 2.1, \"sepalLength\": 6.9, \"sepalWidth\": 3.1, \"species\": \"virginica\"}, {\"petalLength\": 5.6, \"petalWidth\": 2.4, \"sepalLength\": 6.7, \"sepalWidth\": 3.1, \"species\": \"virginica\"}, {\"petalLength\": 5.1, \"petalWidth\": 2.3, \"sepalLength\": 6.9, \"sepalWidth\": 3.1, \"species\": \"virginica\"}, {\"petalLength\": 5.1, \"petalWidth\": 1.9, \"sepalLength\": 5.8, \"sepalWidth\": 2.7, \"species\": \"virginica\"}, {\"petalLength\": 5.9, \"petalWidth\": 2.3, \"sepalLength\": 6.8, \"sepalWidth\": 3.2, \"species\": \"virginica\"}, {\"petalLength\": 5.7, \"petalWidth\": 2.5, \"sepalLength\": 6.7, \"sepalWidth\": 3.3, \"species\": \"virginica\"}, {\"petalLength\": 5.2, \"petalWidth\": 2.3, \"sepalLength\": 6.7, \"sepalWidth\": 3.0, \"species\": \"virginica\"}, {\"petalLength\": 5.0, \"petalWidth\": 1.9, \"sepalLength\": 6.3, \"sepalWidth\": 2.5, \"species\": \"virginica\"}, {\"petalLength\": 5.2, \"petalWidth\": 2.0, \"sepalLength\": 6.5, \"sepalWidth\": 3.0, \"species\": \"virginica\"}, {\"petalLength\": 5.4, \"petalWidth\": 2.3, \"sepalLength\": 6.2, \"sepalWidth\": 3.4, \"species\": \"virginica\"}, {\"petalLength\": 5.1, \"petalWidth\": 1.8, \"sepalLength\": 5.9, \"sepalWidth\": 3.0, \"species\": \"virginica\"}]}, \"mark\": \"point\", \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"species\"}, \"x\": {\"type\": \"quantitative\", \"field\": \"petalLength\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"petalWidth\"}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.4.3.json\"};\nvar opt = {};\nvar selector = \"#85aa5516-1d96-4794-a60d-73491f2d902b\";\nvar type = \"vega-lite\";\n\nvar output_area = this;\n\nrequire(['nbextensions/jupyter-vega/index'], function(vega) {\n  vega.render(selector, spec, type, opt, output_area);\n}, function (err) {\n  if (err.requireType !== 'scripterror') {\n    throw(err);\n  }\n});\n\n\n\n\n\n\n\n\n    Out[1]:\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc0ac\uc6a9\ub418\ub294 \ub370\uc774\ud130\uc758 \ud615\ud0dc\u00b6Altair\uc758 \ub370\uc774\ud130\ub294 Pandas Dataframe\uc744 \uae30\ubc18\uc73c\ub85c \uad6c\ucd95\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774 \ud29c\ud1a0\ub9ac\uc5bc\uc5d0\uc11c\ub294 \uc544\ub798\uc640 \uac19\uc740 \uac04\ub2e8\ud55c Dataframe\uc744 \uc791\uc131\ud574 \uc0ac\uc6a9\ud560 \uac81\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub370\uc774\ud130\uc758 \ub808\uc774\ube14\uc774\uc788\ub294 \uc5f4\uc740 Altair\uc758 \uc2dc\uac01\ud654\uc5d0 \ud544\uc218\uc801\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nimport pandas as pd\ndata = pd.DataFrame({'a': list('CCCDDDEEE'),\n                     'b': [2, 7, 4, 1, 2, 6, 8, 4, 7]})\n\n\n    \n\n\n\n\n\n\n\n\ucc28\ud2b8 \uac1c\uccb4(Chart Object)\u00b6Altair\uc758 \uae30\ubcf8 \uac1d\uccb4\ub294 \ub370\uc774\ud130(Dataframe)\ub97c \ub2e8\uc77c \uc778\uc218\ub85c \ucde8\ud558\ub294 Chart\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nimport altair as alt\nchart = alt.Chart(data)\n\n\n    \n\n\n\n\n\n\n\n\uc704\uc5d0\uc11c Chart \uac1d\uccb4\ub97c \uc815\uc758\ud588\uc9c0\ub9cc \uc544\uc9c1 \ucc28\ud2b8\uc5d0 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ub294 \ud558\uc9c0 \uc54a\uc558\uc2b5\ub2c8\ub2e4. \uc778\ucf54\ub529\uacfc \ub9c8\ud06c\uc791\uc5c5\uc744 \ud1b5\ud574 \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\uc778\ucf54\ub529 \uacfc \ub9c8\ud06c(Encodings and Marks)\u00b6\ucc28\ud2b8 \uac1c\uccb4\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130\ub97c \uc2dc\uac01\ud654\ud558\ub294 \ubc29\ubc95\uc744 \uc9c0\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774 \uc791\uc5c5\uc740 Chart \uac1d\uccb4\uc758 mark \uc18d\uc131\uc744 \ud1b5\ud574 \uc218\ud589\ub429\ub2c8\ub2e4. Chart.mark_* \uba54\uc18c\ub4dc\ub97c \ud1b5\ud574 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 mark_point()\ub97c \uc0ac\uc6a9\ud558\uc5ec \ub370\uc774\ud130\ub97c \uc810\uc73c\ub85c \ud45c\uc2dc \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nalt.Chart(data).mark_point()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n.vega-embed .error p {\n    color: firebrick;\n    font-size: 14px;\n}\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\nvar element = $('#f2b49622-0568-408e-ab6b-52f746d44fb9');\nvar spec = {\"config\": {\"view\": {\"width\": 400, \"height\": 300}}, \"data\": {\"values\": [{\"a\": \"C\", \"b\": 2}, {\"a\": \"C\", \"b\": 7}, {\"a\": \"C\", \"b\": 4}, {\"a\": \"D\", \"b\": 1}, {\"a\": \"D\", \"b\": 2}, {\"a\": \"D\", \"b\": 6}, {\"a\": \"E\", \"b\": 8}, {\"a\": \"E\", \"b\": 4}, {\"a\": \"E\", \"b\": 7}]}, \"mark\": \"point\", \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.4.3.json\"};\nvar opt = {};\nvar selector = \"#bdc8fcb6-9578-49a2-a151-c367fdc02031\";\nvar type = \"vega-lite\";\n\nvar output_area = this;\n\nrequire(['nbextensions/jupyter-vega/index'], function(vega) {\n  vega.render(selector, spec, type, opt, output_area);\n}, function (err) {\n  if (err.requireType !== 'scripterror') {\n    throw(err);\n  }\n});\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc5ec\uae30\uc11c \ub80c\ub354\ub9c1\uc740 \ub370\uc774\ud130 \uc138\ud2b8\uc758 \ud55c \ud589\ub2f9 \ud558\ub098\uc758 \uc810\uc73c\ub85c \uad6c\uc131\ub418\uba70,\uc774 \uc810\ub4e4\uc5d0 \ub300\ud55c \uc704\uce58\ub97c \uc544\uc9c1 \uc9c0\uc815\ud558\uc9c0 \uc54a\uc558\uae30 \ub54c\ubb38\uc5d0 \ubaa8\ub450 \uacb9\uccd0\uc838\uc11c \ud45c\uc2dc\ub429\ub2c8\ub2e4.\n\ud3ec\uc778\ud2b8\ub97c \uc2dc\uac01\uc801\uc73c\ub85c \ubd84\ub9ac\ud558\uae30 \uc704\ud574 \ub2e4\uc591\ud55c \uc778\ucf54\ub529 \ucc44\ub110\uc744 \ub370\uc774\ud130\uc758 \uc5f4\uc5d0 \ub9e4\ud551 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 \ub370\uc774\ud130\uc758 \ubcc0\uc218 a\ub97c x\ucd95 \uc704\uce58\ub97c \ub098\ud0c0\ub0b4\ub294 x \ucc44\ub110\ub85c \uc778\ucf54\ub529 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc740 Chart.encode() \uba54\uc18c\ub4dc\ub85c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nencode() \uba54\uc11c\ub4dc\ub294 \uc778\ucf54\ub529 \ucc44\ub110(x, y, \uc0c9\uc0c1, \ubaa8\uc591, \ud06c\uae30 \ub4f1)\uc744 \uc5f4 \uc774\ub984\uc73c\ub85c \uc811\uadfc \ud560 \uc218 \uc788\uac8c \ud569\ub2c8\ub2e4. Pandas dataframe\uc758 \uacbd\uc6b0 Altair\uac00 \uac01\uac01\uc758 \uc5f4\uc5d0 \uc801\ud569\ud55c \ub370\uc774\ud130 \uc720\ud615\uc744 \uc790\ub3d9\uc73c\ub85c \uc815\ud574 \uc90d\ub2c8\ub2e4.\n\uc774\uc81c \uc608\uc2dc\ub4e4\ub97c \ud1b5\ud574 \ud655\uc778\ud574 \ubd05\uc2dc\ub2e4.\n\ub9c9\ub300\uadf8\ub798\ud504(bar graph)\u00b6\n\n\n\n\n\nIn\u00a0[5]:\n\n    \n# simple barplot\nimport altair as alt\nimport pandas as pd\n\ndata = pd.DataFrame({\n    'a': ['A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I'],\n    'b': [28, 55, 43, 91, 81, 53, 19, 87, 52]\n})\n\nalt.Chart(data).mark_bar().encode(\n    x='a',\n    y='b')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n.vega-embed .error p {\n    color: firebrick;\n    font-size: 14px;\n}\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\nvar element = $('#37d72eef-5400-42da-abf1-8a952f22076f');\nvar spec = {\"config\": {\"view\": {\"width\": 400, \"height\": 300}}, \"data\": {\"values\": [{\"a\": \"A\", \"b\": 28}, {\"a\": \"B\", \"b\": 55}, {\"a\": \"C\", \"b\": 43}, {\"a\": \"D\", \"b\": 91}, {\"a\": \"E\", \"b\": 81}, {\"a\": \"F\", \"b\": 53}, {\"a\": \"G\", \"b\": 19}, {\"a\": \"H\", \"b\": 87}, {\"a\": \"I\", \"b\": 52}]}, \"mark\": \"bar\", \"encoding\": {\"x\": {\"type\": \"nominal\", \"field\": \"a\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"b\"}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.4.3.json\"};\nvar opt = {};\nvar selector = \"#a930f691-81d8-4ecf-872d-cfa264f8a9a3\";\nvar type = \"vega-lite\";\n\nvar output_area = this;\n\nrequire(['nbextensions/jupyter-vega/index'], function(vega) {\n  vega.render(selector, spec, type, opt, output_area);\n}, function (err) {\n  if (err.requireType !== 'scripterror') {\n    throw(err);\n  }\n});\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc120\uadf8\ub798\ud504(line graph)\u00b6\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nimport altair as alt\nimport numpy as np\nimport pandas as pd\n\nx = np.arange(100)\ndata = pd.DataFrame({'x': x,\n                     'sin(x)': np.sin(x / 5)})\n\nalt.Chart(data).mark_line().encode(\n    x='x',\n    y='sin(x)'\n)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n.vega-embed .error p {\n    color: firebrick;\n    font-size: 14px;\n}\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\nvar element = $('#ac57a43c-07a5-4e92-922d-45922f3f2892');\nvar spec = {\"config\": {\"view\": {\"width\": 400, \"height\": 300}}, \"data\": {\"values\": [{\"sin(x)\": 0.0, \"x\": 0}, {\"sin(x)\": 0.19866933079506122, \"x\": 1}, {\"sin(x)\": 0.3894183423086505, \"x\": 2}, {\"sin(x)\": 0.5646424733950354, \"x\": 3}, {\"sin(x)\": 0.7173560908995228, \"x\": 4}, {\"sin(x)\": 0.8414709848078965, \"x\": 5}, {\"sin(x)\": 0.9320390859672263, \"x\": 6}, {\"sin(x)\": 0.9854497299884601, \"x\": 7}, {\"sin(x)\": 0.9995736030415051, \"x\": 8}, {\"sin(x)\": 0.9738476308781951, \"x\": 9}, {\"sin(x)\": 0.9092974268256817, \"x\": 10}, {\"sin(x)\": 0.8084964038195901, \"x\": 11}, {\"sin(x)\": 0.675463180551151, \"x\": 12}, {\"sin(x)\": 0.5155013718214642, \"x\": 13}, {\"sin(x)\": 0.3349881501559051, \"x\": 14}, {\"sin(x)\": 0.1411200080598672, \"x\": 15}, {\"sin(x)\": -0.058374143427580086, \"x\": 16}, {\"sin(x)\": -0.2555411020268312, \"x\": 17}, {\"sin(x)\": -0.44252044329485246, \"x\": 18}, {\"sin(x)\": -0.6118578909427189, \"x\": 19}, {\"sin(x)\": -0.7568024953079282, \"x\": 20}, {\"sin(x)\": -0.8715757724135882, \"x\": 21}, {\"sin(x)\": -0.951602073889516, \"x\": 22}, {\"sin(x)\": -0.9936910036334644, \"x\": 23}, {\"sin(x)\": -0.9961646088358407, \"x\": 24}, {\"sin(x)\": -0.9589242746631385, \"x\": 25}, {\"sin(x)\": -0.8834546557201531, \"x\": 26}, {\"sin(x)\": -0.7727644875559871, \"x\": 27}, {\"sin(x)\": -0.6312666378723216, \"x\": 28}, {\"sin(x)\": -0.46460217941375737, \"x\": 29}, {\"sin(x)\": -0.27941549819892586, \"x\": 30}, {\"sin(x)\": -0.0830894028174964, \"x\": 31}, {\"sin(x)\": 0.11654920485049364, \"x\": 32}, {\"sin(x)\": 0.31154136351337786, \"x\": 33}, {\"sin(x)\": 0.49411335113860816, \"x\": 34}, {\"sin(x)\": 0.6569865987187891, \"x\": 35}, {\"sin(x)\": 0.7936678638491531, \"x\": 36}, {\"sin(x)\": 0.8987080958116269, \"x\": 37}, {\"sin(x)\": 0.9679196720314863, \"x\": 38}, {\"sin(x)\": 0.998543345374605, \"x\": 39}, {\"sin(x)\": 0.9893582466233818, \"x\": 40}, {\"sin(x)\": 0.9407305566797731, \"x\": 41}, {\"sin(x)\": 0.8545989080882804, \"x\": 42}, {\"sin(x)\": 0.7343970978741133, \"x\": 43}, {\"sin(x)\": 0.5849171928917617, \"x\": 44}, {\"sin(x)\": 0.4121184852417566, \"x\": 45}, {\"sin(x)\": 0.22288991410024764, \"x\": 46}, {\"sin(x)\": 0.024775425453357765, \"x\": 47}, {\"sin(x)\": -0.17432678122297965, \"x\": 48}, {\"sin(x)\": -0.3664791292519284, \"x\": 49}, {\"sin(x)\": -0.5440211108893698, \"x\": 50}, {\"sin(x)\": -0.6998746875935423, \"x\": 51}, {\"sin(x)\": -0.8278264690856537, \"x\": 52}, {\"sin(x)\": -0.9227754216128066, \"x\": 53}, {\"sin(x)\": -0.9809362300664916, \"x\": 54}, {\"sin(x)\": -0.9999902065507035, \"x\": 55}, {\"sin(x)\": -0.9791777291513174, \"x\": 56}, {\"sin(x)\": -0.9193285256646757, \"x\": 57}, {\"sin(x)\": -0.8228285949687089, \"x\": 58}, {\"sin(x)\": -0.6935250847771224, \"x\": 59}, {\"sin(x)\": -0.5365729180004349, \"x\": 60}, {\"sin(x)\": -0.3582292822368287, \"x\": 61}, {\"sin(x)\": -0.1656041754483094, \"x\": 62}, {\"sin(x)\": 0.033623047221136695, \"x\": 63}, {\"sin(x)\": 0.23150982510153895, \"x\": 64}, {\"sin(x)\": 0.4201670368266409, \"x\": 65}, {\"sin(x)\": 0.592073514707223, \"x\": 66}, {\"sin(x)\": 0.7403758899524486, \"x\": 67}, {\"sin(x)\": 0.8591618148564958, \"x\": 68}, {\"sin(x)\": 0.9436956694441048, \"x\": 69}, {\"sin(x)\": 0.9906073556948704, \"x\": 70}, {\"sin(x)\": 0.9980266527163617, \"x\": 71}, {\"sin(x)\": 0.9656577765492774, \"x\": 72}, {\"sin(x)\": 0.8947911721405042, \"x\": 73}, {\"sin(x)\": 0.7882520673753163, \"x\": 74}, {\"sin(x)\": 0.6502878401571168, \"x\": 75}, {\"sin(x)\": 0.48639868885379967, \"x\": 76}, {\"sin(x)\": 0.30311835674570226, \"x\": 77}, {\"sin(x)\": 0.10775365229944406, \"x\": 78}, {\"sin(x)\": -0.09190685022768164, \"x\": 79}, {\"sin(x)\": -0.2879033166650653, \"x\": 80}, {\"sin(x)\": -0.47242198639846616, \"x\": 81}, {\"sin(x)\": -0.6381066823479474, \"x\": 82}, {\"sin(x)\": -0.7783520785342984, \"x\": 83}, {\"sin(x)\": -0.8875670335815046, \"x\": 84}, {\"sin(x)\": -0.9613974918795568, \"x\": 85}, {\"sin(x)\": -0.9969000660415961, \"x\": 86}, {\"sin(x)\": -0.9926593804706332, \"x\": 87}, {\"sin(x)\": -0.948844497918124, \"x\": 88}, {\"sin(x)\": -0.8672021794855813, \"x\": 89}, {\"sin(x)\": -0.750987246771676, \"x\": 90}, {\"sin(x)\": -0.6048328224062841, \"x\": 91}, {\"sin(x)\": -0.43456562207189675, \"x\": 92}, {\"sin(x)\": -0.2469736617366209, \"x\": 93}, {\"sin(x)\": -0.04953564087836742, \"x\": 94}, {\"sin(x)\": 0.14987720966295234, \"x\": 95}, {\"sin(x)\": 0.3433149288198954, \"x\": 96}, {\"sin(x)\": 0.5230657651576964, \"x\": 97}, {\"sin(x)\": 0.6819636200681356, \"x\": 98}, {\"sin(x)\": 0.8136737375071054, \"x\": 99}]}, \"mark\": \"line\", \"encoding\": {\"x\": {\"type\": \"quantitative\", \"field\": \"x\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"sin(x)\"}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.4.3.json\"};\nvar opt = {};\nvar selector = \"#12753ac6-9155-487b-8261-341a23363d3a\";\nvar type = \"vega-lite\";\n\nvar output_area = this;\n\nrequire(['nbextensions/jupyter-vega/index'], function(vega) {\n  vega.render(selector, spec, type, opt, output_area);\n}, function (err) {\n  if (err.requireType !== 'scripterror') {\n    throw(err);\n  }\n});\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc120\uadf8\ub798\ud504\uc5d0 \ub370\uc774\ud130\ub97c \uc810\uc73c\ub85c \ud45c\uc2dc\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[7]:\n\n    \nimport altair as alt\nimport numpy as np\nimport pandas as pd\n\nx = np.arange(100)\ndata = pd.DataFrame({'x': x,\n                     'sin(x)': np.sin(x / 5)})\n\nalt.Chart(data).mark_line(point=True).encode(\n    x='x',\n    y='sin(x)'\n)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n.vega-embed .error p {\n    color: firebrick;\n    font-size: 14px;\n}\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\nvar element = $('#2a6289be-d0ea-4af9-9169-2e5c7eb094b5');\nvar spec = {\"config\": {\"view\": {\"width\": 400, \"height\": 300}}, \"data\": {\"values\": [{\"sin(x)\": 0.0, \"x\": 0}, {\"sin(x)\": 0.19866933079506122, \"x\": 1}, {\"sin(x)\": 0.3894183423086505, \"x\": 2}, {\"sin(x)\": 0.5646424733950354, \"x\": 3}, {\"sin(x)\": 0.7173560908995228, \"x\": 4}, {\"sin(x)\": 0.8414709848078965, \"x\": 5}, {\"sin(x)\": 0.9320390859672263, \"x\": 6}, {\"sin(x)\": 0.9854497299884601, \"x\": 7}, {\"sin(x)\": 0.9995736030415051, \"x\": 8}, {\"sin(x)\": 0.9738476308781951, \"x\": 9}, {\"sin(x)\": 0.9092974268256817, \"x\": 10}, {\"sin(x)\": 0.8084964038195901, \"x\": 11}, {\"sin(x)\": 0.675463180551151, \"x\": 12}, {\"sin(x)\": 0.5155013718214642, \"x\": 13}, {\"sin(x)\": 0.3349881501559051, \"x\": 14}, {\"sin(x)\": 0.1411200080598672, \"x\": 15}, {\"sin(x)\": -0.058374143427580086, \"x\": 16}, {\"sin(x)\": -0.2555411020268312, \"x\": 17}, {\"sin(x)\": -0.44252044329485246, \"x\": 18}, {\"sin(x)\": -0.6118578909427189, \"x\": 19}, {\"sin(x)\": -0.7568024953079282, \"x\": 20}, {\"sin(x)\": -0.8715757724135882, \"x\": 21}, {\"sin(x)\": -0.951602073889516, \"x\": 22}, {\"sin(x)\": -0.9936910036334644, \"x\": 23}, {\"sin(x)\": -0.9961646088358407, \"x\": 24}, {\"sin(x)\": -0.9589242746631385, \"x\": 25}, {\"sin(x)\": -0.8834546557201531, \"x\": 26}, {\"sin(x)\": -0.7727644875559871, \"x\": 27}, {\"sin(x)\": -0.6312666378723216, \"x\": 28}, {\"sin(x)\": -0.46460217941375737, \"x\": 29}, {\"sin(x)\": -0.27941549819892586, \"x\": 30}, {\"sin(x)\": -0.0830894028174964, \"x\": 31}, {\"sin(x)\": 0.11654920485049364, \"x\": 32}, {\"sin(x)\": 0.31154136351337786, \"x\": 33}, {\"sin(x)\": 0.49411335113860816, \"x\": 34}, {\"sin(x)\": 0.6569865987187891, \"x\": 35}, {\"sin(x)\": 0.7936678638491531, \"x\": 36}, {\"sin(x)\": 0.8987080958116269, \"x\": 37}, {\"sin(x)\": 0.9679196720314863, \"x\": 38}, {\"sin(x)\": 0.998543345374605, \"x\": 39}, {\"sin(x)\": 0.9893582466233818, \"x\": 40}, {\"sin(x)\": 0.9407305566797731, \"x\": 41}, {\"sin(x)\": 0.8545989080882804, \"x\": 42}, {\"sin(x)\": 0.7343970978741133, \"x\": 43}, {\"sin(x)\": 0.5849171928917617, \"x\": 44}, {\"sin(x)\": 0.4121184852417566, \"x\": 45}, {\"sin(x)\": 0.22288991410024764, \"x\": 46}, {\"sin(x)\": 0.024775425453357765, \"x\": 47}, {\"sin(x)\": -0.17432678122297965, \"x\": 48}, {\"sin(x)\": -0.3664791292519284, \"x\": 49}, {\"sin(x)\": -0.5440211108893698, \"x\": 50}, {\"sin(x)\": -0.6998746875935423, \"x\": 51}, {\"sin(x)\": -0.8278264690856537, \"x\": 52}, {\"sin(x)\": -0.9227754216128066, \"x\": 53}, {\"sin(x)\": -0.9809362300664916, \"x\": 54}, {\"sin(x)\": -0.9999902065507035, \"x\": 55}, {\"sin(x)\": -0.9791777291513174, \"x\": 56}, {\"sin(x)\": -0.9193285256646757, \"x\": 57}, {\"sin(x)\": -0.8228285949687089, \"x\": 58}, {\"sin(x)\": -0.6935250847771224, \"x\": 59}, {\"sin(x)\": -0.5365729180004349, \"x\": 60}, {\"sin(x)\": -0.3582292822368287, \"x\": 61}, {\"sin(x)\": -0.1656041754483094, \"x\": 62}, {\"sin(x)\": 0.033623047221136695, \"x\": 63}, {\"sin(x)\": 0.23150982510153895, \"x\": 64}, {\"sin(x)\": 0.4201670368266409, \"x\": 65}, {\"sin(x)\": 0.592073514707223, \"x\": 66}, {\"sin(x)\": 0.7403758899524486, \"x\": 67}, {\"sin(x)\": 0.8591618148564958, \"x\": 68}, {\"sin(x)\": 0.9436956694441048, \"x\": 69}, {\"sin(x)\": 0.9906073556948704, \"x\": 70}, {\"sin(x)\": 0.9980266527163617, \"x\": 71}, {\"sin(x)\": 0.9656577765492774, \"x\": 72}, {\"sin(x)\": 0.8947911721405042, \"x\": 73}, {\"sin(x)\": 0.7882520673753163, \"x\": 74}, {\"sin(x)\": 0.6502878401571168, \"x\": 75}, {\"sin(x)\": 0.48639868885379967, \"x\": 76}, {\"sin(x)\": 0.30311835674570226, \"x\": 77}, {\"sin(x)\": 0.10775365229944406, \"x\": 78}, {\"sin(x)\": -0.09190685022768164, \"x\": 79}, {\"sin(x)\": -0.2879033166650653, \"x\": 80}, {\"sin(x)\": -0.47242198639846616, \"x\": 81}, {\"sin(x)\": -0.6381066823479474, \"x\": 82}, {\"sin(x)\": -0.7783520785342984, \"x\": 83}, {\"sin(x)\": -0.8875670335815046, \"x\": 84}, {\"sin(x)\": -0.9613974918795568, \"x\": 85}, {\"sin(x)\": -0.9969000660415961, \"x\": 86}, {\"sin(x)\": -0.9926593804706332, \"x\": 87}, {\"sin(x)\": -0.948844497918124, \"x\": 88}, {\"sin(x)\": -0.8672021794855813, \"x\": 89}, {\"sin(x)\": -0.750987246771676, \"x\": 90}, {\"sin(x)\": -0.6048328224062841, \"x\": 91}, {\"sin(x)\": -0.43456562207189675, \"x\": 92}, {\"sin(x)\": -0.2469736617366209, \"x\": 93}, {\"sin(x)\": -0.04953564087836742, \"x\": 94}, {\"sin(x)\": 0.14987720966295234, \"x\": 95}, {\"sin(x)\": 0.3433149288198954, \"x\": 96}, {\"sin(x)\": 0.5230657651576964, \"x\": 97}, {\"sin(x)\": 0.6819636200681356, \"x\": 98}, {\"sin(x)\": 0.8136737375071054, \"x\": 99}]}, \"mark\": {\"type\": \"line\", \"point\": true}, \"encoding\": {\"x\": {\"type\": \"quantitative\", \"field\": \"x\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"sin(x)\"}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.4.3.json\"};\nvar opt = {};\nvar selector = \"#502d05c7-575b-415a-9aa4-7029b6a00ff1\";\nvar type = \"vega-lite\";\n\nvar output_area = this;\n\nrequire(['nbextensions/jupyter-vega/index'], function(vega) {\n  vega.render(selector, spec, type, opt, output_area);\n}, function (err) {\n  if (err.requireType !== 'scripterror') {\n    throw(err);\n  }\n});\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud788\ud2b8\ub9f5(heat map)\u00b6\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nimport altair as alt\nimport numpy as np\nimport pandas as pd\n\n# Compute x2 + y2 across a 2D grid\nx, y = np.meshgrid(range(-5, 5), range(-5, 5))\nz = x ** 2 + y ** 2\n\n# Convert this grid to columnar data expected by Altair\ndata = pd.DataFrame({'x': x.ravel(),\n                     'y': y.ravel(),\n                     'z': z.ravel()})\n\nalt.Chart(data).mark_rect().encode(\n    x='x:O',\n    y='y:O',\n    color='z:Q'\n)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n.vega-embed .error p {\n    color: firebrick;\n    font-size: 14px;\n}\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\nvar element = $('#0b15f5bf-7ad0-4bd6-a32d-b1e935ea9992');\nvar spec = {\"config\": {\"view\": {\"width\": 400, \"height\": 300}}, \"data\": {\"values\": [{\"x\": -5, \"y\": -5, \"z\": 50}, {\"x\": -4, \"y\": -5, \"z\": 41}, {\"x\": -3, \"y\": -5, \"z\": 34}, {\"x\": -2, \"y\": -5, \"z\": 29}, {\"x\": -1, \"y\": -5, \"z\": 26}, {\"x\": 0, \"y\": -5, \"z\": 25}, {\"x\": 1, \"y\": -5, \"z\": 26}, {\"x\": 2, \"y\": -5, \"z\": 29}, {\"x\": 3, \"y\": -5, \"z\": 34}, {\"x\": 4, \"y\": -5, \"z\": 41}, {\"x\": -5, \"y\": -4, \"z\": 41}, {\"x\": -4, \"y\": -4, \"z\": 32}, {\"x\": -3, \"y\": -4, \"z\": 25}, {\"x\": -2, \"y\": -4, \"z\": 20}, {\"x\": -1, \"y\": -4, \"z\": 17}, {\"x\": 0, \"y\": -4, \"z\": 16}, {\"x\": 1, \"y\": -4, \"z\": 17}, {\"x\": 2, \"y\": -4, \"z\": 20}, {\"x\": 3, \"y\": -4, \"z\": 25}, {\"x\": 4, \"y\": -4, \"z\": 32}, {\"x\": -5, \"y\": -3, \"z\": 34}, {\"x\": -4, \"y\": -3, \"z\": 25}, {\"x\": -3, \"y\": -3, \"z\": 18}, {\"x\": -2, \"y\": -3, \"z\": 13}, {\"x\": -1, \"y\": -3, \"z\": 10}, {\"x\": 0, \"y\": -3, \"z\": 9}, {\"x\": 1, \"y\": -3, \"z\": 10}, {\"x\": 2, \"y\": -3, \"z\": 13}, {\"x\": 3, \"y\": -3, \"z\": 18}, {\"x\": 4, \"y\": -3, \"z\": 25}, {\"x\": -5, \"y\": -2, \"z\": 29}, {\"x\": -4, \"y\": -2, \"z\": 20}, {\"x\": -3, \"y\": -2, \"z\": 13}, {\"x\": -2, \"y\": -2, \"z\": 8}, {\"x\": -1, \"y\": -2, \"z\": 5}, {\"x\": 0, \"y\": -2, \"z\": 4}, {\"x\": 1, \"y\": -2, \"z\": 5}, {\"x\": 2, \"y\": -2, \"z\": 8}, {\"x\": 3, \"y\": -2, \"z\": 13}, {\"x\": 4, \"y\": -2, \"z\": 20}, {\"x\": -5, \"y\": -1, \"z\": 26}, {\"x\": -4, \"y\": -1, \"z\": 17}, {\"x\": -3, \"y\": -1, \"z\": 10}, {\"x\": -2, \"y\": -1, \"z\": 5}, {\"x\": -1, \"y\": -1, \"z\": 2}, {\"x\": 0, \"y\": -1, \"z\": 1}, {\"x\": 1, \"y\": -1, \"z\": 2}, {\"x\": 2, \"y\": -1, \"z\": 5}, {\"x\": 3, \"y\": -1, \"z\": 10}, {\"x\": 4, \"y\": -1, \"z\": 17}, {\"x\": -5, \"y\": 0, \"z\": 25}, {\"x\": -4, \"y\": 0, \"z\": 16}, {\"x\": -3, \"y\": 0, \"z\": 9}, {\"x\": -2, \"y\": 0, \"z\": 4}, {\"x\": -1, \"y\": 0, \"z\": 1}, {\"x\": 0, \"y\": 0, \"z\": 0}, {\"x\": 1, \"y\": 0, \"z\": 1}, {\"x\": 2, \"y\": 0, \"z\": 4}, {\"x\": 3, \"y\": 0, \"z\": 9}, {\"x\": 4, \"y\": 0, \"z\": 16}, {\"x\": -5, \"y\": 1, \"z\": 26}, {\"x\": -4, \"y\": 1, \"z\": 17}, {\"x\": -3, \"y\": 1, \"z\": 10}, {\"x\": -2, \"y\": 1, \"z\": 5}, {\"x\": -1, \"y\": 1, \"z\": 2}, {\"x\": 0, \"y\": 1, \"z\": 1}, {\"x\": 1, \"y\": 1, \"z\": 2}, {\"x\": 2, \"y\": 1, \"z\": 5}, {\"x\": 3, \"y\": 1, \"z\": 10}, {\"x\": 4, \"y\": 1, \"z\": 17}, {\"x\": -5, \"y\": 2, \"z\": 29}, {\"x\": -4, \"y\": 2, \"z\": 20}, {\"x\": -3, \"y\": 2, \"z\": 13}, {\"x\": -2, \"y\": 2, \"z\": 8}, {\"x\": -1, \"y\": 2, \"z\": 5}, {\"x\": 0, \"y\": 2, \"z\": 4}, {\"x\": 1, \"y\": 2, \"z\": 5}, {\"x\": 2, \"y\": 2, \"z\": 8}, {\"x\": 3, \"y\": 2, \"z\": 13}, {\"x\": 4, \"y\": 2, \"z\": 20}, {\"x\": -5, \"y\": 3, \"z\": 34}, {\"x\": -4, \"y\": 3, \"z\": 25}, {\"x\": -3, \"y\": 3, \"z\": 18}, {\"x\": -2, \"y\": 3, \"z\": 13}, {\"x\": -1, \"y\": 3, \"z\": 10}, {\"x\": 0, \"y\": 3, \"z\": 9}, {\"x\": 1, \"y\": 3, \"z\": 10}, {\"x\": 2, \"y\": 3, \"z\": 13}, {\"x\": 3, \"y\": 3, \"z\": 18}, {\"x\": 4, \"y\": 3, \"z\": 25}, {\"x\": -5, \"y\": 4, \"z\": 41}, {\"x\": -4, \"y\": 4, \"z\": 32}, {\"x\": -3, \"y\": 4, \"z\": 25}, {\"x\": -2, \"y\": 4, \"z\": 20}, {\"x\": -1, \"y\": 4, \"z\": 17}, {\"x\": 0, \"y\": 4, \"z\": 16}, {\"x\": 1, \"y\": 4, \"z\": 17}, {\"x\": 2, \"y\": 4, \"z\": 20}, {\"x\": 3, \"y\": 4, \"z\": 25}, {\"x\": 4, \"y\": 4, \"z\": 32}]}, \"mark\": \"rect\", \"encoding\": {\"color\": {\"type\": \"quantitative\", \"field\": \"z\"}, \"x\": {\"type\": \"ordinal\", \"field\": \"x\"}, \"y\": {\"type\": \"ordinal\", \"field\": \"y\"}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.4.3.json\"};\nvar opt = {};\nvar selector = \"#730b0c46-5dc5-4007-931f-99da5856126f\";\nvar type = \"vega-lite\";\n\nvar output_area = this;\n\nrequire(['nbextensions/jupyter-vega/index'], function(vega) {\n  vega.render(selector, spec, type, opt, output_area);\n}, function (err) {\n  if (err.requireType !== 'scripterror') {\n    throw(err);\n  }\n});\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud788\uc2a4\ud1a0\uadf8\ub7a8(histogram)\u00b6\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nimport altair as alt\nfrom vega_datasets import data\n\nmovies = data.movies.url\n\nalt.Chart(movies).mark_bar().encode(\n    alt.X(\"IMDB_Rating:Q\", bin=True),\n    y='count()',\n)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n.vega-embed .error p {\n    color: firebrick;\n    font-size: 14px;\n}\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\nvar element = $('#1e93d80a-a376-4b62-aa93-9ddd203d8bb3');\nvar spec = {\"config\": {\"view\": {\"width\": 400, \"height\": 300}}, \"data\": {\"url\": \"https://vega.github.io/vega-datasets/data/movies.json\"}, \"mark\": \"bar\", \"encoding\": {\"x\": {\"type\": \"quantitative\", \"bin\": true, \"field\": \"IMDB_Rating\"}, \"y\": {\"type\": \"quantitative\", \"aggregate\": \"count\"}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.4.3.json\"};\nvar opt = {};\nvar selector = \"#d362f89d-fec6-412c-abb6-d16c51a9a8e4\";\nvar type = \"vega-lite\";\n\nvar output_area = this;\n\nrequire(['nbextensions/jupyter-vega/index'], function(vega) {\n  vega.render(selector, spec, type, opt, output_area);\n}, function (err) {\n  if (err.requireType !== 'scripterror') {\n    throw(err);\n  }\n});\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uba74\uc801\uadf8\ub798\ud504(area graph)\u00b6\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nimport altair as alt\nfrom vega_datasets import data\n\niowa = data.iowa_electricity()\n\nalt.Chart(iowa).mark_area().encode(\n    x=\"year:T\",\n    y=\"net_generation:Q\",\n    color=\"source:N\"\n)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n.vega-embed .error p {\n    color: firebrick;\n    font-size: 14px;\n}\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\nvar element = $('#c4aeaf11-5787-4a12-8403-b62688094b53');\nvar spec = {\"config\": {\"view\": {\"width\": 400, \"height\": 300}}, \"data\": {\"values\": [{\"year\": \"2001-01-01\", \"source\": \"Fossil Fuels\", \"net_generation\": 35361}, {\"year\": \"2002-01-01\", \"source\": \"Fossil Fuels\", \"net_generation\": 35991}, {\"year\": \"2003-01-01\", \"source\": \"Fossil Fuels\", \"net_generation\": 36234}, {\"year\": \"2004-01-01\", \"source\": \"Fossil Fuels\", \"net_generation\": 36205}, {\"year\": \"2005-01-01\", \"source\": \"Fossil Fuels\", \"net_generation\": 36883}, {\"year\": \"2006-01-01\", \"source\": \"Fossil Fuels\", \"net_generation\": 37014}, {\"year\": \"2007-01-01\", \"source\": \"Fossil Fuels\", \"net_generation\": 41389}, {\"year\": \"2008-01-01\", \"source\": \"Fossil Fuels\", \"net_generation\": 42734}, {\"year\": \"2009-01-01\", \"source\": \"Fossil Fuels\", \"net_generation\": 38620}, {\"year\": \"2010-01-01\", \"source\": \"Fossil Fuels\", \"net_generation\": 42750}, {\"year\": \"2011-01-01\", \"source\": \"Fossil Fuels\", \"net_generation\": 39361}, {\"year\": \"2012-01-01\", \"source\": \"Fossil Fuels\", \"net_generation\": 37379}, {\"year\": \"2013-01-01\", \"source\": \"Fossil Fuels\", \"net_generation\": 34873}, {\"year\": \"2014-01-01\", \"source\": \"Fossil Fuels\", \"net_generation\": 35250}, {\"year\": \"2015-01-01\", \"source\": \"Fossil Fuels\", \"net_generation\": 32319}, {\"year\": \"2016-01-01\", \"source\": \"Fossil Fuels\", \"net_generation\": 28437}, {\"year\": \"2017-01-01\", \"source\": \"Fossil Fuels\", \"net_generation\": 29329}, {\"year\": \"2001-01-01\", \"source\": \"Nuclear Energy\", \"net_generation\": 3853}, {\"year\": \"2002-01-01\", \"source\": \"Nuclear Energy\", \"net_generation\": 4574}, {\"year\": \"2003-01-01\", \"source\": \"Nuclear Energy\", \"net_generation\": 3988}, {\"year\": \"2004-01-01\", \"source\": \"Nuclear Energy\", \"net_generation\": 4929}, {\"year\": \"2005-01-01\", \"source\": \"Nuclear Energy\", \"net_generation\": 4538}, {\"year\": \"2006-01-01\", \"source\": \"Nuclear Energy\", \"net_generation\": 5095}, {\"year\": \"2007-01-01\", \"source\": \"Nuclear Energy\", \"net_generation\": 4519}, {\"year\": \"2008-01-01\", \"source\": \"Nuclear Energy\", \"net_generation\": 5282}, {\"year\": \"2009-01-01\", \"source\": \"Nuclear Energy\", \"net_generation\": 4679}, {\"year\": \"2010-01-01\", \"source\": \"Nuclear Energy\", \"net_generation\": 4451}, {\"year\": \"2011-01-01\", \"source\": \"Nuclear Energy\", \"net_generation\": 5215}, {\"year\": \"2012-01-01\", \"source\": \"Nuclear Energy\", \"net_generation\": 4347}, {\"year\": \"2013-01-01\", \"source\": \"Nuclear Energy\", \"net_generation\": 5321}, {\"year\": \"2014-01-01\", \"source\": \"Nuclear Energy\", \"net_generation\": 4152}, {\"year\": \"2015-01-01\", \"source\": \"Nuclear Energy\", \"net_generation\": 5243}, {\"year\": \"2016-01-01\", \"source\": \"Nuclear Energy\", \"net_generation\": 4703}, {\"year\": \"2017-01-01\", \"source\": \"Nuclear Energy\", \"net_generation\": 5214}, {\"year\": \"2001-01-01\", \"source\": \"Renewables\", \"net_generation\": 1437}, {\"year\": \"2002-01-01\", \"source\": \"Renewables\", \"net_generation\": 1963}, {\"year\": \"2003-01-01\", \"source\": \"Renewables\", \"net_generation\": 1885}, {\"year\": \"2004-01-01\", \"source\": \"Renewables\", \"net_generation\": 2102}, {\"year\": \"2005-01-01\", \"source\": \"Renewables\", \"net_generation\": 2724}, {\"year\": \"2006-01-01\", \"source\": \"Renewables\", \"net_generation\": 3364}, {\"year\": \"2007-01-01\", \"source\": \"Renewables\", \"net_generation\": 3870}, {\"year\": \"2008-01-01\", \"source\": \"Renewables\", \"net_generation\": 5070}, {\"year\": \"2009-01-01\", \"source\": \"Renewables\", \"net_generation\": 8560}, {\"year\": \"2010-01-01\", \"source\": \"Renewables\", \"net_generation\": 10308}, {\"year\": \"2011-01-01\", \"source\": \"Renewables\", \"net_generation\": 11795}, {\"year\": \"2012-01-01\", \"source\": \"Renewables\", \"net_generation\": 14949}, {\"year\": \"2013-01-01\", \"source\": \"Renewables\", \"net_generation\": 16476}, {\"year\": \"2014-01-01\", \"source\": \"Renewables\", \"net_generation\": 17452}, {\"year\": \"2015-01-01\", \"source\": \"Renewables\", \"net_generation\": 19091}, {\"year\": \"2016-01-01\", \"source\": \"Renewables\", \"net_generation\": 21241}, {\"year\": \"2017-01-01\", \"source\": \"Renewables\", \"net_generation\": 21933}]}, \"mark\": \"area\", \"encoding\": {\"color\": {\"type\": \"nominal\", \"field\": \"source\"}, \"x\": {\"type\": \"temporal\", \"field\": \"year\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"net_generation\"}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.4.3.json\"};\nvar opt = {};\nvar selector = \"#6b26ea45-b631-44c3-84ba-66097e3164e5\";\nvar type = \"vega-lite\";\n\nvar output_area = this;\n\nrequire(['nbextensions/jupyter-vega/index'], function(vega) {\n  vega.render(selector, spec, type, opt, output_area);\n}, function (err) {\n  if (err.requireType !== 'scripterror') {\n    throw(err);\n  }\n});\n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc2a4\ud2b8\ub9bd \ud50c\ub86f(strip plot)\u00b6\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nimport altair as alt\nfrom vega_datasets import data\n\nsource = data.cars()\n\nalt.Chart(source).mark_tick().encode(\n    x='Horsepower:Q',\n    y='Cylinders:O'\n)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n.vega-embed .error p {\n    color: firebrick;\n    font-size: 14px;\n}\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\nvar element = $('#52f40740-7b98-4d63-91f4-58c0747a87ea');\nvar spec = {\"config\": {\"view\": {\"width\": 400, \"height\": 300}}, \"data\": {\"values\": [{\"Acceleration\": 12.0, \"Cylinders\": 8, \"Displacement\": 307.0, \"Horsepower\": 130.0, \"Miles_per_Gallon\": 18.0, \"Name\": \"chevrolet chevelle malibu\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3504, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 11.5, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 165.0, \"Miles_per_Gallon\": 15.0, \"Name\": \"buick skylark 320\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3693, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 11.0, \"Cylinders\": 8, \"Displacement\": 318.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 18.0, \"Name\": \"plymouth satellite\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3436, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 12.0, \"Cylinders\": 8, \"Displacement\": 304.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 16.0, \"Name\": \"amc rebel sst\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3433, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 10.5, \"Cylinders\": 8, \"Displacement\": 302.0, \"Horsepower\": 140.0, \"Miles_per_Gallon\": 17.0, \"Name\": \"ford torino\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3449, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 10.0, \"Cylinders\": 8, \"Displacement\": 429.0, \"Horsepower\": 198.0, \"Miles_per_Gallon\": 15.0, \"Name\": \"ford galaxie 500\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4341, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 9.0, \"Cylinders\": 8, \"Displacement\": 454.0, \"Horsepower\": 220.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"chevrolet impala\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4354, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 8.5, \"Cylinders\": 8, \"Displacement\": 440.0, \"Horsepower\": 215.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"plymouth fury iii\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4312, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 10.0, \"Cylinders\": 8, \"Displacement\": 455.0, \"Horsepower\": 225.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"pontiac catalina\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4425, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 8.5, \"Cylinders\": 8, \"Displacement\": 390.0, \"Horsepower\": 190.0, \"Miles_per_Gallon\": 15.0, \"Name\": \"amc ambassador dpl\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3850, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 17.5, \"Cylinders\": 4, \"Displacement\": 133.0, \"Horsepower\": 115.0, \"Miles_per_Gallon\": null, \"Name\": \"citroen ds-21 pallas\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 3090, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 11.5, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 165.0, \"Miles_per_Gallon\": null, \"Name\": \"chevrolet chevelle concours (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4142, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 11.0, \"Cylinders\": 8, \"Displacement\": 351.0, \"Horsepower\": 153.0, \"Miles_per_Gallon\": null, \"Name\": \"ford torino (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4034, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 10.5, \"Cylinders\": 8, \"Displacement\": 383.0, \"Horsepower\": 175.0, \"Miles_per_Gallon\": null, \"Name\": \"plymouth satellite (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4166, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 11.0, \"Cylinders\": 8, \"Displacement\": 360.0, \"Horsepower\": 175.0, \"Miles_per_Gallon\": null, \"Name\": \"amc rebel sst (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3850, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 10.0, \"Cylinders\": 8, \"Displacement\": 383.0, \"Horsepower\": 170.0, \"Miles_per_Gallon\": 15.0, \"Name\": \"dodge challenger se\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3563, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 8.0, \"Cylinders\": 8, \"Displacement\": 340.0, \"Horsepower\": 160.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"plymouth 'cuda 340\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3609, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 8.0, \"Cylinders\": 8, \"Displacement\": 302.0, \"Horsepower\": 140.0, \"Miles_per_Gallon\": null, \"Name\": \"ford mustang boss 302\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3353, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 9.5, \"Cylinders\": 8, \"Displacement\": 400.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 15.0, \"Name\": \"chevrolet monte carlo\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3761, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 10.0, \"Cylinders\": 8, \"Displacement\": 455.0, \"Horsepower\": 225.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"buick estate wagon (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3086, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 15.0, \"Cylinders\": 4, \"Displacement\": 113.0, \"Horsepower\": 95.0, \"Miles_per_Gallon\": 24.0, \"Name\": \"toyota corona mark ii\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2372, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 6, \"Displacement\": 198.0, \"Horsepower\": 95.0, \"Miles_per_Gallon\": 22.0, \"Name\": \"plymouth duster\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2833, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 6, \"Displacement\": 199.0, \"Horsepower\": 97.0, \"Miles_per_Gallon\": 18.0, \"Name\": \"amc hornet\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2774, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 16.0, \"Cylinders\": 6, \"Displacement\": 200.0, \"Horsepower\": 85.0, \"Miles_per_Gallon\": 21.0, \"Name\": \"ford maverick\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2587, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 27.0, \"Name\": \"datsun pl510\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2130, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 20.5, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 46.0, \"Miles_per_Gallon\": 26.0, \"Name\": \"volkswagen 1131 deluxe sedan\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 1835, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 17.5, \"Cylinders\": 4, \"Displacement\": 110.0, \"Horsepower\": 87.0, \"Miles_per_Gallon\": 25.0, \"Name\": \"peugeot 504\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2672, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 4, \"Displacement\": 107.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 24.0, \"Name\": \"audi 100 ls\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2430, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 17.5, \"Cylinders\": 4, \"Displacement\": 104.0, \"Horsepower\": 95.0, \"Miles_per_Gallon\": 25.0, \"Name\": \"saab 99e\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2375, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 12.5, \"Cylinders\": 4, \"Displacement\": 121.0, \"Horsepower\": 113.0, \"Miles_per_Gallon\": 26.0, \"Name\": \"bmw 2002\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2234, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 15.0, \"Cylinders\": 6, \"Displacement\": 199.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 21.0, \"Name\": \"amc gremlin\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2648, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 14.0, \"Cylinders\": 8, \"Displacement\": 360.0, \"Horsepower\": 215.0, \"Miles_per_Gallon\": 10.0, \"Name\": \"ford f250\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4615, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 15.0, \"Cylinders\": 8, \"Displacement\": 307.0, \"Horsepower\": 200.0, \"Miles_per_Gallon\": 10.0, \"Name\": \"chevy c20\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4376, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 13.5, \"Cylinders\": 8, \"Displacement\": 318.0, \"Horsepower\": 210.0, \"Miles_per_Gallon\": 11.0, \"Name\": \"dodge d200\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4382, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 18.5, \"Cylinders\": 8, \"Displacement\": 304.0, \"Horsepower\": 193.0, \"Miles_per_Gallon\": 9.0, \"Name\": \"hi 1200d\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4732, \"Year\": \"1970-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 27.0, \"Name\": \"datsun pl510\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2130, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 4, \"Displacement\": 140.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 28.0, \"Name\": \"chevrolet vega 2300\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2264, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 14.0, \"Cylinders\": 4, \"Displacement\": 113.0, \"Horsepower\": 95.0, \"Miles_per_Gallon\": 25.0, \"Name\": \"toyota corona\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2228, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 19.0, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": null, \"Miles_per_Gallon\": 25.0, \"Name\": \"ford pinto\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2046, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 20.0, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 48.0, \"Miles_per_Gallon\": null, \"Name\": \"volkswagen super beetle 117\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 1978, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 13.0, \"Cylinders\": 6, \"Displacement\": 232.0, \"Horsepower\": 100.0, \"Miles_per_Gallon\": 19.0, \"Name\": \"amc gremlin\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2634, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 6, \"Displacement\": 225.0, \"Horsepower\": 105.0, \"Miles_per_Gallon\": 16.0, \"Name\": \"plymouth satellite custom\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3439, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 6, \"Displacement\": 250.0, \"Horsepower\": 100.0, \"Miles_per_Gallon\": 17.0, \"Name\": \"chevrolet chevelle malibu\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3329, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 6, \"Displacement\": 250.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 19.0, \"Name\": \"ford torino 500\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3302, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 6, \"Displacement\": 232.0, \"Horsepower\": 100.0, \"Miles_per_Gallon\": 18.0, \"Name\": \"amc matador\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3288, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 12.0, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 165.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"chevrolet impala\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4209, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 11.5, \"Cylinders\": 8, \"Displacement\": 400.0, \"Horsepower\": 175.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"pontiac catalina brougham\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4464, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 13.5, \"Cylinders\": 8, \"Displacement\": 351.0, \"Horsepower\": 153.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"ford galaxie 500\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4154, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 13.0, \"Cylinders\": 8, \"Displacement\": 318.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"plymouth fury iii\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4096, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 11.5, \"Cylinders\": 8, \"Displacement\": 383.0, \"Horsepower\": 180.0, \"Miles_per_Gallon\": 12.0, \"Name\": \"dodge monaco (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4955, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 12.0, \"Cylinders\": 8, \"Displacement\": 400.0, \"Horsepower\": 170.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"ford country squire (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4746, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 12.0, \"Cylinders\": 8, \"Displacement\": 400.0, \"Horsepower\": 175.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"pontiac safari (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 5140, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 13.5, \"Cylinders\": 6, \"Displacement\": 258.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 18.0, \"Name\": \"amc hornet sportabout (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2962, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 19.0, \"Cylinders\": 4, \"Displacement\": 140.0, \"Horsepower\": 72.0, \"Miles_per_Gallon\": 22.0, \"Name\": \"chevrolet vega (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2408, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 15.0, \"Cylinders\": 6, \"Displacement\": 250.0, \"Horsepower\": 100.0, \"Miles_per_Gallon\": 19.0, \"Name\": \"pontiac firebird\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3282, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 6, \"Displacement\": 250.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 18.0, \"Name\": \"ford mustang\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3139, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 14.0, \"Cylinders\": 4, \"Displacement\": 122.0, \"Horsepower\": 86.0, \"Miles_per_Gallon\": 23.0, \"Name\": \"mercury capri 2000\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2220, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 14.0, \"Cylinders\": 4, \"Displacement\": 116.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 28.0, \"Name\": \"opel 1900\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2123, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 19.5, \"Cylinders\": 4, \"Displacement\": 79.0, \"Horsepower\": 70.0, \"Miles_per_Gallon\": 30.0, \"Name\": \"peugeot 304\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2074, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 4, \"Displacement\": 88.0, \"Horsepower\": 76.0, \"Miles_per_Gallon\": 30.0, \"Name\": \"fiat 124b\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2065, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 19.0, \"Cylinders\": 4, \"Displacement\": 71.0, \"Horsepower\": 65.0, \"Miles_per_Gallon\": 31.0, \"Name\": \"toyota corolla 1200\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1773, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 18.0, \"Cylinders\": 4, \"Displacement\": 72.0, \"Horsepower\": 69.0, \"Miles_per_Gallon\": 35.0, \"Name\": \"datsun 1200\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1613, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 19.0, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 60.0, \"Miles_per_Gallon\": 27.0, \"Name\": \"volkswagen model 111\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 1834, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 20.5, \"Cylinders\": 4, \"Displacement\": 91.0, \"Horsepower\": 70.0, \"Miles_per_Gallon\": 26.0, \"Name\": \"plymouth cricket\", \"Origin\": \"USA\", \"Weight_in_lbs\": 1955, \"Year\": \"1971-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 4, \"Displacement\": 113.0, \"Horsepower\": 95.0, \"Miles_per_Gallon\": 24.0, \"Name\": \"toyota corona hardtop\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2278, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 17.0, \"Cylinders\": 4, \"Displacement\": 97.5, \"Horsepower\": 80.0, \"Miles_per_Gallon\": 25.0, \"Name\": \"dodge colt hardtop\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2126, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 23.5, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 54.0, \"Miles_per_Gallon\": 23.0, \"Name\": \"volkswagen type 3\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2254, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 19.5, \"Cylinders\": 4, \"Displacement\": 140.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 20.0, \"Name\": \"chevrolet vega\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2408, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 16.5, \"Cylinders\": 4, \"Displacement\": 122.0, \"Horsepower\": 86.0, \"Miles_per_Gallon\": 21.0, \"Name\": \"ford pinto runabout\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2226, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 12.0, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 165.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"chevrolet impala\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4274, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 12.0, \"Cylinders\": 8, \"Displacement\": 400.0, \"Horsepower\": 175.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"pontiac catalina\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4385, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 13.5, \"Cylinders\": 8, \"Displacement\": 318.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 15.0, \"Name\": \"plymouth fury iii\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4135, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 13.0, \"Cylinders\": 8, \"Displacement\": 351.0, \"Horsepower\": 153.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"ford galaxie 500\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4129, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 11.5, \"Cylinders\": 8, \"Displacement\": 304.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 17.0, \"Name\": \"amc ambassador sst\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3672, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 11.0, \"Cylinders\": 8, \"Displacement\": 429.0, \"Horsepower\": 208.0, \"Miles_per_Gallon\": 11.0, \"Name\": \"mercury marquis\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4633, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 13.5, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 155.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"buick lesabre custom\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4502, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 13.5, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 160.0, \"Miles_per_Gallon\": 12.0, \"Name\": \"oldsmobile delta 88 royale\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4456, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 12.5, \"Cylinders\": 8, \"Displacement\": 400.0, \"Horsepower\": 190.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"chrysler newport royal\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4422, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 13.5, \"Cylinders\": 3, \"Displacement\": 70.0, \"Horsepower\": 97.0, \"Miles_per_Gallon\": 19.0, \"Name\": \"mazda rx2 coupe\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2330, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 12.5, \"Cylinders\": 8, \"Displacement\": 304.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 15.0, \"Name\": \"amc matador (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3892, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 14.0, \"Cylinders\": 8, \"Displacement\": 307.0, \"Horsepower\": 130.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"chevrolet chevelle concours (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4098, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 16.0, \"Cylinders\": 8, \"Displacement\": 302.0, \"Horsepower\": 140.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"ford gran torino (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4294, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 14.0, \"Cylinders\": 8, \"Displacement\": 318.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"plymouth satellite custom (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4077, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 4, \"Displacement\": 121.0, \"Horsepower\": 112.0, \"Miles_per_Gallon\": 18.0, \"Name\": \"volvo 145e (sw)\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2933, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 18.0, \"Cylinders\": 4, \"Displacement\": 121.0, \"Horsepower\": 76.0, \"Miles_per_Gallon\": 22.0, \"Name\": \"volkswagen 411 (sw)\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2511, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 19.5, \"Cylinders\": 4, \"Displacement\": 120.0, \"Horsepower\": 87.0, \"Miles_per_Gallon\": 21.0, \"Name\": \"peugeot 504 (sw)\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2979, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 18.0, \"Cylinders\": 4, \"Displacement\": 96.0, \"Horsepower\": 69.0, \"Miles_per_Gallon\": 26.0, \"Name\": \"renault 12 (sw)\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2189, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 16.0, \"Cylinders\": 4, \"Displacement\": 122.0, \"Horsepower\": 86.0, \"Miles_per_Gallon\": 22.0, \"Name\": \"ford pinto (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2395, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 17.0, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 92.0, \"Miles_per_Gallon\": 28.0, \"Name\": \"datsun 510 (sw)\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2288, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 4, \"Displacement\": 120.0, \"Horsepower\": 97.0, \"Miles_per_Gallon\": 23.0, \"Name\": \"toyouta corona mark ii (sw)\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2506, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 15.0, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": 80.0, \"Miles_per_Gallon\": 28.0, \"Name\": \"dodge colt (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2164, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 16.5, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 27.0, \"Name\": \"toyota corolla 1600 (sw)\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2100, \"Year\": \"1972-01-01\"}, {\"Acceleration\": 13.0, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 175.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"buick century 350\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4100, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 11.5, \"Cylinders\": 8, \"Displacement\": 304.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"amc matador\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3672, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 13.0, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 145.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"chevrolet malibu\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3988, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 8, \"Displacement\": 302.0, \"Horsepower\": 137.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"ford gran torino\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4042, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 12.5, \"Cylinders\": 8, \"Displacement\": 318.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 15.0, \"Name\": \"dodge coronet custom\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3777, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 11.5, \"Cylinders\": 8, \"Displacement\": 429.0, \"Horsepower\": 198.0, \"Miles_per_Gallon\": 12.0, \"Name\": \"mercury marquis brougham\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4952, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 12.0, \"Cylinders\": 8, \"Displacement\": 400.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"chevrolet caprice classic\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4464, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 13.0, \"Cylinders\": 8, \"Displacement\": 351.0, \"Horsepower\": 158.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"ford ltd\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4363, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 8, \"Displacement\": 318.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"plymouth fury gran sedan\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4237, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 11.0, \"Cylinders\": 8, \"Displacement\": 440.0, \"Horsepower\": 215.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"chrysler new yorker brougham\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4735, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 11.0, \"Cylinders\": 8, \"Displacement\": 455.0, \"Horsepower\": 225.0, \"Miles_per_Gallon\": 12.0, \"Name\": \"buick electra 225 custom\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4951, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 11.0, \"Cylinders\": 8, \"Displacement\": 360.0, \"Horsepower\": 175.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"amc ambassador brougham\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3821, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 16.5, \"Cylinders\": 6, \"Displacement\": 225.0, \"Horsepower\": 105.0, \"Miles_per_Gallon\": 18.0, \"Name\": \"plymouth valiant\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3121, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 18.0, \"Cylinders\": 6, \"Displacement\": 250.0, \"Horsepower\": 100.0, \"Miles_per_Gallon\": 16.0, \"Name\": \"chevrolet nova custom\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3278, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 16.0, \"Cylinders\": 6, \"Displacement\": 232.0, \"Horsepower\": 100.0, \"Miles_per_Gallon\": 18.0, \"Name\": \"amc hornet\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2945, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 16.5, \"Cylinders\": 6, \"Displacement\": 250.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 18.0, \"Name\": \"ford maverick\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3021, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 16.0, \"Cylinders\": 6, \"Displacement\": 198.0, \"Horsepower\": 95.0, \"Miles_per_Gallon\": 23.0, \"Name\": \"plymouth duster\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2904, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 21.0, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 46.0, \"Miles_per_Gallon\": 26.0, \"Name\": \"volkswagen super beetle\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 1950, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 14.0, \"Cylinders\": 8, \"Displacement\": 400.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 11.0, \"Name\": \"chevrolet impala\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4997, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 12.5, \"Cylinders\": 8, \"Displacement\": 400.0, \"Horsepower\": 167.0, \"Miles_per_Gallon\": 12.0, \"Name\": \"ford country\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4906, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 13.0, \"Cylinders\": 8, \"Displacement\": 360.0, \"Horsepower\": 170.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"plymouth custom suburb\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4654, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 12.5, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 180.0, \"Miles_per_Gallon\": 12.0, \"Name\": \"oldsmobile vista cruiser\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4499, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 15.0, \"Cylinders\": 6, \"Displacement\": 232.0, \"Horsepower\": 100.0, \"Miles_per_Gallon\": 18.0, \"Name\": \"amc gremlin\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2789, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 19.0, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 20.0, \"Name\": \"toyota carina\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2279, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 19.5, \"Cylinders\": 4, \"Displacement\": 140.0, \"Horsepower\": 72.0, \"Miles_per_Gallon\": 21.0, \"Name\": \"chevrolet vega\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2401, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 16.5, \"Cylinders\": 4, \"Displacement\": 108.0, \"Horsepower\": 94.0, \"Miles_per_Gallon\": 22.0, \"Name\": \"datsun 610\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2379, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 13.5, \"Cylinders\": 3, \"Displacement\": 70.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 18.0, \"Name\": \"maxda rx3\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2124, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 18.5, \"Cylinders\": 4, \"Displacement\": 122.0, \"Horsepower\": 85.0, \"Miles_per_Gallon\": 19.0, \"Name\": \"ford pinto\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2310, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 14.0, \"Cylinders\": 6, \"Displacement\": 155.0, \"Horsepower\": 107.0, \"Miles_per_Gallon\": 21.0, \"Name\": \"mercury capri v6\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2472, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 26.0, \"Name\": \"fiat 124 sport coupe\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2265, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 13.0, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 145.0, \"Miles_per_Gallon\": 15.0, \"Name\": \"chevrolet monte carlo s\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4082, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 9.5, \"Cylinders\": 8, \"Displacement\": 400.0, \"Horsepower\": 230.0, \"Miles_per_Gallon\": 16.0, \"Name\": \"pontiac grand prix\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4278, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 19.5, \"Cylinders\": 4, \"Displacement\": 68.0, \"Horsepower\": 49.0, \"Miles_per_Gallon\": 29.0, \"Name\": \"fiat 128\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 1867, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 4, \"Displacement\": 116.0, \"Horsepower\": 75.0, \"Miles_per_Gallon\": 24.0, \"Name\": \"opel manta\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2158, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 14.0, \"Cylinders\": 4, \"Displacement\": 114.0, \"Horsepower\": 91.0, \"Miles_per_Gallon\": 20.0, \"Name\": \"audi 100ls\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2582, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 4, \"Displacement\": 121.0, \"Horsepower\": 112.0, \"Miles_per_Gallon\": 19.0, \"Name\": \"volvo 144ea\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2868, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 11.0, \"Cylinders\": 8, \"Displacement\": 318.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 15.0, \"Name\": \"dodge dart custom\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3399, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 14.0, \"Cylinders\": 4, \"Displacement\": 121.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 24.0, \"Name\": \"saab 99le\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2660, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 13.5, \"Cylinders\": 6, \"Displacement\": 156.0, \"Horsepower\": 122.0, \"Miles_per_Gallon\": 20.0, \"Name\": \"toyota mark ii\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2807, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 11.0, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 180.0, \"Miles_per_Gallon\": 11.0, \"Name\": \"oldsmobile omega\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3664, \"Year\": \"1973-01-01\"}, {\"Acceleration\": 16.5, \"Cylinders\": 6, \"Displacement\": 198.0, \"Horsepower\": 95.0, \"Miles_per_Gallon\": 20.0, \"Name\": \"plymouth duster\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3102, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 17.0, \"Cylinders\": 6, \"Displacement\": 200.0, \"Horsepower\": null, \"Miles_per_Gallon\": 21.0, \"Name\": \"ford maverick\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2875, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 16.0, \"Cylinders\": 6, \"Displacement\": 232.0, \"Horsepower\": 100.0, \"Miles_per_Gallon\": 19.0, \"Name\": \"amc hornet\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2901, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 17.0, \"Cylinders\": 6, \"Displacement\": 250.0, \"Horsepower\": 100.0, \"Miles_per_Gallon\": 15.0, \"Name\": \"chevrolet nova\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3336, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 19.0, \"Cylinders\": 4, \"Displacement\": 79.0, \"Horsepower\": 67.0, \"Miles_per_Gallon\": 31.0, \"Name\": \"datsun b210\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1950, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 16.5, \"Cylinders\": 4, \"Displacement\": 122.0, \"Horsepower\": 80.0, \"Miles_per_Gallon\": 26.0, \"Name\": \"ford pinto\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2451, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 21.0, \"Cylinders\": 4, \"Displacement\": 71.0, \"Horsepower\": 65.0, \"Miles_per_Gallon\": 32.0, \"Name\": \"toyota corolla 1200\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1836, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 17.0, \"Cylinders\": 4, \"Displacement\": 140.0, \"Horsepower\": 75.0, \"Miles_per_Gallon\": 25.0, \"Name\": \"chevrolet vega\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2542, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 17.0, \"Cylinders\": 6, \"Displacement\": 250.0, \"Horsepower\": 100.0, \"Miles_per_Gallon\": 16.0, \"Name\": \"chevrolet chevelle malibu classic\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3781, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 18.0, \"Cylinders\": 6, \"Displacement\": 258.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 16.0, \"Name\": \"amc matador\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3632, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 16.5, \"Cylinders\": 6, \"Displacement\": 225.0, \"Horsepower\": 105.0, \"Miles_per_Gallon\": 18.0, \"Name\": \"plymouth satellite sebring\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3613, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 14.0, \"Cylinders\": 8, \"Displacement\": 302.0, \"Horsepower\": 140.0, \"Miles_per_Gallon\": 16.0, \"Name\": \"ford gran torino\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4141, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"buick century luxus (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4699, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 13.5, \"Cylinders\": 8, \"Displacement\": 318.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"dodge coronet custom (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4457, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 16.0, \"Cylinders\": 8, \"Displacement\": 302.0, \"Horsepower\": 140.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"ford gran torino (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4638, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 8, \"Displacement\": 304.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"amc matador (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4257, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 16.5, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": 83.0, \"Miles_per_Gallon\": 29.0, \"Name\": \"audi fox\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2219, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 4, \"Displacement\": 79.0, \"Horsepower\": 67.0, \"Miles_per_Gallon\": 26.0, \"Name\": \"volkswagen dasher\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 1963, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 78.0, \"Miles_per_Gallon\": 26.0, \"Name\": \"opel manta\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2300, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 16.5, \"Cylinders\": 4, \"Displacement\": 76.0, \"Horsepower\": 52.0, \"Miles_per_Gallon\": 31.0, \"Name\": \"toyota corona\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1649, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 19.0, \"Cylinders\": 4, \"Displacement\": 83.0, \"Horsepower\": 61.0, \"Miles_per_Gallon\": 32.0, \"Name\": \"datsun 710\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2003, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 4, \"Displacement\": 90.0, \"Horsepower\": 75.0, \"Miles_per_Gallon\": 28.0, \"Name\": \"dodge colt\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2125, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 4, \"Displacement\": 90.0, \"Horsepower\": 75.0, \"Miles_per_Gallon\": 24.0, \"Name\": \"fiat 128\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2108, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 14.0, \"Cylinders\": 4, \"Displacement\": 116.0, \"Horsepower\": 75.0, \"Miles_per_Gallon\": 26.0, \"Name\": \"fiat 124 tc\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2246, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 15.0, \"Cylinders\": 4, \"Displacement\": 120.0, \"Horsepower\": 97.0, \"Miles_per_Gallon\": 24.0, \"Name\": \"honda civic\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2489, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 4, \"Displacement\": 108.0, \"Horsepower\": 93.0, \"Miles_per_Gallon\": 26.0, \"Name\": \"subaru\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2391, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 16.0, \"Cylinders\": 4, \"Displacement\": 79.0, \"Horsepower\": 67.0, \"Miles_per_Gallon\": 31.0, \"Name\": \"fiat x1.9\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2000, \"Year\": \"1974-01-01\"}, {\"Acceleration\": 16.0, \"Cylinders\": 6, \"Displacement\": 225.0, \"Horsepower\": 95.0, \"Miles_per_Gallon\": 19.0, \"Name\": \"plymouth valiant custom\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3264, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 16.0, \"Cylinders\": 6, \"Displacement\": 250.0, \"Horsepower\": 105.0, \"Miles_per_Gallon\": 18.0, \"Name\": \"chevrolet nova\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3459, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 21.0, \"Cylinders\": 6, \"Displacement\": 250.0, \"Horsepower\": 72.0, \"Miles_per_Gallon\": 15.0, \"Name\": \"mercury monarch\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3432, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 19.5, \"Cylinders\": 6, \"Displacement\": 250.0, \"Horsepower\": 72.0, \"Miles_per_Gallon\": 15.0, \"Name\": \"ford maverick\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3158, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 11.5, \"Cylinders\": 8, \"Displacement\": 400.0, \"Horsepower\": 170.0, \"Miles_per_Gallon\": 16.0, \"Name\": \"pontiac catalina\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4668, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 14.0, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 145.0, \"Miles_per_Gallon\": 15.0, \"Name\": \"chevrolet bel air\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4440, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 8, \"Displacement\": 318.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 16.0, \"Name\": \"plymouth grand fury\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4498, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 13.5, \"Cylinders\": 8, \"Displacement\": 351.0, \"Horsepower\": 148.0, \"Miles_per_Gallon\": 14.0, \"Name\": \"ford ltd\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4657, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 21.0, \"Cylinders\": 6, \"Displacement\": 231.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 17.0, \"Name\": \"buick century\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3907, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 18.5, \"Cylinders\": 6, \"Displacement\": 250.0, \"Horsepower\": 105.0, \"Miles_per_Gallon\": 16.0, \"Name\": \"chevroelt chevelle malibu\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3897, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 19.0, \"Cylinders\": 6, \"Displacement\": 258.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 15.0, \"Name\": \"amc matador\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3730, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 19.0, \"Cylinders\": 6, \"Displacement\": 225.0, \"Horsepower\": 95.0, \"Miles_per_Gallon\": 18.0, \"Name\": \"plymouth fury\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3785, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 15.0, \"Cylinders\": 6, \"Displacement\": 231.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 21.0, \"Name\": \"buick skyhawk\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3039, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 13.5, \"Cylinders\": 8, \"Displacement\": 262.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 20.0, \"Name\": \"chevrolet monza 2+2\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3221, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 12.0, \"Cylinders\": 8, \"Displacement\": 302.0, \"Horsepower\": 129.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"ford mustang ii\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3169, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 16.0, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 75.0, \"Miles_per_Gallon\": 29.0, \"Name\": \"toyota corolla\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2171, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 17.0, \"Cylinders\": 4, \"Displacement\": 140.0, \"Horsepower\": 83.0, \"Miles_per_Gallon\": 23.0, \"Name\": \"ford pinto\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2639, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 16.0, \"Cylinders\": 6, \"Displacement\": 232.0, \"Horsepower\": 100.0, \"Miles_per_Gallon\": 20.0, \"Name\": \"amc gremlin\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2914, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 18.5, \"Cylinders\": 4, \"Displacement\": 140.0, \"Horsepower\": 78.0, \"Miles_per_Gallon\": 23.0, \"Name\": \"pontiac astro\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2592, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 13.5, \"Cylinders\": 4, \"Displacement\": 134.0, \"Horsepower\": 96.0, \"Miles_per_Gallon\": 24.0, \"Name\": \"toyota corona\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2702, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 16.5, \"Cylinders\": 4, \"Displacement\": 90.0, \"Horsepower\": 71.0, \"Miles_per_Gallon\": 25.0, \"Name\": \"volkswagen dasher\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2223, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 17.0, \"Cylinders\": 4, \"Displacement\": 119.0, \"Horsepower\": 97.0, \"Miles_per_Gallon\": 24.0, \"Name\": \"datsun 710\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2545, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 6, \"Displacement\": 171.0, \"Horsepower\": 97.0, \"Miles_per_Gallon\": 18.0, \"Name\": \"ford pinto\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2984, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 14.0, \"Cylinders\": 4, \"Displacement\": 90.0, \"Horsepower\": 70.0, \"Miles_per_Gallon\": 29.0, \"Name\": \"volkswagen rabbit\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 1937, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 17.0, \"Cylinders\": 6, \"Displacement\": 232.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 19.0, \"Name\": \"amc pacer\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3211, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 15.0, \"Cylinders\": 4, \"Displacement\": 115.0, \"Horsepower\": 95.0, \"Miles_per_Gallon\": 23.0, \"Name\": \"audi 100ls\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2694, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 17.0, \"Cylinders\": 4, \"Displacement\": 120.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 23.0, \"Name\": \"peugeot 504\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2957, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 4, \"Displacement\": 121.0, \"Horsepower\": 98.0, \"Miles_per_Gallon\": 22.0, \"Name\": \"volvo 244dl\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2945, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 13.5, \"Cylinders\": 4, \"Displacement\": 121.0, \"Horsepower\": 115.0, \"Miles_per_Gallon\": 25.0, \"Name\": \"saab 99le\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2671, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 17.5, \"Cylinders\": 4, \"Displacement\": 91.0, \"Horsepower\": 53.0, \"Miles_per_Gallon\": 33.0, \"Name\": \"honda civic cvcc\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1795, \"Year\": \"1975-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 4, \"Displacement\": 107.0, \"Horsepower\": 86.0, \"Miles_per_Gallon\": 28.0, \"Name\": \"fiat 131\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2464, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 16.9, \"Cylinders\": 4, \"Displacement\": 116.0, \"Horsepower\": 81.0, \"Miles_per_Gallon\": 25.0, \"Name\": \"opel 1900\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2220, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 14.9, \"Cylinders\": 4, \"Displacement\": 140.0, \"Horsepower\": 92.0, \"Miles_per_Gallon\": 25.0, \"Name\": \"capri ii\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2572, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 17.7, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": 79.0, \"Miles_per_Gallon\": 26.0, \"Name\": \"dodge colt\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2255, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 15.3, \"Cylinders\": 4, \"Displacement\": 101.0, \"Horsepower\": 83.0, \"Miles_per_Gallon\": 27.0, \"Name\": \"renault 12tl\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2202, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 13.0, \"Cylinders\": 8, \"Displacement\": 305.0, \"Horsepower\": 140.0, \"Miles_per_Gallon\": 17.5, \"Name\": \"chevrolet chevelle malibu classic\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4215, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 13.0, \"Cylinders\": 8, \"Displacement\": 318.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 16.0, \"Name\": \"dodge coronet brougham\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4190, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 13.9, \"Cylinders\": 8, \"Displacement\": 304.0, \"Horsepower\": 120.0, \"Miles_per_Gallon\": 15.5, \"Name\": \"amc matador\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3962, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 12.8, \"Cylinders\": 8, \"Displacement\": 351.0, \"Horsepower\": 152.0, \"Miles_per_Gallon\": 14.5, \"Name\": \"ford gran torino\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4215, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 15.4, \"Cylinders\": 6, \"Displacement\": 225.0, \"Horsepower\": 100.0, \"Miles_per_Gallon\": 22.0, \"Name\": \"plymouth valiant\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3233, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 6, \"Displacement\": 250.0, \"Horsepower\": 105.0, \"Miles_per_Gallon\": 22.0, \"Name\": \"chevrolet nova\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3353, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 17.6, \"Cylinders\": 6, \"Displacement\": 200.0, \"Horsepower\": 81.0, \"Miles_per_Gallon\": 24.0, \"Name\": \"ford maverick\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3012, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 17.6, \"Cylinders\": 6, \"Displacement\": 232.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 22.5, \"Name\": \"amc hornet\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3085, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 22.2, \"Cylinders\": 4, \"Displacement\": 85.0, \"Horsepower\": 52.0, \"Miles_per_Gallon\": 29.0, \"Name\": \"chevrolet chevette\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2035, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 22.1, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": 60.0, \"Miles_per_Gallon\": 24.5, \"Name\": \"chevrolet woody\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2164, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 14.2, \"Cylinders\": 4, \"Displacement\": 90.0, \"Horsepower\": 70.0, \"Miles_per_Gallon\": 29.0, \"Name\": \"vw rabbit\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 1937, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 17.4, \"Cylinders\": 4, \"Displacement\": 91.0, \"Horsepower\": 53.0, \"Miles_per_Gallon\": 33.0, \"Name\": \"honda civic\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1795, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 17.7, \"Cylinders\": 6, \"Displacement\": 225.0, \"Horsepower\": 100.0, \"Miles_per_Gallon\": 20.0, \"Name\": \"dodge aspen se\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3651, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 21.0, \"Cylinders\": 6, \"Displacement\": 250.0, \"Horsepower\": 78.0, \"Miles_per_Gallon\": 18.0, \"Name\": \"ford granada ghia\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3574, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 16.2, \"Cylinders\": 6, \"Displacement\": 250.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 18.5, \"Name\": \"pontiac ventura sj\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3645, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 17.8, \"Cylinders\": 6, \"Displacement\": 258.0, \"Horsepower\": 95.0, \"Miles_per_Gallon\": 17.5, \"Name\": \"amc pacer d/l\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3193, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 12.2, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 71.0, \"Miles_per_Gallon\": 29.5, \"Name\": \"volkswagen rabbit\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 1825, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 17.0, \"Cylinders\": 4, \"Displacement\": 85.0, \"Horsepower\": 70.0, \"Miles_per_Gallon\": 32.0, \"Name\": \"datsun b-210\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1990, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 16.4, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 75.0, \"Miles_per_Gallon\": 28.0, \"Name\": \"toyota corolla\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2155, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 13.6, \"Cylinders\": 4, \"Displacement\": 140.0, \"Horsepower\": 72.0, \"Miles_per_Gallon\": 26.5, \"Name\": \"ford pinto\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2565, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 15.7, \"Cylinders\": 4, \"Displacement\": 130.0, \"Horsepower\": 102.0, \"Miles_per_Gallon\": 20.0, \"Name\": \"volvo 245\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 3150, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 13.2, \"Cylinders\": 8, \"Displacement\": 318.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"plymouth volare premier v8\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3940, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 21.9, \"Cylinders\": 4, \"Displacement\": 120.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 19.0, \"Name\": \"peugeot 504\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 3270, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 6, \"Displacement\": 156.0, \"Horsepower\": 108.0, \"Miles_per_Gallon\": 19.0, \"Name\": \"toyota mark ii\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2930, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 16.7, \"Cylinders\": 6, \"Displacement\": 168.0, \"Horsepower\": 120.0, \"Miles_per_Gallon\": 16.5, \"Name\": \"mercedes-benz 280s\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 3820, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 12.1, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 180.0, \"Miles_per_Gallon\": 16.5, \"Name\": \"cadillac seville\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4380, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 12.0, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 145.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"chevy c10\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4055, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 15.0, \"Cylinders\": 8, \"Displacement\": 302.0, \"Horsepower\": 130.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"ford f108\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3870, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 14.0, \"Cylinders\": 8, \"Displacement\": 318.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 13.0, \"Name\": \"dodge d100\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3755, \"Year\": \"1976-01-01\"}, {\"Acceleration\": 18.5, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": 68.0, \"Miles_per_Gallon\": 31.5, \"Name\": \"honda Accelerationord cvcc\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2045, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 14.8, \"Cylinders\": 4, \"Displacement\": 111.0, \"Horsepower\": 80.0, \"Miles_per_Gallon\": 30.0, \"Name\": \"buick opel isuzu deluxe\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2155, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 18.6, \"Cylinders\": 4, \"Displacement\": 79.0, \"Horsepower\": 58.0, \"Miles_per_Gallon\": 36.0, \"Name\": \"renault 5 gtl\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 1825, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 4, \"Displacement\": 122.0, \"Horsepower\": 96.0, \"Miles_per_Gallon\": 25.5, \"Name\": \"plymouth arrow gs\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2300, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 16.8, \"Cylinders\": 4, \"Displacement\": 85.0, \"Horsepower\": 70.0, \"Miles_per_Gallon\": 33.5, \"Name\": \"datsun f-10 hatchback\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1945, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 12.5, \"Cylinders\": 8, \"Displacement\": 305.0, \"Horsepower\": 145.0, \"Miles_per_Gallon\": 17.5, \"Name\": \"chevrolet caprice classic\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3880, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 19.0, \"Cylinders\": 8, \"Displacement\": 260.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 17.0, \"Name\": \"oldsmobile cutlass supreme\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4060, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 13.7, \"Cylinders\": 8, \"Displacement\": 318.0, \"Horsepower\": 145.0, \"Miles_per_Gallon\": 15.5, \"Name\": \"dodge monaco brougham\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4140, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 14.9, \"Cylinders\": 8, \"Displacement\": 302.0, \"Horsepower\": 130.0, \"Miles_per_Gallon\": 15.0, \"Name\": \"mercury cougar brougham\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4295, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 16.4, \"Cylinders\": 6, \"Displacement\": 250.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 17.5, \"Name\": \"chevrolet concours\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3520, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 16.9, \"Cylinders\": 6, \"Displacement\": 231.0, \"Horsepower\": 105.0, \"Miles_per_Gallon\": 20.5, \"Name\": \"buick skylark\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3425, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 17.7, \"Cylinders\": 6, \"Displacement\": 225.0, \"Horsepower\": 100.0, \"Miles_per_Gallon\": 19.0, \"Name\": \"plymouth volare custom\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3630, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 19.0, \"Cylinders\": 6, \"Displacement\": 250.0, \"Horsepower\": 98.0, \"Miles_per_Gallon\": 18.5, \"Name\": \"ford granada\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3525, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 11.1, \"Cylinders\": 8, \"Displacement\": 400.0, \"Horsepower\": 180.0, \"Miles_per_Gallon\": 16.0, \"Name\": \"pontiac grand prix lj\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4220, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 11.4, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 170.0, \"Miles_per_Gallon\": 15.5, \"Name\": \"chevrolet monte carlo landau\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4165, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 12.2, \"Cylinders\": 8, \"Displacement\": 400.0, \"Horsepower\": 190.0, \"Miles_per_Gallon\": 15.5, \"Name\": \"chrysler cordoba\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4325, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 8, \"Displacement\": 351.0, \"Horsepower\": 149.0, \"Miles_per_Gallon\": 16.0, \"Name\": \"ford thunderbird\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4335, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 78.0, \"Miles_per_Gallon\": 29.0, \"Name\": \"volkswagen rabbit custom\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 1940, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 16.0, \"Cylinders\": 4, \"Displacement\": 151.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 24.5, \"Name\": \"pontiac sunbird coupe\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2740, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 18.2, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 75.0, \"Miles_per_Gallon\": 26.0, \"Name\": \"toyota corolla liftback\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2265, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 15.8, \"Cylinders\": 4, \"Displacement\": 140.0, \"Horsepower\": 89.0, \"Miles_per_Gallon\": 25.5, \"Name\": \"ford mustang ii 2+2\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2755, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 17.0, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": 63.0, \"Miles_per_Gallon\": 30.5, \"Name\": \"chevrolet chevette\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2051, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 15.9, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": 83.0, \"Miles_per_Gallon\": 33.5, \"Name\": \"dodge colt m/m\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2075, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 16.4, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 67.0, \"Miles_per_Gallon\": 30.0, \"Name\": \"subaru dl\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1985, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 14.1, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 78.0, \"Miles_per_Gallon\": 30.5, \"Name\": \"volkswagen dasher\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2190, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 6, \"Displacement\": 146.0, \"Horsepower\": 97.0, \"Miles_per_Gallon\": 22.0, \"Name\": \"datsun 810\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2815, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 12.8, \"Cylinders\": 4, \"Displacement\": 121.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 21.5, \"Name\": \"bmw 320i\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2600, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 13.5, \"Cylinders\": 3, \"Displacement\": 80.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 21.5, \"Name\": \"mazda rx-4\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2720, \"Year\": \"1977-01-01\"}, {\"Acceleration\": 21.5, \"Cylinders\": 4, \"Displacement\": 90.0, \"Horsepower\": 48.0, \"Miles_per_Gallon\": 43.1, \"Name\": \"volkswagen rabbit custom diesel\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 1985, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 14.4, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": 66.0, \"Miles_per_Gallon\": 36.1, \"Name\": \"ford fiesta\", \"Origin\": \"USA\", \"Weight_in_lbs\": 1800, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 19.4, \"Cylinders\": 4, \"Displacement\": 78.0, \"Horsepower\": 52.0, \"Miles_per_Gallon\": 32.8, \"Name\": \"mazda glc deluxe\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1985, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 18.6, \"Cylinders\": 4, \"Displacement\": 85.0, \"Horsepower\": 70.0, \"Miles_per_Gallon\": 39.4, \"Name\": \"datsun b210 gx\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2070, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 16.4, \"Cylinders\": 4, \"Displacement\": 91.0, \"Horsepower\": 60.0, \"Miles_per_Gallon\": 36.1, \"Name\": \"honda civic cvcc\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1800, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 8, \"Displacement\": 260.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 19.9, \"Name\": \"oldsmobile cutlass salon brougham\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3365, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 13.2, \"Cylinders\": 8, \"Displacement\": 318.0, \"Horsepower\": 140.0, \"Miles_per_Gallon\": 19.4, \"Name\": \"dodge diplomat\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3735, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 12.8, \"Cylinders\": 8, \"Displacement\": 302.0, \"Horsepower\": 139.0, \"Miles_per_Gallon\": 20.2, \"Name\": \"mercury monarch ghia\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3570, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 19.2, \"Cylinders\": 6, \"Displacement\": 231.0, \"Horsepower\": 105.0, \"Miles_per_Gallon\": 19.2, \"Name\": \"pontiac phoenix lj\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3535, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 18.2, \"Cylinders\": 6, \"Displacement\": 200.0, \"Horsepower\": 95.0, \"Miles_per_Gallon\": 20.5, \"Name\": \"chevrolet malibu\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3155, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 15.8, \"Cylinders\": 6, \"Displacement\": 200.0, \"Horsepower\": 85.0, \"Miles_per_Gallon\": 20.2, \"Name\": \"ford fairmont (auto)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2965, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 15.4, \"Cylinders\": 4, \"Displacement\": 140.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 25.1, \"Name\": \"ford fairmont (man)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2720, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 17.2, \"Cylinders\": 6, \"Displacement\": 225.0, \"Horsepower\": 100.0, \"Miles_per_Gallon\": 20.5, \"Name\": \"plymouth volare\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3430, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 17.2, \"Cylinders\": 6, \"Displacement\": 232.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 19.4, \"Name\": \"amc concord\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3210, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 15.8, \"Cylinders\": 6, \"Displacement\": 231.0, \"Horsepower\": 105.0, \"Miles_per_Gallon\": 20.6, \"Name\": \"buick century special\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3380, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 16.7, \"Cylinders\": 6, \"Displacement\": 200.0, \"Horsepower\": 85.0, \"Miles_per_Gallon\": 20.8, \"Name\": \"mercury zephyr\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3070, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 18.7, \"Cylinders\": 6, \"Displacement\": 225.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 18.6, \"Name\": \"dodge aspen\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3620, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 15.1, \"Cylinders\": 6, \"Displacement\": 258.0, \"Horsepower\": 120.0, \"Miles_per_Gallon\": 18.1, \"Name\": \"amc concord d/l\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3410, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 13.2, \"Cylinders\": 8, \"Displacement\": 305.0, \"Horsepower\": 145.0, \"Miles_per_Gallon\": 19.2, \"Name\": \"chevrolet monte carlo landau\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3425, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 13.4, \"Cylinders\": 6, \"Displacement\": 231.0, \"Horsepower\": 165.0, \"Miles_per_Gallon\": 17.7, \"Name\": \"buick regal sport coupe (turbo)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3445, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 11.2, \"Cylinders\": 8, \"Displacement\": 302.0, \"Horsepower\": 139.0, \"Miles_per_Gallon\": 18.1, \"Name\": \"ford futura\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3205, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 13.7, \"Cylinders\": 8, \"Displacement\": 318.0, \"Horsepower\": 140.0, \"Miles_per_Gallon\": 17.5, \"Name\": \"dodge magnum xe\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4080, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 16.5, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": 68.0, \"Miles_per_Gallon\": 30.0, \"Name\": \"chevrolet chevette\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2155, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 14.2, \"Cylinders\": 4, \"Displacement\": 134.0, \"Horsepower\": 95.0, \"Miles_per_Gallon\": 27.5, \"Name\": \"toyota corona\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2560, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 14.7, \"Cylinders\": 4, \"Displacement\": 119.0, \"Horsepower\": 97.0, \"Miles_per_Gallon\": 27.2, \"Name\": \"datsun 510\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2300, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 4, \"Displacement\": 105.0, \"Horsepower\": 75.0, \"Miles_per_Gallon\": 30.9, \"Name\": \"dodge omni\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2230, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 14.8, \"Cylinders\": 4, \"Displacement\": 134.0, \"Horsepower\": 95.0, \"Miles_per_Gallon\": 21.1, \"Name\": \"toyota celica gt liftback\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2515, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 16.7, \"Cylinders\": 4, \"Displacement\": 156.0, \"Horsepower\": 105.0, \"Miles_per_Gallon\": 23.2, \"Name\": \"plymouth sapporo\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2745, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 17.6, \"Cylinders\": 4, \"Displacement\": 151.0, \"Horsepower\": 85.0, \"Miles_per_Gallon\": 23.8, \"Name\": \"oldsmobile starfire sx\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2855, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 14.9, \"Cylinders\": 4, \"Displacement\": 119.0, \"Horsepower\": 97.0, \"Miles_per_Gallon\": 23.9, \"Name\": \"datsun 200-sx\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2405, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 15.9, \"Cylinders\": 5, \"Displacement\": 131.0, \"Horsepower\": 103.0, \"Miles_per_Gallon\": 20.3, \"Name\": \"audi 5000\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2830, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 13.6, \"Cylinders\": 6, \"Displacement\": 163.0, \"Horsepower\": 125.0, \"Miles_per_Gallon\": 17.0, \"Name\": \"volvo 264gl\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 3140, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 15.7, \"Cylinders\": 4, \"Displacement\": 121.0, \"Horsepower\": 115.0, \"Miles_per_Gallon\": 21.6, \"Name\": \"saab 99gle\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2795, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 15.8, \"Cylinders\": 6, \"Displacement\": 163.0, \"Horsepower\": 133.0, \"Miles_per_Gallon\": 16.2, \"Name\": \"peugeot 604sl\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 3410, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 14.9, \"Cylinders\": 4, \"Displacement\": 89.0, \"Horsepower\": 71.0, \"Miles_per_Gallon\": 31.5, \"Name\": \"volkswagen scirocco\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 1990, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 16.6, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": 68.0, \"Miles_per_Gallon\": 29.5, \"Name\": \"honda Accelerationord lx\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2135, \"Year\": \"1978-01-01\"}, {\"Acceleration\": 15.4, \"Cylinders\": 6, \"Displacement\": 231.0, \"Horsepower\": 115.0, \"Miles_per_Gallon\": 21.5, \"Name\": \"pontiac lemans v6\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3245, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 18.2, \"Cylinders\": 6, \"Displacement\": 200.0, \"Horsepower\": 85.0, \"Miles_per_Gallon\": 19.8, \"Name\": \"mercury zephyr 6\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2990, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 17.3, \"Cylinders\": 4, \"Displacement\": 140.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 22.3, \"Name\": \"ford fairmont 4\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2890, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 18.2, \"Cylinders\": 6, \"Displacement\": 232.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 20.2, \"Name\": \"amc concord dl 6\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3265, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 16.6, \"Cylinders\": 6, \"Displacement\": 225.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 20.6, \"Name\": \"dodge aspen 6\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3360, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 15.4, \"Cylinders\": 8, \"Displacement\": 305.0, \"Horsepower\": 130.0, \"Miles_per_Gallon\": 17.0, \"Name\": \"chevrolet caprice classic\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3840, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 13.4, \"Cylinders\": 8, \"Displacement\": 302.0, \"Horsepower\": 129.0, \"Miles_per_Gallon\": 17.6, \"Name\": \"ford ltd landau\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3725, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 13.2, \"Cylinders\": 8, \"Displacement\": 351.0, \"Horsepower\": 138.0, \"Miles_per_Gallon\": 16.5, \"Name\": \"mercury grand marquis\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3955, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 15.2, \"Cylinders\": 8, \"Displacement\": 318.0, \"Horsepower\": 135.0, \"Miles_per_Gallon\": 18.2, \"Name\": \"dodge st. regis\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3830, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 14.9, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 155.0, \"Miles_per_Gallon\": 16.9, \"Name\": \"buick estate wagon (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4360, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 14.3, \"Cylinders\": 8, \"Displacement\": 351.0, \"Horsepower\": 142.0, \"Miles_per_Gallon\": 15.5, \"Name\": \"ford country squire (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 4054, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 15.0, \"Cylinders\": 8, \"Displacement\": 267.0, \"Horsepower\": 125.0, \"Miles_per_Gallon\": 19.2, \"Name\": \"chevrolet malibu classic (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3605, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 13.0, \"Cylinders\": 8, \"Displacement\": 360.0, \"Horsepower\": 150.0, \"Miles_per_Gallon\": 18.5, \"Name\": \"chrysler lebaron town @ country (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3940, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 14.0, \"Cylinders\": 4, \"Displacement\": 89.0, \"Horsepower\": 71.0, \"Miles_per_Gallon\": 31.9, \"Name\": \"vw rabbit custom\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 1925, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 15.2, \"Cylinders\": 4, \"Displacement\": 86.0, \"Horsepower\": 65.0, \"Miles_per_Gallon\": 34.1, \"Name\": \"maxda glc deluxe\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1975, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 14.4, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": 80.0, \"Miles_per_Gallon\": 35.7, \"Name\": \"dodge colt hatchback custom\", \"Origin\": \"USA\", \"Weight_in_lbs\": 1915, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 15.0, \"Cylinders\": 4, \"Displacement\": 121.0, \"Horsepower\": 80.0, \"Miles_per_Gallon\": 27.4, \"Name\": \"amc spirit dl\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2670, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 20.1, \"Cylinders\": 5, \"Displacement\": 183.0, \"Horsepower\": 77.0, \"Miles_per_Gallon\": 25.4, \"Name\": \"mercedes benz 300d\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 3530, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 17.4, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 125.0, \"Miles_per_Gallon\": 23.0, \"Name\": \"cadillac eldorado\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3900, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 24.8, \"Cylinders\": 4, \"Displacement\": 141.0, \"Horsepower\": 71.0, \"Miles_per_Gallon\": 27.2, \"Name\": \"peugeot 504\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 3190, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 22.2, \"Cylinders\": 8, \"Displacement\": 260.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 23.9, \"Name\": \"oldsmobile cutlass salon brougham\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3420, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 13.2, \"Cylinders\": 4, \"Displacement\": 105.0, \"Horsepower\": 70.0, \"Miles_per_Gallon\": 34.2, \"Name\": \"plymouth horizon\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2200, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 14.9, \"Cylinders\": 4, \"Displacement\": 105.0, \"Horsepower\": 70.0, \"Miles_per_Gallon\": 34.5, \"Name\": \"plymouth horizon tc3\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2150, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 19.2, \"Cylinders\": 4, \"Displacement\": 85.0, \"Horsepower\": 65.0, \"Miles_per_Gallon\": 31.8, \"Name\": \"datsun 210\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2020, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 14.7, \"Cylinders\": 4, \"Displacement\": 91.0, \"Horsepower\": 69.0, \"Miles_per_Gallon\": 37.3, \"Name\": \"fiat strada custom\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2130, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 16.0, \"Cylinders\": 4, \"Displacement\": 151.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 28.4, \"Name\": \"buick skylark limited\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2670, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 11.3, \"Cylinders\": 6, \"Displacement\": 173.0, \"Horsepower\": 115.0, \"Miles_per_Gallon\": 28.8, \"Name\": \"chevrolet citation\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2595, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 12.9, \"Cylinders\": 6, \"Displacement\": 173.0, \"Horsepower\": 115.0, \"Miles_per_Gallon\": 26.8, \"Name\": \"oldsmobile omega brougham\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2700, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 13.2, \"Cylinders\": 4, \"Displacement\": 151.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 33.5, \"Name\": \"pontiac phoenix\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2556, \"Year\": \"1979-01-01\"}, {\"Acceleration\": 14.7, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": 76.0, \"Miles_per_Gallon\": 41.5, \"Name\": \"vw rabbit\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2144, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 18.8, \"Cylinders\": 4, \"Displacement\": 89.0, \"Horsepower\": 60.0, \"Miles_per_Gallon\": 38.1, \"Name\": \"toyota corolla tercel\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1968, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": 70.0, \"Miles_per_Gallon\": 32.1, \"Name\": \"chevrolet chevette\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2120, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 16.4, \"Cylinders\": 4, \"Displacement\": 86.0, \"Horsepower\": 65.0, \"Miles_per_Gallon\": 37.2, \"Name\": \"datsun 310\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2019, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 16.5, \"Cylinders\": 4, \"Displacement\": 151.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 28.0, \"Name\": \"chevrolet citation\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2678, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 18.1, \"Cylinders\": 4, \"Displacement\": 140.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 26.4, \"Name\": \"ford fairmont\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2870, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 20.1, \"Cylinders\": 4, \"Displacement\": 151.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 24.3, \"Name\": \"amc concord\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3003, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 18.7, \"Cylinders\": 6, \"Displacement\": 225.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 19.1, \"Name\": \"dodge aspen\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3381, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 15.8, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 78.0, \"Miles_per_Gallon\": 34.3, \"Name\": \"audi 4000\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2188, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 15.5, \"Cylinders\": 4, \"Displacement\": 134.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 29.8, \"Name\": \"toyota corona liftback\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2711, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 17.5, \"Cylinders\": 4, \"Displacement\": 120.0, \"Horsepower\": 75.0, \"Miles_per_Gallon\": 31.3, \"Name\": \"mazda 626\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2542, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 15.0, \"Cylinders\": 4, \"Displacement\": 119.0, \"Horsepower\": 92.0, \"Miles_per_Gallon\": 37.0, \"Name\": \"datsun 510 hatchback\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2434, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 15.2, \"Cylinders\": 4, \"Displacement\": 108.0, \"Horsepower\": 75.0, \"Miles_per_Gallon\": 32.2, \"Name\": \"toyota corolla\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2265, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 17.9, \"Cylinders\": 4, \"Displacement\": 86.0, \"Horsepower\": 65.0, \"Miles_per_Gallon\": 46.6, \"Name\": \"mazda glc\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2110, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 14.4, \"Cylinders\": 4, \"Displacement\": 156.0, \"Horsepower\": 105.0, \"Miles_per_Gallon\": 27.9, \"Name\": \"dodge colt\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2800, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 19.2, \"Cylinders\": 4, \"Displacement\": 85.0, \"Horsepower\": 65.0, \"Miles_per_Gallon\": 40.8, \"Name\": \"datsun 210\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2110, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 21.7, \"Cylinders\": 4, \"Displacement\": 90.0, \"Horsepower\": 48.0, \"Miles_per_Gallon\": 44.3, \"Name\": \"vw rabbit c (diesel)\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2085, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 23.7, \"Cylinders\": 4, \"Displacement\": 90.0, \"Horsepower\": 48.0, \"Miles_per_Gallon\": 43.4, \"Name\": \"vw dasher (diesel)\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2335, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 19.9, \"Cylinders\": 5, \"Displacement\": 121.0, \"Horsepower\": 67.0, \"Miles_per_Gallon\": 36.4, \"Name\": \"audi 5000s (diesel)\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2950, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 21.8, \"Cylinders\": 4, \"Displacement\": 146.0, \"Horsepower\": 67.0, \"Miles_per_Gallon\": 30.0, \"Name\": \"mercedes-benz 240d\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 3250, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 13.8, \"Cylinders\": 4, \"Displacement\": 91.0, \"Horsepower\": 67.0, \"Miles_per_Gallon\": 44.6, \"Name\": \"honda civic 1500 gl\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1850, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 17.3, \"Cylinders\": 4, \"Displacement\": 85.0, \"Horsepower\": null, \"Miles_per_Gallon\": 40.9, \"Name\": \"renault lecar deluxe\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 1835, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 18.0, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 67.0, \"Miles_per_Gallon\": 33.8, \"Name\": \"subaru dl\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2145, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 15.3, \"Cylinders\": 4, \"Displacement\": 89.0, \"Horsepower\": 62.0, \"Miles_per_Gallon\": 29.8, \"Name\": \"vokswagen rabbit\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 1845, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 11.4, \"Cylinders\": 6, \"Displacement\": 168.0, \"Horsepower\": 132.0, \"Miles_per_Gallon\": 32.7, \"Name\": \"datsun 280-zx\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2910, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 12.5, \"Cylinders\": 3, \"Displacement\": 70.0, \"Horsepower\": 100.0, \"Miles_per_Gallon\": 23.7, \"Name\": \"mazda rx-7 gs\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2420, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 15.1, \"Cylinders\": 4, \"Displacement\": 122.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 35.0, \"Name\": \"triumph tr7 coupe\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2500, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 14.3, \"Cylinders\": 4, \"Displacement\": 140.0, \"Horsepower\": null, \"Miles_per_Gallon\": 23.6, \"Name\": \"ford mustang cobra\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2905, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 17.0, \"Cylinders\": 4, \"Displacement\": 107.0, \"Horsepower\": 72.0, \"Miles_per_Gallon\": 32.4, \"Name\": \"honda Accelerationord\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2290, \"Year\": \"1980-01-01\"}, {\"Acceleration\": 15.7, \"Cylinders\": 4, \"Displacement\": 135.0, \"Horsepower\": 84.0, \"Miles_per_Gallon\": 27.2, \"Name\": \"plymouth reliant\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2490, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 16.4, \"Cylinders\": 4, \"Displacement\": 151.0, \"Horsepower\": 84.0, \"Miles_per_Gallon\": 26.6, \"Name\": \"buick skylark\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2635, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 14.4, \"Cylinders\": 4, \"Displacement\": 156.0, \"Horsepower\": 92.0, \"Miles_per_Gallon\": 25.8, \"Name\": \"dodge aries wagon (sw)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2620, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 12.6, \"Cylinders\": 6, \"Displacement\": 173.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 23.5, \"Name\": \"chevrolet citation\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2725, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 12.9, \"Cylinders\": 4, \"Displacement\": 135.0, \"Horsepower\": 84.0, \"Miles_per_Gallon\": 30.0, \"Name\": \"plymouth reliant\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2385, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 16.9, \"Cylinders\": 4, \"Displacement\": 79.0, \"Horsepower\": 58.0, \"Miles_per_Gallon\": 39.1, \"Name\": \"toyota starlet\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1755, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 16.4, \"Cylinders\": 4, \"Displacement\": 86.0, \"Horsepower\": 64.0, \"Miles_per_Gallon\": 39.0, \"Name\": \"plymouth champ\", \"Origin\": \"USA\", \"Weight_in_lbs\": 1875, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 16.1, \"Cylinders\": 4, \"Displacement\": 81.0, \"Horsepower\": 60.0, \"Miles_per_Gallon\": 35.1, \"Name\": \"honda civic 1300\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1760, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 17.8, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 67.0, \"Miles_per_Gallon\": 32.3, \"Name\": \"subaru\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2065, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 19.4, \"Cylinders\": 4, \"Displacement\": 85.0, \"Horsepower\": 65.0, \"Miles_per_Gallon\": 37.0, \"Name\": \"datsun 210\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1975, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 17.3, \"Cylinders\": 4, \"Displacement\": 89.0, \"Horsepower\": 62.0, \"Miles_per_Gallon\": 37.7, \"Name\": \"toyota tercel\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2050, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 16.0, \"Cylinders\": 4, \"Displacement\": 91.0, \"Horsepower\": 68.0, \"Miles_per_Gallon\": 34.1, \"Name\": \"mazda glc 4\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1985, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 14.9, \"Cylinders\": 4, \"Displacement\": 105.0, \"Horsepower\": 63.0, \"Miles_per_Gallon\": 34.7, \"Name\": \"plymouth horizon 4\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2215, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 16.2, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": 65.0, \"Miles_per_Gallon\": 34.4, \"Name\": \"ford escort 4w\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2045, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 20.7, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": 65.0, \"Miles_per_Gallon\": 29.9, \"Name\": \"ford escort 2h\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2380, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 14.2, \"Cylinders\": 4, \"Displacement\": 105.0, \"Horsepower\": 74.0, \"Miles_per_Gallon\": 33.0, \"Name\": \"volkswagen jetta\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2190, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 15.8, \"Cylinders\": 4, \"Displacement\": 100.0, \"Horsepower\": null, \"Miles_per_Gallon\": 34.5, \"Name\": \"renault 18i\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2320, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 14.4, \"Cylinders\": 4, \"Displacement\": 107.0, \"Horsepower\": 75.0, \"Miles_per_Gallon\": 33.7, \"Name\": \"honda prelude\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2210, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 16.8, \"Cylinders\": 4, \"Displacement\": 108.0, \"Horsepower\": 75.0, \"Miles_per_Gallon\": 32.4, \"Name\": \"toyota corolla\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2350, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 14.8, \"Cylinders\": 4, \"Displacement\": 119.0, \"Horsepower\": 100.0, \"Miles_per_Gallon\": 32.9, \"Name\": \"datsun 200sx\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2615, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 18.3, \"Cylinders\": 4, \"Displacement\": 120.0, \"Horsepower\": 74.0, \"Miles_per_Gallon\": 31.6, \"Name\": \"mazda 626\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2635, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 20.4, \"Cylinders\": 4, \"Displacement\": 141.0, \"Horsepower\": 80.0, \"Miles_per_Gallon\": 28.1, \"Name\": \"peugeot 505s turbo diesel\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 3230, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 15.4, \"Cylinders\": 4, \"Displacement\": 121.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": null, \"Name\": \"saab 900s\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2800, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 19.6, \"Cylinders\": 6, \"Displacement\": 145.0, \"Horsepower\": 76.0, \"Miles_per_Gallon\": 30.7, \"Name\": \"volvo diesel\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 3160, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 12.6, \"Cylinders\": 6, \"Displacement\": 168.0, \"Horsepower\": 116.0, \"Miles_per_Gallon\": 25.4, \"Name\": \"toyota cressida\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2900, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 13.8, \"Cylinders\": 6, \"Displacement\": 146.0, \"Horsepower\": 120.0, \"Miles_per_Gallon\": 24.2, \"Name\": \"datsun 810 maxima\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2930, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 15.8, \"Cylinders\": 6, \"Displacement\": 231.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 22.4, \"Name\": \"buick century\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3415, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 19.0, \"Cylinders\": 8, \"Displacement\": 350.0, \"Horsepower\": 105.0, \"Miles_per_Gallon\": 26.6, \"Name\": \"oldsmobile cutlass ls\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3725, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 17.1, \"Cylinders\": 6, \"Displacement\": 200.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 20.2, \"Name\": \"ford granada gl\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3060, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 16.6, \"Cylinders\": 6, \"Displacement\": 225.0, \"Horsepower\": 85.0, \"Miles_per_Gallon\": 17.6, \"Name\": \"chrysler lebaron salon\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3465, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 19.6, \"Cylinders\": 4, \"Displacement\": 112.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 28.0, \"Name\": \"chevrolet cavalier\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2605, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 18.6, \"Cylinders\": 4, \"Displacement\": 112.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 27.0, \"Name\": \"chevrolet cavalier wagon\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2640, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 18.0, \"Cylinders\": 4, \"Displacement\": 112.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 34.0, \"Name\": \"chevrolet cavalier 2-door\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2395, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 16.2, \"Cylinders\": 4, \"Displacement\": 112.0, \"Horsepower\": 85.0, \"Miles_per_Gallon\": 31.0, \"Name\": \"pontiac j2000 se hatchback\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2575, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 16.0, \"Cylinders\": 4, \"Displacement\": 135.0, \"Horsepower\": 84.0, \"Miles_per_Gallon\": 29.0, \"Name\": \"dodge aries se\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2525, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 18.0, \"Cylinders\": 4, \"Displacement\": 151.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 27.0, \"Name\": \"pontiac phoenix\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2735, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 16.4, \"Cylinders\": 4, \"Displacement\": 140.0, \"Horsepower\": 92.0, \"Miles_per_Gallon\": 24.0, \"Name\": \"ford fairmont futura\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2865, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 20.5, \"Cylinders\": 4, \"Displacement\": 151.0, \"Horsepower\": null, \"Miles_per_Gallon\": 23.0, \"Name\": \"amc concord dl\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3035, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 15.3, \"Cylinders\": 4, \"Displacement\": 105.0, \"Horsepower\": 74.0, \"Miles_per_Gallon\": 36.0, \"Name\": \"volkswagen rabbit l\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 1980, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 18.2, \"Cylinders\": 4, \"Displacement\": 91.0, \"Horsepower\": 68.0, \"Miles_per_Gallon\": 37.0, \"Name\": \"mazda glc custom l\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2025, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 17.6, \"Cylinders\": 4, \"Displacement\": 91.0, \"Horsepower\": 68.0, \"Miles_per_Gallon\": 31.0, \"Name\": \"mazda glc custom\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1970, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 14.7, \"Cylinders\": 4, \"Displacement\": 105.0, \"Horsepower\": 63.0, \"Miles_per_Gallon\": 38.0, \"Name\": \"plymouth horizon miser\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2125, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 17.3, \"Cylinders\": 4, \"Displacement\": 98.0, \"Horsepower\": 70.0, \"Miles_per_Gallon\": 36.0, \"Name\": \"mercury lynx l\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2125, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 4, \"Displacement\": 120.0, \"Horsepower\": 88.0, \"Miles_per_Gallon\": 36.0, \"Name\": \"nissan stanza xe\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2160, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 4, \"Displacement\": 107.0, \"Horsepower\": 75.0, \"Miles_per_Gallon\": 36.0, \"Name\": \"honda Accelerationord\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2205, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 16.9, \"Cylinders\": 4, \"Displacement\": 108.0, \"Horsepower\": 70.0, \"Miles_per_Gallon\": 34.0, \"Name\": \"toyota corolla\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2245, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 15.0, \"Cylinders\": 4, \"Displacement\": 91.0, \"Horsepower\": 67.0, \"Miles_per_Gallon\": 38.0, \"Name\": \"honda civic\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1965, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 15.7, \"Cylinders\": 4, \"Displacement\": 91.0, \"Horsepower\": 67.0, \"Miles_per_Gallon\": 32.0, \"Name\": \"honda civic (auto)\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1965, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 16.2, \"Cylinders\": 4, \"Displacement\": 91.0, \"Horsepower\": 67.0, \"Miles_per_Gallon\": 38.0, \"Name\": \"datsun 310 gx\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 1995, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 16.4, \"Cylinders\": 6, \"Displacement\": 181.0, \"Horsepower\": 110.0, \"Miles_per_Gallon\": 25.0, \"Name\": \"buick century limited\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2945, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 17.0, \"Cylinders\": 6, \"Displacement\": 262.0, \"Horsepower\": 85.0, \"Miles_per_Gallon\": 38.0, \"Name\": \"oldsmobile cutlass ciera (diesel)\", \"Origin\": \"USA\", \"Weight_in_lbs\": 3015, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 14.5, \"Cylinders\": 4, \"Displacement\": 156.0, \"Horsepower\": 92.0, \"Miles_per_Gallon\": 26.0, \"Name\": \"chrysler lebaron medallion\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2585, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 14.7, \"Cylinders\": 6, \"Displacement\": 232.0, \"Horsepower\": 112.0, \"Miles_per_Gallon\": 22.0, \"Name\": \"ford granada l\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2835, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 13.9, \"Cylinders\": 4, \"Displacement\": 144.0, \"Horsepower\": 96.0, \"Miles_per_Gallon\": 32.0, \"Name\": \"toyota celica gt\", \"Origin\": \"Japan\", \"Weight_in_lbs\": 2665, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 13.0, \"Cylinders\": 4, \"Displacement\": 135.0, \"Horsepower\": 84.0, \"Miles_per_Gallon\": 36.0, \"Name\": \"dodge charger 2.2\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2370, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 17.3, \"Cylinders\": 4, \"Displacement\": 151.0, \"Horsepower\": 90.0, \"Miles_per_Gallon\": 27.0, \"Name\": \"chevrolet camaro\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2950, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 15.6, \"Cylinders\": 4, \"Displacement\": 140.0, \"Horsepower\": 86.0, \"Miles_per_Gallon\": 27.0, \"Name\": \"ford mustang gl\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2790, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 24.6, \"Cylinders\": 4, \"Displacement\": 97.0, \"Horsepower\": 52.0, \"Miles_per_Gallon\": 44.0, \"Name\": \"vw pickup\", \"Origin\": \"Europe\", \"Weight_in_lbs\": 2130, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 11.6, \"Cylinders\": 4, \"Displacement\": 135.0, \"Horsepower\": 84.0, \"Miles_per_Gallon\": 32.0, \"Name\": \"dodge rampage\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2295, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 18.6, \"Cylinders\": 4, \"Displacement\": 120.0, \"Horsepower\": 79.0, \"Miles_per_Gallon\": 28.0, \"Name\": \"ford ranger\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2625, \"Year\": \"1982-01-01\"}, {\"Acceleration\": 19.4, \"Cylinders\": 4, \"Displacement\": 119.0, \"Horsepower\": 82.0, \"Miles_per_Gallon\": 31.0, \"Name\": \"chevy s-10\", \"Origin\": \"USA\", \"Weight_in_lbs\": 2720, \"Year\": \"1982-01-01\"}]}, \"mark\": \"tick\", \"encoding\": {\"x\": {\"type\": \"quantitative\", \"field\": \"Horsepower\"}, \"y\": {\"type\": \"ordinal\", \"field\": \"Cylinders\"}}, \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.4.3.json\"};\nvar opt = {};\nvar selector = \"#ab0e8161-ea46-4e67-a892-a9e1013a6a8a\";\nvar type = \"vega-lite\";\n\nvar output_area = this;\n\nrequire(['nbextensions/jupyter-vega/index'], function(vega) {\n  vega.render(selector, spec, type, opt, output_area);\n}, function (err) {\n  if (err.requireType !== 'scripterror') {\n    throw(err);\n  }\n});\n\n\n\n\n\n\n\n\n    Out[11]:\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub354 \ubcf5\uc7a1\ud55c \uadf8\ub798\ud504 \uc608\uc81c\u00b6\n\n\n\n\n\nIn\u00a0[12]:\n\n    \nalt.renderers.enable('notebook')\nalt.data_transformers.enable('json')\n\ndata = pd.DataFrame({\"Day\": range(1, 16),\n                     \"Value\": [54.8, 112.1, 63.6, 37.6, 79.7, 137.9, 120.1, 103.3,\n                               394.8, 199.5, 72.3, 51.1, 112.0, 174.5, 130.5]})\n\ndata2 = pd.DataFrame([{\"ThresholdValue\": 300, \"Threshold\": \"hazardous\"}])\n\nbar1 = alt.Chart(data).mark_bar().encode(\n    x='Day:O',\n    y='Value:Q'\n)\n\nbar2 = alt.Chart(data).mark_bar(color=\"#e45755\").encode(\n    x='Day:O',\n    y='baseline:Q',\n    y2='Value:Q'\n).transform_filter(\n    \"datum.Value >= 300\"\n).transform_calculate(\n    \"baseline\", \"300\"\n)\n\nrule = alt.Chart(data2).mark_rule().encode(\n    y='ThresholdValue:Q'\n)\n\ntext = alt.Chart(data2).mark_text(\n    align='left', dx=215, dy=-5\n).encode(\n    alt.Y('ThresholdValue:Q', axis=alt.Axis(title='PM2.5 Value')),\n    text=alt.value('hazardous')\n)\n\nbar1 + text + bar2 + rule\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n.vega-embed .error p {\n    color: firebrick;\n    font-size: 14px;\n}\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\nvar element = $('#a9ca1aa2-5903-4ce1-8f25-6699a3a900fc');\nvar spec = {\"config\": {\"view\": {\"width\": 400, \"height\": 300}}, \"layer\": [{\"data\": {\"url\": \"altair-data-a9da06517abbe7c727cab3f8a6bca85c.json\", \"format\": {\"type\": \"json\"}}, \"mark\": \"bar\", \"encoding\": {\"x\": {\"type\": \"ordinal\", \"field\": \"Day\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"Value\"}}}, {\"data\": {\"url\": \"altair-data-2577723bdf208c71ed7b4b49a46d722c.json\", \"format\": {\"type\": \"json\"}}, \"mark\": {\"type\": \"text\", \"align\": \"left\", \"dx\": 215, \"dy\": -5}, \"encoding\": {\"text\": {\"value\": \"hazardous\"}, \"y\": {\"type\": \"quantitative\", \"axis\": {\"title\": \"PM2.5 Value\"}, \"field\": \"ThresholdValue\"}}}, {\"data\": {\"url\": \"altair-data-a9da06517abbe7c727cab3f8a6bca85c.json\", \"format\": {\"type\": \"json\"}}, \"mark\": {\"type\": \"bar\", \"color\": \"#e45755\"}, \"encoding\": {\"x\": {\"type\": \"ordinal\", \"field\": \"Day\"}, \"y\": {\"type\": \"quantitative\", \"field\": \"baseline\"}, \"y2\": {\"type\": \"quantitative\", \"field\": \"Value\"}}, \"transform\": [{\"filter\": \"datum.Value >= 300\"}, {\"calculate\": \"300\", \"as\": \"baseline\"}]}, {\"data\": {\"url\": \"altair-data-2577723bdf208c71ed7b4b49a46d722c.json\", \"format\": {\"type\": \"json\"}}, \"mark\": \"rule\", \"encoding\": {\"y\": {\"type\": \"quantitative\", \"field\": \"ThresholdValue\"}}}], \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.4.3.json\"};\nvar opt = {};\nvar selector = \"#f4c6509b-bf49-4d33-8cbb-b9c70c25baaa\";\nvar type = \"vega-lite\";\n\nvar output_area = this;\n\nrequire(['nbextensions/jupyter-vega/index'], function(vega) {\n  vega.render(selector, spec, type, opt, output_area);\n}, function (err) {\n  if (err.requireType !== 'scripterror') {\n    throw(err);\n  }\n});\n\n\n\n\n\n\n\n\n    Out[12]:\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \npopulation = data.population.url\n\n# Define aggregate fields\nlower_box = 'q1(people):Q'\nlower_whisker = 'min(people):Q'\nupper_box = 'q3(people):Q'\nupper_whisker = 'max(people):Q'\n\n# Compose each layer individually\nlower_plot = alt.Chart(population).mark_rule().encode(\n    y=alt.Y(lower_whisker, axis=alt.Axis(title=\"population\")),\n    y2=lower_box,\n    x='age:O'\n)\n\nmiddle_plot = alt.Chart(population).mark_bar(size=5.0).encode(\n    y=lower_box,\n    y2=upper_box,\n    x='age:O'\n)\n\nupper_plot = alt.Chart(population).mark_rule().encode(\n    y=upper_whisker,\n    y2=upper_box,\n    x='age:O'\n)\n\nmiddle_tick = alt.Chart(population).mark_tick(\n    color='white',\n    size=5.0\n).encode(b\n    y='median(people):Q',\n    x='age:O',\n)\n\nlower_plot + middle_plot + upper_plot + middle_tick\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n.vega-embed .error p {\n    color: firebrick;\n    font-size: 14px;\n}\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\nvar element = $('#3719cd39-5463-4863-b25e-4cf405916eb8');\nvar spec = {\"config\": {\"view\": {\"width\": 400, \"height\": 300}}, \"layer\": [{\"data\": {\"url\": \"https://vega.github.io/vega-datasets/data/population.json\"}, \"mark\": \"rule\", \"encoding\": {\"x\": {\"type\": \"ordinal\", \"field\": \"age\"}, \"y\": {\"type\": \"quantitative\", \"aggregate\": \"min\", \"axis\": {\"title\": \"population\"}, \"field\": \"people\"}, \"y2\": {\"type\": \"quantitative\", \"aggregate\": \"q1\", \"field\": \"people\"}}}, {\"data\": {\"url\": \"https://vega.github.io/vega-datasets/data/population.json\"}, \"mark\": {\"type\": \"bar\", \"size\": 5.0}, \"encoding\": {\"x\": {\"type\": \"ordinal\", \"field\": \"age\"}, \"y\": {\"type\": \"quantitative\", \"aggregate\": \"q1\", \"field\": \"people\"}, \"y2\": {\"type\": \"quantitative\", \"aggregate\": \"q3\", \"field\": \"people\"}}}, {\"data\": {\"url\": \"https://vega.github.io/vega-datasets/data/population.json\"}, \"mark\": \"rule\", \"encoding\": {\"x\": {\"type\": \"ordinal\", \"field\": \"age\"}, \"y\": {\"type\": \"quantitative\", \"aggregate\": \"max\", \"field\": \"people\"}, \"y2\": {\"type\": \"quantitative\", \"aggregate\": \"q3\", \"field\": \"people\"}}}, {\"data\": {\"url\": \"https://vega.github.io/vega-datasets/data/population.json\"}, \"mark\": {\"type\": \"tick\", \"color\": \"white\", \"size\": 5.0}, \"encoding\": {\"x\": {\"type\": \"ordinal\", \"field\": \"age\"}, \"y\": {\"type\": \"quantitative\", \"aggregate\": \"median\", \"field\": \"people\"}}}], \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.4.3.json\"};\nvar opt = {};\nvar selector = \"#2bd3a851-8e2d-4048-94ff-07105501ac2e\";\nvar type = \"vega-lite\";\n\nvar output_area = this;\n\nrequire(['nbextensions/jupyter-vega/index'], function(vega) {\n  vega.render(selector, spec, type, opt, output_area);\n}, function (err) {\n  if (err.requireType !== 'scripterror') {\n    throw(err);\n  }\n});\n\n\n\n\n\n\n\n\n    Out[14]:\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \ncountries = alt.topo_feature(data.world_110m.url, 'countries')\n\nbase = alt.Chart(countries).mark_geoshape(\n    fill='#666666',\n    stroke='white'\n).properties(\n    width=300,\n    height=180\n)\n\nprojections = ['equirectangular', 'mercator', 'orthographic', 'gnomonic']\ncharts = [base.project(proj).properties(title=proj)\n          for proj in projections]\n\nalt.vconcat(\n    alt.hconcat(*charts[:2]),\n    alt.hconcat(*charts[2:])\n)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n.vega-embed .error p {\n    color: firebrick;\n    font-size: 14px;\n}\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\nvar element = $('#ad444f33-4158-45e8-9b1f-c73070ae93e2');\nvar spec = {\"config\": {\"view\": {\"width\": 400, \"height\": 300}}, \"vconcat\": [{\"hconcat\": [{\"data\": {\"url\": \"https://vega.github.io/vega-datasets/data/world-110m.json\", \"format\": {\"feature\": \"countries\", \"type\": \"topojson\"}}, \"mark\": {\"type\": \"geoshape\", \"fill\": \"#666666\", \"stroke\": \"white\"}, \"height\": 180, \"projection\": {\"type\": \"equirectangular\"}, \"title\": \"equirectangular\", \"width\": 300}, {\"data\": {\"url\": \"https://vega.github.io/vega-datasets/data/world-110m.json\", \"format\": {\"feature\": \"countries\", \"type\": \"topojson\"}}, \"mark\": {\"type\": \"geoshape\", \"fill\": \"#666666\", \"stroke\": \"white\"}, \"height\": 180, \"projection\": {\"type\": \"mercator\"}, \"title\": \"mercator\", \"width\": 300}]}, {\"hconcat\": [{\"data\": {\"url\": \"https://vega.github.io/vega-datasets/data/world-110m.json\", \"format\": {\"feature\": \"countries\", \"type\": \"topojson\"}}, \"mark\": {\"type\": \"geoshape\", \"fill\": \"#666666\", \"stroke\": \"white\"}, \"height\": 180, \"projection\": {\"type\": \"orthographic\"}, \"title\": \"orthographic\", \"width\": 300}, {\"data\": {\"url\": \"https://vega.github.io/vega-datasets/data/world-110m.json\", \"format\": {\"feature\": \"countries\", \"type\": \"topojson\"}}, \"mark\": {\"type\": \"geoshape\", \"fill\": \"#666666\", \"stroke\": \"white\"}, \"height\": 180, \"projection\": {\"type\": \"gnomonic\"}, \"title\": \"gnomonic\", \"width\": 300}]}], \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.4.3.json\"};\nvar opt = {};\nvar selector = \"#8ced509f-615a-4e81-ab85-57f077fd3e3e\";\nvar type = \"vega-lite\";\n\nvar output_area = this;\n\nrequire(['nbextensions/jupyter-vega/index'], function(vega) {\n  vega.render(selector, spec, type, opt, output_area);\n}, function (err) {\n  if (err.requireType !== 'scripterror') {\n    throw(err);\n  }\n});\n\n\n\n\n\n\n\n\n    Out[15]:\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \nbarley = data.barley()\n\npoints = alt.Chart(barley).mark_point(filled=True).encode(\n    alt.X(\n        'mean(yield)',\n        scale=alt.Scale(zero=False),\n        axis=alt.Axis(title='Barley Yield')\n    ),\n    y='variety',\n    color=alt.value('black')\n)\n\nerror_bars = alt.Chart(barley).mark_rule().encode(\n    x='ci0(yield)',\n    x2='ci1(yield)',\n    y='variety'\n)\n\npoints + error_bars\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n.vega-embed .error p {\n    color: firebrick;\n    font-size: 14px;\n}\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\nvar element = $('#0d9f80b3-4f8b-4974-a963-07af1324c22a');\nvar spec = {\"config\": {\"view\": {\"width\": 400, \"height\": 300}}, \"layer\": [{\"data\": {\"url\": \"altair-data-c6acb8f78cd1b09b6c4c1aff5ed5b093.json\", \"format\": {\"type\": \"json\"}}, \"mark\": {\"type\": \"point\", \"filled\": true}, \"encoding\": {\"color\": {\"value\": \"black\"}, \"x\": {\"type\": \"quantitative\", \"aggregate\": \"mean\", \"axis\": {\"title\": \"Barley Yield\"}, \"field\": \"yield\", \"scale\": {\"zero\": false}}, \"y\": {\"type\": \"nominal\", \"field\": \"variety\"}}}, {\"data\": {\"url\": \"altair-data-c6acb8f78cd1b09b6c4c1aff5ed5b093.json\", \"format\": {\"type\": \"json\"}}, \"mark\": \"rule\", \"encoding\": {\"x\": {\"type\": \"quantitative\", \"aggregate\": \"ci0\", \"field\": \"yield\"}, \"x2\": {\"type\": \"quantitative\", \"aggregate\": \"ci1\", \"field\": \"yield\"}, \"y\": {\"type\": \"nominal\", \"field\": \"variety\"}}}], \"$schema\": \"https://vega.github.io/schema/vega-lite/v2.4.3.json\"};\nvar opt = {};\nvar selector = \"#10aedb24-00f8-4000-afb8-7bda71c0b734\";\nvar type = \"vega-lite\";\n\nvar output_area = this;\n\nrequire(['nbextensions/jupyter-vega/index'], function(vega) {\n  vega.render(selector, spec, type, opt, output_area);\n}, function (err) {\n  if (err.requireType !== 'scripterror') {\n    throw(err);\n  }\n});\n\n\n\n\n\n\n\n\n    Out[16]:\n\n\n\n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub9c8\uce58\uba70\u00b6Altair\uc758 \uc608\uc81c\ub97c \uc0b4\ud3b4\ubcf4\uba74\uc11c \uc774 \ub3c4\uad6c\uc758 \uc7a0\uc7ac\ub825\uacfc \uac04\uacb0\ud568\uc744 \ub290\ub07c\uc168\uc744 \uac83\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc Altair\ub294 \uc544\ub798\uc640 \uac19\uc774  \uba87\uac00\uc9c0 \uc8fc\uc758\uc0ac\ud56d\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n\nAPI\ub294 \uc5ec\uc804\ud788 \uaf64 \uc0c8\ub85c\uc6b4 \uac83\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc77c\ubd80\uc5d0 \ubc84\uadf8\uac00 \uc874\uc7ac\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ubb38\uc11c\ud654\uac00 \uc544\uc9c1 \ubd80\uc871\ud569\ub2c8\ub2e4. \ub54c\ub54c\ub85c Vega-Lite \ubb38\uc11c\ub97c\ubcf4\uace0 \ub2f5\uc744 \ucc3e\uc544\uc57c\ud569\ub2c8\ub2e4.\n\ucc98\ub9ac \ud560 \uc218\uc788\ub294 \ub370\uc774\ud130 \ud3ec\uc778\ud2b8\uc758 \uc218\ub294 \ud604\uc7ac \ub9e4\uc6b0 \uc801\uc2b5\ub2c8\ub2e4. \uc9c0\uae08\uc740 5,000\uc73c\ub85c \uc81c\ud55c\ub418\uc5b4 \uc788\uc9c0\ub9cc \uc55e\uc73c\ub85c \ub298\uc5b4 \ub0a0 \uac83\uc785\ub2c8\ub2e4. \n\n\uadf8\ub7ec\ub098 \uc774\ub7f0 \uc8fc\uc758\uc0ac\ud56d\uc5d0\ub3c4 Altair\uc740 \ub9ce\uc740 \ubc1c\uc804\uac00\ub2a5\uc131\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc55e\uc73c\ub85c matplotlib\uc758 \uc544\uc131\uc744 \ub6f0\uc5b4 \ub118\uc744 \uc218 \uc788\uc744\uc9c0 \uc9c0\ucf1c\ubcf4\ub3c4\ub85d \ud558\uc8e0.",
      "tags": "Altair,Python,\ub370\uc774\ud130 \uacfc\ud559\uc790,\uc2dc\uac01\ud654",
      "url": "https://partrita.github.io/posts/altair/"
    },
    {
      "title": "\ud3ec\ucf13\ubaac\uc2a4\ud130 \ub370\uc774\ud130\ub85c \ubc30\uc6b0\ub294 seaborn",
      "text": "\uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ucd9c\ucc98\ub97c \ud655\uc778\ud574\uc8fc\uc138\uc694.\nSeaborn \uc18c\uac1c\u00b6Seaborn\uc740 \uac15\ub825\ud558\uc9c0\ub9cc \ub2e4\ub8e8\uae30 \ud798\ub4e0 \uc2dc\uac01\ud654 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc778 Matplotlib\uc5d0 \uc880 \ub354 \ub098\uc740 \ud658\uacbd\uc744 \uc81c\uacf5\ud558\uae30 \uc704\ud574 \ub9cc\ub4e4\uc5b4\uc84c\uc2b5\ub2c8\ub2e4. \uacf5\uc2dd \uc6f9\ud398\uc774\uc9c0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 Seaborn\uc744 \uc18c\uac1c\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.\nMatplotlib\uc774 \uc26c\uc6b4 \uc77c\uc744 \uc27d\uac8c, \uc5b4\ub824\uc6b4 \uc77c\uc740 \uac00\ub2a5\ud558\uac8c \ub9cc\ub4e4\ub54c, Seaborn\uc740 \uc5b4\ub824\uc6b4 \uc77c\ub3c4 \uc27d\uac8c \ub9cc\ub4dc\ub824\uace0 \ud569\ub2c8\ub2e4.\n\nSeaborn\uc740 \uc544\ub798\uc640 \uac19\uc740 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.\n\n\uae30\ubcf8 \ud14c\ub9c8\uac00 \uc544\ub984\ub2f5\uc2b5\ub2c8\ub2e4.\n\uc0c9\uc0c1 \ud45c\ub97c \uc0ac\uc6a9\uc790\uac00 \uc815\uc758\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ub9e4\ub825\uc801\uc778 \ud1b5\uacc4 \ub3c4\ud45c \ub9cc\ub4e4\uae30.\n\uc27d\uace0 \uc720\uc5f0\ud558\uac8c \uacb0\uacfc\ubb3c\uc744 \ucd9c\ub825\ud569\ub2c8\ub2e4.\n\n\uac15\uc870\ud558\uace0 \uc2f6\uc740 \uc810\uc740 Seaborn\uc774 \ud0d0\uc0c9\uc801 \ubd84\uc11d\uc744 \uc704\ud55c \ucd5c\uc120\uc758 \ub3c4\uad6c\ub77c\ub294 \uac83\uc785\ub2c8\ub2e4. Seaborn\uc744 \uc0ac\uc6a9\ud55c\ub2e4\uba74 \uc6d0\ubcf8 \ub370\uc774\ud130\ub97c \ube60\ub974\uace0 \ud6a8\uc728\uc801\uc73c\ub85c \ud30c\uc545\ud560 \uc218\uc788\uc2b5\ub2c8\ub2e4.\n\ub2e4\ub9cc Seaborn\uc740 Matplotlib\uc758 \ub300\uccb4\ud488\uc774 \uc544\ub2cc \ubcf4\uc644\ud488\uc785\ub2c8\ub2e4. Matplotlib \uc704\uc5d0\uc11c \uc791\ub3d9\ud558\uae30 \ub54c\ubb38\uc5d0 Matplotlib\ub97c \ub2e4\ub8e8\ub294 \ubc29\ubc95\ub3c4 \uc54c\uace0 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n\uc2dc\uc791\ud558\uae30 \uc55e\uc11c\u00b6\ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n#importing libraries and dataset\nimport pandas as pd\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport seaborn as sns\n\n\n    \n\n\n\n\n\n\n\n\ud3ec\ucf13\ubaac\uc2a4\ud130 \ub370\uc774\ud130\u00b6\ud3ec\ucf13\ubaac\uc2a4\ud130 \uac8c\uc784\uc5d0\uc11c \uc218\uc9d1\ud55c \ub370\uc774\ud130\uc778 Pokemon.csv\ud30c\uc77c\uc744 \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\uba3c\uc800 read_csv\uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574 CSV\ud615\uc2dd\uc73c\ub85c \uc800\uc7a5\ub41c \ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \n#Read dataset\ndf = pd.read_csv('G:/Pokemon.csv',index_col=0)\ndf.head()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\n\n  \n    \n      \n      Name\n      Type 1\n      Type 2\n      Total\n      HP\n      Attack\n      Defense\n      Sp. Atk\n      Sp. Def\n      Speed\n      Stage\n      Legendary\n    \n    \n      #\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      1\n      Bulbasaur\n      Grass\n      Poison\n      318\n      45\n      49\n      49\n      65\n      65\n      45\n      1\n      False\n    \n    \n      2\n      Ivysaur\n      Grass\n      Poison\n      405\n      60\n      62\n      63\n      80\n      80\n      60\n      2\n      False\n    \n    \n      3\n      Venusaur\n      Grass\n      Poison\n      525\n      80\n      82\n      83\n      100\n      100\n      80\n      3\n      False\n    \n    \n      4\n      Charmander\n      Fire\n      NaN\n      309\n      39\n      52\n      43\n      60\n      50\n      65\n      1\n      False\n    \n    \n      5\n      Charmeleon\n      Fire\n      NaN\n      405\n      58\n      64\n      58\n      80\n      65\n      80\n      2\n      False\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc120\ud615 \ud68c\uadc0 \uc2dc\uac01\ud654\u00b6\uacf5\uaca9\ub825\uacfc \ubc29\uc5b4\ub825\uac04\uc5d0 \uc120\ud615\uc758 \uad00\uacc4\uac00 \uc788\ub294\uc9c0 \uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \uc0b4\ud3b4\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \nsns.lmplot(x='Attack',y='Defense',data=df,hue='Type 1')\nplt.ylim(0,None)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n(0, 220.91225584629962)\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub2e4\uc218\uc758 \ud3ec\ucf13\ubaac\ub4e4\uc758 \uacf5\uaca9\ub825\uacfc \ubc29\uc5b4\ub825\uc740 \uba85\ubc31\ud55c \uc120\ud615\uc758 \uad00\uacc4\uac00 \uc788\ub294\uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc720\ub839\ud615 \ud3ec\ucf13\ubaac\ub4e4\uc740 \uacf5\uaca9\ub825\uc774 \ub298\uba74 \uc624\ud788\ub824 \ubc29\uc5b4\ub825\uc774 \uc904\uc5b4\ub4dc\ub294 \uacbd\ud5a5\uc774 \uc788\ub124\uc694.\n\uc0c1\uc790 \uadf8\ub9bc \uadf8\ub9ac\uae30\u00b6\ubaa8\ub4e0 \ud3ec\ucf13\ubaac\uc758 \uc2a4\ud15f(\uacf5\uaca9\ub825, \ubc29\uc5b4\ub825, \uccb4\ub825 \ub4f1\ub4f1)\uc758 \uc0c1\uc790\uadf8\ub9bc\uc744 \uadf8\ub824\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nsns.boxplot(data=df)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0xc7c65f8>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud544\uc694\uc5c6\ub294 \uac12\ub4e4\uc744 \ube7c\uace0 \ub2e4\uc2dc \uadf8\ub824\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nstats_df = df.drop(['Total','Stage','Legendary'],axis=1)\nsns.boxplot(data=stats_df)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0xce099b0>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ubaa8\ub4e0 \uac12\ub4e4\uc774 \ube44\uc2b7\ube44\uc2b7\ud558\ub124\uc694. \ub2e4\ub9cc \uccb4\ub825(hp)\uc758 \uacbd\uc6b0\ub294 \uc544\uc8fc\ub192\uc740 \uac12\uc758 \ud2b9\uc774\uac12(outlier)\uac00 \uc874\uc7ac \ud569\ub2c8\ub2e4.\n\ubc14\uc774\uc62c\ub9b0 \ub3c4\ud45c \uadf8\ub9ac\uae30\u00b6\uacf5\uaca9\ub825\uc744 \uac01\uac01\uc758 \ud3ec\ucf13\ubaac \uc720\ud615\uc5d0 \ub530\ub77c\uc11c \ubc14\uc774\uc62c\ub9b0 \ub3c4\ud45c\ub97c \uadf8\ub824\ubd05\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc73c\ub85c \uc0c1\uc790\uadf8\ub9bc\uacfc \ub3d9\uc77c\ud55c \uc720\ud615\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nsns.set_style('white')\nsns.violinplot(x='Type 1',y='Attack',data=df)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[11]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0xc75f710>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uaca9\ud22c(fighting)\ud0c0\uc785\uc758 \ud3ec\ucf13\ubaac\ub4e4\uc774 \uacf5\uaca9\ub825\uc774 \ub192\uc740\uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uac01\uac01\uc758 \uc720\ud615\ub4e4\uc744 \uc6d0\ud558\ub294 \uc0c9\uc0c1\uc73c\ub85c \uc9c0\uc815\ud574\uc904\uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc640 \uac19\uc774 \uc0c9\uc0c1\ud45c\ub97c \uc815\uc758\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \npkmn_type_colors = ['#78C850',  # Grass\n                    '#F08030',  # Fire\n                    '#6890F0',  # Water\n                    '#A8B820',  # Bug\n                    '#A8A878',  # Normal\n                    '#A040A0',  # Poison\n                    '#F8D030',  # Electric\n                    '#E0C068',  # Ground\n                    '#EE99AC',  # Fairy\n                    '#C03028',  # Fighting\n                    '#F85888',  # Psychic\n                    '#B8A038',  # Rock\n                    '#705898',  # Ghost\n                    '#98D8D8',  # Ice\n                    '#7038F8',  # Dragon\n                   ]\nsns.violinplot(x='Type 1',y='Attack',data=df, palette=pkmn_type_colors)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[13]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0xe1148d0>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc0b0\ud3ec\ub3c4(Scatter plot)\u00b6\uc0b0\ud3ec\ub3c4\ub85c \ud45c\ud604\ud560 \uc218 \ub3c4 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \n# Swarm plot with Pokemon color palette\nsns.swarmplot(x='Type 1', y='Attack', data=df, \n              palette=pkmn_type_colors)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[14]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0xe3fcc88>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc0b0\ud3ec\ub3c4\uc640 \ubc14\uc774\uc62c\ub9b0 \ub3c4\ud45c \uacb9\uce58\uae30\u00b6\uac01\uac01\uc758 \ub3c4\ud45c\ub97c \uacb9\uccd0\uc11c \ub354\ub9ce\uc740 \uc815\ubcf4\ub97c \ud45c\ud604 \ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \nplt.figure(figsize=(10,6))\n \n# Create plot\nsns.violinplot(x='Type 1',\n               y='Attack', \n               data=df, \n               inner=None, # Remove the bars inside the violins\n               palette=pkmn_type_colors)\n \nsns.swarmplot(x='Type 1', \n              y='Attack', \n              data=df, \n              color='k', # Make points black\n              alpha=0.7) # and slightly transparent\n \n# Set title with matplotlib\nplt.title('Attack by Type')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[15]:\n\n\n\n\n\n<matplotlib.text.Text at 0xe7cb588>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud568\uaed8 \ubaa8\uc544\uc11c\u00b6\uac01\uac01\uc758 \ud2b9\uc131\uc5d0 \ub300\ud55c \uadf8\ub9bc\uc744 \ubc18\ubcf5\ud574\uc11c \uadf8\ub9b4\uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ud558\ub098\uc758 \uadf8\ub9bc\uc5d0 \uc815\ubcf4\ub97c \ud45c\ud604\ud558\ub824\uba74 \uc5b4\ub5bb\uac8c \ud574\uc57c \ud560\uae4c\uc694? \uc774\ub7f0 \uc0c1\ud669\uc5d0\uc11c \uc6b0\ub9ac\ub294 Pandas\uc758 melt()\uae30\ub2a5\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\uc544\ub798\uc758 \uc608\ub97c \ud655\uc778\ud558\uc138\uc694.\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \n# Melt DataFrame\nmelted_df = pd.melt(stats_df, \n                    id_vars=[\"Name\", \"Type 1\", \"Type 2\"], # Variables to keep\n                    var_name=\"Stat\") # Name of melted variable\n#melted_df.head()\nprint stats_df.shape\nprint melted_df.shape\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n(151, 9)\n(906, 5)\n\n\n\n\n\n\n\n\n\n\n\n\uc0b0\ud3ec\ub3c4 \uadf8\ub9ac\uae30\u00b6\ubcf5\uc7a1\ud55c \uc815\ubcf4\ub97c \ud45c\ud604\ud560\ub54c\ub294 \uc544\ub798\uc640 \uac19\uc740 \uc0b0\ud3ec\ub3c4\uac00 \uc88b\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[22]:\n\n    \nsns.swarmplot(x='Stat', y='value', data=melted_df, \n              hue='Type 1', split=True, # 2. Separate points by hue\n              palette=pkmn_type_colors) # 3. Use Pokemon palette\n             \n# put a legend to the right of the current axis\nplt.legend(loc='center left', bbox_to_anchor=(1, 0.5))\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[22]:\n\n\n\n\n\n<matplotlib.legend.Legend at 0xf54a1d0>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud788\ud2b8\ub9f5 \uadf8\ub9ac\uae30\u00b6\uac01\uac01\uc758 \uc2a4\ud15f\ub4e4 \uc0ac\uc774\uc5d0 \uc0c1\uad00\uad00\uacc4\uac00 \uc788\ub294\uc9c0 \ud788\ud2b8\ub9f5\uc744 \uadf8\ub824\uc11c \ud655\uc778\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[23]:\n\n    \ncorr = stats_df.corr()\n \n# Heatmap\nsns.heatmap(corr)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[23]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0xfd1b588>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud788\uc2a4\ud1a0\uadf8\ub7a8 \uadf8\ub9ac\uae30\u00b6\uacf5\uaca9\ub825\uc5d0 \ub300\ud55c \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc744 \uadf8\ub824\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[24]:\n\n    \n# Distribution Plot (a.k.a. Histogram)\nsns.distplot(df.Attack)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[24]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0xf556358>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uce74\uc6b4\ud2b8 \ud50c\ub86f(Count Plot)\u00b6\uac01\uac01\uc758 \uac12\ub4e4\uc758 \uac2f\uc218\ub97c \ud45c\ud604\ud558\ub294 \ub3c4\ud45c\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[25]:\n\n    \nsns.countplot(x='Type 1', data=df, palette=pkmn_type_colors)\n \n# Rotate x-labels\nplt.xticks(rotation=-45)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[25]:\n\n\n\n\n\n(array([ 0,  1,  2,  3,  4,  5,  6,  7,  8,  9, 10, 11, 12, 13, 14]),\n <a list of 15 Text xticklabel objects>)\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc694\uc778 \ud50c\ub86f(Factor Plot)\u00b6\n\n\n\n\n\nIn\u00a0[26]:\n\n    \ng = sns.factorplot(x='Type 1', \n                   y='Attack', \n                   data=df, \n                   hue='Stage',  # Color by stage\n                   col='Stage',  # Separate by stage\n                   kind='swarm') # Swarmplot\n \n# Rotate x-axis labels\ng.set_xticklabels(rotation=-45)\n \n# Doesn't work because only rotates last plot\n# plt.xticks(rotation=-45)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[26]:\n\n\n\n\n\n<seaborn.axisgrid.FacetGrid at 0xfbe3390>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ubc00\ub3c4 \ud50c\ub86f(Density Plot)\u00b6\uacf5\uaca9\ub825\uc640 \ubc29\uc5b4\ub825\uc744 \ucd95\uc73c\ub85c \uac01\uac01\uc758 \ud3ec\ucf13\ubaac\ub4e4\uc758 \ubc00\ub3c4\ub97c \ud45c\ud604\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[27]:\n\n    \nsns.kdeplot(df.Attack, df.Defense)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[27]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0xf4f99e8>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ubd84\ud3ec\ub3c4(Joint Distribution Plot)\u00b6\uacf5\uaca9\ub825\uacfc \ubc29\uc5b4\ub825\uc744 \ucd95\uc73c\ub85c \uac01\uac01\uc758 \ubd84\ud3ec\ub97c \ud558\ub098\uc758 \uadf8\ub9bc\uc5d0\uc11c \ud655\uc778\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[28]:\n\n    \nsns.jointplot(x='Attack', y='Defense', data=df)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[28]:\n\n\n\n\n\n<seaborn.axisgrid.JointGrid at 0x10e8c668>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub9c8\uce58\uba70,\u00b6Seaborn\uc740 Matplotlib\uc744 \uae30\ubc18\uc73c\ub85c \ub2e4\uc591\ud55c \uc0c9\uc0c1 \ud14c\ub9c8\uc640 \ud1b5\uacc4\uc6a9 \ucc28\ud2b8\ub4f1\uc758 \uae30\ub2a5\uc744 \ucd94\uac00\ud574 \uc880 \ub354 \uba4b\uc788\uac8c \uc2dc\uac01\ud654\ub97c \ud574\uc8fc\ub294 \ub3c4\uad6c \uc785\ub2c8\ub2e4. \ub354 \uba4b\uc788\ub294 \ub3c4\ud45c\ub294 \uc608\uc81c \uac24\ub7ec\ub9ac\uc5d0\uc11c \ud655\uc778\ud558\uc138\uc694.",
      "tags": "Python,seaborn,\ub370\uc774\ud130 \uacfc\ud559\uc790,\uc2dc\uac01\ud654",
      "url": "https://partrita.github.io/posts/seaborn-pokemon/"
    },
    {
      "title": "\ub2f9\ub1e8\ud658\uc790\uc758 \uc7ac\uc785\uc6d0\uc728(Diabetes_Readmission_rate)",
      "text": "\ub2f9\ub1e8 \ud658\uc790\uc758 \uc7ac\uc785\uc6d0 \uc694\uc778 \ubd84\uc11d\u00b6\uc778\uacf5\uc9c0\ub2a5, \uc2ec\uc9c8\ud658\uc790 \uc7ac\uc785\uc6d0 \uac00\ub2a5\uc131 \uc608\uce21 \uae30\uc0ac\ub97c \ubcf4\uace0 \uc800\ub3c4 \ud55c\ubc88 \ube44\uc2b7\ud55c \ubb38\uc81c\ub97c \ud480\uc5b4\ubcf4\uace0 \uc2f6\uc5c8\uc2b5\ub2c8\ub2e4.  \uc778\ud130\ub137\uc5d0 \uacf5\uac1c\ub418\uc5b4\uc788\ub294 \ub370\uc774\ud130 \uc911\uc5d0 \ub2f9\ub1e8\ud658\uc790\uc758 \uc7ac\uc785\uc6d0 \ub370\uc774\ud130\uac00 \uc788\ub354\uad70\uc694. \ub610\ud55c \ub2f9\ub1e8\ud658\uc790\ub4e4\uc740 \uc7ac\uc785\uc6d0 \ube44\uc728\uc774 \uc77c\ubc18\ud658\uc790\ubcf4\ub2e4 \ub192\ub2e4\uace0 \uc54c\ub824\uc838\uc788\uc2b5\ub2c8\ub2e4 \uad00\ub828 \ub17c\ubb38. \uadf8\ub798\uc11c \uc81c\uac00 \ud55c\ubc88 \ud574\ubd24\uc2b5\ub2c8\ub2e4.\n\uc7ac\uc785\uc6d0\uc774 \uc65c \ubb38\uc81c\uc8e0?\u00b6\n\ud658\uc790\uc758 \uc7ac\uc785\uc6d0\uc774 \ubb38\uc81c\ub77c\uace0 \ud569\ub2c8\ub2e4.  \ucd5c\uadfc \ud1f4\uc6d0\ud55c \uc9c0 30\uc77c \uc774\ub0b4\uc5d0 \uc7ac\uc785\uc6d0\ud558\ub294 \ud658\uc790\uc758 \uc804\uccb4\uc758 20%\uc5d0 \uc774\ub978\ub2e4\uace0 \ud569\ub2c8\ub2e4(2014\ub144\ub3c4 \ubbf8\uad6d\uae30\uc900). \uc774\ub7ec\ud55c \uc7a6\uc740 \uc785\uc6d0\uc73c\ub85c \uc778\ud55c \ube44\uc6a9\uc758 \uc99d\uac00\ub294 \uc758\ub8cc\ubcf4\ud5d8\uc758 \uc7ac\uc815\uc744 \uc704\ud611\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\ubbf8\uad6d \ubcf4\uac74\ub2f9\uad6d\uc740 \ubcd1\uc6d0\uc7ac\uc785\uc6d0\uac10\uc18c\ub300\ucc45\uc744 \uc218\ub9bd\ud558\uace0 \uc7ac\uc785\uc6d0\uc5d0 \ub300\ud574 \ubc8c\uce59\ub3c4 \uc815\ud588\ub2e4. \uad00\ub828\ub274\uc2a4\uae30\uc0ac\n\n\uc774\ub4e4\uc740 \uc911\ud658\uc790\uc640\ub294 \ub2ec\ub9ac \uc785\uc6d0\ud574\uc11c \uce58\ub8cc\ub97c \ubc1b\uc73c\uba74 \uc548\uc815\uc744 \ub418\ucc3e\uace0 \ud68c\ubcf5 \uc0c1\ud0dc\ub85c \uc9c0\ub0b4\uc9c0\ub9cc \ud1f4\uc6d0\uc744 \ud558\uac8c \ub418\uba74 \uc989\uac01\uc801\uc778 \ub300\uc751\uacfc \uce58\ub8cc\uac00 \uc5ec\uc758\uce58 \uc54a\uc544 \uc0c1\ud0dc\uac00 \ub098\ube60\uc9c0\ub294 \ud658\uc790\ub4e4\uc785\ub2c8\ub2e4.  \ub300\uccb4\ub85c \uace0\ub839\uc774\uace0, \uc774\ubbf8 \ub9cc\uc131\uc9c8\ud658\uc744 \uac00\uc9c0\uace0 \uc788\uc5b4 \uae09\uc131 \uc2a4\ud2b8\ub808\uc2a4\ub098 \uc0c1\ud574\uc5d0 \ucde8\uc57d\ud569\ub2c8\ub2e4. \uc774\ub7f0 \ud658\uc790\ub97c \ucc98\uc74c \uc785\uc6d0 \ub54c\ubd80\ud130 \ud655\uc778\ud558\uace0 \uad00\ub9ac\ud55c\ub2e4\uba74 \ube44\uc6a9\uc808\uac10\uacfc \ud658\uc790\uc758 \uc0b6\uc774 \uac1c\uc120\ub420 \uc218 \uc788\uc744 \uac83\uc785\ub2c8\ub2e4.\n\ubd84\uc11d\uc5d0 \uc0ac\uc6a9\ud55c \ub370\uc774\ud130\u00b6\uc0ac\uc6a9\ud55c \ub370\uc774\ud130\uc14b\uc740 \uc778\ud130\ub137\uc5d0 \uacf5\uac1c\ub418\uc5b4 \uc788\ub294 \uac83\uc744 \uc0ac\uc6a9\ud588\uace0 \uad6c\uccb4\uc801\uc778 \uc815\ubcf4\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n\ub370\uc774\ud130 \ub2e4\uc6b4\ub85c\ub4dc\nRubin, Daniel J (2015). \"Hospital readmission of patients with diabetes\". Current Diabetes Reports. 15 (4): 1\u20139. doi:10.1007/s11892-015-0584-7.  \uc800\ub294 Kaggle\uc5d0\uc11c \uc791\uc5c5\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n\n\n1999\ub144\ubd80\ud130 2008\ub144\uae4c\uc9c0 \uadfc 10\ub144\uac04 \ubbf8\uad6d \uac01\uc9c0\uc758 130\uac1c\uc758 \ubcd1\uc6d0\uc5d0\uc11c \uc218\uc9d1\ub41c \ub370\uc774\ud130\uc785\ub2c8\ub2e4. 50\uac1c\uac00 \ub118\ub294 \ud56d\ubaa9\uc744 \ud3ec\ud568\ud558\uace0 \uc788\uc73c\uba70 \ub2e4\uc74c\uc758 \uae30\uc900\uc744 \ub530\ub974\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc785\uc6d0\ud55c \ud658\uc790\ub9cc\uc758 \uacb0\uacfc\uc785\ub2c8\ub2e4.\n\ub2f9\ub1e8\ubcd1\uc73c\ub85c \uc9c4\ub2e8\ub41c \ud658\uc790\uc785\ub2c8\ub2e4.\n\ud558\ub8e8\uc774\uc0c1\uc758 \uc785\uc6d0\uc774\uba70, \ub300\uccb4\ub85c 14\uc77c\uc744 \uc785\uc6d0\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\uc77c\ubc18 \uac80\uc0ac(Laboratory tests)\ub294 \uc785\uc6d0\uc911\uc5d0 \uc2dc\ud589\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n\uc758\uc57d\ud488\uc740 \ubaa8\ub450 \uc785\uc6d0\uc911\uc5d0 \ucc98\ubc29\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n\n\ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\u00b6\ubd84\uc11d\uc744 \uc2dc\uc791\ud558\uae30 \uc55e\uc11c \uc0ac\uc6a9\ud560 \ud30c\uc774\uc36c \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 \ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc624\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n# \ubd84\uc11d\uc5d0 \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30\nimport os\nimport numpy as np\nimport pandas as pd \nimport matplotlib.pyplot as plt\n%matplotlib inline \nimport seaborn as sns\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndf = pd.read_csv('./input/diabetic_data.csv', na_values='?', low_memory=False) \n# \uacb0\uce21\uce58\ub294 ?\ub85c \ud45c\uc2dc\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\ndf.tail() \n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[1]:\n\n\n\n\n\n\n  \n    \n      \n      encounter_id\n      patient_nbr\n      race\n      gender\n      age\n      weight\n      admission_type_id\n      discharge_disposition_id\n      admission_source_id\n      time_in_hospital\n      ...\n      citoglipton\n      insulin\n      glyburide-metformin\n      glipizide-metformin\n      glimepiride-pioglitazone\n      metformin-rosiglitazone\n      metformin-pioglitazone\n      change\n      diabetesMed\n      readmitted\n    \n  \n  \n    \n      101761\n      443847548\n      100162476\n      AfricanAmerican\n      Male\n      [70-80)\n      NaN\n      1\n      3\n      7\n      3\n      ...\n      No\n      Down\n      No\n      No\n      No\n      No\n      No\n      Ch\n      Yes\n      >30\n    \n    \n      101762\n      443847782\n      74694222\n      AfricanAmerican\n      Female\n      [80-90)\n      NaN\n      1\n      4\n      5\n      5\n      ...\n      No\n      Steady\n      No\n      No\n      No\n      No\n      No\n      No\n      Yes\n      NO\n    \n    \n      101763\n      443854148\n      41088789\n      Caucasian\n      Male\n      [70-80)\n      NaN\n      1\n      1\n      7\n      1\n      ...\n      No\n      Down\n      No\n      No\n      No\n      No\n      No\n      Ch\n      Yes\n      NO\n    \n    \n      101764\n      443857166\n      31693671\n      Caucasian\n      Female\n      [80-90)\n      NaN\n      2\n      3\n      7\n      10\n      ...\n      No\n      Up\n      No\n      No\n      No\n      No\n      No\n      Ch\n      Yes\n      NO\n    \n    \n      101765\n      443867222\n      175429310\n      Caucasian\n      Male\n      [70-80)\n      NaN\n      1\n      1\n      7\n      6\n      ...\n      No\n      No\n      No\n      No\n      No\n      No\n      No\n      No\n      No\n      NO\n    \n  \n\n5 rows \u00d7 50 columns\n\n\n\n\n\n\n\n\n\n\n\n\n\ub370\uc774\ud130\ub294 50\uac1c\uc758 \ud589(columns)\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ucd1d \ub370\uc774\ud130\uc758 \uac2f\uc218\uac00 10000\uac1c\ub85c \uc54c\ub824\uc838 \uc788\uc5c8\ub294\ub370 \ub354 \ub298\uc5b4\ub09c 101765\uc778\uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac01\uac01\uc758 \uc5f4\uc758 \ub370\uc774\ud130\uac00 \uc5b4\ub5a4 \uc758\ubbf8\uc778\uc9c0\ub294 \uc544\ub798\uc5d0\uc11c \uc124\uba85\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\ub370\uc774\ud130\uc14b \uc124\uba85\u00b6\ubd84\uc11d\ud558\uae30 \uc55e\uc11c \ub370\uc774\ud130\uc14b\uc758 \uc815\ubcf4\ub97c \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\nFeature \uc774\ub984\uacfc \uc124\uba85\u00b6\ub370\uc774\ud130\uc14b\uc744 \uc774\ub8e8\uace0 \uc788\ub294 Feature\ub4e4\uc744 \ub2e4\uc74c\uc758 \ud45c\ub85c \uc815\ub9ac\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n\nFeature name\n\ub370\uc774\ud130 \ud615\ud0dc(Type)\n\uc124\uba85\n\n\n\n\nEncounter ID\n\uc218\uce58\ud615\n\uc785\uc6d0\uc758 \uace0\uc720\ud55c \uc2dd\ubcc4\uac12\n\n\nPatient number\n\uc218\uce58\ud615\n\ud658\uc790\uc758 \uace0\uc720\ud55c \uc2dd\ubcc4\uac12\n\n\nRace\n\uba85\ubaa9\ud615\n\uc778\uc885: Caucasian, Asian, African American, Hispanic, other\n\n\nGender\n\uba85\ubaa9\ud615\n\uc131\ubcc4: \ub0a8\uc131(male), \uc5ec\uc131(female), \uc54c\uc218\uc5c6\uc74c(unknown)\n\n\n Age\n\uba85\ubaa9\ud615\n10\ub144 \ub2e8\uc704\ub85c \ubb36\uc5ec \uc788\uc74c: [0-10], [10-20] \u2026 [90-100]\n\n\n Weight\n\uc218\uce58\ud615\n\ubab8\ubb34\uac8c (\ud30c\uc6b4\ub4dc \ub2e8\uc704)\n\n\nAdmission type\n\uba85\ubaa9\ud615\n\uc785\uc6d0 \ud615\ud0dc\uc758 9\uac00\uc9c0\uc758 \uc22b\uc790 \uc2dd\ubcc4\uac12, emergency, urgent, elective, newborn \ub4f1\ub4f1\n\n\nDischarge disposition\n\uba85\ubaa9\ud615\n\ud1f4\uc6d0 \ucc98\ub9ac\uc758 29\uac00\uc9c0\uc758 \uc22b\uc790 \uc2dd\ubcc4\uac12,  \uc9d1\uc73c\ub85c \ud1f4\uc6d0, expired \ub4f1\ub4f1\n\n\nAdmission source\n\uba85\ubaa9\ud615\n\uc785\uc6d0 \uc6d0\uc778\uc758 21\uac00\uc9c0 \uc22b\uc790 \uc2dd\ubcc4\uac12, \uc758\uc0ac \ucd94\ucc9c, \uc751\uae09\uc2e4, \ub2e4\ub978 \ubcd1\uc6d0\uc5d0\uc11c \uc62e\uae40\n\n\nTime in hospital\n\uc218\uce58\ud615\n\uc785\uc6d0 \uae30\uac04(\uc77c)\n\n\nPayer code\n\uba85\ubaa9\ud615\n\uc758\ub8cc \ubcf4\ud5d8\uc758 23\uac00\uc9c0\uc758 \uc22b\uc790 \uc2dd\ubcc4\uac12, Blue Cross, Medicare, \uc9c1\uc811 \uc9c0\ubd88 \ub4f1\ub4f1\n\n\nMedical specialty\n\uba85\ubaa9\ud615\n\uc785\uc6d0 \uc2dc\ud0a8 \uc758\uc0ac\uc758 \uc804\uacf5 84\uac00\uc9c0\uc758 \uc22b\uc790 \uc2dd\ubcc4\uac12, \uc2ec\uc7a5, \ub0b4\uacfc, \uac00\uc815 / \uc77c\ubc18 \uc9c4\ub8cc \ubc0f \uc678\uacfc \uc758\uc0ac\n\n\nNumber of lab procedures\n\uc218\uce58\ud615\n\uc785\uc6d0\ub3d9\uc548 \uc218\ud589\ud55c \uc77c\ubc18 \uac80\uc0ac(Lab tests) \ud69f\uc218\n\n\nNumber of procedures\n\uc218\uce58\ud615\n\uc785\uc6d0\ub3d9\uc548 \uc218\ud589\ud55c \ud2b9\uc218 \uac80\uc0ac \ud69f\uc218\n\n\nNumber of medications\n\uc218\uce58\ud615\n\uc785\uc6d0\ub3d9\uc548 \ud22c\uc57d\ud55c \uc758\uc57d\ud488\uc758 \uc218 \n\n\nNumber of outpatient visits\n\uc218\uce58\ud615\n\uc678\ub798\ubc29\ubb38\uac74\uc218, \uc785\uc6d0\uc804\uc758 \ud1b5\uc6d0 \uce58\ub8cc \ubc29\ubb38 \ud69f\uc218 (1\ub144\uac04) \n\n\nNumber of emergency visits\n\uc218\uce58\ud615\n\uc751\uae09\uc2e4\ubc29\ubb38\uac74\uc218, \uc785\uc6d0\uc804\uc758 \uc751\uae09\uc2e4 \ubc29\ubb38 \ud69f\uc218 (1\ub144\uac04)\n\n\nNumber of inpatient visits\n\uc218\uce58\ud615\n\uc785\uc6d0\ud69f\uc218, \uc785\uc6d0\uc804\uc758 \uc785\uc6d0 \ud69f\uc218 (1\ub144\uac04)\n\n\nDiagnosis 1\n\uba85\ubaa9\ud615\n1\ucc28 \uc9c4\ub2e8(ICD9\uc758 \ucc98\uc74c \uc138 \uc790\ub9ac \uc22b\uc790), 848 \uac1c\uc758 \uace0\uc720 \uac12\n\n\nDiagnosis 2\n\uba85\ubaa9\ud615\n2\ucc28 \uc9c4\ub2e8(ICD9\uc758 \ucc98\uc74c \uc138 \uc790\ub9ac \uc22b\uc790), 923 \uac1c\uc758 \uace0\uc720 \uac12\n\n\nDiagnosis 3\n\uba85\ubaa9\ud615\n\ucd94\uac00 2\ucc28 \uc9c4\ub2e8 (ICD9\uc758 \ucc98\uc74c \uc138 \uc790\ub9ac \uc22b\uc790), 954 \uac1c\uc758 \uace0\uc720 \uac12\n\n\nNumber of diagnoses\n\uc218\uce58\ud615\n\uc9c4\ub2e8 \ud69f\uc218\n\n\nGlucose serum test result\n\uba85\ubaa9\ud615\n\ud3ec\ub3c4\ub2f9 \ud608\uccad \uac80\uc0ac \uacb0\uacfc\n\n\nA1c test result\n\uba85\ubaa9\ud615\nA1c \uc2dc\ud5d8 \uacb0\uacfc \uac12, 8% \uc774\uc0c1\uc774\uba74  >8 7% \uc774\uc0c1\uc774\uba74 >7 7% \uc774\ud558\uba74 Normal \ud45c\uae30\n\n\nChange of medications\n\uba85\ubaa9\ud615\n\ub2f9\ub1e8\ubcd1 \uce58\ub8cc\uc81c(\ubcf5\uc6a9\ub7c9 \ub610\ub294 \uc57d\ud488)\uac00 \ubcc0\uacbd \uc5ec\ubd80 \n\n\nDiabetes medications\n\uba85\ubaa9\ud615\n\ub2f9\ub1e8\ubcd1 \uce58\ub8cc\uc81c\uac00 \ucc98\ubc29\ub418\uc5c8\ub294\uc9c0 \uc5ec\ubd80, yes \ud639\uc740 no\n\n\n24 features for medications\n\uba85\ubaa9\ud615\n24\uac00\uc9c0\uc758 \uc57d\ubb3c\uc774 \ucc98\ubc29\ub418\uc5c8\ub294\uc9c0 \ub610\ub294 \ubcf5\uc6a9\ub7c9\uc758 \ubcc0\ud654 \uc5ec\ubd80\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4, \uc785\uc6d0\uc911 \ubcf5\uc6a9\ub7c9\uc774 \uc99d\uac00\ud558\uba74 up \uc904\uc5b4\ub4e4\uba74  down  \ubcc0\ud654\uac00 \uc5c6\uc73c\uba74 steady \ucc98\ubc29\ub418\uc9c0 \uc54a\uc73c\uba74 no\ub85c \ud45c\uae30 \n\n\nReadmitted\n\uba85\ubaa9\ud615\n\ud1f4\uc6d0 30\uc77c \uc774\ub0b4 \uc7ac\uc785\uc6d0\uc740 > 30 30\uc77c \uc774\ud6c4 \uc7ac\uc785\uc6d0\uc740 < 30 \uc7ac\uc785\uc6d0 \ub370\uc774\ud130\uac00 \uc5c6\ub294 \uacbd\uc6b0  No\ub85c \ud45c\uae30 \n\n\n\n\ubbf8\ub9ac \uc54c\uc544\uc57c \ud560 \uac83!\u00b6\ub370\uc774\ud130\ub97c \ubd84\uc11d\ud558\uae30 \uc55e\uc11c \ubbf8\ub9ac \uc54c\uc544\uc57c\ud560 \uac83\ub4e4\uc744 \uacf5\ubd80\ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\ub2f9\ub1e8\ubcd1\u00b6\uc544\uc8fc \ud754\ud55c \ub300\uc0ac\uc9c8\ud658\uc73c\ub85c \ud608\ub2f9 \uc870\uc808\uc5d0 \uc7a5\uc560\uac00 \ubc1c\uc0dd\ud558\ub294 \uac83\uc785\ub2c8\ub2e4. \uc778\uc290\ub9b0\uc5d0 \uc758\ud574 Type1, Type2 \ub85c \uad6c\ubd84\ud558\ub294\uac8c \uc77c\ubc18\uc801\uc774\uace0 \uc644\uce58\ub294 \uc5b4\ub835\ub2e4\ub294\uac8c \uc911\ub860\uc785\ub2c8\ub2e4.\n\ub2f9\ud654\ud608\uc0c9\uc18c(HbA1c) \uac80\uc0ac\u00b6\ucc38\uace0: https://labtestsonline.kr/tests/hba1c\n\ub2f9\ud654\ud608\uc0c9\uc18c(glycated hemoglobin, HbA1c)\ub780 \uc7a5\uae30\uac04 \ub3d9\uc548 \ud608\uc911 \ud3ec\ub3c4\ub2f9(\ud608\ub2f9) \ub18d\ub3c4\ub97c \uc54c\uae30 \uc704\ud574 \uc0ac\uc6a9\ud558\ub294 \ud608\uc0c9\uc18c\uc758 \ud55c \ud615\ud0dc\uc774\ub2e4.  -wikipedia\n\n\uc6b0\ub9ac \ubab8\uc758 \ud608\uc561\uc5d0\ub294 120\uc77c \uc815\ub3c4\uc758 \uc218\uba85\uc744 \uc801\ud608\uad6c\uac00 \uc874\uc7ac\ud558\uba70, \uc801\ud608\uad6c \uc548\uc5d0 \uc788\ub294 \ud608\uc0c9\uc18c\uac00 \ud3ec\ub3c4\ub2f9\uacfc \uacb0\ud569\ud558\uba74\uc11c \ub2f9\ud654\ud608\uc0c9\uc18c\ub97c \ud615\uc131\ud569\ub2c8\ub2e4. \ub2f9\ub1e8\ud658\uc790\ub294 \ud608\ub2f9\uc774 \uc798 \uc870\uc808\ub418\uc9c0 \uc54a\uc544 \ub2f9\ud654\ud608\uc0c9\uc18c\uc758 \uc218\uce58\uac00 \uc99d\uac00\ud558\uac8c \ub41c\ub429\ub2c8\ub2e4.  \ub2f9\ud654\ud608\uc0c9\uc18c\uc758 \uc815\uc0c1\uc218\uce58\ub294 4 ~ 5.9% \uc785\ub2c8\ub2e4. \ub2f9\ub1e8\ud658\uc790\uc758 \ub2f9\ud654\ud608\uc0c9\uc18c \uc870\uc808 \ubaa9\ud45c\ub97c 6.5%\uc774\ud558\ub85c \ubcf4\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d (EDA) \ubd80\ud130\u00b6\uc81c\uc77c \uac04\ub2e8\ud558\uac8c \ud560 \uc218 \uc788\ub294 pandas.DataFrame.describe()\uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. (\uc774 \uae30\ub2a5\uc740 \uc218\uce58\ud615 \ub370\uc774\ud130\uc5d0\ub9cc \uc801\uc6a9\ub429\ub2c8\ub2e4.)\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \ndf.describe().transpose() # Transpose\ub97c \ud1b5\ud574 \uc880\ub354 \ubcf4\uae30 \uc27d\uac8c \ud569\ub2c8\ub2e4\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\n\n  \n    \n      \n      count\n      mean\n      std\n      min\n      25%\n      50%\n      75%\n      max\n    \n  \n  \n    \n      encounter_id\n      101766.0\n      1.652016e+08\n      1.026403e+08\n      12522.0\n      84961194.0\n      152388987.0\n      2.302709e+08\n      443867222.0\n    \n    \n      patient_nbr\n      101766.0\n      5.433040e+07\n      3.869636e+07\n      135.0\n      23413221.0\n      45505143.0\n      8.754595e+07\n      189502619.0\n    \n    \n      admission_type_id\n      101766.0\n      2.024006e+00\n      1.445403e+00\n      1.0\n      1.0\n      1.0\n      3.000000e+00\n      8.0\n    \n    \n      discharge_disposition_id\n      101766.0\n      3.715642e+00\n      5.280166e+00\n      1.0\n      1.0\n      1.0\n      4.000000e+00\n      28.0\n    \n    \n      admission_source_id\n      101766.0\n      5.754437e+00\n      4.064081e+00\n      1.0\n      1.0\n      7.0\n      7.000000e+00\n      25.0\n    \n    \n      time_in_hospital\n      101766.0\n      4.395987e+00\n      2.985108e+00\n      1.0\n      2.0\n      4.0\n      6.000000e+00\n      14.0\n    \n    \n      num_lab_procedures\n      101766.0\n      4.309564e+01\n      1.967436e+01\n      1.0\n      31.0\n      44.0\n      5.700000e+01\n      132.0\n    \n    \n      num_procedures\n      101766.0\n      1.339730e+00\n      1.705807e+00\n      0.0\n      0.0\n      1.0\n      2.000000e+00\n      6.0\n    \n    \n      num_medications\n      101766.0\n      1.602184e+01\n      8.127566e+00\n      1.0\n      10.0\n      15.0\n      2.000000e+01\n      81.0\n    \n    \n      number_outpatient\n      101766.0\n      3.693572e-01\n      1.267265e+00\n      0.0\n      0.0\n      0.0\n      0.000000e+00\n      42.0\n    \n    \n      number_emergency\n      101766.0\n      1.978362e-01\n      9.304723e-01\n      0.0\n      0.0\n      0.0\n      0.000000e+00\n      76.0\n    \n    \n      number_inpatient\n      101766.0\n      6.355659e-01\n      1.262863e+00\n      0.0\n      0.0\n      0.0\n      1.000000e+00\n      21.0\n    \n    \n      number_diagnoses\n      101766.0\n      7.422607e+00\n      1.933600e+00\n      1.0\n      6.0\n      8.0\n      9.000000e+00\n      16.0\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc0b4\ud3b4\ubcf4\ub2c8 \uadf8\ub2e4\uc9c0 \uc815\ubcf4\ub294 \uc5c6\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4.  \ucd1d \ud658\uc790\uc218\ub294 patient_nbr\uc758 \uac2f\uc218\uc778 101766\uba85\uc785\ub2c8\ub2e4.  \uadf8\ub9ac\uace0 time_in_hospital, num_lab_procedures, num_medications,  number_diagnoses \uc758 \ucd5c\ub300 \ucd5c\uc18c\uac12 \uc815\ub3c4\ub97c \uc54c \uc218 \uc788\ub294\ub370, \uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \uc815\uaddc\ubd84\ud3ec \ud615\ud0dc\uc778\uc9c0 \ud655\uc778\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\uc6d0\uc2dc \ub370\uc774\ud130 \uc2dc\uac01\ud654\u00b6\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nf, ([ax0, ax1], [ax2, ax3]) = plt.subplots(nrows=2,ncols=2, sharey=False, figsize=(9, 9))\nf= sns.distplot(df.time_in_hospital, kde=False, ax = ax0)\nf = sns.distplot(df.num_lab_procedures, kde=True, ax = ax1)\nf = sns.distplot(df.num_medications, kde=True, ax = ax2)\nf= sns.distplot(df.number_diagnoses, kde=False, ax = ax3)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704\uc758 \uadf8\ub9bc\uc73c\ub85c \ubd80\ud130 \uc54c \uc218 \uc788\ub294 \uac83\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\ntime_in_hospital\uc744 \ubcf4\uba74 \ubcf4\ud1b5 2~3\uc77c \uc815\ub3c4 \uc785\uc6d0\ud55c\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc785\uc6d0\uc911 \uc77c\ubc18 \uac80\uc0ac\ub97c 50\uac1c\uc815\ub3c4 \ud569\ub2c8\ub2e4\ub9cc,  \uc544\uc608 \uc548\ud558\ub294 \uacbd\uc6b0\ub3c4 \uc801\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n\ud3c9\uade0\uc801\uc73c\ub85c \uc57d 18\uac1c\ub97c \ud22c\uc57d\ud569\ub2c8\ub2e4.\n\ub300\ubd80\ubd84\uc758 \uc9c4\ub2e8\uc740 9\ubc88 \ub0b4\ub9bd\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc815\uaddc\ubd84\ud3ec\uc758 \ud615\ud0dc\ub294 \uc544\ub2c8\uad70\uc694.\n\n\uc9c4\ub2e8\ud69f\uc218\uc5d0 \ub530\ub77c\uc11c \uadf8\ub8f9\uc744 \ub9cc\ub4e4\uc218 \uc788\uc9c0 \uc54a\uc744\uae4c?\ud558\ub294 \uc0dd\uac01\uc774 \ub4ed\ub2c8\ub2e4.\n\uc778\uc885\uc774\ub098 \uc131\ubcc4\uc758 \ucc28\uc774\uac00 \uc874\uc7ac \ud560\uae4c?\u00b6\uac04\ub2e8\ud558\uac8c \uc7ac\uc785\uc6d0\uc728\uc5d0 \uc778\uc885\uc774\ub098 \uc131\ubcc4\uc758 \ucc28\uc774\uac00 \uc788\ub294\uc9c0 \uc54c\uace0 \uc2f6\uc2b5\ub2c8\ub2e4. \uadf8\ub9bc\uc73c\ub85c \ud55c\ub208\uc5d0 \ubcf4\uace0 \uc2f6\uc740\ub370, \uae30\uc874\uc758 \ub370\uc774\ud130 \ud615\uc2dd\uc73c\ub85c\ub294 \uc5b4\ub824\uc6cc \ubcf4\uc785\ub2c8\ub2e4. \uac04\ub2e8\ud55c \ud53c\ubd07 \ud14c\uc774\ube14\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \n# \ud53c\ubd07 \ud14c\uc774\ube14 \ub9cc\ub4e4\uae30\ndf_race = pd.pivot_table(df, index=['race','gender'], columns=['readmitted'] ,values=['encounter_id'],\n                         aggfunc=lambda x: len(x.unique()),margins=True)\n# \uc7ac\uc785\uc6d0 \ube44\uc728\uc744 \uacc4\uc0b0\ud574 \ud589\uc744 \ucd94\uac00\ud569\ub2c8\ub2e4.\ndf_race['encounter_id','readmit_ratio'] = 1- df_race['encounter_id','NO'] / df_race['encounter_id','All'] \ndf_race\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n\n  \n    \n      \n      \n      encounter_id\n    \n    \n      \n      readmitted\n      <30\n      >30\n      NO\n      All\n      readmit_ratio\n    \n    \n      race\n      gender\n      \n      \n      \n      \n      \n    \n  \n  \n    \n      AfricanAmerican\n      Female\n      1300.0\n      4102.0\n      6326.0\n      11728.0\n      0.460607\n    \n    \n      Male\n      855.0\n      2532.0\n      4095.0\n      7482.0\n      0.452686\n    \n    \n      Asian\n      Female\n      24.0\n      89.0\n      205.0\n      318.0\n      0.355346\n    \n    \n      Male\n      41.0\n      72.0\n      210.0\n      323.0\n      0.349845\n    \n    \n      Caucasian\n      Female\n      4560.0\n      14488.0\n      20641.0\n      39689.0\n      0.479931\n    \n    \n      Male\n      4032.0\n      12636.0\n      19742.0\n      36410.0\n      0.457786\n    \n    \n      Hispanic\n      Female\n      100.0\n      354.0\n      638.0\n      1092.0\n      0.415751\n    \n    \n      Male\n      112.0\n      288.0\n      545.0\n      945.0\n      0.423280\n    \n    \n      Other\n      Female\n      77.0\n      224.0\n      447.0\n      748.0\n      0.402406\n    \n    \n      Male\n      68.0\n      222.0\n      467.0\n      757.0\n      0.383091\n    \n    \n      Unknown/Invalid\n      NaN\n      NaN\n      1.0\n      1.0\n      0.000000\n    \n    \n      All\n      \n      11169.0\n      35007.0\n      53317.0\n      99493.0\n      0.464113\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc778\uc885, \uc131\ubcc4\uac04\uc758 \ub370\uc774\ud130\ub97c \uc0b4\ud3b4\ubcf4\ub2c8,  \uc131\ubcc4\uac04\uc758 \ucc28\uc774\ub294 \uac70\uc758 \ubbf8\ube44\ud574 \ubcf4\uc785\ub2c8\ub2e4. \uc624\ud788\ub824 \uc778\uc885\uac04\uc5d0\ub294 \ucc28\uc774\uac00 \uc788\uc5b4\ubcf4\uc774\ub294\uad70\uc694. \uadf8\ub9bc\uc73c\ub85c \uadf8\ub824\ubcfc\uac8c\uc694.\n\uc778\uc885\ubcc4  \uc7ac\uc785\uc6d0\uc728 \uc2dc\uac01\ud654\u00b6\n\n\n\n\n\nIn\u00a0[5]:\n\n    \n# f = df_race['encounter_id','readmit_ratio'].groupby('race').mean().plot(kind='barh')\ng = df_race['encounter_id','readmit_ratio'].reset_index()\ng = g.groupby('race').mean().plot(kind='barh', legend=False)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nOther \uadf8\ub8f9\uc774 \uac12\uc774 \ub0ae\uc544 \ubcf4\uc774\uc9c0\ub9cc, \uc2e4\uc740 Unknown/Invalid\uc758 \uc7ac\uc785\uc6d0\uc728\uc774  0\uc774\uae30 \ub54c\ubb38\uc5d0 \ud3c9\uade0\uac12\uc774 \ub0ae\uc544\uc84c\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uacb0\ub860\uc801\uc73c\ub85c Asian\uc758 \ud3c9\uade0 \uc7ac\uc785\uc6d0\uc728\ub9cc \uc804\uccb4\uc5d0 \uc7ac\uc785\uc6d0\uc728\uc5d0 \ub300\ube44 \ub0ae\ub2e4\uace0 \ubcfc \uc218 \uc788\uaca0\uc2b5\ub2c8\ub2e4.\n\ub370\uc774\ud130\uc14b\uc5d0 \ub204\ub77d\ub41c \uac12\uc774 \uc788\ub294\uac00?\u00b6\n\n\n\n\n\nIn\u00a0[6]:\n\n    \ndf_null = df.isnull().apply(sum)\ndf_null[df_null > 0]\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\nrace                  2273\nweight               98569\npayer_code           40256\nmedical_specialty    49949\ndiag_1                  21\ndiag_2                 358\ndiag_3                1423\ndtype: int64\n\n\n\n\n\n\n\n\n\n\n\n\ubab8\ubb34\uac8c\ub294 \uc804\uccb4\uc758 97%\uac00 \ub204\ub77d\ub418\uc5b4 \uc788\ub124\uc694. \uc774\ub807\uac8c \ub9ce\uc774 \ub204\ub77d\ub41c \ubab8\ubb34\uac8c \uac12\uc740 \uc0ad\uc81c\ud574\ub3c4 \uad1c\ucc2e\uc744 \uac83 \uac19\uc2b5\ub2c8\ub2e4.\npayer_code, medical_specialty \ub610\ud55c \uc808\ubc18\uc774\uc0c1\uc774 \ub204\ub77d\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.  \uadf8\ub9ac\uace0 \ud658\uc790\uc758 \uc0c1\ud0dc\uc640\ub294 \uad00\ub828\uc774 \uc5c6\uc5b4 \ubcf4\uc774\uae30 \ub54c\ubb38\uc5d0 \uc800\ub294 \ub370\uc774\ud130\ub97c \ube7c\uace0 \uc9c4\ud589 \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\ub370\uc774\ud130\uc14b \uc815\uc81c\ud558\uae30\u00b6\ud0d0\uc0c9\uc801 \ub370\uc774\ud130 \ubd84\uc11d(EDA)\ub97c \ud574\ubcf4\ub2c8, \ucd94\uac00\uc801 \ubd84\uc11d\uc744 \uc704\ud574 \uc6d0\uc2dc \ub370\uc774\ud130(raw data)\uc744 \uc815\uc81c\ud574\uc57c \ud560 \uac83 \uac19\uc2b5\ub2c8\ub2e4.  \uadf8\ub798\uc11c \uc544\ub798\uc640 \uac19\uc740 \uc0ac\ud56d\uc744 \ubcc0\uacbd\ud588\uc2b5\ub2c8\ub2e4.\n\n\ubc94\uc704\ub85c \ud45c\ud604\ub41c \ub098\uc774(\uba85\ubaa9\ud615)\ub97c \ub098\uc774\uc758 \uc911\uac04 \uac12(\uc22b\uc790\ud615)\uc73c\ub85c \uc218\uc815\nmax_glu_serum, A1Cresult, change  \ub4f1\uc758 \uba85\ubaa9\ud615 \uac12\uc740 \uc9c1\uc811 \uc22b\uc790\ud615 \ub370\uc774\ud130\ub85c \ubcc0\ud658\n\ubc94\uc8fc\ud615 \uac12\uc778 \uc778\uc885, \uc131\ubcc4 \ub4f1\uc758 \uac12\uc740 Categorical.codes \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574 \ubcc0\ud658\n\ubd88\ud544\uc694\ud574 \ubcf4\uc774\ub294 \ubab8\ubb34\uac8c, \ubcf4\ud5d8\uc0ac \ubc88\ud638, \ub2f4\ub2f9\uc758 \uc804\uacf5 \ub4f1\uc758 \uc5f4\uc740 \uc0ad\uc81c\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \ndf['age'].replace({ '[0-10)':5, '[10-20)':15, \n                     '[20-30)':25, '[30-40)':35, \n                     '[40-50)':45, '[50-60)':55, \n                     '[60-70)':65, '[70-80)':75,\n                     '[80-90)':85, '[90-100)':95}, inplace = True)\n\ndf['max_glu_serum'].replace({'None':0,'Norm':100,\n                             '>200': 200, '>300':300}, inplace = True)\n\ndf['A1Cresult'].replace({'None':0, 'Norm':10,\n                        '>7':20, '>8':30}, inplace = True)\n\ndf['change'].replace({'No':0, 'Ch':1}, inplace = True)\n\ndf['diabetesMed'].replace({'No':0, 'Yes':1}, inplace = True)\n\nmedications = [\"metformin\", \"repaglinide\", \"nateglinide\", \"chlorpropamide\", \"glimepiride\",\n               \"acetohexamide\", \"glipizide\", \"glyburide\", \"tolbutamide\", \"pioglitazone\",\n               \"rosiglitazone\", \"acarbose\", \"miglitol\", \"troglitazone\", \"tolazamide\", \n               \"examide\", \"citoglipton\", \"insulin\", \"glyburide-metformin\", \"glipizide-metformin\", \n               \"glimepiride-pioglitazone\", \"metformin-rosiglitazone\", \"metformin-pioglitazone\"]\nfor i in medications:\n    df[i].replace({'No': -1,'Down': 0,'Steady': 1,'Up': 2}, inplace = True)\n\ndf['race'].replace({'AfricanAmerican':2, 'Asian':0,\n                    'Caucasian':2, 'Hispanic':1,\n                    'Other':1, None : 3 }, inplace=True)\ndf['race'].astype('int64')\n\ncategoricals = ['gender', 'payer_code', 'medical_specialty','diag_1', 'diag_2', 'diag_3']\nfor j in categoricals:\n    df[j] = pd.Categorical(df[j]).codes #  integer \uac12\uc73c\ub85c \ubc14\uafd4 \uc90d\ub2c8\ub2e4.\n    df[j].astype('int64')\n    \ndf['readmitted'].replace({'NO':0, '>30':1, '<30':1}, inplace = True)\n# \uc4f8\ubaa8 \uc5c6\uc5b4 \ubcf4\uc774\ub294 \ub370\uc774\ud130 \uc0ad\uc81c\ndel_columns = ['weight','payer_code', 'medical_specialty'] # \uc0ad\uc81c\ud560 \ub370\uc774\ud130\ndf.drop(del_columns, inplace=True, axis=1)\n\ndf.head()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n\n  \n    \n      \n      encounter_id\n      patient_nbr\n      race\n      gender\n      age\n      admission_type_id\n      discharge_disposition_id\n      admission_source_id\n      time_in_hospital\n      num_lab_procedures\n      ...\n      citoglipton\n      insulin\n      glyburide-metformin\n      glipizide-metformin\n      glimepiride-pioglitazone\n      metformin-rosiglitazone\n      metformin-pioglitazone\n      change\n      diabetesMed\n      readmitted\n    \n  \n  \n    \n      0\n      2278392\n      8222157\n      2\n      0\n      5\n      6\n      25\n      1\n      1\n      41\n      ...\n      -1\n      -1\n      -1\n      -1\n      -1\n      -1\n      -1\n      0\n      0\n      0\n    \n    \n      1\n      149190\n      55629189\n      2\n      0\n      15\n      1\n      1\n      7\n      3\n      59\n      ...\n      -1\n      2\n      -1\n      -1\n      -1\n      -1\n      -1\n      1\n      1\n      1\n    \n    \n      2\n      64410\n      86047875\n      2\n      0\n      25\n      1\n      1\n      7\n      2\n      11\n      ...\n      -1\n      -1\n      -1\n      -1\n      -1\n      -1\n      -1\n      0\n      1\n      0\n    \n    \n      3\n      500364\n      82442376\n      2\n      1\n      35\n      1\n      1\n      7\n      2\n      44\n      ...\n      -1\n      2\n      -1\n      -1\n      -1\n      -1\n      -1\n      1\n      1\n      0\n    \n    \n      4\n      16680\n      42519267\n      2\n      1\n      45\n      1\n      1\n      7\n      1\n      51\n      ...\n      -1\n      1\n      -1\n      -1\n      -1\n      -1\n      -1\n      1\n      1\n      0\n    \n  \n\n5 rows \u00d7 47 columns\n\n\n\n\n\n\n\n\n\n\n\n\n\uc815\uc81c\ud55c \ub370\uc774\ud130\ub294 47\uac1c\uc758 \ud589\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. encounter_id ,patient_nbr \ub294 \ud658\uc790 \uace0\uc720\uac12\uc774\uae30 \ub54c\ubb38\uc5d0 \ud559\uc2b5 \uc9c1\uc804\uc5d0 \ube7c\uc904 \uc608\uc815\uc785\ub2c8\ub2e4.\n\ub098\uc774\ubcc4 \ub370\uc774\ud130\uc758 \uc218\u00b6\ub098\uc774\ubcc4 \ud658\uc790\uc758 \uc218\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \n# \ub098\uc774\nf = sns.countplot(df.age, palette='Blues_d')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub098\uc774\ubcc4 \ud658\uc790\uc758 \uc7ac\uc785\uc6d0\uacfc \ud1f4\uc6d0\uc744 \ube44\uad50\ud574 \uc2dc\uac01\ud654 \ud574\ubcf4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nf = sns.countplot(x=\"age\", hue=\"readmitted\", data=df)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub098\uc774\uac00 45~65\uc0b4 \uc0ac\uc774\uc5d0\ub294 \uc7ac\uc785\uc6d0\uc728\uc774 \ub0ae\uc544 \ubcf4\uc774\ub294\ub370, \uc880 \ub354 \uba85\ud655\ud558\uac8c \ubcf4\uae30 \uc704\ud574 \ub2e4\uc2dc \ud53c\ubc97 \ud14c\uc774\ube14\uc744 \ub9cc\ub4e4\uace0 \uc2dc\uac01\ud654\ub85c \ud655\uc778\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\ub098\uc774\ubcc4 \uc7ac\uc785\uc6d0\uc728 \ud53c\ubc97\ud14c\uc774\ube14\u00b6\n\n\n\n\n\nIn\u00a0[10]:\n\n    \ndf_age =pd.pivot_table(df, index=['age'], columns=['readmitted'] ,values=['encounter_id'],\n                       aggfunc=lambda x: len(x.unique()),margins=True)\ndf_age['encounter_id','readmitted_ratio'] = df_age['encounter_id',1] / df_age['encounter_id','All'] \ndf_age\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\n\n  \n    \n      \n      encounter_id\n    \n    \n      readmitted\n      0\n      1\n      All\n      readmitted_ratio\n    \n    \n      age\n      \n      \n      \n      \n    \n  \n  \n    \n      5\n      132.0\n      29.0\n      161.0\n      0.180124\n    \n    \n      15\n      427.0\n      264.0\n      691.0\n      0.382055\n    \n    \n      25\n      911.0\n      746.0\n      1657.0\n      0.450211\n    \n    \n      35\n      2164.0\n      1611.0\n      3775.0\n      0.426755\n    \n    \n      45\n      5380.0\n      4305.0\n      9685.0\n      0.444502\n    \n    \n      55\n      9671.0\n      7585.0\n      17256.0\n      0.439557\n    \n    \n      65\n      12084.0\n      10399.0\n      22483.0\n      0.462527\n    \n    \n      75\n      13524.0\n      12544.0\n      26068.0\n      0.481203\n    \n    \n      85\n      8896.0\n      8301.0\n      17197.0\n      0.482700\n    \n    \n      95\n      1675.0\n      1118.0\n      2793.0\n      0.400286\n    \n    \n      All\n      54864.0\n      46902.0\n      101766.0\n      0.460881\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nf = df_age['encounter_id','readmitted_ratio'].plot(kind='barh', xlim=(0.1,0.5))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud655\uc2e4\ud558\uac8c \ub098\uc774\ub300 \ubcc4\ub85c \uc7ac\uc785\uc6d0\ud558\ub294 \ube44\uc728\uc774 \ub2e4\ub985\ub2c8\ub2e4.\n\n15\uc138 \uc774\ud558\uc758 \ub098\uc774\ub294 \uc7ac\uc785\uc6d0 \ube44\uc728\uc774 \ub0ae\uc544 \ubcf4\uc785\ub2c8\ub2e4. \ud2b9\ud788 5\uc138\ub294 \uc544\uc8fc \ub0ae\ub124\uc694.\n\uc7ac\uc785\uc6d0\ud558\ub294 \ube44\uc728\uc740 25\uc138\uc774\uc0c1\uc5d0\uc11c 85\uc138\uae4c\uc9c0\ub294 45%\uc815\ub3c4\ub97c \uc720\uc9c0\ud569\ub2c8\ub2e4.\n95\uc138\uc5d0 \uac00\uc11c\ub294 \ub2e4\uc2dc \uc904\uc5b4\ub4dc\ub294 \ubaa8\uc2b5\uc744 \ubcf4\uc774\ub294\ub370, \uc544\ub9c8\ub3c4 \uc0ac\ub9dd\uacfc \uad00\ub828\uc788\uc9c0 \uc54a\uc744\uae4c \uc0dd\uac01\ud569\ub2c8\ub2e4.\n\uc804\uccb4 \ud3c9\uade0 \uc7ac\uc785\uc6d0 \ube44\uc728\uc744 46%\uc785\ub2c8\ub2e4.\n\n\ud658\uc790\uc758 \ub098\uc774\ub300\uc5d0 \ub530\ub77c \uadf8\ub8f9\ud654 \ud558\uae30\u00b6numpy.select()\uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574 \ub2e4\uc591\ud55c \uc870\uac74\uc73c\ub85c \uadf8\ub8f9\ud654\uac00 \uac00\ub2a5\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \nconditions = [\n    (df['age'] <= 5 ),\n    (df['age'] >= 15 ) & (df['age'] < 25),\n    (df['age'] >= 25 ) & (df['age'] < 65),\n    (df['age'] >= 65 ) & (df['age'] < 95),\n    (df['age'] >= 95)]\nchoices = [0, 1, 2, 3, 4]\ndf['age'] = np.select(conditions, choices)\n\n\n    \n\n\n\n\n\n\n\n\uc9c4\ub2e8 \ud69f\uc218\uc758 \ub530\ub77c \uc7ac\uc785\uc6d0\uc728 \ucc28\uc774\u00b6\ud53c\ubc97\ud14c\uc774\ube14\uc744 \ub9cc\ub4e4\uc5b4 \ucc28\uc774\uac00 \uc788\ub294\uc9c0 \ud655\uc778\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \ndf_diag =pd.pivot_table(df, index=['number_diagnoses'], columns=['readmitted'] ,values=['encounter_id'],\n                       aggfunc=lambda x: len(x.unique()),margins=True)\ndf_diag['encounter_id','readmitted_ratio'] = df_diag['encounter_id',1] / df_diag['encounter_id','All'] \ndf_diag\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[13]:\n\n\n\n\n\n\n  \n    \n      \n      encounter_id\n    \n    \n      readmitted\n      0\n      1\n      All\n      readmitted_ratio\n    \n    \n      number_diagnoses\n      \n      \n      \n      \n    \n  \n  \n    \n      1\n      167.0\n      52.0\n      219.0\n      0.237443\n    \n    \n      2\n      687.0\n      336.0\n      1023.0\n      0.328446\n    \n    \n      3\n      1863.0\n      972.0\n      2835.0\n      0.342857\n    \n    \n      4\n      3474.0\n      2063.0\n      5537.0\n      0.372584\n    \n    \n      5\n      7354.0\n      4039.0\n      11393.0\n      0.354516\n    \n    \n      6\n      5706.0\n      4455.0\n      10161.0\n      0.438441\n    \n    \n      7\n      5542.0\n      4851.0\n      10393.0\n      0.466756\n    \n    \n      8\n      5564.0\n      5052.0\n      10616.0\n      0.475885\n    \n    \n      9\n      24448.0\n      25026.0\n      49474.0\n      0.505841\n    \n    \n      10\n      9.0\n      8.0\n      17.0\n      0.470588\n    \n    \n      11\n      3.0\n      8.0\n      11.0\n      0.727273\n    \n    \n      12\n      5.0\n      4.0\n      9.0\n      0.444444\n    \n    \n      13\n      7.0\n      9.0\n      16.0\n      0.562500\n    \n    \n      14\n      3.0\n      4.0\n      7.0\n      0.571429\n    \n    \n      15\n      5.0\n      5.0\n      10.0\n      0.500000\n    \n    \n      16\n      27.0\n      18.0\n      45.0\n      0.400000\n    \n    \n      All\n      54864.0\n      46902.0\n      101766.0\n      0.460881\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud3c9\uade0 \uc7ac\uc785\uc6d0\uc728\uc740 46%\uc778\ub370 6\ubc88 \uc774\ud558\ub85c \uc9c4\ub2e8\ubc1b\uc740 \ud658\uc790\ub294 \uc7ac\uc785\uc6d0\uc728\uc774 \ub0ae\uc2b5\ub2c8\ub2e4. \ubc18\uba74\uc5d0 7\ud68c\uc774\uc0c1\uc740 \ud3c9\uade0 \uc774\uc0c1\uc758 \uc7ac\uc785\uc6d0\uc728\uc744 \ubcf4\uc785\ub2c8\ub2e4. \ub2e4\ub9cc 12, 16\ubc88 \uc9c4\ub2e8 \ubc1b\uc740 \ud658\uc790\ub4e4\uc740 \ud3c9\uade0\ubcf4\ub2e4 \ub0ae\uae30\ub294 \ud558\uc9c0\ub9cc \ud658\uc790\uc218\uac00 \ub108\ubb34 \uc801\uc5b4 \uc720\uc758\ubbf8\ud55c \uc218\uce58\ub77c\uace0\ub294 \ubcfc \uc218 \uc5c6\uaca0\uc2b5\ub2c8\ub2e4.\n\uc9c4\ub2e8 \ud69f\uc218\ubcc4\ub85c \uadf8\ub8f9 \ub098\ub204\uae30\u00b6\uc704\uc758 \uacb0\uacfc\ub97c \ud1a0\ub300\ub85c \uc9c4\ub2e8 \ud69f\uc218\ubcc4\ub85c 4\uac1c\uc758 \uadf8\ub8f9\uc73c\ub85c \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub098\uc774\ubcc4 \uadf8\ub8f9\uc744 \ub9cc\ub4e4\uc5c8\ub358 \ubc29\ubc95\uc744 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \nconditions = [(df['number_diagnoses'] <= 1 ),\n    (df['number_diagnoses'] >= 2 ) & (df['number_diagnoses'] < 6),\n    (df['number_diagnoses'] >= 6 ) & (df['number_diagnoses'] < 9),\n    (df['number_diagnoses'] >= 9 )]\nchoices = [0, 1, 2, 3]\ndf['number_diagnoses'] = np.select(conditions, choices)\n\n\n    \n\n\n\n\n\n\n\n\ub370\uc774\ud130 \ub2e4\ub4ec\uae30\ub294 \uc774\uc815\ub3c4\ub85c \ud558\uace0 \uc774\uc81c, \uba38\uc2e0\ub7ec\ub2dd\uc744 \uc2dc\ub3c4\ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc800\ub294 xgboost \ub97c \uc0ac\uc6a9\ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. xgboost\ub294 \uce90\uae00 \uacbd\uc5f0\ub300\ud68c\uc5d0\uc11c \ub2e4\uc218\uc758 \uc6b0\uc2b9\uc790\ub4e4\uc774 \uc0ac\uc6a9\ud574\uc11c \uc720\uba85\uc138\ub97c \ud0c4 \ubc29\ubc95\uc785\ub2c8\ub2e4.  xgboost\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \ub9c1\ud06c\ub97c \ud655\uc778\ud558\uc138\uc694.\n\uba38\uc2e0\ub7ec\ub2dd \ubd84\uc11d \uc2dc\uc791\ud558\uae30\u00b6\uba3c\uc800 \ub370\uc774\ud130\uc14b\uc744 \ud559\uc2b5\uc6a9\uacfc \ud14c\uc2a4\ud2b8\uc6a9\uc73c\ub85c \ubd84\ub9ac\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub370\uc774\ud130\uc758 \ubaa8\uc591\uc744 \uc0b4\ud3b4\ubcf4\uc870.\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \nfrom sklearn.model_selection import train_test_split\ny = df.readmitted # label\nX = df.drop(['encounter_id', 'patient_nbr','readmitted'], axis=1) # label\uacfc \uace0\uc720\uac12\uc744 \uc81c\uac70\ntrain_X, test_X, train_y, test_y = train_test_split(X, y, test_size=0.2)\nprint(train_X.shape, train_y.shape)\nprint(test_X.shape, test_y.shape)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n(81412, 44) (81412,)\n(20354, 44) (20354,)\n\n\n\n\n\n\n\n\n\n\n\ntrain_X\ub294 81412\uac1c\uc758 \uc5f4\uacfc 44\uac1c\uc758 \ud589\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uace0 train_y\ub294 81412\uac1c\uc758 \uc5f4\uacfc 1\uac1c\uc758 \ud589\uc73c\ub85c \ub418\uc5b4 \uc788\ub294 \uac83\uc744 \ud655\uc778 \ud588\uc2b5\ub2c8\ub2e4.  xgboost.XGBClassifier() \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud574 \ud559\uc2b5\uc744 \uc2dc\uc791\ud574\ubcf4\uc8e0. \ud558\uc774\ud37c \ud30c\ub77c\uba54\ud130\ub294 \ucc98\uc74c\uc5d0 \uac00\uc7a5 \ucd94\ucc9c\ub418\ub294 \uc138\ud305\uc744 \uac80\uc0c9\ud574 \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \nfrom xgboost import XGBClassifier\n\nmodel = XGBClassifier(max_depth=6, learning_rate=0.1, n_estimators=1000,\n                      objective='binary:logistic', n_jobs=32,\n                      gamma=0, min_child_weight=1,  subsample=0.8,\n                      colsample_bytree=0.8, scale_pos_weight=1, seed=1)\neval_set = [(train_X, train_y), (test_X, test_y)]\nmodel.fit(train_X, train_y, eval_metric=[\"error\",\"logloss\"], eval_set=eval_set, verbose=False, early_stopping_rounds=20)\nresults = model.evals_result()\n# print(results)\n\n\n    \n\n\n\n\n\n\n\n\ub9cc\ub4e0 \ubaa8\ub378\uc774 \uc815\ud655\ud55c\uc9c0 accuracy_score() \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[17]:\n\n    \nfrom sklearn.metrics import accuracy_score\npred_y = model.predict(test_X)\nprint(\" Accuracy : {} %\".format(accuracy_score(test_y, pred_y)*100))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n Accuracy : 64.98968261766728 %\n\n\n\n\n\n\n\n\n\n\n\n\uc800\uc758 \uc608\uc0c1\ubcf4\ub2e4 \uc815\ud655\ub3c4\uac00 \ub192\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \uc774 \uc218\uce58\ub97c \ub192\uc774\uae30 \uc704\ud574 \ub2e4\uc591\ud55c \uc2dc\ub3c4\ub97c \ud574\ubd10\uc57c\uaca0\uc8e0. \uc77c\ub2e8\uc740 \uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \ud559\uc2b5\uc758 \uacbd\uacfc\uc640 \uc131\ub2a5\uc744 \uc0b4\ud3b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\ud559\uc2b5 \uc2dc\uac01\ud654\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[18]:\n\n    \nepochs = len(results['validation_0']['error']) # retrieve performance metrics\nx_axis = range(0, epochs)\n# plot log loss\nf, (ax0, ax1) = plt.subplots(nrows=1,ncols=2, sharey=False, figsize=(10, 4))\nax0.plot(x_axis, results['validation_0']['logloss'], label='Train')\nax0.plot(x_axis, results['validation_1']['logloss'], label='Test')\nax0.set_title('XGBoost Log Loss')\nax0.set_ylabel('Log loss')\nax0.legend()\nax1.plot(x_axis, results['validation_0']['error'], label='Train')\nax1.plot(x_axis, results['validation_1']['error'], label='Test')\nax1.set_ylabel('Classification Error')\nax1.set_title('XGBoost Classification Error')\nax1.legend()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[18]:\n\n\n\n\n\n<matplotlib.legend.Legend at 0x7fbd154ef978>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uadf8\ub9bc\uc744 \ubcf4\ub2c8 \uc801\uc5b4\ub3c4 \uc624\ubc84\ud53c\ud305\uc740 \uc77c\uc5b4\ub098\uc9c0 \uc54a\uace0 \uc788\ub294 \ubaa8\uc2b5\uc785\ub2c8\ub2e4. \ub2e4\ub9cc \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uc5d0 \ub300\ud55c \ubaa8\ub378\uc758 \uc131\ub2a5\uc774 \uc88b\uc9c0\ub294 \uc54a\uc544 \ubcf4\uc774\ub294\uad70\uc694.\n\ubaa8\ub378\uc5d0\uc11c features \uc911\uc694\ub3c4 \uc2dc\uac01\ud654\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[19]:\n\n    \nfrom xgboost import plot_importance\nf, ax = plt.subplots(figsize=(10, 8))\nplot_importance(model, ax=ax)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[19]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7fbd18719160>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nfeatures \uc911\uc694\ub3c4 \uadf8\ub9bc\uc5d0\uc11c\ub294 \uc758\uc0ac\uc758 \uc9c4\ub2e8 \uc7ac\uc785\uc6d0\uc728\uc5d0 \uc911\uc694\ud558\ub2e4\uace0 \ub098\uc624\uace0 \uc788\uace0, \uadf8 \ub2e4\uc74c\uc73c\ub85c \uac80\uc0ac\ud56d\ubaa9\uc758 \uc22b\uc790\uc640 \ud22c\uc57d\ud55c \uc57d\ubb3c\uc758 \uc22b\uc790\uac00 \uc911\uc694\ud558\ub2e4\uace0 \ub098\uc654\uc2b5\ub2c8\ub2e4. \uc81c\uac00 \uc608\uc0c1\ud588\ub358 \uacb0\uacfc\uc640 \uac19\uc544\uc11c \ub9c8\uc74c\uc5d0 \ub4dc\ub294\uad70\uc694.\n\uc911\uac04 \uacb0\ub860\uacfc \uc55e\uc73c\ub85c \ud560 \uc77c\u00b6\uc7a5\ud669\ud558\uac8c \ubd84\uc11d\uc744 \ud574\ubcf4\uc558\ub294\ub370\uc694, \uc77c\ub2e8\uc740 \uc81c \ubaa8\ub378\uc758 \uc131\ub2a5\uc740 \ub9c8\uc74c\uc5d0 \ub4e4\uc9c0 \uc54a\ub124\uc694. \uc131\ub2a5\uc744 \uc62c\ub9ac\uae30 \uc704\ud574\uc11c\ub294 \ub2e4\uc591\ud55c \uc2dc\ub3c4\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \ub2e4\uc2dc \ub9d0\ud574\uc11c \ud560 \uc77c\uc774 \ub108\ubb34\ub098\ub3c4 \ub9ce\uc2b5\ub2c8\ub2e4. \ub2e4\uc2dc \ucc98\uc74c\uc73c\ub85c \ub3cc\uc544\uac04\ub2e4\uba74 \ub370\uc774\ud130 \uc804\ucc98\ub9ac\ub97c \ub354 \ud574\ubcfc \ud544\uc694\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74 1000\uac1c\uac00 \ub118\ub294 \uc9c4\ub2e8\ucf54\ub4dc\ub97c \uc9c8\ubcd1\uc73c\ub85c \uadf8\ub8f9\uc744 \ub9cc\ub4e4\uba74 \uc880 \ub354 \ube60\ub974\uace0 \uc815\ud655\ud55c \uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\uc744 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.\n\ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c\ub294 xgboost\uc758 \ud30c\ub77c\ubbf8\ud130\ub4e4\uc744 \ucd5c\uc801\ud654 \uc2dc\ucf1c\ubcfc \ud544\uc694\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc758 \ucc38\uace0\uc790\ub8cc\ub97c \ubcf4\uace0 \ubaa8\ub378\uc744 \ub2e4\ub4ec\uc5b4 \ubcf4\ub824\uace0 \ud558\ub294\ub370\uc694.\n\ubaa8\ub378 \ub2e4\ub4ec\uae30\u00b6\uc65c\ub0d0\ud558\uba74 xgboost\ub294 \uba87\uac00\uc9c0 \ubcc0\uc218\uc5d0 \uc758\ud574 \ubaa8\ub378\uc758 \uc815\ud655\ub3c4\uc640 \uc18d\ub3c4\uac00 \uadf9\uc801\uc73c\ub85c \ub192\uc544\uc9c8\uc218 \uc788\uae30 \ub54c\ubb38\uc774\uc8e0. \ubaa8\ub378\uc758 \ud30c\ub77c\ubbf8\ud130\ub97c \ubcc0\uacbd\ud558\uae30 \uc774\uc804\uc5d0 \uadf8\uac83\uc744 \uc774\ud574\ud558\ub294 \uac83\uc774 \uc911\uc694\ud569\ub2c8\ub2e4.  \uba87\uac00\uc9c0\ub9cc \ud14c\uc774\ube14\ub85c \uc544\ub798\uc5d0 \uc815\ub9ac\ud574\ubcf4\uc558\uc2b5\ub2c8\ub2e4.\n\n\nParameter\n\uc124\uba85\n\n\n\n\nlearning_rate\n\ud559\uc2b5\ub960, \ubcf4\ud1b5 0.01~0.2\n\n\nn_estimators\n\ubaa8\ub378\uc758 \ud559\uc2b5 \ubc18\ubcf5 \ud69f\uc218, \ub108\ubb34 \ud06c\uba74 \uc624\ubc84\ud53c\ud305\uc774 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubcf4\ud1b5 100~1000\n\n\nn_jobs\n\uc0ac\uc6a9\ud560 CPU \ucf54\uc5b4\uc758 \uc218\n\n\nmax_depth\n\uacb0\uc815 \ud2b8\ub9ac\uc758 \ucd5c\uace0 \uae4a\uc774, \uc624\ubc84\ud53c\ud305\uc744 \uc870\uc808\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9. \ubcf4\ud1b5 3 ~10\n\n\nmin_child_weight\n\uc624\ubc84\ud53c\ud305\uc744 \uc870\uc808\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\n\n\ngamma\n\uc54c\uace0\ub9ac\uc998\uc744 \ubcf4\uc218\uc801 \ub9cc\ub4ec\n\n\nsubsample\n\uac12\uc774 \ub0ae\uc744\uc218\ub85d \uc54c\uace0\ub9ac\uc998\uc740 \ub354 \ubcf4\uc218\uc801\uc774\uace0, \uc624\ubc84 \ud53c\ud305\uc744 \ubc29\uc9c0\ud558\uc9c0\ub9cc \ub108\ubb34 \uc791\uc740 \uac12\uc740 \uc5b8\ub354 \ud53c\ud305\uc73c\ub85c \uc774\uc5b4\uc9c8 \uc218 \uc788\uc74c. \ubcf4\ud1b5 0.5~1\n\n\ncolsample_bytree\n\uac01\uac01\uc758 \ud2b8\ub9ac\uc5d0 \ub300\ud574 \ubb34\uc791\uc704\ub85c \ubf51\ud788\ub294 \uc5f4\uc758 \ube44\uc728\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \ubcf4\ud1b5 0.5-1\n\n\n\n\uc774\uc678\uc5d0\ub3c4 \ub2e4\uc591\ud55c \ud30c\ub77c\ubbf8\ud130\uac00 \uc788\uc9c0\ub9cc, \uc77c\ub2e8\uc740 \uc0dd\ub7b5\ud558\uaca0\uc2b5\ub2c8\ub2e4. \ucd5c\uc801\uc758 \ud30c\ub77c\ubbf8\ud130\ub97c \ucc3e\ub294 \ubc29\ubc95\ub860\uc5d0\ub3c4 \ub2e4\uc591\ud558\uac8c \uc788\uc9c0\ub9cc, \uc800\ub294 \uac00\uc7a5 \ub2e8\uc21c\ud558\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 GridSearch\ub97c  \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4.\nGridSearch \ub85c \ucd5c\uc801\uac12 \ucc3e\uae30\u00b6\uc544\ub798\uc758 \uc608\uc81c \ucf54\ub4dc\ub97c \uc0ac\uc6a9\ud574 sklearn.GridSearchCV() \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574 \ucd5c\uc801\uac12\uc744 \ucc3e\uc544 \ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4.\nfrom sklearn.model_selection import GridSearchCV\nparam_test1 = {\n     'max_depth':range(3,10,2),\n     'min_child_weight':range(1,6,2)\n    }\ngsearch1 = GridSearchCV(estimator = XGBClassifier( learning_rate =0.1, n_estimators=220, max_depth=5,\n                                     min_child_weight=1, gamma=0, subsample=0.8, colsample_bytree=0.8,\n                                     objective= 'binary:logistic', nthread=4, scale_pos_weight=1, seed=27), \n                                     param_grid = param_test1, scoring='accuracy',n_jobs=4,iid=False, cv=5)\ngsearch1.fit(train_X, train_y)\ngsearch1.grid_scores_, gsearch1.best_params_, gsearch1.best_score_\n\n\uc544\ub798\uc758 \uc791\uc5c5\uc740 \uc2dc\uac04\uc774 \uc624\ub798\uac78\ub9b0\ub2e4\ub294 \uac83\uc744 \uc8fc\uc758\ud574\uc8fc\uc138\uc694.\n1. Max_depth\uc640 Min_child_weight \ucd5c\uc801\uac12\uc744 \ucc3e\uae30\u00b6\n\n\n\n\n\nIn\u00a0[20]:\n\n    \nfrom sklearn.model_selection import GridSearchCV\nparam_test1 = {\n     'max_depth':range(3,10,1),\n     'min_child_weight':range(1,6,1)\n    }\ngsearch1 = GridSearchCV(estimator = XGBClassifier( learning_rate =0.1, n_estimators=160, max_depth=5,\n                                     min_child_weight=1, gamma=0, subsample=0.8, colsample_bytree=0.8,\n                                     objective= 'binary:logistic', scale_pos_weight=1, seed=27), \n                                     param_grid = param_test1, scoring='accuracy',n_jobs=32,iid=False, cv=5)\ngsearch1.fit(train_X, train_y)\ngsearch1.grid_scores_, gsearch1.best_params_, gsearch1.best_score_\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n/opt/conda/lib/python3.6/site-packages/sklearn/model_selection/_search.py:761: DeprecationWarning: The grid_scores_ attribute was deprecated in version 0.18 in favor of the more elaborate cv_results_ attribute. The grid_scores_ attribute will not be available from 0.20\n  DeprecationWarning)\n\n\n\n\n\n\n    Out[20]:\n\n\n\n\n\n([mean: 0.64241, std: 0.00226, params: {'max_depth': 3, 'min_child_weight': 1},\n  mean: 0.64284, std: 0.00297, params: {'max_depth': 3, 'min_child_weight': 2},\n  mean: 0.64279, std: 0.00201, params: {'max_depth': 3, 'min_child_weight': 3},\n  mean: 0.64314, std: 0.00314, params: {'max_depth': 3, 'min_child_weight': 4},\n  mean: 0.64245, std: 0.00172, params: {'max_depth': 3, 'min_child_weight': 5},\n  mean: 0.64607, std: 0.00273, params: {'max_depth': 4, 'min_child_weight': 1},\n  mean: 0.64621, std: 0.00186, params: {'max_depth': 4, 'min_child_weight': 2},\n  mean: 0.64635, std: 0.00284, params: {'max_depth': 4, 'min_child_weight': 3},\n  mean: 0.64613, std: 0.00209, params: {'max_depth': 4, 'min_child_weight': 4},\n  mean: 0.64703, std: 0.00228, params: {'max_depth': 4, 'min_child_weight': 5},\n  mean: 0.64736, std: 0.00217, params: {'max_depth': 5, 'min_child_weight': 1},\n  mean: 0.64728, std: 0.00184, params: {'max_depth': 5, 'min_child_weight': 2},\n  mean: 0.64732, std: 0.00295, params: {'max_depth': 5, 'min_child_weight': 3},\n  mean: 0.64821, std: 0.00258, params: {'max_depth': 5, 'min_child_weight': 4},\n  mean: 0.64764, std: 0.00138, params: {'max_depth': 5, 'min_child_weight': 5},\n  mean: 0.64777, std: 0.00235, params: {'max_depth': 6, 'min_child_weight': 1},\n  mean: 0.64741, std: 0.00320, params: {'max_depth': 6, 'min_child_weight': 2},\n  mean: 0.64811, std: 0.00272, params: {'max_depth': 6, 'min_child_weight': 3},\n  mean: 0.64705, std: 0.00236, params: {'max_depth': 6, 'min_child_weight': 4},\n  mean: 0.64804, std: 0.00189, params: {'max_depth': 6, 'min_child_weight': 5},\n  mean: 0.64702, std: 0.00259, params: {'max_depth': 7, 'min_child_weight': 1},\n  mean: 0.64666, std: 0.00160, params: {'max_depth': 7, 'min_child_weight': 2},\n  mean: 0.64705, std: 0.00264, params: {'max_depth': 7, 'min_child_weight': 3},\n  mean: 0.64836, std: 0.00213, params: {'max_depth': 7, 'min_child_weight': 4},\n  mean: 0.64841, std: 0.00280, params: {'max_depth': 7, 'min_child_weight': 5},\n  mean: 0.64721, std: 0.00102, params: {'max_depth': 8, 'min_child_weight': 1},\n  mean: 0.64685, std: 0.00234, params: {'max_depth': 8, 'min_child_weight': 2},\n  mean: 0.64605, std: 0.00192, params: {'max_depth': 8, 'min_child_weight': 3},\n  mean: 0.64698, std: 0.00287, params: {'max_depth': 8, 'min_child_weight': 4},\n  mean: 0.64649, std: 0.00167, params: {'max_depth': 8, 'min_child_weight': 5},\n  mean: 0.64307, std: 0.00214, params: {'max_depth': 9, 'min_child_weight': 1},\n  mean: 0.64428, std: 0.00263, params: {'max_depth': 9, 'min_child_weight': 2},\n  mean: 0.64473, std: 0.00156, params: {'max_depth': 9, 'min_child_weight': 3},\n  mean: 0.64490, std: 0.00190, params: {'max_depth': 9, 'min_child_weight': 4},\n  mean: 0.64709, std: 0.00086, params: {'max_depth': 9, 'min_child_weight': 5}],\n {'max_depth': 7, 'min_child_weight': 5},\n 0.64840561855269307)\n\n\n\n\n\n\n\n\n\n\n\nmax_depth': 7, min_child_weight: 5 \uc77c\ub54c \ucd5c\uc801\uc758 \uac12\uc774 \ub098\uc635\ub2c8\ub2e4. \uad6c\ud55c \uac12\uc744 \uace0\uc815\ud574 \ub193\uace0 \uacc4\uc18d \uc9c4\ud589\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n2. Gamma \ucd5c\uc801\uac12 \ucc3e\uae30\u00b6\n\n\n\n\n\nIn\u00a0[26]:\n\n    \nparam_test3 = {\n 'gamma':[i/10.0 for i in range(0,5)]\n}\ngsearch3 = GridSearchCV(estimator = XGBClassifier( learning_rate =0.1,n_estimators=160, max_depth=7,\n     min_child_weight=5, gamma=0, subsample=0.8, colsample_bytree=0.8,\n     objective= 'binary:logistic', scale_pos_weight=1,seed=27), \n     param_grid = param_test3, scoring='accuracy',n_jobs=32,iid=False, cv=5)\ngsearch3.fit(train_X, train_y)\ngsearch3.grid_scores_, gsearch3.best_params_, gsearch3.best_score_\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n/opt/conda/lib/python3.6/site-packages/sklearn/model_selection/_search.py:761: DeprecationWarning: The grid_scores_ attribute was deprecated in version 0.18 in favor of the more elaborate cv_results_ attribute. The grid_scores_ attribute will not be available from 0.20\n  DeprecationWarning)\n\n\n\n\n\n\n    Out[26]:\n\n\n\n\n\n([mean: 0.64841, std: 0.00280, params: {'gamma': 0.0},\n  mean: 0.64825, std: 0.00206, params: {'gamma': 0.1},\n  mean: 0.64752, std: 0.00176, params: {'gamma': 0.2},\n  mean: 0.64807, std: 0.00131, params: {'gamma': 0.3},\n  mean: 0.64688, std: 0.00207, params: {'gamma': 0.4}],\n {'gamma': 0.0},\n 0.64840561855269307)\n\n\n\n\n\n\n\n\n\n\n\ngamma\uc758 \ucd5c\uc801\uac12\uc740 0.0\uc73c\ub85c \ubcc0\ub3d9\uc774 \uc5c6\ub124\uc694.\n3. Subsample, Colsample_bytree \ucd5c\uc801\uac12 \ucc3e\uae30\u00b6\n\n\n\n\n\nIn\u00a0[28]:\n\n    \nparam_test4 = {\n 'subsample':[i/10.0 for i in range(6,10)],\n 'colsample_bytree':[i/10.0 for i in range(6,10)]\n}\ngsearch4 = GridSearchCV(estimator = XGBClassifier( learning_rate =0.1, n_estimators=160, max_depth=7,\n     min_child_weight=5, gamma=0, subsample=0.8, colsample_bytree=0.8,\n     objective= 'binary:logistic', scale_pos_weight=1,seed=27), \n     param_grid = param_test4, scoring='accuracy',n_jobs=32,iid=False, cv=5)\ngsearch4.fit(train_X, train_y)\ngsearch4.grid_scores_, gsearch4.best_params_, gsearch4.best_score_\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n/opt/conda/lib/python3.6/site-packages/sklearn/model_selection/_search.py:761: DeprecationWarning: The grid_scores_ attribute was deprecated in version 0.18 in favor of the more elaborate cv_results_ attribute. The grid_scores_ attribute will not be available from 0.20\n  DeprecationWarning)\n\n\n\n\n\n\n    Out[28]:\n\n\n\n\n\n([mean: 0.64692, std: 0.00194, params: {'colsample_bytree': 0.6, 'subsample': 0.6},\n  mean: 0.64744, std: 0.00114, params: {'colsample_bytree': 0.6, 'subsample': 0.7},\n  mean: 0.64780, std: 0.00211, params: {'colsample_bytree': 0.6, 'subsample': 0.8},\n  mean: 0.64707, std: 0.00190, params: {'colsample_bytree': 0.6, 'subsample': 0.9},\n  mean: 0.64725, std: 0.00127, params: {'colsample_bytree': 0.7, 'subsample': 0.6},\n  mean: 0.64677, std: 0.00175, params: {'colsample_bytree': 0.7, 'subsample': 0.7},\n  mean: 0.64725, std: 0.00236, params: {'colsample_bytree': 0.7, 'subsample': 0.8},\n  mean: 0.64708, std: 0.00221, params: {'colsample_bytree': 0.7, 'subsample': 0.9},\n  mean: 0.64708, std: 0.00116, params: {'colsample_bytree': 0.8, 'subsample': 0.6},\n  mean: 0.64742, std: 0.00136, params: {'colsample_bytree': 0.8, 'subsample': 0.7},\n  mean: 0.64841, std: 0.00280, params: {'colsample_bytree': 0.8, 'subsample': 0.8},\n  mean: 0.64777, std: 0.00127, params: {'colsample_bytree': 0.8, 'subsample': 0.9},\n  mean: 0.64720, std: 0.00173, params: {'colsample_bytree': 0.9, 'subsample': 0.6},\n  mean: 0.64713, std: 0.00223, params: {'colsample_bytree': 0.9, 'subsample': 0.7},\n  mean: 0.64787, std: 0.00196, params: {'colsample_bytree': 0.9, 'subsample': 0.8},\n  mean: 0.64723, std: 0.00213, params: {'colsample_bytree': 0.9, 'subsample': 0.9}],\n {'colsample_bytree': 0.8, 'subsample': 0.8},\n 0.64840561855269307)\n\n\n\n\n\n\n\n\n\n\n\ncolsample_bytree: 0.8, subsample: 0.8 \ucd5c\uc801\uac12\ub3c4 \ubcc0\ub3d9\uc774 \uc5c6\uc2b5\ub2c8\ub2e4.\n4. Reg_alpha \ucd5c\uc801\uac12 \ucc3e\uae30\u00b6\n\n\n\n\n\nIn\u00a0[30]:\n\n    \nparam_test6 = {\n 'reg_alpha':[1e-5, 1e-2, 0.1, 1, 100]\n}\ngsearch6 = GridSearchCV(estimator = XGBClassifier( learning_rate =0.1, n_estimators=160, max_depth=7,\n min_child_weight=5, gamma=0, subsample=0.8, colsample_bytree=0.8,\n objective= 'binary:logistic', scale_pos_weight=1,seed=27), \n param_grid = param_test6, scoring='accuracy',n_jobs=32,iid=False, cv=5)\ngsearch6.fit(train_X, train_y)\ngsearch6.grid_scores_, gsearch6.best_params_, gsearch6.best_score_\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n/opt/conda/lib/python3.6/site-packages/sklearn/model_selection/_search.py:761: DeprecationWarning: The grid_scores_ attribute was deprecated in version 0.18 in favor of the more elaborate cv_results_ attribute. The grid_scores_ attribute will not be available from 0.20\n  DeprecationWarning)\n\n\n\n\n\n\n    Out[30]:\n\n\n\n\n\n([mean: 0.64841, std: 0.00280, params: {'reg_alpha': 1e-05},\n  mean: 0.64816, std: 0.00102, params: {'reg_alpha': 0.01},\n  mean: 0.64936, std: 0.00163, params: {'reg_alpha': 0.1},\n  mean: 0.64938, std: 0.00091, params: {'reg_alpha': 1},\n  mean: 0.64219, std: 0.00325, params: {'reg_alpha': 100}],\n {'reg_alpha': 1},\n 0.64937601229234454)\n\n\n\n\n\n\n\n\n\n\n\nreg_alpha \uac12\uc740 1\uc774 \uac00\uc7a5 \ucd5c\uc801\uac12\uc73c\ub85c \ub098\uc635\ub2c8\ub2e4.\n5. Learning Rate \uc904\uc774\uae30\u00b6\uc774\uc81c\ub294 learning rate\ub97c \uc904\uc5ec\uc11c \uc880 \ub354 \uacac\uace0\ud55c \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[33]:\n\n    \nmodel2 = XGBClassifier(max_depth=7, learning_rate=0.01, n_estimators=5000,\n                      objective='binary:logistic', n_jobs=32, reg_alpha=1,\n                      gamma=0, min_child_weight=5,  subsample=0.8,\n                      colsample_bytree=0.8, scale_pos_weight=1, seed=27)\neval_set = [(train_X, train_y), (test_X, test_y)]\nmodel2.fit(train_X, train_y, eval_metric=[\"error\",\"logloss\"], eval_set=eval_set, verbose=False, early_stopping_rounds=50)\nresults = model2.evals_result()\n\n\n    \n\n\n\n\n\n\nIn\u00a0[34]:\n\n    \npred_y = model2.predict(test_X)\nprint(\" Accuracy : {} %\".format(accuracy_score(test_y, pred_y)*100))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n Accuracy : 65.12233467623072 %\n\n\n\n\n\n\n\n\n\n\n\n\uc774\ub807\uac8c \ubaa8\ub378 \ub2e4\ub4ec\uae30\ub97c \ud558\uba74 \uc815\ud655\ub3c4\uac00 \uc870\uae08 \ub098\uc544\uc9d1\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ucda9\ubd84\ud788 \ub9cc\uc871\uc2a4\ub7fd\uc9c0\ub294 \uc54a\ub124\uc694.\n\ubcf4\ub2e4 \uc88b\uc740 \ubaa8\ub378\uc740 \uc5ed\uc2dc\ub098 feature engineering\uc744 \uacc4\uc18d\ud574 \ucc3e\uc544\ubd10\uc57c \ud569\ub2c8\ub2e4.\n\ud559\uc2b5 \uc2dc\uac01\ud654\u00b6\n\n\n\n\n\nIn\u00a0[35]:\n\n    \nepochs = len(results['validation_0']['error']) # retrieve performance metrics\nx_axis = range(0, epochs)\n# plot log loss\nf, (ax0, ax1) = plt.subplots(nrows=1,ncols=2, sharey=False, figsize=(10, 4))\nax0.plot(x_axis, results['validation_0']['logloss'], label='Train')\nax0.plot(x_axis, results['validation_1']['logloss'], label='Test')\nax0.set_title('XGBoost Log Loss')\nax0.set_ylabel('Log loss')\nax0.legend()\nax1.plot(x_axis, results['validation_0']['error'], label='Train')\nax1.plot(x_axis, results['validation_1']['error'], label='Test')\nax1.set_ylabel('Classification Error')\nax1.set_title('XGBoost Classification Error')\nax1.legend()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[35]:\n\n\n\n\n\n<matplotlib.legend.Legend at 0x7fbd2c282b00>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc624\ubc84\ud53c\ud305\uc758 \ubb38\uc81c\ub294 \uc5c6\uc5b4\ubcf4\uc785\ub2c8\ub2e4. \uadf8\ub0e5 \ubaa8\ub378\uc758 \uc131\ub2a5\uc774 \uc88b\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\nFeature\uc758 \uc911\uc694\ub3c4 \uc2dc\uac01\ud654\u00b6\ub2e4\uc2dc\ud55c\ubc88 feature\uc758 \uc911\uc694\ub3c4\ub97c \ubcf4\uace0, \uc55e\uc73c\ub85c \uc9c4\ud589\ud560 feature engineering\uc5d0 \ucc38\uace0\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[36]:\n\n    \nf, ax = plt.subplots(figsize=(10, 8))\nplot_importance(model, ax=ax)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[36]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7fbd18858898>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub9c8\uce58\uba70\u00b6\uc81c\uac00 \ub9cc\ub4e0 \ubaa8\ub378\uc758 \uc815\ud655\ub3c4\ub294 65% \uc218\uc900\uc73c\ub85c \ub9cc\uc871\uc2a4\ub7fd\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc744 \ud574\uacb0\ud558\uae30 \uc704\ud574 \ub2e4\uc74c\uc5d0\ub294 feature engineering\uc744 \ud558\uaca0\uc2b5\ub2c8\ub2e4.",
      "tags": "Bioinformatics,Diabetes,kaggle,Python,\ub2f9\ub1e8,\uc7ac\uc785\uc6d0,\uce90\uae00",
      "url": "https://partrita.github.io/posts/Diabetes_Readmission/"
    },
    {
      "title": "\uce90\uae00: \ud558\uc218\uc5d0\uc11c \uace0\uc218\uae4c\uc9c0",
      "text": "Novice to Grandmaster \ucee4\ub110\uc744 Fork\ud574\uc11c \uc791\uc131\ud55c \ub0b4\uc6a9\uc785\ub2c8\ub2e4.\n\ub370\uc774\ud130 \uacfc\ud559\uc790 \uc124\ubb38\uc870\uc0ac\u00b6\uce90\uae00\uc740 \uc138\uacc4\uc5d0\uc11c \uac00\uc7a5 \ud070 \ub370\uc774\ud130 \uacfc\ud559 \ud50c\ub7ab\ud3fc\uc73c\ub85c \ubc31\ub9cc\uba85\uc774\uc0c1\uc758 \uc0ac\uc6a9\uc790\uac00 \uc788\uc2b5\ub2c8\ub2e4.  \uc774 \ub178\ud2b8\ubd81\uc5d0\uc11c\ub294 \ub370\uc774\ud130 \uacfc\ud559\uc790\ub97c \ub300\uc0c1\uc73c\ub85c \uce90\uae00\uc5d0\uc11c \uc9c4\ud589\ud55c \uc124\ubb38\uc870\uc0ac\ub97c \uc2dc\uac01\ud654 \ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uc544 \ubd05\ub2c8\ub2e4.\n\ub370\uc774\ud130\uc758 \ud2b9\uc9d5\u00b6\n171\uac1c \uad6d\uac00 \ubc0f \uc9c0\uc5ed\uc5d0\uc11c 16,716\uba85\uc758 \uc751\ub2f5\uc790\n\ud3c9\uade0 \uc751\ub2f5 \uc2dc\uac04\uc740 16.4 \ubd84\n\ubaa8\ub4e0 \uc9c8\ubb38\uc774 \ubaa8\ub4e0 \uc751\ub2f5\uc790\uc5d0\uac8c \ubcf4\uc774\ub294 \uac83\uc740 \uc544\ub2d8\n\ud559\uc0dd\uacfc \uc2e4\ubb34\uc790\ub97c \uad6c\ubd84\ud574 \uc124\ubb38\uc744 \uc9c4\ud589\n\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n#  \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\nimport numpy as np\nimport pandas as pd\nimport seaborn as sns\nimport matplotlib.pyplot as plt\n%matplotlib inline\nimport warnings # Suppress Deprecation and Incorrect Usage Warnings\nwarnings.filterwarnings('ignore')\n\n\n    \n\n\n\n\n\n\n\n\ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\u00b6\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nquestion = pd.read_csv('../input/schema.csv')\nresponse=pd.read_csv('../input/multipleChoiceResponses.csv',encoding='ISO-8859-1')\n# question.shape\nquestion.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Column\n      Question\n      Asked\n    \n  \n  \n    \n      285\n      JobFactorRemote\n      How are you assessing potential job opportunit...\n      Learners\n    \n    \n      286\n      JobFactorIndustry\n      How are you assessing potential job opportunit...\n      Learners\n    \n    \n      287\n      JobFactorLeaderReputation\n      How are you assessing potential job opportunit...\n      Learners\n    \n    \n      288\n      JobFactorDiversity\n      How are you assessing potential job opportunit...\n      Learners\n    \n    \n      289\n      JobFactorPublishingOpportunity\n      How are you assessing potential job opportunit...\n      Learners\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nresponse.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      GenderSelect\n      Country\n      Age\n      EmploymentStatus\n      StudentStatus\n      LearningDataScience\n      CodeWriter\n      CareerSwitcher\n      CurrentJobTitleSelect\n      TitleFit\n      CurrentEmployerType\n      MLToolNextYearSelect\n      MLMethodNextYearSelect\n      LanguageRecommendationSelect\n      PublicDatasetsSelect\n      LearningPlatformSelect\n      LearningPlatformUsefulnessArxiv\n      LearningPlatformUsefulnessBlogs\n      LearningPlatformUsefulnessCollege\n      LearningPlatformUsefulnessCompany\n      LearningPlatformUsefulnessConferences\n      LearningPlatformUsefulnessFriends\n      LearningPlatformUsefulnessKaggle\n      LearningPlatformUsefulnessNewsletters\n      LearningPlatformUsefulnessCommunities\n      LearningPlatformUsefulnessDocumentation\n      LearningPlatformUsefulnessCourses\n      LearningPlatformUsefulnessProjects\n      LearningPlatformUsefulnessPodcasts\n      LearningPlatformUsefulnessSO\n      LearningPlatformUsefulnessTextbook\n      LearningPlatformUsefulnessTradeBook\n      LearningPlatformUsefulnessTutoring\n      LearningPlatformUsefulnessYouTube\n      BlogsPodcastsNewslettersSelect\n      LearningDataScienceTime\n      JobSkillImportanceBigData\n      JobSkillImportanceDegree\n      JobSkillImportanceStats\n      JobSkillImportanceEnterpriseTools\n      ...\n      WorkChallengeFrequencyITCoordination\n      WorkChallengeFrequencyHiringFunds\n      WorkChallengeFrequencyPrivacy\n      WorkChallengeFrequencyScaling\n      WorkChallengeFrequencyEnvironments\n      WorkChallengeFrequencyClarity\n      WorkChallengeFrequencyDataAccess\n      WorkChallengeFrequencyOtherSelect\n      WorkDataVisualizations\n      WorkInternalVsExternalTools\n      WorkMLTeamSeatSelect\n      WorkDatasets\n      WorkDatasetsChallenge\n      WorkDataStorage\n      WorkDataSharing\n      WorkDataSourcing\n      WorkCodeSharing\n      RemoteWork\n      CompensationAmount\n      CompensationCurrency\n      SalaryChange\n      JobSatisfaction\n      JobSearchResource\n      JobHuntTime\n      JobFactorLearning\n      JobFactorSalary\n      JobFactorOffice\n      JobFactorLanguages\n      JobFactorCommute\n      JobFactorManagement\n      JobFactorExperienceLevel\n      JobFactorDepartment\n      JobFactorTitle\n      JobFactorCompanyFunding\n      JobFactorImpact\n      JobFactorRemote\n      JobFactorIndustry\n      JobFactorLeaderReputation\n      JobFactorDiversity\n      JobFactorPublishingOpportunity\n    \n  \n  \n    \n      16711\n      Female\n      Other\n      24.0\n      Not employed, but looking for work\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      16712\n      Male\n      Indonesia\n      25.0\n      Employed full-time\n      NaN\n      NaN\n      Yes\n      NaN\n      Programmer\n      Fine\n      Employed by a company that doesn't perform adv...\n      Jupyter notebooks\n      Bayesian Methods\n      Python\n      Dataset aggregator/platform (i.e. Socrata/Kagg...\n      Kaggle,Non-Kaggle online communities,Online co...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      Somewhat useful\n      NaN\n      Somewhat useful\n      NaN\n      Somewhat useful\n      NaN\n      NaN\n      Somewhat useful\n      NaN\n      NaN\n      NaN\n      Somewhat useful\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      ...\n      NaN\n      Sometimes\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      Less than 10% of projects\n      More internal than external\n      IT Department\n      NaN\n      NaN\n      Key-value store (e.g. Redis/Riak),Row-oriented...\n      Email,Share Drive/SharePoint\n      NaN\n      Git\n      Rarely\n      NaN\n      IDR\n      I do not want to share information about my sa...\n      7\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      16713\n      Female\n      Taiwan\n      25.0\n      Employed part-time\n      NaN\n      NaN\n      No\n      Yes\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      16714\n      Female\n      Singapore\n      16.0\n      I prefer not to say\n      Yes\n      Yes, but data science is a small part of what ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      16715\n      Male\n      Japan\n      27.0\n      Employed full-time\n      NaN\n      NaN\n      No\n      Yes\n      Programmer\n      Fine\n      Employed by professional services/consulting firm\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uae30\ucd08\uc801\uc778 \ubd84\uc11d\u00b6\uae30\ubcf8\uc801\uc778 \ubd84\uc11d\uc744 \uc218\ud589\ud574\uc11c \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nprint('\uc804\uccb4 \uc751\ub2f5\uc790\uc758 \uc218: ',response.shape[0])\nprint('\uc804\uccb4 \uad6d\uac00\uc758 \uc218: ',response['Country'].nunique())\nprint('\uac00\uc7a5 \ub9ce\uc774 \uc751\ub2f5\ud55c \uad6d\uac00: ',response['Country'].value_counts().index[0],'with',response['Country'].value_counts().values[0],'respondents')\nprint('\uac00\uc7a5 \uc5b4\ub9b0 \uc751\ub2f5\uc790\uc758 \ub098\uc774: ',response['Age'].min(),' \uac00\uc7a5 \ub098\uc774 \ub9ce\uc740 \uc751\ub2f5\uc790\uc758 \ub098\uc774 : ',response['Age'].max())\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\uc804\uccb4 \uc751\ub2f5\uc790\uc758 \uc218:  16716\n\uc804\uccb4 \uad6d\uac00\uc758 \uc218:  52\n\uac00\uc7a5 \ub9ce\uc774 \uc751\ub2f5\ud55c \uad6d\uac00:  United States with 4197 respondents\n\uac00\uc7a5 \uc5b4\ub9b0 \uc751\ub2f5\uc790\uc758 \ub098\uc774:  0.0  \uac00\uc7a5 \ub098\uc774 \ub9ce\uc740 \uc751\ub2f5\uc790\uc758 \ub098\uc774 :  100.0\n\n\n\n\n\n\n\n\n\n\n\n\uc124\ubb38\uc870\uc0ac\uc758 \ubb38\uc81c\ub294 \uac00\uc9dc \uc751\ub2f5\uacfc \ubb34\uc751\ub2f5\uc774\ub77c\uace0 \ubcfc \uc218 \uc788\ub294\ub370\uc694, \uc704\uc758 \uacb0\uacfc\ub97c \ubcf4\uc2dc\uba74 0\uc0b4\uacfc 100\uc0b4\uc740 \ubd84\uba85\ud55c \uac00\uc9dc \uc751\ub2f5\uc73c\ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ubb34\uc751\ub2f5 \uc2dc\uac01\ud654\ud558\uae30\u00b6\uc804\uccb4 \ub370\uc774\ud130\uc5d0\uc11c \ubb34\uc751\ub2f5\ud55c \ub370\uc774\ud130\ub97c \uc2dc\uac01\ud654\ud574\uc11c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nimport missingno as msno # https://github.com/ResidentMario/missingno\nmsno.matrix(response)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7fe59478e588>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ucd1d 16,716\uba85\uc758 \ub370\uc774\ud130\uc640 \ucd1d 290\uac1c\uc758 \uc9c8\ubb38\uc5d0 \ubb34\uc751\ub2f5\uc744 \uc2dc\uac01\ud654\ud574\ubcf4\ub2c8 \ubb34\uc751\ub2f5 \ub370\uc774\ud130\uc758 \uceec\ub7fc\uc774 \ub9ce\uc740 \uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc131\ubcc4\ub85c \ub098\ub204\uae30\u00b6\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nplt.subplots()\nsns.countplot(y=response['GenderSelect'],order=response['GenderSelect'].value_counts().index)\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc5ec\uc131\ubcf4\ub2e4\ub294 \ub0a8\uc131\uc774 \uc555\ub3c4\uc801\uc73c\ub85c \ub9ce\uc740 \uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uad6d\uac00\ubcc4 \uc751\ub2f5\ub960\u00b6\n\n\n\n\n\nIn\u00a0[7]:\n\n    \nresp_coun=response['Country'].value_counts()[:15].to_frame() # \uc751\ub2f5\ub960\ub85c \uc815\ub82c\ud558\uace0 \uc0c1\uc704 15\uac1c\ub9cc \ubd84\ub9ac\ud569\ub2c8\ub2e4.\nsns.barplot(resp_coun['Country'],resp_coun.index)\nplt.title('Top 15 Countries by number of respondents')\nplt.xlabel('') # x\ub808\uc774\ube14\uc744 \uc9c0\uc6c1\ub2c8\ub2e4.\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\nText(0.5,0,'')\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ubbf8\uad6d \uacfc \uc778\ub3c4\uc5d0\uc11c \uac70\uc758 3\ubd84\uc758 1\uc815\ub3c4\uc758 \uc751\ub2f5\uc790\uac00 \ub098\uc654\uc2b5\ub2c8\ub2e4. \uc5ed\uc2dc IT \uac15\uad6d\uc73c\ub85c \uc720\uba85\ud55c \ub098\ub77c\ub4e4\uc774\uc8e0.  \uadf8\ub807\ub2e4\uba74 \ud55c\uad6d\uc778\uc758 \uc751\ub2f5\uc790\uc218\ub294 \uba87\uba85\uc77c\uae4c\uc694?\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nkorean = response[response['Country']=='South Korea'] # \uad6d\uc801\uc774 \ud55c\uad6d\uc778 \ub370\uc774\ud130\ub9cc\nprint('\ud55c\uad6d\uc778 \uc751\ub2f5\uc790 \uc218:  ' + str(korean.shape[0]))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\ud55c\uad6d\uc778 \uc751\ub2f5\uc790 \uc218:  194\n\n\n\n\n\n\n\n\n\n\n\n\uc815\ub9d0 \uc801\uc740 \uc22b\uc790\ub85c 194\uba85 \ubfd0\uc774\ub124\uc694.\n\ub098\uc774\ubcc4 \uc751\ub2f5\ub960\u00b6\uc751\ub2f5\ud55c \uc0ac\ub78c\ub4e4\uc758 \ub098\uc774\uc758 \ubd84\ud3ec\ub97c \uc2dc\uac01\ud654\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nsns.distplot(response['Age'].dropna()) # \ubb34\uc751\ub2f5 \ub370\uc774\ud130 \uc81c\uac70\nprint(response[response['Age'] > 0]['Age'].mean()) # \ud3c9\uade0 \ub098\uc774\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n32.3926106870229\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc751\ub2f5\uc790\uc758 \ub300\ubd80\ubd84\uc774 20\ub300\uc5d0\uc11c 30\ub300 \uc0ac\uc774\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \uac00\uc7a5 \ub9ce\uc740 \ub098\uc774\ub300\ub294 30\ub300\uc785\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ud3c9\uade0\ub098\uc774\ub294 32\uc138\uc785\ub2c8\ub2e4. \ud55c\uad6d\uc778\uc740 \uc5b4\ub5a8\uae4c\uc694?\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nsns.distplot(korean['Age'].dropna())\nprint(korean[korean['Age'] > 0]['Age'].mean()) # \ud3c9\uade0 \ub098\uc774\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n32.20942408376963\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud55c\uad6d\ub3c4 \ub2e4\ub978 \ub098\ub77c\uc640 \ube44\uc2b7\ud55c \ub098\uc774\ub300 \uc778 \uac83\uc744 \uc54c \uc218 \uc788\ub124\uc694.\n\uc804\uacf5\uc5d0 \ub300\ud55c \uc815\ubcf4\u00b6\ub370\uc774\ud130 \uacfc\ud559\uc790\ub4e4\uc758 \uc804\uacf5\uc744 \uc815\ub9ac\ud574 \ub370\uc774\ud130 \ud504\ub808\uc784\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nmajor_df = pd.DataFrame(response['MajorSelect'].value_counts())# value_counts \ub97c \uc0ac\uc6a9\ud558\uba74 \uadf8\ub8f9\ud654\ub41c \ub370\uc774\ud130\uc758 \uce74\uc6b4\ud2b8 \uac12\uc744 \ubcf4\uc5ec\uc900\ub2e4.\nmajor_df['ratio'] = pd.DataFrame(response['MajorSelect'].value_counts(normalize=True)) # \ud574\ub2f9 \ub370\uc774\ud130\uac00 \uc804\uccb4 \ub370\uc774\ud130\uc5d0\uc11c \uc5b4\ub290 \uc815\ub3c4\uc758 \ube44\uc728\uc744 \ucc28\uc9c0\ud558\ub294\uc9c0 \uc54c \uc218 \uc788\ub2e4.\nmajor_df.head(10) # \uc0c1\uc704 10\uac1c\uc758 \uc804\uacf5\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[11]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      MajorSelect\n      ratio\n    \n  \n  \n    \n      Computer Science\n      4397\n      0.331074\n    \n    \n      Mathematics or statistics\n      2220\n      0.167156\n    \n    \n      Engineering (non-computer focused)\n      1339\n      0.100821\n    \n    \n      Electrical Engineering\n      1303\n      0.098110\n    \n    \n      Other\n      848\n      0.063851\n    \n    \n      Physics\n      830\n      0.062495\n    \n    \n      Information technology, networking, or system administration\n      693\n      0.052180\n    \n    \n      A social science\n      531\n      0.039982\n    \n    \n      Biology\n      274\n      0.020631\n    \n    \n      Management information systems\n      237\n      0.017845\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc5ed\uc2dc\ub098 \ucef4\ud4e8\ud130 \uacfc\ud559 \uc804\uacf5\uc774 33%\ub85c \uac00\uc7a5 \ub9ce\uace0 \uc218\ud559, \uacf5\ud559, \uc804\uae30 \uacf5\ud559 \uc21c\uc73c\ub85c \uc788\uc2b5\ub2c8\ub2e4. \uc800\uc640 \uac19\uc774 \uc0dd\ubb3c\ud559\uc744 \uc804\uacf5\ud55c \uc0ac\ub78c\ub3c4 2%\uc815\ub3c4\ub098 \ub418\ub294\uad70\uc694. \uc704\uc758 \ub370\uc774\ud130\ub97c \uc2dc\uac01\ud654\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \nmajor_df['ratio'].plot(kind='barh') #pandas\ub97c \uc774\uc6a9\ud55c \uac04\ub2e8\ud55c \uc2dc\uac01\ud654\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[12]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7fe58fd7d7b8>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud504\ub85c\uadf8\ub798\ubc0d \uacbd\ud5d8\u00b6\uacbd\ud5d8\uc774 \uc5bc\ub9c8\ub098 \ub418\ub294\uc9c0\uc5d0 \ub300\ud55c \uc815\ubcf4\ub294 Tenure \uc5f4\ub85c \uc800\uc7a5\uc774 \ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \nsns.countplot(y='Tenure', data=response, order=response['Tenure'].value_counts().index)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[13]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7fe58dd1f4e0>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub370\uc774\ud130 \uacfc\ud559\uc790\ub4e4\uc740 \ub300\ubd80\ubd84\uc774 1 - 5\ub144\uc758 \uacbd\ud5d8\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \uac83 \ubcf4\uc785\ub2c8\ub2e4.  \uadf8\ub9cc\ud07c \uc0c8\ub85c\uc6b4 \uc601\uc5ed\uc774\ub77c\uace0 \ubcfc \uc218 \uc788\uaca0\uc8e0.\n\n\n\n\n\n\n\n\uc5f0\ubd09 \ub370\uc774\ud130 \ubcf4\uc815\ud558\uae30\u00b6\ubbf8\uad6d\uc5d0\uc11c \ub370\uc774\ud130 \uacfc\ud559\uc790\ub294 \uc5f0\ubd09\uc774 \ub192\uae30\ub85c \uc720\uba85\ud55c \uc9c1\uc5c5\uc911 \ud558\ub098\uc785\ub2c8\ub2e4. \uc5b4\ub514 \ud55c\ubc88 \uc124\ubb38\uc870\uc0ac \uacb0\uacfc\ub97c \ubcfc \uae4c\uc694?\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \nresponse['CompensationAmount']=response['CompensationAmount'].str.replace(',','')\nresponse['CompensationAmount']=response['CompensationAmount'].str.replace('-','')\nrates=pd.read_csv('../input/conversionRates.csv')\nrates.drop('Unnamed: 0',axis=1,inplace=True)\nsalary=response[['CompensationAmount','CompensationCurrency','GenderSelect','Country','CurrentJobTitleSelect']].dropna()\nsalary=salary.merge(rates,left_on='CompensationCurrency',right_on='originCountry',how='left')\nsalary['Salary']=pd.to_numeric(salary['CompensationAmount'])*salary['exchangeRate']\nprint('\ucd5c\uace0 \uc5f0\ubd09($)',salary['Salary'].dropna().astype(int).max())\nprint('\ucd5c\uc801 \uc5f0\ubd09($)',salary['Salary'].dropna().astype(int).min())\nprint('\uc911\uc704 \uc5f0\ubd09($)',salary['Salary'].dropna().astype(int).median())\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\ucd5c\uace0 \uc5f0\ubd09($) 28297400000\n\ucd5c\uc801 \uc5f0\ubd09($) 0\n\uc911\uc704 \uc5f0\ubd09($) 53812.0\n\n\n\n\n\n\n\n\n\n\n\n\uc5ed\uc2dc \ucd5c\uace0\uc640 \ucd5c\uc800\uac12\uc740 \ub9d0\ub3c4 \uc548\ub418\ub294 \uac12\uc785\ub2c8\ub2e4. \uc911\uc704 \uc5f0\ubd09\uac12\uc740 \uc5b4\ub290 \uc815\ub3c4 \ubbff\uc744 \uc218 \uc788\uaca0\ub124\uc694.  \uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \uc5f0\ubd09 \ubd84\ud3ec\ub97c \ubcfc\uae4c\uc694?\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \nplt.subplots()\nsalary=salary[(salary['Salary']<300000) & (salary['Salary']>1000) ] # \ud604\uc2e4\uc801\uc778 \uc5f0\ubd09 \uac12\ub9cc \uc120\ud0dd\nsns.distplot(salary['Salary']).set(xlim=(0, None))\nplt.axvline(salary['Salary'].median(), linestyle='dashed') # \uc911\uc704\uac12 \nplt.title('Salary Distribution')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[15]:\n\n\n\n\n\nText(0.5,1,'Salary Distribution')\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc5f0\ubd09\uc758 \ubd84\ud3ec\ub294 \uc5ed\uc2dc 53000$ \uc544\ub798\uc5d0 \ub9ce\uace0 \uc5f0\ubd09\uc774 \ub192\uc740 \uc0ac\ub78c\uc740 \uae09\uaca9\ud558\uac8c \uc904\uc5b4\ub4dc\ub294 \ubaa8\uc2b5\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uad6d\uac00\ubcc4 \uc5f0\ubd09\uc758 \ucc28\uc774\u00b6\uad6d\uac00\ubcc4\ub85c\ub294 \ub370\uc774\ud130\uacfc\ud559\uc790\uc758 \uc5f0\ubd09\uc774 \uc5b4\ub5a4 \ucc28\uc774\uac00 \uc788\ub294\uc9c0 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc911\uc704 \uc5f0\ubd09\uc774 \ub192\uc740 \uc0c1\uc704 15\uac1c\uc758 \uad6d\uac00\ub97c \uc2dc\uac01\ud654\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \nplt.subplots(figsize=(8,12))\nsal_coun = salary.groupby('Country')['Salary'].median().sort_values(ascending=False)[:30].to_frame()\nsns.barplot('Salary', sal_coun.index, data = sal_coun, palette='Spectral')\nplt.axvline(salary['Salary'].median(), linestyle='dashed')\nplt.title('Highest Salary Paying Countries')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[16]:\n\n\n\n\n\nText(0.5,1,'Highest Salary Paying Countries')\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc5ed\uc2dc \ubbf8\uad6d\uc758 \ub370\uc774\ud130\uacfc\ud559\uc790\uac00 \uac00\uc7a5 \ub9ce\uc740 \uc911\uc704\uc5f0\ubd09\uc744 \ubc1b\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c \ub180\ub77c\uc6b4 \uac83\uc740 \uc778\ub3c4\ub294 \ub450\ubc88\uc9f8\ub85c \uac00\uc7a5 \ub9ce\uc740 \uc751\ub2f5\ub960\uc774 \ub192\uc558\ub358 \ub098\ub77c\uc774\uc9c0\ub9cc \uc5f0\ubd09\uc21c\uc704\uc5d0\uc11c\ub294 \uc5c6\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\ubb34\uc5c7\uc744 \ubc30\uc6cc\uc57c \ud560\uae4c\uc694?\u00b6\n\n\n\n\n\nIn\u00a0[17]:\n\n    \nf,ax=plt.subplots(figsize=(8,12))\ntool=response['MLToolNextYearSelect'].str.split(',')\ntool_nxt=[]\nfor i in tool.dropna():\n    tool_nxt.extend(i)\npd.Series(tool_nxt).value_counts()[:15].sort_values(ascending=True).plot.barh(width=0.9)\nax.set_title('ML Tool Next Year')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[17]:\n\n\n\n\n\nText(0.5,1,'ML Tool Next Year')\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc55e\uc73c\ub85c\ub3c4 \ud30c\uc774\uc36c \ud504\ub808\uc784\uc6cc\ud06c\uc778 \ud150\uc11c\ud50c\ub85c\uc6b0\uac00 23%\ub85c \uac00\uc7a5 \ub9ce\uc740 \uad00\uc2ec\uc744 \ubc1b\uc744 \uac83\uc774\ub77c \uc0dd\uac01\ud558\uace0 \uc788\uad70\uc694.  \uadf8\ub9ac\uace0 \uadf8 \ub4a4\ub85c\ub294 Python\uacfc R\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\uc5b4\ub514\uc5d0\uc11c \ub370\uc774\ud130 \uc0ac\uc774\uc5b8\uc2a4\ub97c \ubc30\uc6cc\uc57c \ud560\uae4c\uc694?\u00b6\n\n\n\n\n\nIn\u00a0[18]:\n\n    \nplt.subplots(figsize=(6,8))\nlearn=response['LearningPlatformSelect'].str.split(',')\nplatform=[]\nfor i in learn.dropna():\n    platform.extend(i)\npd.Series(platform).value_counts()[:15].sort_values(ascending=True).plot.barh(width=0.9)\nplt.title('Best Platforms to Learn',size=15)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[18]:\n\n\n\n\n\nText(0.5,1,'Best Platforms to Learn')\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc5ed\uc2dc \uce90\uae00\uc774 \uac00\uc7a5 \uc0c1\uc704\ub97c \ucc28\uc9c0\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc804\ud1b5\uc801\uc778 \uad50\uacfc\uc11c\ub294 \ub2e4\ub978 \uc628\ub77c\uc778 \ucf54\uc2a4\ub77c\ub358\uc9c0 \uc720\ud22c\ube0c\uc5d0 \ubc00\ub9ac\ub294 \ubaa8\uc2b5\uc744 \ubcf4\uc774\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\ub370\uc774\ud130 \ubd84\uc11d\uc5d0\uc11c\uc758 \uac00\uc7a5 \ud070 \ubb38\uc81c\uc810\uc740?\u00b6\n\n\n\n\n\nIn\u00a0[19]:\n\n    \nplt.subplots()\nchallenge=response['WorkChallengesSelect'].str.split(',')\nchallenges=[]\nfor i in challenge.dropna():\n    challenges.extend(i)\nplt1=pd.Series(challenges).value_counts().sort_values(ascending=False).to_frame()[:5] # \uc0c1\uc704 5\uac1c\ub9cc\nsns.barplot(plt1[0],plt1.index)\nplt.title('Challenges in Data Science')\nplt.xlabel('') # x\ub808\uc774\ube14\uc744 \uc9c0\uc6c1\ub2c8\ub2e4.\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[19]:\n\n\n\n\n\nText(0.5,0,'')\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub370\uc774\ud130 \ubd84\uc11d\uc5d0\uc11c\uc758 \uac00\uc7a5 \ud070 \ubb38\uc81c\uc810\uc740 \uc5ed\uc2dc \ub370\uc774\ud130\uc758 \uc9c8\uc785\ub2c8\ub2e4. \ub370\uc774\ud130 \uc804\ucc98\ub9ac\uc5d0 \uac00\uc7a5 \ub9ce\uc740 \uc2dc\uac04\uc774 \ub4e4\uae30 \ub54c\ubb38\uc774\uc8e0. \ub9e4\uc6b0 \uc131\uac00\uc2dc\uae30\ub3c4 \ud558\uad6c\uc694.\n\uc9c1\uc5c5\uc744 \ucc3e\ub294\ub370 \uac00\uc7a5 \uace0\ub824\ud574\uc57c \ud560 \uc694\uc18c\ub294 \ubb34\uc5c7\uc778\uac00\uc694?\u00b6\n\n\n\n\n\nIn\u00a0[20]:\n\n    \nqc = question.loc[question[ 'Column'].str.contains('JobFactor')]\njob_factors = [ x for x in response.columns if x.find('JobFactor') != -1]\njfdf = {}\nfor feature in job_factors:\n    a = response[feature].value_counts()\n    a = a/a.sum()\n    jfdf[feature[len('JobFactor'):]] = a\njfdf = pd.DataFrame(jfdf).transpose()\nplt.figure(figsize=(8,12))\nsns.heatmap(jfdf.sort_values('Very Important', ascending=False), annot=True, cmap=\"YlGnBu\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[20]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7fe570b9b438>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub370\uc774\ud130 \uacfc\ud559\uc790\uac00  \uc9c1\uc5c5\uc744 \ucc3e\uc744 \ub54c \uac00\uc7a5 \uace0\ub824\ud574\uc57c \ud560 \uc694\uc18c\ub294 \ubc30\uc6b8 \uc810\uc774 \uc788\ub294 \uacf3\uc73c\ub85c \ub098\uc624\ub124\uc694.  \uae09\uc5ec\uc758 \uc911\uc694\uc131\uc774 \uc0dd\uac01\ubcf4\ub2e4 \ub0ae\uc740\uac83\uc740 \uc758\uc678\ub77c\uace0 \ubcf4\uc5ec\uc9d1\ub2c8\ub2e4.\n\ub9c8\uce58\uba70\u00b6\uc774\uc81c\uae4c\uc9c0 \ub370\uc774\ud130 \uacfc\ud559\uc790\ub4e4\uc758 \uc124\ubb38\uc870\uc0ac \uacb0\uacfc\ub97c \uc2dc\uac01\ud654\ud558\uace0 \uac04\ub7b5\ud788 \uc0b4\ud3b4\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130 \uacfc\ud559\uc790\uc5d0 \ud765\ubbf8\uac00 \uc788\uc73c\uc2dc\ub2e4\uba74 [\uce90\uae00(https://www.kaggle.com)\uc5d0 \uac00\uc785\ud558\uc2dc\uae38 \ucd94\ucc9c\ub4dc\ub9bd\ub2c8\ub2e4.",
      "tags": "data science,kaggle,Python,\ub370\uc774\ud130 \uacfc\ud559\uc790",
      "url": "https://partrita.github.io/posts/kaggle_datascience/"
    },
    {
      "title": "edwith \uba38\uc2e0\ub7ec\ub2dd \uac15\uc758 \ub178\ud2b8\uc815\ub9ac",
      "text": "0. \uc2dc\uc791\ud558\uae30\uc804\uc5d0\u00b6edwith\uc5d0\uc11c \ucd5c\uc131\ucca0\uad50\uc218\ub2d8\uc758 \uac15\uc758\ub97c \ub4e3\uace0 \ub178\ud2b8\uc815\ub9ac\ub97c \ud55c \ub0b4\uc6a9\uc785\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc0ac\uc6a9\ud55c \ubaa8\ub4e0 \ucf54\ub4dc\uc640 \ub0b4\uc6a9\uc758 \uc800\uc791\uad8c\uc740 \ucd5c\uc131\ucca0 \uad50\uc218\ub2d8\uc5d0\uac8c \uc788\uc2b5\ub2c8\ub2e4. \ubcf4\ub2e4 \uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uc704\uc758 \ub9c1\ud06c\uc5d0\uc11c \uac15\uc758\ub97c \uc218\uac15\ud558\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4.\n1. \uad50\uc721 \ud658\uacbd\u00b6\ubaa8\ub4e0 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 Anaconda\ub97c \uc774\uc6a9\ud574 \uc124\uce58 \ud558\uc600\uc2b5\ub2c8\ub2e4. \uc0ac\uc6a9\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ubaa9\ub85d\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\nJupyter\nNumpy\nPandas\nScikit learn\n\n2. \ud30c\uc774\uc36c \ucf54\ub4dc \uc2a4\ud0c0\uc77c\u00b6\ud30c\uc774\uc36c\uc744 \ud65c\uc6a9\ud558\uc5ec \ud6a8\uc728\uc801\uc73c\ub85c \ucf54\ub4dc\ub97c \ud45c\ud604\ud558\ub294 \uae30\ubc95\uc744 \ubc30\uc6cc \ubd05\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74 \ub2e4\uc74c\uacfc \uac19\uc740 \ub9ac\uc2a4\ud2b8\uc548\uc758 \ub0b4\uc6a9\uc744 \ud55c\uc904\ub85c \ucd9c\ub825\ud558\ub294 \ucf54\ub4dc\uac00 \uc788\uc2b5\ub2c8\ub2e4.\ncolors = [\"red\", \"blue\", \"green\", \"yellow\"]\nresult = \"\"\nfor s in colors:\n    result += s\n\n\uc704\uc758 \ucf54\ub4dc\ub97c \ud30c\uc774\uc36c\uc2a4\ub7fd\uac8c \ub9cc\ub4e4\uba74, \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\ncolors = [\"red\", \"blue\", \"green\", \"yellow\"]\nresult = \"\".join(colors)\n\n\uc774\ub807\uac8c \ud558\uba74 \uac04\uacb0\ud558\uace0 \uac00\ub3c5\uc131\uc774 \uc88b\uc544\uc9d1\ub2c8\ub2e4.\n2.1. Split & Join\u00b6Split & Join \uc744 \uc0ac\uc6a9\ud558\uc5ec String Type \uc758 \uac12\uc744 List \ud615\ud0dc\ub85c \ubcc0\ud658\ud558\uace0, List Type\uc758 \uac12\uc744 String Type \uc758\n\uac12\uc73c\ub85c \ubcc0\ud658\ud574 \ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n# \ube48\uce78\uc744 \uae30\uc900\uc73c\ub85c \ubb38\uc790\uc5f4 \ub098\ub204\uae30\nitems = 'zero one two three'.split() \n# \uc27c\ud45c\ub97c \uae30\uc900\uc73c\ub85c \ubb38\uc790\uc5f4 \ub098\ub204\uae30\nitems = 'zero,one,two,three'.split()\n# \".\"\uc744 \uae30\uc900\uc73c\ub85c \ubb38\uc790\uc5f4 \ub098\ub204\uace0 unpacking\nexample = 'cs50.gachon.edu'\nsubdomain, domain, tld = example.split(\".\")\n\n\n    \n\n\n\n\n\n\n\n2.2. List Comprehension\u00b6\ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 \uae30\ubc95 \uc911\uc5d0 \ud558\ub098\uc778 List Comprehension \uc744 \uc0ac\uc6a9\ud574\ubd05\ub2c8\ub2e4. \ube44\uad50\ub97c \ud558\uae30 \uc704\ud574 \uba3c\uc800, for loop + append() \uc0ac\uc6a9\ud55c \ucf54\ub4dc\ub97c \uc0b4\ud3b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nresult = []\nfor i in range(10):\n    result.append(i)\nprint(result)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\n\n\n\n\n\n\n\nlist Comprehension \uc0ac\uc6a9\ud558\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nresult = [i for i in range(10)]\nprint(result)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\n\n\n\n\n\n\n\n\n2.3. Enumerate & Zip\u00b6\ub9ac\uc2a4\ud2b8\uc758 \uac12\uc744 \ucd94\ucd9c\ud560\ub54c \ubc29\ubc95\uc73c\ub85c \uc774\uc6a9\ub418\ub294 enumerate \uc640 \ub450\uac1c\uc758 list \uac12\uc744 \ubcd1\ub82c\uc801\uc73c\ub85c \ucd94\ucd9c\ud560 \uc218 \uc788\ub294 zip \ubaa8\ub4c8\uc744 \uc54c\uc544 \ubd05\ub2c8\ub2e4.\n2.3.1. Enumerate\u00b6\n\ub9ac\uc2a4\ud2b8\uc758 \uac12\uc744 index \ubc88\ud638\uc640 \ud568\uaed8 \ucd94\ucd9c\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nmy_list = ['a','b','c']\nfor i, j in enumerate(my_list):\n    print(i, j)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n0 a\n1 b\n2 c\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nlist(enumerate(my_list)) # \ub9ac\uc2a4\ud2b8\uc5d0 \uc788\ub294 index\uc640 \uac12\uc744 unpacking \ud6c4 \ub2e4\uc2dc \ub9ac\uc2a4\ud2b8\ub85c \uc800\uc7a5\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n[(0, 'a'), (1, 'b'), (2, 'c')]\n\n\n\n\n\n\n\n\n\n\n\n2.3.2. Zip\u00b6\ub450 \uac1c\uc758 \ub9ac\uc2a4\ud2b8 \uac12\uc744 \ubcd1\ub82c\uc801\uc73c\ub85c \ucd94\ucd9c\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nlist_a = ['a1','a2','a3']\nlist_b = ['b1','b2','b3']\nfor i in zip(list_a,list_b):\n    print(i, end = ' ')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n('a1', 'b1') ('a2', 'b2') ('a3', 'b3') \n\n\n\n\n\n\n\n\n\n\n2.4. Lambda & Map & Reduce\u00b6\n\ud568\uc218\ucc98\ub7fc \uc0ac\uc6a9\uac00\ub2a5\ud55c Lambda\nSequence \uc790\ub8cc\ud615\uc758 \ub370\uc774\ud130\uc5d0\uc11c \ud568\uc218\ub97c \uc801\uc6a9\ud558\ub294 \ubc29\ubc95\uc778 Map \uacfc Reduce \ud568\uc218\n\n2.4.1. Lambda\u00b6\ub2e4\uc74c\uacfc \uac19\uc740 \ucf54\ub4dc\ub97c Lambda\ub85c \ubcf4\ub2e4 \uac04\ub7b5\ud558\uac8c \uc4f8 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\ndef f(x, y):\n    return x + y\nprint(f(1, 4))\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \n# Lambda \uc0ac\uc6a9\nf = lambda x, y: x + y\nprint(f(1, 4))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n5\n\n\n\n\n\n\n\n\n\n\n\n\uc81c \uac1c\uc778\uc801 \uc758\uacac\uc73c\ub85c\ub294 Lambda\ub294 \uac00\ub3c5\uc131\uc744 \ub098\uc058\uac8c \ud574\uc11c, \uc88b\uc544\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n2.4.2. Map & Reduce\u00b6\n\n\n\n\n\nIn\u00a0[8]:\n\n    \n#python 3\uc5d0\ub294 list\ub97c \ubd99\uc5ec\uc57c \ud569\ub2c8\ub2e4.\nex = [1,2,3,4,5]\nprint(list(map(lambda x: x+x, ex)))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[2, 4, 6, 8, 10]\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \n# Reduce\nfrom functools import reduce\nprint(reduce(lambda x, y: x+y, [1, 2, 3, 4, 5]))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n15\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \n# \uc704\uc5d0\uc11c \ubc30\uc6b4\uac83\uc73c\ub85c \ud329\ud1a0\ub9ac\uc5bc\uc744 \uad6c\ud604\ud574 \ubd05\ub2c8\ub2e4.\ndef factorial(n):\n    return reduce(lambda x, y: x*y, range(1, n+1))\nfactorial(10)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\n3628800\n\n\n\n\n\n\n\n\n\n\n\n2.5. Asterisk\u00b6\uacf1\uc148, \uc81c\uacf1\uc5f0\uc0b0, \uac00\ubcc0\uc778\uc790 \ud65c\uc6a9 \ub4f1 \uc5ec\ub7ec \ubd80\ubd84\uc5d0\uc11c \ub2e4\uc591\ud558\uac8c \uc0ac\uc6a9\ub418\ub294 Asterisk(*) \uc758 \uc0ac\uc6a9\ubc95\uc744 \uc54c\uc544\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \ndef asterisk_test(a, *args):\n    print(a, args)\n    print(type(args))\n\nasterisk_test(1,2,3,4,5,6)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n1 (2, 3, 4, 5, 6)\n<class 'tuple'>\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \ndef asterisk_test(a, **kargs):\n    print(a, kargs)\n    print(type(kargs))\n\nasterisk_test(1, b=2, c=3, d=4, e=5, f=6)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n1 {'b': 2, 'c': 3, 'd': 4, 'e': 5, 'f': 6}\n<class 'dict'>\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \ndef asterisk_test(a, *args):\n    print(a, args[0])\n    print(type(args))\n\nasterisk_test(1, (2, 3, 4, 5, 6))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n1 (2, 3, 4, 5, 6)\n<class 'tuple'>\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \ndef asterisk_test(a, args):\n    print(a, *args)\n    print(type(args))\n\nasterisk_test(1, (2,3,4,5,6))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n1 2 3 4 5 6\n<class 'tuple'>\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \na, b, c = ([1, 2], [3, 4], [5, 6])\nprint(a, b, c)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[1, 2] [3, 4] [5, 6]\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \ndata = ([1, 2], [3, 4], [5, 6])\nprint(*data)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[1, 2] [3, 4] [5, 6]\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[17]:\n\n    \nfor data in zip(*([1, 2], [3, 4], [5, 6])):\n    print(sum(data))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n9\n12\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[18]:\n\n    \ndef asterisk_test(a, b, c, d, e=0):\n    print(a, b, c, d, e)\n\ndata = {\"d\":1 , \"c\":2, \"b\":3, \"e\":56 }\nasterisk_test(10, **data)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n10 3 2 1 56\n\n\n\n\n\n\n\n\n\n\n\n2.6. Collections\u00b6tuple, dict \uc5d0 \ub300\ud55c \ud655\uc7a5 \ub370\uc774\ud130 \uad6c\uc870\ub97c \uc81c\uacf5\ud558\ub294 Collections \uc548\uc5d0 \ud3ec\ud568\ub41c \ubaa8\ub4c8\uc744 \uc774\uc6a9\ud558\uc5ec Data Sturcture \uc758 \uae30\ubcf8\n\uac1c\ub150\uc744 \uc774\ud574\ud558\uace0 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[19]:\n\n    \nfrom collections import Counter\n\nc = Counter()                           # a new, empty counter\nc = Counter('gallahad')                 # a new counter from an iterable\nprint(c)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nCounter({'a': 3, 'l': 2, 'g': 1, 'h': 1, 'd': 1})\n\n\n\n\n\n\n\n\n\n\n\n3. \uc120\ud615\ub300\uc218(Linear algebra) \ubb38\uc81c \ud480\uc5b4\ubcf4\uae30\u00b6\ud30c\uc774\uc36c\uc73c\ub85c \uc120\ud615\ub300\uc218\ub97c \ub2e4\ub8e8\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\ubd05\ub2c8\ub2e4\n\n\n\n\n\n\nIn\u00a0[20]:\n\n    \nu = [2, 2]\nv = [2, 3]\nz = [3, 5]\n\nresult = [t for t in zip(u, v, z)]\nprint (result)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[(2, 2, 3), (2, 3, 5)]\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[21]:\n\n    \nmatrix_a = [[3, 6], [4, 5]]\nmatrix_b = [[5, 8], [6, 7]]\nresult = [[sum(row) for row in zip(*t)]\n          for t in zip(matrix_a, matrix_b)]\n\nprint(result)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[[8, 14], [10, 12]]\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[22]:\n\n    \nmatrix_a = [[1, 2, 3], [4, 5, 6]]\nresult = [[element for element in t] for t in zip(*matrix_a)]\n\n[t for t in zip(*matrix_a)]\nprint(result)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[[1, 4], [2, 5], [3, 6]]\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[23]:\n\n    \nmatrix_a = [[1, 1, 2], [2, 1, 1]]\nmatrix_b = [[1, 1], [2, 1], [1, 3]]\nresult = [[sum(a * b for a, b in zip(row_a, column_b))\n          for column_b in zip(*matrix_b)] for row_a in matrix_a]\nprint(result)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[[5, 8], [5, 6]]\n\n\n\n\n\n\n\n\n\n\n\n\uc544\ub798\ub294 \uc120\ud615\ub300\uc218 \uacfc\uc81c\uc5d0 \ub300\ud55c \ucf54\ub4dc\uc785\ub2c8\ub2e4.  vector\uc640 matrix\uc758 \uae30\ucd08\uc801\uc778 \uc5f0\uc0b0\uc744 \uc218\ud589\ud558\ub294 12\uac1c\uc758 \ud568\uc218\ub97c \uc791\uc131\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[24]:\n\n    \n# Problem #1 - vector_size_check\ndef vector_size_check(*vector_variables):\n    return all(len(vector_variables[0]) == len(i) for i in vector_variables)\n\n# \uc2e4\ud589\uacb0\uacfc\nprint(vector_size_check([1,2,3], [2,3,4], [5,6,7])) # Expected value: True\nprint(vector_size_check([1, 3, 4], [4], [6,7])) # Expected value: False\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nTrue\nFalse\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[25]:\n\n    \n# Problem #2 - vector_addition \ndef vector_addition(*vector_variables):\n    return [sum(i) for i in zip(*vector_variables)]\n\n# \uc2e4\ud589\uacb0\uacfc\nprint(vector_addition([1, 3], [2, 4], [6, 7])) # Expected value: [9, 14]\nprint(vector_addition([1, 5], [10, 4], [4, 7])) # Expected value: [15, 16]\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[9, 14]\n[15, 16]\n\n\n\n\n\n\n\n\n\n\n\n\uae40\ub3d9\ud601 hyukster9@gmail.com \ub2d8\uc774 \uc704 \ucf54\ub4dc\uc758 \uc624\ub958\ub97c \uace0\uccd0\uc8fc\uc168\uc2b5\ub2c8\ub2e4. \uac10\uc0ac\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\n\nIn\u00a0[26]:\n\n    \n# Problem #3 - vector_subtraction\ndef vector_subtraction(*vector_variables):\n    if vector_size_check(*vector_variables) == False:\n        raise ArithmeticError\n    return [i[0]*2 - sum(i) for i in zip(*vector_variables)]\n\n# \uc2e4\ud589\uacb0\uacfc\nprint(vector_subtraction([1, 3], [2, 4])) # Expected value: [-1, -1]\nprint(vector_subtraction([1, 5], [10, 4], [4, 7])) # Expected value: [-13, -6]\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[-1, -1]\n[-13, -6]\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[27]:\n\n    \n# Problem #4 - scalar_vector_product (one line code available)\ndef scalar_vector_product(alpha, vector_variable):\n    return [alpha*i for i in vector_variable]\n\n# \uc2e4\ud589\uacb0\uacfc\nprint (scalar_vector_product(5,[1,2,3])) # Expected value: [5, 10, 15]\nprint (scalar_vector_product(3,[2,2])) # Expected value: [6, 6]\nprint (scalar_vector_product(4,[1])) # Expected value: [4]\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[5, 10, 15]\n[6, 6]\n[4]\n\n\n\n\n\n\n\n\n\n\n\n4. \uba38\uc2e0\ub7ec\ub2dd\uc758 \uac1c\uc694\u00b6\uc774\ubc88 \uc7a5\uc5d0\uc11c\ub294 Machine Learning \uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 \uc6a9\uc5b4\uc640 \uac1c\ub150\uc5d0 \ub300\ud574\uc11c \uacf5\ubd80\ud569\ub2c8\ub2e4.\n\nModel: \uc608\uce21\uc744 \uc704\ud55c \uc218\ud559 \uacf5\uc2dd, \ud568\uc218 \ne.g. 1\ucc28 \ubc29\uc815\uc2dd, \ud655\ub960\ubd84\ud3ec, condition rule\n\n\nAlgorithms: \uc5b4\ub5a0\ud55c \ubb38\uc81c\ub97c \ud480\uae30 \uc704\ud55c \uacfc\uc815, Model\uc744 \uc0dd\uc131\ud558\uae30 \uc704\ud55c \uacfc\uc815\nFeature : \uba38\uc2e0\ub7ec\ub2dd\uc5d0\uc11c \ub370\uc774\ud130\uc758 \ud2b9\uc9d5\uc744 \ub098\ud0c0\ub0b4\ub294 \ubcc0\uc218\n\uc5f0\uc18d\ud615(continuous feature): \uc628\ub3c4, \uc18d\ub3c4, \uc77c\ubc18\uc801\uc778 \uc2e4\uc218\uac12\n\uc774\uc0b0\ud615(discrete feature): \uc131\ubcc4, \ub4f1\uc218\n\n\n\n5. \ub370\uc774\ud130 \ub2e4\ub8e8\uae30\u00b65.1. Numpy \uc0ac\uc6a9\ubc95\u00b6\uacfc\ud559 \uacc4\uc0b0\uc6a9 \ud328\ud0a4\uc9c0\uc778 numpy \uc758 \uc5ec\ub7ec \ud2b9\uc9d5\uacfc \uae30\ub2a5, \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub294 \ubc29\ubc95 \ub4f1\uc744 \ubc30\uc6c1\ub2c8\ub2e4.  \uba3c\uc800, \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc624\uace0 array\ub97c \uc0dd\uc131\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[28]:\n\n    \nimport numpy as np\n# array\uc758 \uc0dd\uc131\ntest_matrix = np.array([[1,2,3,4], [1,2,5,8]])\ntest_matrix\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[28]:\n\n\n\n\n\narray([[1, 2, 3, 4],\n       [1, 2, 5, 8]])\n\n\n\n\n\n\n\n\n\n\n\narray\uc758 \ubaa8\uc591 \ud655\uc778\ud558\ub294 \ubc29\ubc95\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[29]:\n\n    \ntest_matrix.shape\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[29]:\n\n\n\n\n\n(2, 4)\n\n\n\n\n\n\n\n\n\n\n\n5.1.1 Array \ubaa8\uc591 \ubc14\uafb8\uae30\u00b6array\uc758 \ubaa8\uc591\uc744 \ud3c9\ud3c9\ud558\uac8c(1D array) \ubc14\uafb8\uae30\n\n\n\n\n\n\nIn\u00a0[30]:\n\n    \nnp.array(test_matrix).reshape(8,)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[30]:\n\n\n\n\n\narray([1, 2, 3, 4, 1, 2, 5, 8])\n\n\n\n\n\n\n\n\n\n\n\n\ub2e4\ub978 \ubc29\ubc95\uc73c\ub85c flatten()\ub97c \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[31]:\n\n    \nnp.array(test_matrix).flatten()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[31]:\n\n\n\n\n\narray([1, 2, 3, 4, 1, 2, 5, 8])\n\n\n\n\n\n\n\n\n\n\n\n5.1.2. slicing\u00b6array\uc758 \ud2b9\uc815 \uc601\uc5ed\ub9cc \uc120\ud0dd\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[32]:\n\n    \ntest_matrix[:,1] # 2\ubc88\uc9f8 column \ubd80\ud130\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[32]:\n\n\n\n\n\narray([2, 2])\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[33]:\n\n    \ntest_matrix[1,:] # 2\ubc88\uc9f8 row \ubd80\ud130\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[33]:\n\n\n\n\n\narray([1, 2, 5, 8])\n\n\n\n\n\n\n\n\n\n\n\n5.1.3. Concatenate\u00b6\uac01\uac01\uc758 array\ub97c \ud558\ub098\ub85c \ud569\uccd0\uc90d\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[34]:\n\n    \na = np.array([[1, 2, 3]])\nb = np.array([[2, 3, 4]])\nnp.concatenate( (a,b) ,axis=0)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[34]:\n\n\n\n\n\narray([[1, 2, 3],\n       [2, 3, 4]])\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[35]:\n\n    \nnp.concatenate( (a,b) ,axis=1)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[35]:\n\n\n\n\n\narray([[1, 2, 3, 2, 3, 4]])\n\n\n\n\n\n\n\n\n\n\n\n5.1.4. \ub370\uc774\ud130 \ud0c0\uc785 \ubc14\uafd4\uc8fc\uae30\u00b6\ub370\uc774\ud130 \ud0c0\uc785\uc744 \ud655\uc778\ud558\uace0 \uc6d0\ud558\ub294 \uac83\uc73c\ub85c \ubc14\uafd4\uc8fc\ub294 \ucf54\ub4dc\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[36]:\n\n    \ntest_matrix.dtype\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[36]:\n\n\n\n\n\ndtype('int32')\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[37]:\n\n    \n# float \ud615\uc73c\ub85c \ubcc0\uacbd\ud574\uc90d\ub2c8\ub2e4.\ntest_matrix_float = test_matrix.astype(float)\ntest_matrix_float.dtype\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[37]:\n\n\n\n\n\ndtype('float64')\n\n\n\n\n\n\n\n\n\n\n\n5.2. Pandas\u00b6\ud30c\uc774\uc36c\uc758 \uc5d1\uc140\uc774\ub77c \ubd88\ub9ac\ub294 Pandas\uc758 \uc5ec\ub7ec \uae30\ub2a5\uacfc \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \uc124\uba85\ud569\ub2c8\ub2e4. pandas\ub294 series\uc640 dataframe\uc774\ub77c\ub294 \ud615\ud0dc\ub85c \ub370\uc774\ud130\ub97c \ucc98\ub9ac\ud569\ub2c8\ub2e4.\n\nseries : 1\ucc28\uc6d0 \ubc30\uc5f4\ndataframe : 2\ucc28\uc6d0 \ubc30\uc5f4\n\n5.2.1. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\u00b6pandas\ub85c \uc678\ubd80\ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc624\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[38]:\n\n    \nimport pandas as pd\n\ndata_url = 'https://www.shanelynn.ie/wp-content/uploads/2015/06/phone_data.csv'\ndf = pd.read_csv(data_url, index_col = 0)\ndf.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[38]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      date\n      duration\n      item\n      month\n      network\n      network_type\n    \n    \n      index\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      825\n      13/03/15 00:38\n      1.000\n      sms\n      2015-03\n      world\n      world\n    \n    \n      826\n      13/03/15 00:39\n      1.000\n      sms\n      2015-03\n      Vodafone\n      mobile\n    \n    \n      827\n      13/03/15 06:58\n      34.429\n      data\n      2015-03\n      data\n      data\n    \n    \n      828\n      14/03/15 00:13\n      1.000\n      sms\n      2015-03\n      world\n      world\n    \n    \n      829\n      14/03/15 00:16\n      1.000\n      sms\n      2015-03\n      world\n      world\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ucd1d 829\uac1c\uc758 \ub370\uc774\ud130\ub97c \uac00\uc838\uc654\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\n\n5.2.2. \ub370\uc774\ud130 \uc120\ud0dd\ud558\uae30\u00b6Index \uc815\ubcf4\ub85c \ub370\uc774\ud130 \uc120\ud0dd\ubc95\u00b6\n\n\n\n\n\nIn\u00a0[39]:\n\n    \ndf[:3] # \uc704\uc5d0\uc11c 3\ubc88\uc9f8\uae4c\uc9c0\uc758 \ub370\uc774\ud130 \uc120\ud0dd\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[39]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      date\n      duration\n      item\n      month\n      network\n      network_type\n    \n    \n      index\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      0\n      15/10/14 06:58\n      34.429\n      data\n      2014-11\n      data\n      data\n    \n    \n      1\n      15/10/14 06:58\n      13.000\n      call\n      2014-11\n      Vodafone\n      mobile\n    \n    \n      2\n      15/10/14 14:46\n      23.000\n      call\n      2014-11\n      Meteor\n      mobile\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\nColumn \uc815\ubcf4\ub85c \ub370\uc774\ud130 \uc120\ud0dd\ubc95\u00b6duration\uacfc network column\uc758 \uac12\ub9cc \uc120\ud0dd\ud558\uace0, \uc704\uc5d0\uc11c\ubd80\ud130 3\uac1c\uc758 \uac12\ub9cc \uc120\ud0dd\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[40]:\n\n    \ndf[['duration','network']][:3]\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[40]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      duration\n      network\n    \n    \n      index\n      \n      \n    \n  \n  \n    \n      0\n      34.429\n      data\n    \n    \n      1\n      13.000\n      Vodafone\n    \n    \n      2\n      23.000\n      Meteor\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n5.2.3. \ub370\uc774\ud130 \uc8fc\ubb34\ub974\uae30\u00b6dateutil\ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\uba74 \ub0a0\uc9dc\ub370\uc774\ud130\ub97c \uc27d\uac8c \ud30c\uc2f1\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[41]:\n\n    \nimport dateutil\ndf['date'] = df['date'].apply(dateutil.parser.parse, dayfirst=True)\ndf.head()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[41]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      date\n      duration\n      item\n      month\n      network\n      network_type\n    \n    \n      index\n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      0\n      2014-10-15 06:58:00\n      34.429\n      data\n      2014-11\n      data\n      data\n    \n    \n      1\n      2014-10-15 06:58:00\n      13.000\n      call\n      2014-11\n      Vodafone\n      mobile\n    \n    \n      2\n      2014-10-15 14:46:00\n      23.000\n      call\n      2014-11\n      Meteor\n      mobile\n    \n    \n      3\n      2014-10-15 14:48:00\n      4.000\n      call\n      2014-11\n      Tesco\n      mobile\n    \n    \n      4\n      2014-10-15 17:27:00\n      4.000\n      call\n      2014-11\n      Tesco\n      mobile\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub2ec\ubcc4 \ucd1d \ud1b5\ud654\ub7c9\uc744 \uacc4\uc0b0\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[42]:\n\n    \ndf.groupby('month')['duration'].sum()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[42]:\n\n\n\n\n\nmonth\n2014-11    26639.441\n2014-12    14641.870\n2015-01    18223.299\n2015-02    15522.299\n2015-03    22750.441\nName: duration, dtype: float64\n\n\n\n\n\n\n\n\n\n\n\n\ud53c\ubd07\ud14c\uc774\ube14 \uae30\ub2a5\uc744 \uc774\uc6a9\ud574\uc11c\ub3c4 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[43]:\n\n    \ndf.pivot_table(['duration'], index = df.month, aggfunc='sum')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[43]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      duration\n    \n    \n      month\n      \n    \n  \n  \n    \n      2014-11\n      26639.441\n    \n    \n      2014-12\n      14641.870\n    \n    \n      2015-01\n      18223.299\n    \n    \n      2015-02\n      15522.299\n    \n    \n      2015-03\n      22750.441\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n5.2.4.  NA \uac12 \ucc98\ub9ac\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[44]:\n\n    \nraw_data = {'first_name': ['Jason', np.nan, 'Tina', 'Jake', 'Amy'],\n        'last_name': ['Miller', np.nan, 'Ali', 'Milner', 'Cooze'],\n        'age': [42, np.nan, 36, 24, 73],\n        'sex': ['m', np.nan, 'f', 'm', 'f'],\n        'preTestScore': [4, np.nan, np.nan, 2, 3],\n        'postTestScore': [25, np.nan, np.nan, 62, 70]}\ndf = pd.DataFrame(raw_data, columns = ['first_name', 'last_name', 'age', 'sex', 'preTestScore', 'postTestScore'])\ndf\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[44]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      first_name\n      last_name\n      age\n      sex\n      preTestScore\n      postTestScore\n    \n  \n  \n    \n      0\n      Jason\n      Miller\n      42.0\n      m\n      4.0\n      25.0\n    \n    \n      1\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2\n      Tina\n      Ali\n      36.0\n      f\n      NaN\n      NaN\n    \n    \n      3\n      Jake\n      Milner\n      24.0\n      m\n      2.0\n      62.0\n    \n    \n      4\n      Amy\n      Cooze\n      73.0\n      f\n      3.0\n      70.0\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[45]:\n\n    \n# NA \uac12\uc774 \ud558\ub098\ub77c\ub3c4 \uc788\ub294 \ub370\uc774\ud130\ub294 \uc9c0\uc6b0\uae30\ndf_no_missing = df.dropna(axis=0, thresh=6)\ndf_no_missing\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[45]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      first_name\n      last_name\n      age\n      sex\n      preTestScore\n      postTestScore\n    \n  \n  \n    \n      0\n      Jason\n      Miller\n      42.0\n      m\n      4.0\n      25.0\n    \n    \n      3\n      Jake\n      Milner\n      24.0\n      m\n      2.0\n      62.0\n    \n    \n      4\n      Amy\n      Cooze\n      73.0\n      f\n      3.0\n      70.0\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[46]:\n\n    \n# \ubaa8\ub4e0 \uac12\uc774 NA\uc778 \ub370\uc774\ud130 \uc9c0\uc6b0\uae30\ndf_cleaned = df.dropna(how='all')\ndf_cleaned\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[46]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      first_name\n      last_name\n      age\n      sex\n      preTestScore\n      postTestScore\n    \n  \n  \n    \n      0\n      Jason\n      Miller\n      42.0\n      m\n      4.0\n      25.0\n    \n    \n      2\n      Tina\n      Ali\n      36.0\n      f\n      NaN\n      NaN\n    \n    \n      3\n      Jake\n      Milner\n      24.0\n      m\n      2.0\n      62.0\n    \n    \n      4\n      Amy\n      Cooze\n      73.0\n      f\n      3.0\n      70.0\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[47]:\n\n    \n# NA\uac12\uc744 0\uc73c\ub85c \ubc14\uafb8\uae30\ndf.fillna(0)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[47]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      first_name\n      last_name\n      age\n      sex\n      preTestScore\n      postTestScore\n    \n  \n  \n    \n      0\n      Jason\n      Miller\n      42.0\n      m\n      4.0\n      25.0\n    \n    \n      1\n      0\n      0\n      0.0\n      0\n      0.0\n      0.0\n    \n    \n      2\n      Tina\n      Ali\n      36.0\n      f\n      0.0\n      0.0\n    \n    \n      3\n      Jake\n      Milner\n      24.0\n      m\n      2.0\n      62.0\n    \n    \n      4\n      Amy\n      Cooze\n      73.0\n      f\n      3.0\n      70.0\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n5.2.5. One-hot encoding\u00b6get_dummies()\ud568\uc218\ub97c \uc774\uc6a9\ud574 one-hot encoding\uc744 \ud574\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[48]:\n\n    \n# \uc131\ubcc4 \uceec\ub7fc\uc744 one-hot-encoding \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\npd.concat([df,pd.get_dummies(df['sex'], prefix='sex')], axis = 1)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[48]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      first_name\n      last_name\n      age\n      sex\n      preTestScore\n      postTestScore\n      sex_f\n      sex_m\n    \n  \n  \n    \n      0\n      Jason\n      Miller\n      42.0\n      m\n      4.0\n      25.0\n      0\n      1\n    \n    \n      1\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      0\n      0\n    \n    \n      2\n      Tina\n      Ali\n      36.0\n      f\n      NaN\n      NaN\n      1\n      0\n    \n    \n      3\n      Jake\n      Milner\n      24.0\n      m\n      2.0\n      62.0\n      0\n      1\n    \n    \n      4\n      Amy\n      Cooze\n      73.0\n      f\n      3.0\n      70.0\n      1\n      0\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n5.2.6. feature_scaling\u00b6pandas\ub85c \uad6c\ud604\ud558\ub294 \ubc29\ubc95\ub3c4 \uc788\uc9c0\ub9cc, sklearn\uc758 preprocessing \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\ub294\uac83\uc774 \ubcf4\ub2e4 \ud3b8\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[49]:\n\n    \nfrom sklearn import preprocessing\ndf = df.fillna(0) # NA\uac12\uc744 \uc81c\uac70\ud558\uae30 \uc704\ud574\nminmax_scaler = preprocessing.MinMaxScaler().fit(df[['preTestScore','postTestScore']])\ndf[['preTestScore','postTestScore']] = minmax_scaler.transform(df[['preTestScore','postTestScore']])\ndf\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[49]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      first_name\n      last_name\n      age\n      sex\n      preTestScore\n      postTestScore\n    \n  \n  \n    \n      0\n      Jason\n      Miller\n      42.0\n      m\n      1.00\n      0.357143\n    \n    \n      1\n      0\n      0\n      0.0\n      0\n      0.00\n      0.000000\n    \n    \n      2\n      Tina\n      Ali\n      36.0\n      f\n      0.00\n      0.000000\n    \n    \n      3\n      Jake\n      Milner\n      24.0\n      m\n      0.50\n      0.885714\n    \n    \n      4\n      Amy\n      Cooze\n      73.0\n      f\n      0.75\n      1.000000\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\npreTestScore, postTestScore\uc758 \uac12\uc774 0~1\uc0ac\uc774\uc758 \uac12\uc73c\ub85c \uc815\uaddc\ud654(normalization)\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n6. Numpy \uacfc\uc81c\ud480\uc774\u00b6\uc219\uc81c\ub85c \ub098\uc628 \uacfc\uc81c \uc77c\ubd80\ub97c \ud480\uc5b4\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[50]:\n\n    \nimport numpy as np\ntest_matrix = np.array([[1,2,3,4], [1,2,5,8]])\n\ndef change_shape_of_ndarray(X, n_row):\n    if n_row == 1:\n        return X.flatten()\n    else:\n        return X.reshape(n_row, -1)\n\nchange_shape_of_ndarray(test_matrix, 1)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[50]:\n\n\n\n\n\narray([1, 2, 3, 4, 1, 2, 5, 8])\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[51]:\n\n    \ntest_matrix = np.array([1,2,3,4])\n\ndef save_ndarray(X, filename=\"test.npy\"):\n    with open(filename, 'wb') as f:\n        np.save(X, f)\n\ndef boolean_index(X, condition):\n    condition = eval(str('X') + condition )\n    return np.where(condition)\n\nboolean_index(test_matrix, '>2')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[51]:\n\n\n\n\n\n(array([2, 3], dtype=int64),)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[52]:\n\n    \ntest_matrix = np.array([1,2,3,4])\ndef find_nearest_value(X, target_value):\n    return X[np.argmin(np.abs(X - target_value))]\n\nfind_nearest_value(test_matrix, 0.1)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[52]:\n\n\n\n\n\n1\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[53]:\n\n    \ntest_matrix = np.array([1,2,3,4])\ndef get_n_largest_values(X, n):\n    return X[np.argsort(X[::-1])[:n]]\nget_n_largest_values(test_matrix, 2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[53]:\n\n\n\n\n\narray([4, 3])\n\n\n\n\n\n\n\n\n\n\n\n7. \uc120\ud615\ud68c\uadc0(Linear regression)\u00b6\uc885\uc18d \ubcc0\uc218 y\uc640 \ud55c \uac1c \uc774\uc0c1\uc758 \ub3c5\ub9bd \ubcc0\uc218 (\ub610\ub294 \uc124\uba85 \ubcc0\uc218) X\uc640\uc758 \uc120\ud615 \uc0c1\uad00 \uad00\uacc4\ub97c \ubaa8\ub378\ub9c1\ud558\ub294 \ud68c\uadc0\ubd84\uc11d \uae30\ubc95 --wikipedia\n\n\uc55e\uc73c\ub85c scikit-learn \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uac00\uc9c0\uace0 \uba38\uc2e0\ub7ec\ub2dd\uc744 \uc9c4\ud589\ud560 \uac83\uc785\ub2c8\ub2e4. \uba38\uc2e0\ub7ec\ub2dd\uc744 \ubd84\ub958\ud558\ub294 \uae30\uc900\uc740 \uc5ec\ub7ec\uac00\uc9c0\uac00 \uc788\uc9c0\ub9cc, \uc5ec\uae30\uc11c\ub294 \ub2e4\uc74c 4\uac00\uc9c0\ub85c \ubd84\ub958 \ud569\ub2c8\ub2e4.\n\nGradient descent based learning \nProbability theory based learning\nInformation theory based learning\nDistance similarity based learning\n\n\uba38\uc2e0\ub7ec\ub2dd\uc758 \ubaa9\uc801\uc740 \uc544\ub798 \uac19\uc2b5\ub2c8\ub2e4,\n\n\uc2e4\uc81c \uac12\uacfc \ud559\uc2b5\ub41c \ubaa8\ub378 \uc608\uce21\uce58\uc758 \uc624\ucc28\ub97c \ucd5c\uc18c\ud654\n\ubaa8\ub378\uc758 \ucd5c\uc801 weight\uac12 \ucc3e\uae30\n\n\uc120\ud615\ud68c\uadc0\uc5d0\uc11c \uc624\ucc28\ub97c \uce21\uc815\ud558\ub294 \ubc29\ubc95\uc73c\ub85c Squared Error\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c Squared Error\ub97c \ucd5c\uc18c\ud654 \ud560 \uc218 \uc788\ub294 weight\uac12\uc744 \ucc3e\ub294 \uac83\uc774 \ubaa9\ud45c\uac00 \ub429\ub2c8\ub2e4.\n7.1. Cost function\u00b6cost function \uc740 \uc2e4\uc81c \uac12\uacfc \uc608\uce21\ub41c \uac12\uc758 \ucc28\uc774\ub97c \ub098\ud0c0\ub0b8 \uc218\uc2dd\uc785\ub2c8\ub2e4.  cost functon\uc758 \ucd5c\uc18c\uac12\uc744 \ucc3e\uc73c\uba74 \ucd5c\uc801 weights\uac12\uc744 \ucc3e\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798 \ub450\uac00\uc9c0 \ubc29\ubc95\uc744 \uc54c\uc544 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\nnormal equation\ngradient descent\n\n7.2. Normal equation\u00b6\ud2b9\uc9d5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\nXTX\uc758 \uc5ed\ud589\ub82c\uc774 \uc874\uc7ac\ud560 \ub54c \uc0ac\uc6a9\nhyper parameter\uac00 \uc5c6\uc74c\nFeature\uac00 \ub9ce\uc73c\uba74 \uacc4\uc0b0 \uc18d\ub3c4\uac00 \ub290\ub824\uc9d0\n\nHyper parameter\u00b6\uc0ac\uc6a9\uc790\uac00 \uc784\uc758\ub85c \uc815\ud574\uc918\uc57c\ud558\ub294 \ubcc0\uc218\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74 \ud559\uc2b5\ub960(Learning rate)\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ud559\uc2b5\ub960\uc774 \ub108\ubb34 \ub0ae\uac8c \uc124\uc815: \ud559\uc2b5 \uc2dc\uac04\uc774 \uc624\ub798 \uac78\ub9bc\n\ud559\uc2b5\ub960\uc744 \ub108\ubb34 \ub192\uac8c \uc124\uc815: \uc218\ub834\ud558\uc9c0 \ubabb\ud558\ub294 \uacbd\uc6b0\uac00 \uc0dd\uae40\n\n\uc544\ub798\ub294 \uc2e4\uc2b5 \ucf54\ub4dc\uc785\ub2c8\ub2e4.\n7.2.1 \uc2e4\uc2b5 \ucf54\ub4dc\u00b6\n\n\n\n\n\nIn\u00a0[54]:\n\n    \nimport pandas as pd\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n#  LOAD DATASET - simple variable\ndf_train = pd.read_csv(\"./data/normal_eq_train.csv\")\ndf_test  =  pd.read_csv(\"./data/normal_eq_test.csv\")\n# df_test.head()\nX_train = df_train[\"x\"].values.reshape(-1,1)\nX_test = df_test[\"x\"].values.reshape(-1,1)\ny_train = df_train[\"y\"].values\ny_test = df_test[\"y\"].values\ndf_train.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[54]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      x\n      y\n    \n  \n  \n    \n      695\n      58\n      58.595006\n    \n    \n      696\n      93\n      94.625094\n    \n    \n      697\n      82\n      88.603770\n    \n    \n      698\n      66\n      63.648685\n    \n    \n      699\n      97\n      94.975266\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub370\uc774\ud130\ub97c \uc2dc\uac01\ud654\ud558\uba74 \uc544\ub798 \uadf8\ub9bc\uacfc \uac19\uc2b5\ub2c8\ub2e4. \uba85\ud655\ud558\uac8c \uc120\ud615\uc131(Linearity)\uc774 \ubcf4\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[55]:\n\n    \nplt.scatter(X_train,y_train, alpha = 0.3)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[55]:\n\n\n\n\n\n<matplotlib.collections.PathCollection at 0x136ae470>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ubaa8\ub378 \ub9cc\ub4e4\uae30\u00b6sklearn\uc758 \uc120\ud615\ud68c\uadc0 \ubaa8\ub378\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[56]:\n\n    \nfrom sklearn import linear_model\nfrom sklearn.metrics import mean_squared_error, r2_score\n\nlr = linear_model.LinearRegression(normalize=False) # false \uc774\uc720?\nlr.fit(X_train, y_train)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[56]:\n\n\n\n\n\nLinearRegression(copy_X=True, fit_intercept=True, n_jobs=None,\n         normalize=False)\n\n\n\n\n\n\n\n\n\n\n\n\uc608\uce21\ud558\uae30 \ud558\uace0 \uc2dc\uac01\ud654\ud558\uae30\u00b6\ud14c\uc2a4\ud2b8 \uac12(x)\uc744 \ub123\uc5b4 \uc608\uce21 \uac12(y)\ub97c \uad6c\ud558\uace0 \uc2dc\uac01\ud654 \ud574\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[57]:\n\n    \ny_pred = lr.predict(X_test)\n\n# The coefficients\nprint('Coefficients: {:02.3f} '.format(lr.coef_[0]))\n# The mean squared error\nprint(\"Mean squared error: {:02.3f}\".format(mean_squared_error(y_test, y_pred)))\n# Explained variance score: 1 is perfect prediction\nprint('Variance score: {:02.3f}'.format(r2_score(y_test, y_pred)))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nCoefficients: 1.001 \nMean squared error: 9.435\nVariance score: 0.989\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[58]:\n\n    \n# Plot outputs\nplt.scatter(X_test, y_test,  alpha = 0.3)\nplt.plot(X_test, y_pred, color='red')\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.3. Gradient Descent\u00b6Gradient Descent \uc54c\uace0\ub9ac\uc998\uc73c\ub85c Linear Regression \uc744 \uad6c\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574 \uacf5\ubd80\ud569\ub2c8\ub2e4\n7.3.1. Linear regression with Gradient Descent\u00b6\n\uc784\uc758\uc758 theta0, theta1 \uac12\uc73c\ub85c \ucd08\uae30\ud654\nCost function \uc774 \ucd5c\uc18c\ud654 \ub420 \ub54c\uae4c\uc9c0 \ud559\uc2b5\nLearning rate, Iteration \ud69f\uc218 \ub4f1 hyper parameter \ud544\uc694\nFeature\uac00 \ub9ce\uc73c\uba74 Normal equation\uc5d0 \ube44\ud574 \uc0c1\ub300\uc801\uc73c\ub85c \ube60\ub984\n\ub2e4\ub9cc, \ucd5c\uc801\uac12\uc5d0 \uc218\ub834\ud558\uc9c0 \uc54a\uc744 \uc218\ub3c4 \uc788\uc74c\n\n\uc608\uc2dc \ucf54\ub4dc\u00b6\uc0ac\uc6a9\ud55c \ub370\uc774\ud130\ub294 \uc2a4\uc6e8\ub374 \uc790\ub3d9\ucc28 \ubcf4\ud5d8 \uc785\ub2c8\ub2e4. x\ub97c \ud69f\uc218(Claims) \uac12\uc744 \ub450\uace0 y\uc758 \uac12\uc740 \uc9c0\ubd88(Payment)\uc5f4\ub85c \uc9c0\uc815\ud574\uc11c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[59]:\n\n    \n# LOAD DATASET\ndf = pd.read_csv(\"./data/SwedishMotorInsurance.csv\")\ndf.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[59]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Kilometres\n      Zone\n      Bonus\n      Make\n      Insured\n      Claims\n      Payment\n    \n  \n  \n    \n      2177\n      5\n      7\n      7\n      5\n      8.74\n      0\n      0\n    \n    \n      2178\n      5\n      7\n      7\n      6\n      16.61\n      0\n      0\n    \n    \n      2179\n      5\n      7\n      7\n      7\n      2.83\n      1\n      966\n    \n    \n      2180\n      5\n      7\n      7\n      8\n      13.06\n      0\n      0\n    \n    \n      2181\n      5\n      7\n      7\n      9\n      384.87\n      16\n      112252\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[60]:\n\n    \n# X = number of claims\n# Y = total payment for all the claims in thousands of Swedish Kronor\nraw_X = df['Claims'].values.reshape(-1, 1)\ny = df[\"Payment\"].values/10000\nplt.plot(raw_X,y, 'o', alpha=0.5)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[60]:\n\n\n\n\n\n[<matplotlib.lines.Line2D at 0x13a35cc0>]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[61]:\n\n    \nraw_X[:5], y[:5]\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[61]:\n\n\n\n\n\n(array([[108],\n        [ 19],\n        [ 13],\n        [124],\n        [ 40]], dtype=int64),\n array([39.2491,  4.6221,  1.5694, 42.2201, 11.9373]))\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[62]:\n\n    \nnp.ones((len(raw_X),1))[:3]\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[62]:\n\n\n\n\n\narray([[1.],\n       [1.],\n       [1.]])\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[63]:\n\n    \nX = np.concatenate( (np.ones((len(raw_X),1)), raw_X ), axis=1)\nX[:5]\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[63]:\n\n\n\n\n\narray([[  1., 108.],\n       [  1.,  19.],\n       [  1.,  13.],\n       [  1., 124.],\n       [  1.,  40.]])\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[64]:\n\n    \nw = np.random.normal((0,4))  # \ucd08\uae30 weight\uac12\uc744 \uc784\uc758\ub85c \uc815\ud574\uc90d\ub2c8\ub2e4. \nw\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[64]:\n\n\n\n\n\narray([-0.00891921,  4.46857823])\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[65]:\n\n    \ny_predict = np.dot(X, w)\nplt.plot(raw_X,y,\"o\", alpha=0.5)\nplt.plot(raw_X,y_predict)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[65]:\n\n\n\n\n\n[<matplotlib.lines.Line2D at 0x13a78c50>]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[66]:\n\n    \n# HYPOTHESIS AND COST FUNCTION\ndef hypothesis_function(X, theta):\n    return X.dot(theta)\ndef cost_function(h, y):\n    return (1/(2*len(y))) * np.sum((h-y)**2)\nh = hypothesis_function(X,w)\ncost_function(h, y)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[66]:\n\n\n\n\n\n341210.1358302579\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[67]:\n\n    \n# GRADIENT DESCENT\ndef gradient_descent(X, y, w, alpha, iterations):\n    theta = w\n    m = len(y) \n    theta_list = [theta.tolist()]\n    cost = cost_function(hypothesis_function(X, theta), y)\n    cost_list = [cost]\n    for i in range(iterations):\n        t0 = theta[0] - (alpha / m) * np.sum(np.dot(X, theta) - y)\n        t1 = theta[1] - (alpha / m) * np.sum((np.dot(X, theta) - y) * X[:,1])\n        theta = np.array([t0, t1])        \n        if i % 10== 0:\n            theta_list.append(theta.tolist())\n            cost = cost_function(hypothesis_function(X, theta), y)\n            cost_list.append(cost)\n    return theta, theta_list, cost_list\n# DO Linear regression with GD\niterations = 70 # \ud559\uc2b5\ud69f\uc218\nalpha = 0.00001 #\ud559\uc2b5\ub960\n\ntheta, theta_list, cost_list = gradient_descent(X, y, w, alpha, iterations)\ncost = cost_function(hypothesis_function(X, theta), y)\n\nprint(\"theta:\", theta)\nprint('cost:', cost_function(hypothesis_function(X, theta), y))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\ntheta: [-0.01387632  0.50162216]\ncost: 47.51860200002646\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[68]:\n\n    \ntheta_list[:10]\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[68]:\n\n\n\n\n\n[[-0.008919209046962171, 4.468578233162438],\n [-0.010979772463144966, 2.748558651973508],\n [-0.013688742102085531, 0.5092589839807392],\n [-0.013728097491510558, 0.5016479365747901],\n [-0.01375837638747473, 0.5016221036915547],\n [-0.013788621606274266, 0.50162205194611],\n [-0.013818863883511206, 0.5016220878239617],\n [-0.013849103323916964, 0.5016221239962518]]\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[69]:\n\n    \ntheta_list = np.array(theta_list)\ncost_list\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[69]:\n\n\n\n\n\n[341210.1358302579,\n 109500.67530520404,\n 48.783091900116084,\n 47.518661422618486,\n 47.518637666285954,\n 47.518628518478,\n 47.518619372554696,\n 47.51861022834695]\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[70]:\n\n    \ny_predict_step= np.dot(X, theta_list.transpose())\ny_predict_step\nplt.plot(raw_X,y,\"o\", alpha=0.3)\nfor i in range (0,len(cost_list)):\n    plt.plot(raw_X,y_predict_step[:,i], label='Line %d'%i)\n\nplt.legend(bbox_to_anchor=(1.05, 1), loc=2, borderaxespad=0.)\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud559\uc2b5\uc774 \uc9c4\ud589 \ub420 \uc218\ub85d(line\uc774 \ub298\uc5b4\ub0a0\uc218\ub85d) \uc2e4\uc81c \ub370\uc774\ud130\uc640 \uac00\uae4c\uc6cc \uc9c0\ub294\uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[71]:\n\n    \nplt.plot(range(len(cost_list)), cost_list);\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ncost function\uc758 \uac12\uc774 2\ubc88\uc9f8 \ud559\uc2b5\ub54c\ubd80\ud130 0\uc73c\ub85c \ucd5c\uc18c\uac12\uc73c\ub85c \uc218\ub834\ud558\ub294 \uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n7.4. Multivariate Linear Regression\u00b6\ud55c\uac1c \uc774\uc0c1\uc758 feature\ub85c \uad6c\uc131\ub41c \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud560\ub54c \uc0ac\uc6a9\ud558\ub294 Multivariate Linear Regression \uc744 \uad6c\ud604\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574 \uacf5\ubd80\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[72]:\n\n    \nfrom  sklearn.datasets import load_boston\nimport matplotlib.pyplot as plt\nimport numpy as np\nimport random\n%matplotlib inline\n\ndef gen_data(numPoints, bias, variance):\n    x = np.zeros(shape=(numPoints, 3))\n    y = np.zeros(shape=numPoints)\n    # basically a straight line\n    for i in range(0, numPoints):\n        # bias feature\n        x[i][0] = random.uniform(0, 1) * variance + i\n        x[i][1] = random.uniform(0, 1) * variance + i\n        x[i][2] = 1\n        # our target variable\n        y[i] = (i+bias) + random.uniform(0, 1) * variance + 500\n    return x, y\n\n# gen 100 points with a bias of 25 and 10 variance as a bit of noise\nx, y = gen_data(100, 25, 10)\n\nplt.plot(x[:, 0:1], \"ro\")\nplt.plot(y, \"bo\")\n\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[73]:\n\n    \nfrom mpl_toolkits.mplot3d import Axes3D\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter(x[:,0], x[:,1], y)\n\nax.set_xlabel('X0 Label')\nax.set_ylabel('X1 Label')\nax.set_zlabel('Y Label')\n\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[74]:\n\n    \ndef compute_cost(x, y, theta):\n    '''\n    Comput cost for linear regression\n    '''\n    #Number of training samples\n    m = y.size\n    predictions = x.dot(theta)\n    sqErrors = (predictions - y)\n\n    J = (1.0 / (2 * m)) * sqErrors.T.dot(sqErrors)\n    return J\n\ndef minimize_gradient(x, y, theta, iterations=100000, alpha=0.01):\n    m = y.size\n    cost_history = []\n    theta_history = []\n    \n    for _ in range(iterations):        \n        predictions = x.dot(theta)\n        \n        for i in range(theta.size):\n            partial_marginal = x[:, i]\n            errors_xi = (predictions - y) * partial_marginal\n            theta[i] = theta[i] - alpha * (1.0 / m) * errors_xi.sum()\n        \n        if _ % 1000 == 0:\n            theta_history.append(theta)\n            cost_history.append(compute_cost(x, y, theta))\n\n    return theta, np.array(cost_history), np.array(theta_history)\n\ntheta_initial = np.ones(3)\ntheta, cost_history, theta_history = minimize_gradient(\n        x, y,theta_initial, 300000, 0.0001)\nprint(\"theta\", theta)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\ntheta [5.12894737e-01 5.11459989e-01 5.23264450e+02]\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[75]:\n\n    \nfrom sklearn import  linear_model\n\nregr = linear_model.LinearRegression()\nregr.fit(x[:,:2], y)\n\n# # The coefficients\nprint('Coefficients: ', regr.coef_)\nprint('intercept: ', regr.intercept_)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nCoefficients:  [0.50658951 0.50525441]\nintercept:  524.1326900611566\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[76]:\n\n    \nprint(np.dot(theta, x[10]))\nprint(regr.predict(x[10,:2].reshape(1,2)))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n537.8284506612534\n[538.51880902]\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[77]:\n\n    \nfrom mpl_toolkits.mplot3d import Axes3D\nfrom matplotlib import cm\nimport matplotlib.pyplot as plt\nimport numpy as np\n\nfig = plt.figure()\nax = fig.add_subplot(111, projection='3d')\nax.scatter3D(theta_history[:,0],theta_history[:,1], cost_history, zdir=\"z\")\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[78]:\n\n    \nplt.plot(cost_history)\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n100\ubc88\uc9f8 \ud559\uc2b5\uc774\ud6c4 cost function\uc774 \uc218\ub834\ud558\ub294\uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n7.5. \uc131\ub2a5 \uce21\uc815\ubc95(Performance measure)\u00b6\ub9cc\ub4e4\uc5b4\uc9c4 \ubaa8\ub378\uc758 \ud3c9\uac00\ub294 \uc5b4\ub5bb\uac8c \ud560 \uac83\uc778\uac00? \ub97c \ud310\ub2e8\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud3c9\uac00\ud560\uc218\uc788\ub294 \uc218\uce58\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \uc774\uc81c \uc6b0\ub9ac\uac00 \ub9cc\ub4e0 \ubaa8\ub378\uc744 \ud3c9\uac00\ud558\uae30 \uc704\ud574\uc11c \uc0ac\uc6a9\ub418\ub294 measure \uc5d0 \ub300\ud55c \uac1c\ub150\uacfc, scikit-learn \uc744 \uc0ac\uc6a9\ud558\uc5ec \uc5b4\ub5bb\uac8c \ucf54\ub4dc\ub97c \uc791\uc131\ud558\ub294 \uc9c0\uc5d0 \ub300\ud574 \uacf5\ubd80\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[79]:\n\n    \n# Mean Absolute Error(MAE)\nfrom sklearn.metrics import median_absolute_error\n\ny_true = [3, -0.5, 2, 7]\ny_pred = [2.5, 0.0, 2, 8]\n\nmedian_absolute_error(y_true, y_pred)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[79]:\n\n\n\n\n\n0.5\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[80]:\n\n    \n# Root Mean Squared Error(RMSE)\nfrom sklearn.metrics import mean_squared_error\n\ny_true = [3, -0.5, 2, 7]\ny_pred = [2.5, 0.0, 2, 8]\n\nmean_squared_error(y_true, y_pred)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[80]:\n\n\n\n\n\n0.375\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[81]:\n\n    \n# R squared\nfrom sklearn.metrics import r2_score\n\ny_true = [3, -0.5, 2, 7]\ny_pred = [2.5, 0.0, 2, 8]\n\nr2_score(y_true, y_pred)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[81]:\n\n\n\n\n\n0.9486081370449679\n\n\n\n\n\n\n\n\n\n\n\n7.6. Stochastic Gradient Descent\u00b6Stochastic Gradient Descent(\uc774\ud558,SGD) \uc54c\uace0\ub9ac\uc998\uc5d0 \ub300\ud55c \uac1c\ub150\uacfc GD\uc640\uc758 \uc7a5\ub2e8\uc810\uc774 \ubb34\uc5c7\uc778\uc9c0\uc5d0 \ub300\ud574 \ube44\uad50\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ubaa8\ub378\uc744 \ud559\uc2b5\uc2dc\ud0ac \uacbd\uc6b0\uc5d0 \ud544\uc218\uc801\uc778 hyper parameter \uc911 epoch\uacfc batch size \uc5d0 \ub300\ud574\uc11c \ud568\uaed8 \uacf5\ubd80\ud569\ub2c8\ub2e4.\n7.6.1. Full-batch gradient descent\u00b6\uc77c\ubc18\uc801\uc73c\ub85c GD = full-batch GD\ub77c\uace0 \uac00\uc815\ud569\ub2c8\ub2e4. \ubaa8\ub4e0 \ub370\uc774\ud130 \uc14b\uc73c\ub85c \ud559\uc2b5\ud558\uace0 \ub2e4\uc74c\uacfc \uac19\uc740 \ud2b9\uc9d5\uc744 \uac00\uc9d1\ub2c8\ub2e4.\n\n\uc5c5\ub370\uc774\ud2b8 \uac10\uc18c -> \uacc4\uc0b0\uc0c1 \ud6a8\uc728\uc801(\uc18d\ub3c4) \uac00\ub2a5\n\uc548\uc815\uc801\uc778 Cost \ud568\uc218 \uc218\ub834\n\uc9c0\uc5ed \ucd5c\uc801\ud654 \uac00\ub2a5\n\uba54\ubaa8\ub9ac \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud560 \uc218 \uc788\uc74c\n\ub300\uaddc\ubaa8 dataset \u00e0 \ubaa8\ub378/\ud30c\ub77c\uba54\ud130 \uc5c5\ub370\uc774\ud2b8\uac00 \ub290\ub824\uc9d0\n\n7.6.2. SGD\u00b6\uc804\uccb4 \ub370\uc774\ud130 \uc14b\uc5d0\uc11c \uc784\uc758\ub85c training sample\uc744 \ubf51\uc740 \ud6c4 \ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ud2b9\uc9d5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n\ube48\ubc88\ud55c \uc5c5\ub370\uc774\ud2b8 \ubaa8\ub378 \uc131\ub2a5 \ubc0f \uac1c\uc120 \uc18d\ub3c4 \ud655\uc778 \uac00\ub2a5\n\uc77c\ubd80 \ubb38\uc81c\uc5d0 \ub300\ud574 \ub354 \ube68\ub9ac \uc218\ub834\n\uc9c0\uc5ed \ucd5c\uc801\ud654 \ud68c\ud53c\uac00\ub2a5\n\ub300\uc6a9\ub7c9 \ub370\uc774\ud130\uc2dc \uc2dc\uac04\uc774 \uc624\ub798\uac78\ub9bc\n\ub354 \uc774\uc0c1 cost\uac00 \uc904\uc5b4\ub4e4\uc9c0 \uc54a\ub294 \uc2dc\uc810\uc758 \ubc1c\uacac\uc774 \uc5b4\ub824\uc6c0\n\n7.6.3. Mini-SGD\u00b6\uc77c\ubd80 \ub370\uc774\ud130 \uc14b\uc5d0\uc11c \ud55c \ubc88\uc5d0 \uc77c\uc815 \ub370\uc774\ud130\ub97c \uc784\uc758\ub85c \ubf51\uc544\uc11c \ud559\uc2b5\ud569\ub2c8\ub2e4.\n\nSGD\uc640 Batch GD\ub97c \ud63c\ud569\ud55c \uae30\ubc95\n\uac00\uc7a5 \uc77c\ubc18\uc801\uc73c\ub85c \ub9ce\uc774 \uc4f0\uc774\ub294 \uae30\ubc95\n\n7.6.4. SGD implementation issues\u00b6SGD\ub97c \uc2e4\uc81c\ub85c \uad6c\ud604\ud588\uc744 \ub54c \uc0dd\uae30\ub294 \uc5ec\ub7ec \uc774\uc288\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\nLearning-rate decay\n\uc77c\uc815\ud55c \uc8fc\uae30\ub85c Learning rate\uc744 \uac10\uc18c\uc2dc\ud0a4\ub294 \ubc29\ubc95\n\ud2b9\uc815 epoch \ub9c8\ub2e4 Learning rate\ub97c \uac10\uc18c\nHyper-parameter \uc124\uc815\uc758 \uc5b4\ub824\uc6c0\n\n\n\uc885\ub8cc\uc870\uac74 \uc124\uc815\nSGD\uacfc\uc815\uc5d0\uc11c \ud2b9\uc815 \uac12\uc774\ud558\ub85c cost function\uc774 \uc904\uc5b4\ub4e4\uc9c0 \uc54a\uc744 \uacbd\uc6b0 GD\ub97c \uba48\ucd94\ub294 \ubc29\ubc95\n\uc131\ub2a5\uc774 \uc88b\uc544\uc9c0\uc9c0 \uc54a\ub294/\ud544\uc694\uc5c6\ub294 \uc5f0\uc0b0\uc744 \ubc29\uc9c0\ud568\n\uc885\ub8cc\uc870\uac74\uc744 \uc124\uc815 : tol > (loss - previous_loss)\ntol\uc740 hyperparameter\ub85c \uc0ac\ub78c\uc774 \uc124\uc815\ud568\n\n\n\n7.6.5. Epoch and batch-size\u00b6\n\uc804\uccb4 \ub370\uc774\ud130\uac00 Training \ub370\uc774\ud130\uc5d0 \ub4e4\uc5b4\uac08 \ub54c \uce74\uc6b4\ud305\nFull-batch\ub97c n\ubc88 \uc2e4\ud589\ud558\uba74 n epoch\nBatch-size \ud55c\ubc88\uc5d0 \ud559\uc2b5\ub418\ub294 \ub370\uc774\ud130\uc758 \uac1c\uc218\n\ucd1d 5,120\uac1c\uc758 Training data\uc5d0 512 batch-size\uba74 \uba87 \ubc88 \ud559\uc2b5\uc744 \ud574\uc57c 1 epoch\uc774 \ub418\ub294\uac00? = 10\ubc88\n\n\n\n\uc608\uc2dc \ucf54\ub4dc\u00b6\n\n\n\n\n\nIn\u00a0[103]:\n\n    \nfrom sklearn.datasets import load_boston\nfrom sklearn.model_selection import train_test_split\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\nboston = load_boston()\ndf = pd.DataFrame(boston.data, columns=boston.feature_names)\nX = df.values\ny = boston.target\n\n# feature scailing\nfrom sklearn.preprocessing import StandardScaler\n\nstd_scaler = StandardScaler()\nstd_scaler.fit(X)\nX_scaled = std_scaler.transform(X)\n\n# \ub370\uc774\ud130 \ub098\ub204\uae30\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.3, random_state=42)\n\n# SGDRegression \ud558\uae30\nfrom sklearn.linear_model import SGDRegressor\n\nlr_SGD = SGDRegressor()\nlr_SGD.fit(X_train, y_train)\n\ny_hat = lr_SGD.predict(X_test)\ny_true = y_test\n\n# \ud3c9\uac00\ud558\uae30\nfrom sklearn.metrics import mean_squared_error\n\nmse = mean_squared_error(y_hat, y_true)\nrmse = np.sqrt((((y_hat - y_true)**2).sum() / len(y_true)))\n# \uc2dc\uac01\ud654\ud558\uae30\nplt.scatter(y_true, y_hat, s=10)\nplt.xlabel(\"Prices: $Y_i$\")\nplt.ylabel(\"Predicted prices: $\\hat{Y}_i$\")\nplt.title(\"Prices vs Predicted prices: $Y_i$ vs $\\hat{Y}_i$\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[103]:\n\n\n\n\n\nText(0.5, 1.0, 'Prices vs Predicted prices: $Y_i$ vs $\\\\hat{Y}_i$')\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n7.7. \uc624\ubc84\ud53c\ud305(Overfitting) \uacfc \uc815\uaddc\ud654(Regularization)\u00b6\uc624\ubc84\ud53c\ud305\uc774\ub780 \ubaa8\ub378\uc774 \ud559\uc2b5\ub370\uc774\ud130\uc5d0 \uacfc\ub2e4 \ucd5c\uc801\ud654\ub418\uc5b4 \uc624\ud788\ub824 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130 \uc608\uce21\uc5d0\ub294 \uc131\ub2a5\uc774 \ub5a8\uc5b4\uc9c0\ub294 \uac83\uc744 \ub9d0\ud569\ub2c8\ub2e4.\nOverfitting \uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud55c \uae30\ubc95\u00b6\n\ub370\uc774\ud130\uc14b\uc744 \ub098\ub204\uc790\n\ub354 \ub9ce\uc740 \ub370\uc774\ud130\ub97c \ud65c\uc6a9\ud55c\ub2e4\nFeature\uc758 \uac1c\uc218\ub97c \uc904\uc778\ub2e4\n\uc801\uc808\ud788 Parameter\ub97c \uc120\uc815\ud55c\ub2e4\nRegularization\n\n\uc704\uc758 \uae30\ubc95 \uc911\uc5d0\uc11c 1\ubc88\uacfc 5\ubc88\uc744 \uad6c\uccb4\uc801\uc73c\ub85c \uc54c\uc544 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n7.7.1. \ub370\uc774\ud130\uc14b\uc744 \ub098\ub204\ub294 \ubc95\u00b6\ud559\uc2b5\ud55c \ub370\uc774\ud130\ub85c \ub2e4\uc2dc \ud14c\uc2a4\ud2b8\ub97c \ud560 \uacbd\uc6b0, \uc624\ubc84\ud53c\ud305\uc774 \ub429\ub2c8\ub2e4. \ud14c\uc2a4\ud2b8\uc6a9 \ub370\uc774\ud130\ub294 \uae30\uc874\uc758 \ud559\uc2b5 \ub370\uc774\ud130\uc640 \ucc28\uc774\uac00 \uc788\uae30 \ub54c\ubb38\uc774\uc8e0. \ubaa8\ub378\uc740 \uc0c8\ub85c\uc6b4 \ub370\uc774\ud130\uac00 \ucc98\ub9ac\uac00\ub2a5\ud558\ub3c4\ub85d generalize\ub418\uc5b4 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c \ud559\uc2b5\uc6a9 \ub370\uc774\ud130\uc640 \ud14c\uc2a4\ud2b8\uc6a9 \ub370\uc774\ud130\ub97c \ubd84\ub9ac\ud558\ub294 \uae30\ubc95\uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uae30\ubc95\uc744 holdout method\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4.\n\n\ud559\uc2b5\uc6a9\uacfc \ud14c\uc2a4\ud2b8\uc6a9 \ub370\uc774\ud130\ub97c \ub098\ub204\ub294 \ube44\uc728\uc740 \ub370\uc774\ud130\uc758 \ud06c\uae30\uc5d0 \ub530\ub77c \ub2e4\ub974\uc9c0\ub9cc \uc77c\ubc18\uc801\uc73c\ub85c Training Data 70%, Test Data 30%\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\nsci-kit learn\uc5d0\uc11c\ub294 \ub370\uc774\ud130\uc14b\uc744 \uac04\ub2e8\ud788 \ub098\ub20c\uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798 \uc608\uc81c \ucf54\ub4dc\ub97c \ud655\uc778\ud558\uc138\uc694.\n\n\n\n\n\n\nIn\u00a0[83]:\n\n    \n# train_test_split\nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)\n\n\n    \n\n\n\n\n\n\n\n7.7.2. Regularization \ubc29\ubc95\u00b6L1 Regularization\uacfc L2 Regularization\uc758 \uac1c\ub150\uacfc, \ub450 Regularization\uc758 \ucc28\uc774\uc810\uc5d0 \ub300\ud558\uc5ec \uacf5\ubd80\ud569\ub2c8\ub2e4.\n\nL1 regularization: \uae30\uc874 Cost function L1(norm) penalty term\uc744 \ucd94\uac00, Lasso \ub77c\uace0 \ud569\ub2c8\ub2e4.\nL2 regularization: \uae30\uc874 Cost function L2(norm) penalty term\uc744 \ucd94\uac00, Ridge \ub77c\uace0 \ud569\ub2c8\ub2e4.\n\n\ucc28\uc774\uc810 \ube44\uad50\u00b6\n\nL1(Lasso)\nL2(Ridge)\n\n\n\n\nUnstable solution\nStable solution\n\n\nAlways on solution\nOnly one solution\n\n\nSparse solution\nNon-sparse solution\n\n\nFeature selection\n\n\n\n\n\uc608\uc2dc \ucf54\ub4dc\u00b6scikit-learn \uc5d0\uc11c linear \ubaa8\ub378 \uc911 SGD Regressor \uc640 Ridge, Lasso \ub97c \uc2e4\uc81c\ub85c \ucf54\ub4dc\ub97c \uc791\uc131\ud558\uace0 \uc2e4\ud589\ud558\uba70 \uac01\uac01\uc758 \ubaa8\ub378\uc774 \uc11c\ub85c \uc5b4\ub5a4 \ud2b9\uc9d5\uc744 \uac00\uc9c0\ub294\uc9c0\uc5d0 \ub300\ud574 \uacf5\ubd80\ud569\ub2c8\ub2e4. scikit-learn\uc758 \uac01 \ubaa8\ub378\uc744 \uc2e4\ud589\ud560 \ub54c \uc9c0\uc815\ud574\uc57c \ud558\ub294 \ud30c\ub77c\ubbf8\ud130\uc5d0 \ub300\ud55c \uc124\uba85\ub3c4 \ud568\uaed8 \uc9c4\ud589\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[84]:\n\n    \n# Linear Regression with Ridge & Lasso regression\nfrom sklearn.linear_model import Lasso, Ridge\nridge = Ridge(fit_intercept=True, alpha=0.5)\nridge.fit(X_train,y_train)\n#lasso = Lasso(fit_intercept=True, alpha=0.5)\ny_hat = ridge.predict(X_test)\ny_true = y_test\nmse = mean_squared_error(y_hat, y_true)\nrmse = np.sqrt((((y_hat - y_true)**2).sum() / len(y_true)))\n# rmse, mse\nplt.scatter(y_true, y_hat, s=10)\nplt.xlabel(\"Prices: $Y_i$\")\nplt.ylabel(\"Predicted prices: $\\hat{Y}_i$\")\nplt.title(\"Prices vs Predicted prices: $Y_i$ vs $\\hat{Y}_i$\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[84]:\n\n\n\n\n\nText(0.5, 1.0, 'Prices vs Predicted prices: $Y_i$ vs $\\\\hat{Y}_i$')\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[85]:\n\n    \nfrom sklearn.model_selection import KFold\n\nprint('Ridge Regression')\nprint('alpha\\t RMSE_train\\t RMSE_10cv\\n')\nalpha = np.linspace(.01,100,10)\nt_rmse = np.array([])\ncv_rmse = np.array([])\n\nfor a in alpha:\n    ridge = Ridge(fit_intercept=True, alpha=a)\n    \n    # computing the RMSE on training data\n    ridge.fit(X_train,y_train)\n    p = ridge.predict(X_test)\n    err = p-y_test\n    total_error = np.dot(err,err)\n    rmse_train = np.sqrt(total_error/len(p))\n\n    # computing RMSE using 10-fold cross validation\n    kf = KFold(10)\n    xval_err = 0\n    for train, test in kf.split(X):\n        ridge.fit(X[train], y[train])\n        p = ridge.predict(X[test])\n        err = p - y[test]\n        xval_err += np.dot(err,err)\n    rmse_10cv = np.sqrt(xval_err/len(X))\n    \n    t_rmse = np.append(t_rmse, [rmse_train])\n    cv_rmse = np.append(cv_rmse, [rmse_10cv])\n    print('{:.3f}\\t {:.4f}\\t\\t {:.4f}'.format(a,rmse_train,rmse_10cv))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nRidge Regression\nalpha\t RMSE_train\t RMSE_10cv\n\n0.010\t 4.6394\t\t 5.8757\n11.120\t 4.7653\t\t 5.7211\n22.230\t 4.7743\t\t 5.6373\n33.340\t 4.7828\t\t 5.5765\n44.450\t 4.7923\t\t 5.5322\n55.560\t 4.8026\t\t 5.4996\n66.670\t 4.8131\t\t 5.4755\n77.780\t 4.8237\t\t 5.4576\n88.890\t 4.8342\t\t 5.4445\n100.000\t 4.8444\t\t 5.4349\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[86]:\n\n    \nplt.plot(alpha, t_rmse, label='RMSE-Train')\nplt.plot(alpha, cv_rmse, label='RMSE_XVal')\nplt.legend( ('RMSE-Train', 'RMSE_XVal') )\nplt.ylabel('RMSE')\nplt.xlabel('Alpha')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[86]:\n\n\n\n\n\nText(0.5, 0, 'Alpha')\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[87]:\n\n    \na = 0.3\nfor name,met in [\n        ('lasso', Lasso(fit_intercept=True, alpha=a)),\n        ('ridge', Ridge(fit_intercept=True, alpha=a)),\n        ]:\n    met.fit(X_train,y_train)\n    # p = np.array([met.predict(xi) for xi in x])\n    p = met.predict(X_test)\n    e = p - y_test\n    total_error = np.dot(e,e)\n    rmse_train = np.sqrt(total_error/len(p))\n\n    kf = KFold(10)\n    err = 0\n    for train,test in kf.split(X):\n        met.fit(X[train],y[train])\n        p = met.predict(X[test])\n        e = p-y[test]\n        err += np.dot(e,e)\n\n    rmse_10cv = np.sqrt(err/len(X))\n    print('Method: %s' %name)\n    print('RMSE on training: %.4f' %rmse_train)\n    print('RMSE on 10-fold CV: %.4f' %rmse_10cv)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nMethod: lasso\nRMSE on training: 4.8154\nRMSE on 10-fold CV: 5.7637\nMethod: ridge\nRMSE on training: 4.6598\nRMSE on 10-fold CV: 5.8487\n\n\n\n\n\n\n\n\n\n\n\n7.8. \ub2e4\ud56d\ud68c\uadc0(Polynomial Regression)\u00b6Regression \ubaa8\ub378 \uc911 X, Y \uc758 \uad00\uacc4\uac00 \uace1\uc120 \ud615\ud0dc(\ube44\uc120\ud615)\uc77c \uacbd\uc6b0\uc5d0 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 Polynomial Regression\uc5d0 \ub300\ud55c \uac1c\ub150\uacfc, scikit-learn\uc744 \ud65c\uc6a9\ud574\uc11c polynomial regression \uc744 \uc218\ud589\ud558\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574\uc11c \uacf5\ubd80\ud569\ub2c8\ub2e4.\n7.8.1. Polynomial Features\u00b61\ucc28 \ubc29\uc815\uc2dd\uc744 \uace0\ucc28\ub2e4\ud56d\uc2dd\uc73c\ub85c \ubcc0\uacbd\ud558\ub294 \uae30\ubc95,sklearn.preprocessing.PolynomialFeatures \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \uc0c1\ud669\uc5d0\uc11c \uc0ac\uc6a9\ub429\ub2c8\ub2e4.\n\n\ud55c\uac1c \ubcc0\uc218\uac00 Y\uac12\uacfc \ube44\uc120\ud615\uc801\uc778 \uad00\uacc4\uac00 \uc788\ub2e4\uace0 \uc758\uc2ec\ub420 \ub54c\n\uc8fc\uae30\uc801\uc778 \ud328\ud134\uc744 \ubcf4\uc774\ub294 Series \ub370\uc774\ud130\n\ubaa8\ub378 \uc790\uccb4\uac00 \ubcf5\uc7a1\ud574\uc9c0\uba74 \ud574\uacb0\uac00\ub2a5\ud55c \ubd80\ubd84\uc774 \ub9ce\uc744\ub54c\nSVM, Tree-based models\n\n\n\n7.8.2. \ucd5c\uc801\ud654 \ud558\ub294 \ubc29\ubc95\u00b6\nRMSE\uc758 \ucd5c\uc18c\uac12\uc744 \ucc3e\ub294\ub2e4\nRidge, Lasso, LR \ubaa8\ub450 \ub2e4 \uc0ac\uc6a9\ud574\ubcf4\uae30\nDegree \ub97c 10 ~ 50\uae4c\uc9c0 \uc0ac\uc6a9\ud574\ubcf4\uae30\n\n\uc608\uc2dc \ucf54\ub4dc\u00b6\uc544\ub798 \ucf54\ub4dc\ub85c \uc790\uc138\ud788 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[93]:\n\n    \nfrom sklearn.preprocessing import PolynomialFeatures\nfrom sklearn.linear_model import LinearRegression\nimport warnings\nwarnings.filterwarnings('ignore')\n\n# Create matrix and vectors\nX = [[0.44, 0.68], [0.99, 0.23]]\ny = [109.85, 155.72]\nX_test = [[0.49, 0.18]]\n\n# PolynomialFeatures (prepreprocessing)\npoly = PolynomialFeatures(degree=2)\nX_ = poly.fit_transform(X)\nX_test_ = poly.fit_transform(X_test)\n\n# Instantiate\nlg = LinearRegression()\n\n# Fit\nlg.fit(X_, y)\n\n# Obtain coefficients\nlg.coef_\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[93]:\n\n\n\n\n\narray([  0.        ,  19.4606578 , -15.92235638,  27.82874066,\n        -2.52988551, -14.48934431])\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[94]:\n\n    \n# Predict\nlg.predict(X_test_)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[94]:\n\n\n\n\n\narray([126.84247142])\n\n\n\n\n\n\n\n\n\n\n\n7.9. Performance measure techniques\u00b6\uba38\uc2e0\ub7ec\ub2dd\uc758 Performance\ub97c \uce21\uc815\ud558\ub294 \uc5ec\ub7ec\uac00\uc9c0 \uae30\ubc95\uc5d0 \ub300\ud55c \uac1c\ub150\uacfc, scikit-learn \uc73c\ub85c \uc2e4\ud589\uc2dc\ud0a4\ub294 \ubc29\ubc95\uc5d0 \ub300\ud574\uc11c \uacf5\ubd80\ud569\ub2c8\ub2e4.\n\uad50\ucc28 \uac80\uc99d(cross validation)\uc774\ub780?\u00b6\uc77c\ubc18\uc801\uc73c\ub85c \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\uac00 \ubcc4\ub3c4\ub85c \uc874\uc7ac\ud558\ub294 \uacbd\uc6b0\uac00 \ub9ce\uc9c0 \uc54a\uae30 \ub54c\ubb38\uc5d0 \ubcf4\ud1b5\uc740 \uc6d0\ub798 \ud559\uc2b5\uc6a9\uc73c\ub85c \ud655\ubcf4\ud55c \ub370\uc774\ud130 \uc911 \uc77c\ubd80\ub97c \ub5bc\uc5b4\ub0b4\uc5b4 \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub85c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\uac00 \ub9ce\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \ub370\uc774\ud130\ub97c \uc5b4\ub5bb\uac8c \ub098\ub204\ub0d0\uc5d0 \ub530\ub77c \uc131\ub2a5\uc774 \uc870\uae08\uc529 \ub2ec\ub77c\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc5ec\ub7ec\uac00\uc9c0 \uc11c\ub85c \ub2e4\ub978 \ud559\uc2b5\uacfc \ud14c\uc2a4\ud2b8 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud574 \uc5ec\ub7ec\ubc88\uc758 \uc131\ub2a5\uc744 \uce21\uc815\ud574 \ud3c9\uade0 \uc131\ub2a5(mean performance) \uacfc \uc131\ub2a5 \ubd84\uc0b0(performance variance) \uc744 \uad6c\ud558\ub294 \ubc29\ubc95\uc744 \uad50\ucc28 \uac80\uc99d(cross validation) \uc774\ub77c\uace0 \ud569\ub2c8\ub2e4.\nscikit-Learn \uc758 model_selection\uae30\ub2a5\uc740 \uad50\ucc28 \uac80\uc99d\uc744 \uc704\ud574 \uc804\uccb4 \ub370\uc774\ud130 \uc14b\uc5d0\uc11c \ud559\uc2b5\uc6a9 \ub370\uc774\ud130\uc640 \ud14c\uc2a4\ud2b8\uc6a9 \ub370\uc774\ud130\ub97c \ubd84\ub9ac\ud574 \ub0b4\ub294 \uc5ec\ub7ec\uac00\uc9c0 \ubc29\ubc95\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4.\n7.9.1. K-fold cross validation\u00b6\n\ud559\uc2b5 \ub370\uc774\ud130\ub97c K\ubc88 \ub098\ub220\uc11c Test\uc640 Train\uc744 \uc2e4\uc2dc \u00e0 Test\uc758 \ud3c9\uade0\uac12\uc744 \uc0ac\uc6a9\n\ubaa8\ub378\uc758 Parameter \ud29c\ub2dd, \uac04\ub2e8\ud55c \ubaa8\ub378\uc758 \ucd5c\uc885 \uc131\ub2a5 \uce21\uc815 \ub4f1 \uc0ac\uc6a9\ncross_val_score \ud568\uc218\ub85c, \ud55c\ubc88\uc5d0 \ud574\uacb0 \uac00\ub2a5\nsklearn\uc740 \uc774 \ud6c4 \uc791\uc5c5\uc758 \ud1b5\uc77c\uc131\uc744 \uc704\ud574 MSE\ub97c \uc74c\uc218\ub85c \ubcc0\ud658\n\n7.9.2. Leave One Out (LOO)\u00b6\ud558\ub098\uc758 sample\ub9cc\uc744 test set\uc73c\ub85c \ub0a8\uae34\ub2e4.\n7.9.3. Validation set for parameter turning\u00b6\nValidation set\uc758 \ub9ce\uc740 \uc774\uc720\uc911 \ud558\ub098\uac00 Hyper parameter turning\nNumber of iterations (SGD), Number of branch (Tree-based) etc.\nValidation set\uc758 \uc131\ub2a5\uc73c\ub85c \ucd5c\uc801\uc758 parameter\ub97c \ucc3e\uc74c\nValidation set \uacb0\uacfc\uc640 Training set \uacb0\uacfc\uc758 \ucc28\uc774\uac00 \ubc8c\uc5b4\uc9c0\uba74 overfitting \n\n7.9.4. \uae30\ud0c0\ub4f1\ub4f1\u00b6\nLeavePOut \u2013 \ud55c\ubc88\uc5d0 P\uac1c\ub97c \ubf51\uc74c (Not LOO for one data)\nShuffleSplit \u2013 \ub3c5\ub9bd\uc801\uc778(\uc911\ubcf5\ub418\ub294) \ub370\uc774\ud130 Sampling\nStratifiedKFold \u2013 Y \uac12 \ube44\uc728\uc5d0 \ub530\ub77c \ubf51\uc74c\nRepatedKFold \u2013 \uc911\ubcf5\uc774 \ud3ec\ud568\ub41c K-Fold \uc0dd\uc131\nGroupKFold \u2013 \uadf8\ub8f9\ubcc4\ub85c \ub370\uc774\ud130\ub97c Sampling\n\n\n\n\n\n\n\nIn\u00a0[95]:\n\n    \nfrom sklearn import datasets\nboston = datasets.load_boston()\nX = boston.data\ny = boston.target\n\n\n    \n\n\n\n\n\n\nIn\u00a0[96]:\n\n    \nfrom sklearn.model_selection import KFold\nkf = KFold(n_splits=5, shuffle=True)\nfor train_index, test_index in kf.split(X):\n    print(\"TRAIN - \", len(train_index))\n    print(\"TEST - \",  len(test_index))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nTRAIN -  404\nTEST -  102\nTRAIN -  405\nTEST -  101\nTRAIN -  405\nTEST -  101\nTRAIN -  405\nTEST -  101\nTRAIN -  405\nTEST -  101\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[97]:\n\n    \nfrom sklearn.model_selection import cross_val_score\nimport numpy as np \n\nlasso_regressor = Lasso(warm_start=False)\nridge_regressor = Ridge()\n\nlasso_scores = cross_val_score(lasso_regressor, X, y, cv=10, scoring='neg_mean_squared_error')\nridge_scores= cross_val_score(ridge_regressor, X, y, cv=10, scoring='neg_mean_squared_error')\nnp.mean(lasso_scores), np.mean(ridge_scores)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[97]:\n\n\n\n\n\n(-34.464084588302306, -34.07824620925941)\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[98]:\n\n    \nfrom sklearn.model_selection import LeaveOneOut\n\ntest = [1, 2, 3, 4]\nloo = LeaveOneOut()\nfor train, test in loo.split(test):\n    print(\"%s %s\" % (train, test))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[1 2 3] [0]\n[0 2 3] [1]\n[0 1 3] [2]\n[0 1 2] [3]\n\n\n\n\n\n\n\n\n\n\n\n9. \ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0(Logistic Regression)\u00b6\ub85c\uc9c0\uc2a4\ud2f1 \ud68c\uadc0(logistic regression)\ub294 \ub3c5\ub9bd \ubcc0\uc218\uc758 \uc120\ud615 \uacb0\ud569\uc744 \uc774\uc6a9\ud558\uc5ec \uc0ac\uac74\uc758 \ubc1c\uc0dd \uac00\ub2a5\uc131\uc744 \uc608\uce21\ud558\ub294\ub370 \uc0ac\uc6a9\ub418\ub294 \ud1b5\uacc4 \uae30\ubc95\uc774\ub2e4. -- wikipedia\n\n\ubd84\ub958 \ubb38\uc81c\ub97c \ub2e4\ub8e8\ub294 Logistic Regression \uc5d0 \ub300\ud574 \uacf5\ubd80\ud569\ub2c8\ub2e4. \uae30\uc874 \uc811\uadfc\uc758 \ubb38\uc81c\uc810\ub4e4\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n1\uc774\uc0c1 \ub610\ub294 0\uc774\ud558\uc758 \uc218\ub4e4\uc774 \ub098\uc624\ub294 \uac78 \uc5b4\ub5bb\uac8c \ud574\uc11d\ud574\uc57c \ud560\uae4c?\n1 \ub610\ub294 0\uc73c\ub85c \uc815\ud655\ud788 \ud45c\ud604 \uac00\ub2a5\ud55c\uac00?\n\ubcc0\uc218\uac00 Y\uc5d0 \uc601\ud5a5\uc744 \uc8fc\ub294\uc815\ub3c4\uac00 \ube44\ub840\ud558\ub294\uac00?\n\ud655\ub960\ub85c \ubc1c\uc0dd\ud560 \uc0ac\uac74\uc758 \uac00\ub2a5\uc131\uc744 \ud45c\ud604\ud560 \uc218 \uc788\ub294\uac00?\n\n\uadf8\uc5d0 \ub300\ud55c \ud574\ubc95\uc740 \ud655\ub960\ub85c \ud45c\ud604\ud558\ub294\uac83\uc785\ub2c8\ub2e4.\n9.1. Sigmoid function\u00b6\ubd84\ub958(Classification) \ubb38\uc81c\uc5d0\uc11c \ubd84\ub958\ub418\ub294 \uac00\ub2a5\uc131\uc744 \ud655\ub960\ub85c \ud45c\ud604\ud558\ub294 Sigmoid function \uc5d0 \ub300\ud574 \uacf5\ubd80\ud569\ub2c8\ub2e4.\n9.1.1. Odds Ratio\u00b6\ud574\ub2f9 \uc0ac\uac74\uc774 \uc77c\uc5b4\ub0a0 \ud655\ub960\uacfc \uc77c\uc5b4\ub098\uc9c0 \uc54a\uc744 \ud655\ub960\uc758 \ube44\uc728\n\n\uc77c\uc5b4\ub0a0 \ud655\ub960 P(X)\n\uc77c\uc5b4\ub098\uc9c0 \uc54a\uc744 \ud655\ub960 1 - P(X)\n\uc218\uc2dd\uc73c\ub85c \ub098\ud0c0\ub0b4\uba74 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.  \n\n$$\\frac{P(X)}{1 - P(X)}$$9.1.2. Logit function\u00b6X\uc758 \uac12\uc774 \uc8fc\uc5b4\uc84c\uc744 \ub54c y\uc758 \ud655\ub960\uc744 \uc774\uc6a9\ud55c log odds. \uc218\uc2dd\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n$$logit(P) =\\ln\\left(\\frac{P(X)}{1 - P(X)}\\right)$$9.1.3. Sigmoid(=Logistic) Function\u00b6Logit \ud568\uc218\uc758 \uc5ed\ud568\uc218\ub85c z\uc5d0 \uad00\ud55c \ud655\ub960\uc744 \uc0b0\ucd9c\ud569\ub2c8\ub2e4. \ubbf8\ubd84\uac00\ub2a5\ud55c \uc5f0\uc18d\uad6c\uac04\uc73c\ub85c \ubcc0\ud658\ub418\uace0, S \ubaa8\uc591\uc774\ub77c \ud558\uc5ec sigmoid function\uc73c\ub85c \ubd80\ub985\ub2c8\ub2e4. \uc218\uc2dd\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n$$ y = \\frac{1}{1 + e{-z}}$$9.2. Cost function\u00b6Logistic Regression \uc5d0\uc11c \uc0ac\uc6a9\ud558\ub294 Cost Function \uc5d0 \ub300\ud574 \uc54c\uc544\ubd05\ub2c8\ub2e4\n\uc608\uc81c \ucf54\ub4dc\u00b6\n\n\n\n\n\nIn\u00a0[99]:\n\n    \nimport pandas as pd\nimport numpy as np\n\ndf = pd.read_csv('./data/binary.csv')\n# rename the 'rank' column because there is also a DataFrame method called 'rank'\ndf.columns = [\"admit\", \"gre\", \"gpa\", \"prestige\"]\ndf.tail()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[99]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      admit\n      gre\n      gpa\n      prestige\n    \n  \n  \n    \n      395\n      0\n      620\n      4.00\n      2\n    \n    \n      396\n      0\n      560\n      3.04\n      3\n    \n    \n      397\n      0\n      460\n      2.63\n      2\n    \n    \n      398\n      0\n      700\n      3.65\n      2\n    \n    \n      399\n      0\n      600\n      3.89\n      3\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[100]:\n\n    \nimport matplotlib.pyplot as plt\n%matplotlib inline\ndf.hist()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[100]:\n\n\n\n\n\narray([[<matplotlib.axes._subplots.AxesSubplot object at 0x0000000002814898>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x00000000140126D8>],\n       [<matplotlib.axes._subplots.AxesSubplot object at 0x0000000005313908>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x000000000533CB70>]],\n      dtype=object)\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[101]:\n\n    \nfrom  sklearn  import  preprocessing  # Min-Max Standardzation\n\ny_data = df[\"admit\"].values.reshape(-1,1)\nx_data = df.ix[:,1:].values\n\nmin_max_scaler = preprocessing.MinMaxScaler()\nx_data = min_max_scaler.fit_transform(x_data)\n\nx_data[:5]\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[101]:\n\n\n\n\n\narray([[0.27586207, 0.77586207, 0.66666667],\n       [0.75862069, 0.81034483, 0.66666667],\n       [1.        , 1.        , 0.        ],\n       [0.72413793, 0.53448276, 1.        ],\n       [0.51724138, 0.38505747, 1.        ]])\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[102]:\n\n    \nfrom sklearn.model_selection import train_test_split\nfrom sklearn import linear_model, datasets\n\nX_train, X_test, y_train, y_test = train_test_split(x_data, y_data, test_size=0.3, random_state=42)\n\nlogreg = linear_model.LogisticRegression(fit_intercept=True)\nlogreg.fit(X_train, y_train.ravel())\n\ny_pred = logreg.predict(X_test)\ny_true = y_test\n\nfrom sklearn.metrics import accuracy_score\naccuracy_score(y_true, y_pred)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[102]:\n\n\n\n\n\n0.725\n\n\n\n\n\n\n\n\n\n\n\n\uc815\ud655\ub3c4\uac00 72% \uc815\ub3c4\ub85c \ub9cc\uc871\uc2a4\ub7fd\uc9c0\ub294 \uc54a\ub124\uc694.\n10. \uc218\uac15\ud6c4\uae30\u00b6\ucd5c\uc131\ucca0 \uad50\uc218\ub2d8\uaed8\uc11c \uc124\uba85\uc744 \uc27d\uac8c \ud574\uc8fc\uc154\uc11c \uc774\ud574\ud558\uae30 \uc26c\uc6e0\ub358\uac83 \uac19\uc2b5\ub2c8\ub2e4. \ubc29\ub300\ud55c \ubd84\ub7c9\uc744 5\uc77c\uc548\uc5d0 \uac15\uc758\ud558\uc2dc\ub2e4 \ubcf4\ub2c8, \ub4b7\ubd80\ubd84\uc774 \uc880 \ub108\ubb34 \ube60\ub974\uac8c \uc9c0\ub098\uac04\uac83 \uac19\uc544\uc11c \uc544\uc27d\uae30\ub294 \ud569\ub2c8\ub2e4. \uac04\ub9cc\uc5d0 \ud55c\uad6d\uc5b4\ub85c \uac15\uc758\ub97c \ub4e3\ub2e4\ubcf4\ub2c8 \uc9d1\uc911\ud574\uc11c \ub4e3\uac8c \ub418\uace0, \uac11\uc790\uae30 \uc758\uc695\uc774 \uc0dd\uae41\ub2c8\ub2e4. Kaggle\uc5d0 \ub4e4\uc5b4\uac00\uc11c \uc880 \ub354 \ubc30\uc6b0\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.",
      "tags": "edwith,lecture note,machine learning,Python",
      "url": "https://partrita.github.io/posts/edwith-machinelearning/"
    },
    {
      "title": "R\uc5d0\uc11c \ub370\uc774\ud130 \ub2e4\ub8e8\uae30(dplyr)",
      "text": "0. \uc2dc\uc791\ud558\uae30 \uc55e\uc11c\u00b6\uc774 \uae00\uc740 Data Carpentry for data analysis\uc744 \uacf5\ubd80\ud558\uace0 \uc815\ub9ac\ud55c \uac83\uc785\ub2c8\ub2e4. \ubaa9\ud45c\ub294 \ud504\ub85c\uadf8\ub798\ubc0d \uacbd\ud5d8\uc774 \uc5c6\ub294 \uacfc\ud559\uc790\ub4e4\uc774 R\uc744 \uac00\uc9c0\uace0 \uc791\uc5c5\ud558\ub294\ub370 \ud544\uc694\ud55c \uae30\ubcf8\uc801\uc778 \uac1c\ub150, \uae30\uc220, \uc0ac\uc6a9\ubc95\uc744 \uac00\ub974\uce58\ub294\ub370 \uc788\uc2b5\ub2c8\ub2e4.\uac04\ub7b5\ud55c \ubaa9\ucc28\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\nR \uae30\ucd08 \ubb38\ubc95\nCSV \ud30c\uc77c \ubd88\ub7ec\uc624\ub294 \ubc29\ubc95\uacfc \ub370\uc774\ud130\ud504\ub808\uc784 \uad6c\uc870\n\uc694\uc778 \ucc98\ub9ac\ubc29\ubc95, \ud589\uacfc \uc5f4 \ucd94\uac00/\uc0ad\uc81c\n\uc694\uc57d \ud1b5\uacc4 \uacc4\uc0b0\ubc95, \uc2dc\uac01\ud654\uc5d0 \ub300\ud55c \uac04\ub2e8\ud55c \uc18c\uac1c\n\n1. R \uc18c\uac1c\u00b61.1. \uac1d\uccb4 \ub9cc\ub4e4\uae30\u00b6R\uc5d0\uc11c\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uac1d\uccb4\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nmass <- 47.5            # mass?\nage  <- 122             # age?\nmass <- mass * 2.0      # mass?\nage  <- age - 20        # age?\nmass_index <- mass/age  # mass_index?\nmass_index\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n0.931372549019608\n\n\n\n\n\n\n\n\n\n\n\n1.2. \ubca1\ud130\uc640 \uc790\ub8cc\ud615\u00b6\ubca1\ud130\ub294 R\uc5d0\uc11c \uac00\uc7a5 \uae30\ubcf8\uc801\uc778 \uc790\ub8cc\uad6c\uc870\uc785\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub2e4\uc74c\uacfc \uac19\uc774 \ubca1\ud130\ub97c \uc0dd\uc131\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nnum_char <- c(1, 2, 3, 'a')\nnum_logical <- c(1, 2, 3, TRUE)\nchar_logical <- c('a', 'b', 'c', TRUE)\ntricky <- c(1, 2, 3, '4')\nnum_char # \ubca1\ud130\uac12 \ud655\uc778\ud558\uae30\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\t'1'\n\t'2'\n\t'3'\n\t'a'\n\n\n\n\n\n\n\n\n\n\n\n\n\n1.2.1. \ubca1\ud130 \ubd80\ubd84\uc9d1\ud569 \ubf51\uc544\ub0b4\uae30\u00b6\ubca1\ud130\uc5d0\uc11c \uac12\uc744 \ud558\ub098 \ud639\uc740 \ub2e4\uc218 \uac12\uc744 \ucd94\ucd9c\ud558\ub824\uba74, \uaebe\uc1e0 \uad04\ud638 \ub0b4\ubd80\uc5d0 \uc778\ub371\uc2a4\ub97c \ub123\uc5b4 \uc90d\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nanimals <- c(\"mouse\", \"rat\", \"dog\", \"cat\")\nanimals[2]\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n'rat'\n\n\n\n\n\n\n\n\n\n\n\n2. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\u00b6\n\uc678\ubd80 \ub370\uc774\ud130(CSV \ud30c\uc77c)\ub97c \ubd88\ub7ec\uc640\nR\uc5d0\uc11c \ub370\uc774\ud130\ud504\ub808\uc784 \uad6c\uc870\uc640 \ub0b4\uc6a9\ubb3c\uc744 \ud0d0\uc0c9\ud574 \ubd05\ub2c8\ub2e4.\n\nR\ud568\uc218 download.file()\ub97c \uc0ac\uc6a9\ud574\uc11c CSV\ud30c\uc77c\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0 read.csv()\uae30\ub2a5\uc744 \uc774\uc6a9\ud574 \ud30c\uc77c\uc744 \ubd88\ub7ec\uc624\uaca0\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc758 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud574 \ud30c\uc77c\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ud558\uc138\uc694.\ndownload.file(\"https://ndownloader.figshare.com/files/2292169\",\n              \"portal_data_joined.csv\")\n\n\uadf8\ub7f0\ub2e4\uc74c \ud30c\uc77c\uc744 \uc77d\uc5b4\uc624\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nsurveys <- read.csv('portal_data_joined.csv')\nhead(surveys) # \ud30c\uc77c \ud655\uc778\ud558\uae30\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nrecord_idmonthdayyearplot_idspecies_idsexhindfoot_lengthweightgenusspeciestaxaplot_type\n\n\t  1      7      16      1977    2       NL      M       32      NA      Neotoma albigulaRodent  Control \n\t 72      8      19      1977    2       NL      M       31      NA      Neotoma albigulaRodent  Control \n\t224      9      13      1977    2       NL              NA      NA      Neotoma albigulaRodent  Control \n\t266     10      16      1977    2       NL              NA      NA      Neotoma albigulaRodent  Control \n\t349     11      12      1977    2       NL              NA      NA      Neotoma albigulaRodent  Control \n\t363     11      12      1977    2       NL              NA      NA      Neotoma albigulaRodent  Control \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.1. Dataframe\u00b6Dataframe\uc740 \uc5d1\uc140\uc758 \ud14c\uc774\ube14\uc744 \uc0dd\uac01\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4. \uac01\uac01\uc758 \ud589\uc774 \ubc31\ud130\ub85c \uad6c\uc131\ub418\uace0 \ubaa8\uc5ec\uc11c \ud14c\uc774\ube14 \ud615\ud0dc\ub85c \ud45c\ud604\ud55c \uac83\uc785\ub2c8\ub2e4. str() \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uba74 \uac01\uac01\uc758 \ud589\uc774 \uc5b4\ub5a0\ud55c \uc790\ub8cc\ud615\uc778\uc9c0 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nstr(surveys)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n'data.frame':\t34786 obs. of  13 variables:\n $ record_id      : int  1 72 224 266 349 363 435 506 588 661 ...\n $ month          : int  7 8 9 10 11 11 12 1 2 3 ...\n $ day            : int  16 19 13 16 12 12 10 8 18 11 ...\n $ year           : int  1977 1977 1977 1977 1977 1977 1977 1978 1978 1978 ...\n $ plot_id        : int  2 2 2 2 2 2 2 2 2 2 ...\n $ species_id     : Factor w/ 48 levels \"AB\",\"AH\",\"AS\",..: 16 16 16 16 16 16 16 16 16 16 ...\n $ sex            : Factor w/ 3 levels \"\",\"F\",\"M\": 3 3 1 1 1 1 1 1 3 1 ...\n $ hindfoot_length: int  32 31 NA NA NA NA NA NA NA NA ...\n $ weight         : int  NA NA NA NA NA NA NA NA 218 NA ...\n $ genus          : Factor w/ 26 levels \"Ammodramus\",\"Ammospermophilus\",..: 13 13 13 13 13 13 13 13 13 13 ...\n $ species        : Factor w/ 40 levels \"albigula\",\"audubonii\",..: 1 1 1 1 1 1 1 1 1 1 ...\n $ taxa           : Factor w/ 4 levels \"Bird\",\"Rabbit\",..: 4 4 4 4 4 4 4 4 4 4 ...\n $ plot_type      : Factor w/ 5 levels \"Control\",\"Long-term Krat Exclosure\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uacb0\uacfc\uc5d0\uc11c \ubcfc \uc218 \uc788\ub4ef\uc774, \ub2e4\uc218 \uce7c\ub7fc\uc740 \uc815\uc218\ud615 \ubca1\ud130\ub85c \uad6c\uc131\ub418\uc9c0\ub9cc, species \uc640 sex\ub294 \uc694\uc778(factor)\uc73c\ub85c \ubd88\ub9ac\ub294 \ud2b9\uc218\ud55c \ud074\ub798\uc2a4\ub85c \uc785\ub2c8\ub2e4. \ub370\uc774\ud130\ud504\ub808\uc784 \ud074\ub798\uc2a4\uc5d0 \ub300\ud574 \ucd94\uac00\uc801\uc778 \ub0b4\uc6a9\uc744 \uc54c\uc544 \ubcf4\uae30 \uc804\uc5d0, \uc694\uc778\uc5d0 \ub300\ud574 \uba3c\uc800 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n2.2. \uc694\uc778(Factors)\u00b6\ubc94\uc8fc\ud615 \ub370\uc774\ud130\ub97c \ud45c\ud604\ud560\ub54c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc694\uc778\uc740 \uc21c\uc11c\uac00 \uc788\uac70\ub098 \uc21c\uc11c\uac00 \uc5c6\ub294 \uac83\uc73c\ub85c \uad6c\ubd84\ub418\ub294\ub370, \uc774\ub97c \uc815\ud655\ud788 \uc774\ud574\ud558\ub294 \uac83\uc774 \ud1b5\uacc4\ubd84\uc11d\uacfc \uc2dc\uac01\ud654\uc5d0 \ud544\uc694\ud569\ub2c8\ub2e4.\n\uc694\uc778\uc740 \uc815\uc218\ud615\uc73c\ub85c \uc800\uc7a5\ub418\uace0, \uc720\uc77c\ubb34\uc774\ud55c \uc815\uc218\uac12\uacfc \uc5f0\uad00\ub41c \ud45c\uc2dd\uc774 \ubd99\uc5ec\uc9c4\ub2e4. \uc694\uc778\uc740 \ub9c8\uce58 \ubb38\uc790\ud615 \ubca1\ud130\ucc98\ub7fc \ubcf4\uc774\uace0 \ud754\ud788 \uadf8\ub807\uac8c \ub3d9\uc791\ud558\uc9c0\ub9cc, \uc2e4\uc81c\ub85c \ub0b4\ubd80\ub97c \ub4e4\uc5ec\ub2e4 \ubcf4\uba74 \uc815\uc218\uac12\uc774\ub2e4. \uadf8\ub798\uc11c \uc8fc\uc758\uac00 \uc694\uad6c\ub41c\ub2e4.\n\n\uc694\uc778\ud615 \ubca1\ud130\ub97c \uc0dd\uc131\uc2dc\ud0a4\uac8c \ub418\uba74, \uc694\uc778\ubca1\ud130\uc5d0\ub294 \uc218\uc900(level)\uc73c\ub85c \ubbf8\ub9ac \uc815\uc758\ub41c \uac12\uc774 \uc9d1\ud569\uc73c\ub85c \ub2f4\uaca8\uc9d1\ub2c8\ub2e4. \uae30\ubcf8 \uc124\uc815\uc73c\ub85c\uc740 \uc54c\ud30c\ubcb3 \uc21c\uc73c\ub85c \uc815\ub82c\uc774 \ub429\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc218\uc900 2\uac1c\ub97c \uac16\ub294 \uc694\uc778\uc774 \uc788\ub2e4\uace0 \uac00\uc815\ud558\uba74:\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nsex <- factor(c(\"male\", \"female\", \"female\", \"male\"))\n\n\n    \n\n\n\n\n\n\n\nR\uc740 \uc815\uc218 1\uc744 \"female\" \uc218\uc900, \uc815\uc218 2\ub97c \"male\" \uc218\uc900\uc5d0 \ub300\uc785\ud55c\ub2e4. \ubca1\ud130 \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub85c \"male\"\uc774 \uc654\uc9c0\ub9cc, \uc54c\ud30c\ubcb3\uc21c\uc73c\ub85c \ubcf4\uba74 f\uac00 m\ubcf4\ub2e4 \uc21c\uc11c\uac00 \uc55e\uc11c\uae30 \ub54c\ubb38\uc774\ub2e4. levels() \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc11c \uc774\ub7f0 \uc0ac\uc2e4\uc744 \ud655\uc778\ud560 \uc218 \uc788\uace0, nlevels() \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc11c \uc218\uc900 \uac2f\uc218\ub3c4 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4:\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nlevels(sex)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\t'female'\n\t'male'\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \nnlevels(sex)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n2\n\n\n\n\n\n\n\n\n\n\n\n2.2. \uc694\uc778 \uc790\ub8cc\ud615 \ubcc0\uacbd\u00b6\n\uc694\uc778 \ubca1\ud130\ub97c \ubb38\uc790\ud615 \ubca1\ud130\ub85c \ubcc0\uacbd\uc2dc\ud0ac \ub54c\ub294 as.character() \ud568\uc218\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\uc694\uc778 \ubca1\ud130\ub97c \uc22b\uc790\ud615 \ubca1\ud130\ub85c \ubcc0\uacbd\uc2dc\ud0a4\ub294 \uac83 as.numeric()\uc744 \uc0ac\uc6a9\ud558\ub294\ub370 \ub450\uac00\uc9c0 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4. \n\ubb38\uc790\ud615\uc73c\ub85c \ubc14\uafb8\uace0\ub098\uc11c \ub2e4\uc2dc \uc22b\uc790\ub85c \uc804\ud658\uc2dc\ud0a4\uac70\ub098 \n\ub610\ub2e4\ub978 \ubc29\ubc95\uc740 levels() \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nf <- factor(c(1, 5, 10, 2))\nf2 <- as.character(f)\nf2\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\t'1'\n\t'5'\n\t'10'\n\t'2'\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nas.numeric(f2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\t1\n\t5\n\t10\n\t2\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nas.numeric(levels(f))[f]\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\t1\n\t5\n\t10\n\t2\n\n\n\n\n\n\n\n\n\n\n\n\n\nlevels() \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\uba74 \uc544\ub798 \uc138\uac00\uc9c0 \uc808\ucc28\uac00 \ub0b4\ubd80\uc801\uc73c\ub85c \uc2e4\ud589\ub429\ub2c8\ub2e4.\n\nlevels(f)\ub97c \uc2e4\ud589\uc2dc\ucf1c \uc694\uc778\uc5d0 \ub300\ud55c \ubaa8\ub4e0 \uc218\uc900\uc744 \uc5bb\uc5b4\uc628\ub2e4.\nas.numeric(levels(f))\uc744 \uc2e4\ud589\uc2dc\ucf1c \uc55e\uc11c \ubc1b\uc544\uc628 \uc218\uc900\uc744 \uc22b\uc790\uac12\uc73c\ub85c \uc804\ud658\uc2dc\ud0a8\ub2e4.\n\uadf8\ub9ac\uace0 \ub098\uc11c, \uaebe\uc1e0 \uad04\ud638 \ub0b4\ubd80 f \ubca1\ud130 \uc815\uc218\uac12\uc744 \uc0ac\uc6a9\ud574\uc11c \uc22b\uc790\uac12\uc5d0 \uc811\uadfc\ud55c\ub2e4.\n\n\n\n\n\n\n\n\n3. Dataframe \uc124\uba85\u00b6\uc55e\uc11c \uc54c\uc544\ubcf8 Dataframe\uc5d0 \ub300\ud558\uc5ec \uc790\uc138\ud788 \uc54c\uc544 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n3.1. \ub370\uc774\ud130\ud504\ub808\uc784\uc740 \ubb34\uc5c7\uc778\uac00?\u00b6\ub370\uc774\ud130\ud504\ub808\uc784(dataframe)\uc740 \uac00\uc7a5 \ub300\uc911\uc801\uc778 \ud45c\ud615\uc2dd \ub370\uc774\ud130\uc5d0 \ub300\ud55c \uc0ac\uc2e4\uc0c1 \ud45c\uc900(de facto) \uc73c\ub85c, \ud1b5\uacc4 \ubc0f \uc2dc\uac01\ud654\uc5d0 \ud65c\uc6a9\ud558\ub294 \uc790\ub8cc\uad6c\uc870\uc785\ub2c8\ub2e4. \ub3d9\uc77c\ud55c \uae38\uc774\ub97c \uac16\ub294 \ubca1\ud130 \uc9d1\ud569\uc774\uba70, \ubca1\ud130 \uac01\uac01\uc740 \ud589\uc744 \ud45c\ud604\ud558\uc9c0\ub9cc \uac01 \ubca1\ud130\ub294 \uc11c\ub85c \ub2e4\ub978 \uc790\ub8cc\ud615\uc774 \ub420 \uc218 \uc788\ub2e4(\uc608\ub97c \ub4e4\uc5b4, \ubb38\uc790\ud615, \uc815\uc218\ud615, \uc694\uc778\ud615). \uc6b0\ub9ac\ub294 \uc55e\uc5d0\uc11c  str() \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc11c \uac01 \uce7c\ub7fc\ubcc4 \uc790\ub8cc\ud615\uc744 \uc870\uc0ac\ud588\uc5c8\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130\ud504\ub808\uc784\uc740 \uc77c\uc77c\uc774 \uc0dd\uc131\ud560 \uc218\ub3c4 \uc788\uc9c0\ub9cc, \uc77c\ubc18\uc801\uc73c\ub85c ead.csv() \ud639\uc740 read.table() \ud568\uc218\ub85c \ub9cc\ub4e4\uc5b4 \ub0c5\ub2c8\ub2e4.\n\uae30\ubcf8 \uc124\uc815\uc73c\ub85c \ub370\uc774\ud130\ud504\ub808\uc784\uc774 \uc0dd\uc131\ub420\ub54c \ubb38\uc790\uc5f4\uc774 \ub2f4\uae34 \ud589\uc740 \uc694\uc778(factor) \uc790\ub8cc\ud615\uc73c\ub85c \ubcc0\ud658\ub429\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc791\uc5c5\ud558\ub824\ub294 \uc758\ub3c4\uc5d0 \ub530\ub77c \ubb38\uc790\ud615(character)\uc73c\ub85c \uce7c\ub7fc\uc744 \uadf8\ub300\ub85c \ub450\uace0\uc790 \ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 stringsAsFactors = FALSE\ub85c \uc124\uc815\ud558\uba74 \uc694\uc778\ud615\uc774 \uc544\ub2cc \ubb38\uc790\ud615 \uadf8\ub300\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \nexample_data <- data.frame(animal=c(\"dog\", \"cat\", \"sea cucumber\", \"sea urchin\"),\n                           feel=c(\"furry\", \"furry\", \"squishy\", \"spiny\"),\n                           weight=c(45, 8, 1.1, 0.8),\n                           stringsAsFactors = FALSE)\nstr(example_data)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n'data.frame':\t4 obs. of  3 variables:\n $ animal: chr  \"dog\" \"cat\" \"sea cucumber\" \"sea urchin\"\n $ feel  : chr  \"furry\" \"furry\" \"squishy\" \"spiny\"\n $ weight: num  45 8 1.1 0.8\n\n\n\n\n\n\n\n\n\n\n\n3.2. Dataframe \uc0b4\ud3b4\ubcf4\uae30\u00b6head()\uc640 str() \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc11c Dataframe \uad6c\uc870\uc640 \ub0b4\uc6a9\ubb3c\uc744 \uc0b4\ud3b4\ubcfc\uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8 \uc678\uc5d0\ub3c4 \uc544\ub798\uc640 \uac19\uc774 \uc720\uc6a9\ud55c \uba85\ub839\uc5b4\uac00 \uc874\uc7ac \ud569\ub2c8\ub2e4.\n\n\ub370\uc774\ud130\ud504\ub808\uc784 \ud06c\uae30:\ndim() - \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub294 \ud589\uc758 \uac2f\uc218, \ub450\ubc88\uc9f8 \uc6d0\uc18c\ub294 \uc5f4\uc758 \uac2f\uc218\ub97c \uac16\ub294 \ubca1\ud130\ub97c \ubc18\ud658 (\uac1d\uccb4\uc5d0 \ub300\ud55c \ucc28\uc6d0, dimensions)\nnrow() - \ud589 \uac2f\uc218\ub97c \ubc18\ud658\nncol() - \uc5f4 \uac2f\uc218\ub97c \ubc18\ud658\n\n\n\ucf58\ud150\uce20/\ub0b4\uc6a9:\nhead() - \uccab\ubc88\uc9f8 5 \ud589\ntail() - \ub9c8\uc9c0\ub9c9 5 \ud589\n\n\n\uba85\uce6d:\nnames() - \ub370\uc774\ud130\ud504\ub808\uc784\uc758 \uce7c\ub7fc\uba85\uc744 \ubc18\ud658(data.frame \uac1d\uccb4\uc5d0 \ub300\ud55c colnames()\uacfc \ub3d9\uc758\uc5b4)\nrownames() - \ud589\uba85\uce6d\uc744 \ubc18\ud658\n\n\n\uc694\uc57d:\nstr() - \uac1d\uccb4\uc758 \uad6c\uc870\uc640 \ud074\ub798\uc2a4, \uae38\uc774, \uac01 \uce7c\ub7fc\ubcc4 \ub0b4\uc6a9\uc5d0 \ub300\ud55c \uc815\ubcf4\ub97c \uc81c\uacf5 structure of the object and information about the class, length and content of each column\nsummary() - \uac01 \uce7c\ub7fc\ubcc4 \uc694\uc57d \ud1b5\uacc4\ub7c9\n\n\n\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \nsummary(example_data)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n          animal       feel       weight      \n cat         :1   furry  :2   Min.   : 0.800  \n dog         :1   spiny  :1   1st Qu.: 1.025  \n sea cucumber:1   squishy:1   Median : 4.550  \n sea urchin  :1               Mean   :13.725  \n                              3rd Qu.:17.250  \n                              Max.   :45.000  \n\n\n\n\n\n\n\n\n\n\n\n4. dplyr\ub85c \ub370\uc774\ud130 \ud3b8\uc9d1\uacfc \ubd84\uc11d\ud558\uae30\u00b64.1. dplyr \uc124\uba85\u00b6dplyr \ud328\ud0a4\uc9c0\uc5d0\ub294 \ud754\ud788 \ub370\uc774\ud130\ub97c \uc870\uc791\ud558\ub294\ub370 \ud544\uc694\ud55c \ub3c4\uad6c\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. dplyr \ud328\ud0a4\uc9c0\ub294 \uadf8\uc804\uc5d0 \ud3ed\ub113\uac8c \uc0ac\uc6a9\ub41c plyr \ud328\ud0a4\uc9c0\uc5d0\uc11c \uc601\uac10\uc744 \ubc1b\uc558\ub294\ub370, plyr \ud329\ud0a4\uc9c0\ub294 \uc18d\ub3c4\uac00 \ub5a8\uc5b4\uc9c0\ub294 \uc131\ub2a5\ubb38\uc81c\uac00 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc dplyr\uc740 \uc5f0\uc0b0\uc758 \uc0c1\ub2f9\ubd80\ubd84\uc744 C++ \uc744 \uc774\uc6a9\ud574 \uc5f0\uc0b0 \uc18d\ub3c4\uac00 \ub9e4\uc6b0 \ube60\ub985\ub2c8\ub2e4. dplyr\uc5d0 \ub300\ud574 \ub354 \ub9ce\uc774 \ubc30\uc6b0\uace0\uc790 \ud558\ub294 \uacbd\uc6b0, dplyr cheatsheet\ub97c \ucc38\uc870\ud558\uc138\uc694.\n4.2. dplyr \ud328\ud0a4\uc9c0\ub97c \ud65c\uc6a9\ud55c \ub370\uc774\ud130 \ud3b8\uc9d1\u00b6dplyr\uc740 \ub370\uc774\ud130\uc870\uc791\uc744 \ub354 \uc27d\uace0 \ub370\uc774\ud130 \ubd84\uc11d\uc744 \uc990\uac81\ub3c4\ub85d \uac1c\ubc1c\ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc758 \ubc29\ubc95\uc73c\ub85c \uc124\uce58\ud558\uace0 \ubd88\ub7ec\uc635\ub2c8\ub2e4.\ninstall.packages(\"dplyr\")\nlibrary(\"dplyr\")    ## \ud329\ud0a4\uc9c0 \ubd88\ub7ec\uc624\uae30\n\n4.3. \ud589\uc744 \ubf51\uc544\ub0b4\uace0 \ud544\ud130\ub9c1\ud55c\ub2e4.\u00b6dplyr \ud568\uc218\uc911\uc5d0\uc11c \uac00\uc7a5 \ud65c\uc6a9\ub3c4\uac00 \ub192\uc740 select(), filter(), mutate(), summarize()\ud568\uc218\ub97c \ud559\uc2b5\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\uba3c\uc800 \ub370\uc774\ud130\uc5d0\uc11c \ud589\uc744 \ubf51\uc544\ub0bc \ub54c select()\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. select() \ud568\uc218\uc5d0 \ub123\uc740 \uccab\ubc88\uc9f8 \uc778\uc790\ub294 \ub370\uc774\ud130\ud504\ub808\uc784(surveys), \uadf8\ub9ac\uace0 \ud6c4\uc18d \uc778\uc790\ub294 \ubf51\uc544\ub0bc \ud589\uc774 \ub4e4\uc5b4\uac04\ub2e4.\n\n\n\n\n\n\nIn\u00a0[19]:\n\n    \nlibrary(dplyr) # dplyr\uc744 \ubd88\ub7ec\uc635\ub2c8\ub2e4.\nsurveys <- read.csv('surveys.csv') # \ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\nselect_df <- select(surveys, plot_id, species_id, weight) # plot_id, species_id, weight \ud589\ub9cc \ucd94\ucd9c\ud569\ub2c8\ub2e4.\ntail(select_df) # \ud14c\uc774\ube14 \ud655\uc778\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nplot_idspecies_idweight\n\n\t3554415USNA\n\t3554515AHNA\n\t3554615AHNA\n\t3554710RM14\n\t35548 7DO51\n\t35549 5  NA\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[18]:\n\n    \nfilter(surveys, year == 1995) %>% head # 1995\ub144 \ub370\uc774\ud130\ub9cc \ud544\ud130\ud569\ub2c8\ub2e4.\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nrecord_idmonthdayyearplot_idspecies_idsexhindfoot_lengthweight\n\n\t219931    11   1995 18   PF   F    16    7   \n\t219941    11   1995 12   DO   M    36   47   \n\t219951    11   1995  2   DO   M    36   51   \n\t219961    11   1995 21   PF   F    14    7   \n\t219971    11   1995 24   RM   M    15   10   \n\t219981    11   1995  1   DM   M    38   46   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.4. \ud30c\uc774\ud504(Pipes) \uc0ac\uc6a9\ud558\uae30\u00b6\ud55c\ubc88\uc5d0 \ud589\uc744 \ubf51\uc544\ub0b4\uace0 \ud544\ud130\ub9c1\uc744 \ud574\uc57c \ud55c\ub2e4\uba74, \ud30c\uc774\ud504\ub97c \uc0ac\uc6a9\ud574\uc57c \ud569\ub2c8\ub2e4. \ud30c\uc774\ud504\ub294 \ud568\uc218 \ucd9c\ub825\uac12\uc744 \ubc1b\uc544 \ub2e4\uc74c\ubc88 \ud568\uc218\uc5d0 \uace7\ubc14\ub85c \uc804\uc1a1\ud558\ub294 \uac83\uc73c\ub85c Shell script\uc758 \uadf8\uac83\uacfc \ub3d9\uc77c\ud569\ub2c8\ub2e4. \uc774\ub294 \uc218\ub9ce\uc740 \uc791\uc5c5\uc744 \uc218\ud589\ud560 \ub54c \ub9e4\uc6b0 \uc720\uc6a9\ud569\ub2c8\ub2e4. R\uc5d0\uc11c \ud30c\uc774\ud504\ub294 %>% \ubaa8\uc591\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[19]:\n\n    \nsurveys %>%\n  filter(weight < 5) %>%\n  select(species_id, sex, weight) %>% head\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nspecies_idsexweight\n\n\tPFM 4 \n\tPFF 4 \n\tPF  4 \n\tPFF 4 \n\tPFF 4 \n\tRMM 4 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc0c1\uae30 \uc608\uc81c\uc5d0\uc11c \ud30c\uc774\ud504\ub97c \uc0ac\uc6a9\ud574\uc11c survyes \ub370\uc774\ud130\uc14b\uc744 filter\ub85c \uba3c\uc800 \ubcf4\ub0b4\uc11c \uccb4\uc911\uc774 5\ubcf4\ub2e4 \uc791\uc740 \ud589\ub9cc \ubf51\uc544\ub0b4\uace0 \ub098\uc11c, select\ub85c species, sex, weight \uce7c\ub7fc\uc744 \ubf51\uc544\ub0c8\uc2b5\ub2c8\ub2e4. \ud30c\uc774\ud504\ub97c \uc0ac\uc6a9\ud558\uba74 \uc774\ucc98\ub7fc \uac04\uacb0\ud558\uac8c \ucf54\ub529\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ud30c\uc774\ud504\ub97c \uc0ac\uc6a9\ud574\uc11c, \ub370\uc774\ud130\uc758 \ubd80\ubd84\uc9d1\ud569\uc744 \ub9cc\ub4e4\uc5b4\ub0b4\ub294\ub370, 1995\ub144 \uc774\uc804 \ud3ec\ud68d\ub41c \uac1c\uccb4\ub85c year, sex, weight \uce7c\ub7fc\ub9cc \ud3ec\ud568\ub418\ub3c4\ub85d \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[21]:\n\n    \nsmall_df <- surveys %>% filter(year < 1995) %>% select(year, sex, weight)\ntail(small_df)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nyearsexweight\n\n\t219871994M   46  \n\t219881994F   38  \n\t219891994F   40  \n\t219901994    NA  \n\t219911994    NA  \n\t219921994    NA  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.5. mutate() \ud568\uc218\u00b6\uc885\uc885, \uae30\uc874 \uce7c\ub7fc\uac12\uc744 \ud65c\uc6a9\ud558\uc5ec \uc0c8\ub85c\uc6b4 \uce7c\ub7fc\uc744 \uc0dd\uc131\ud560\ub54c\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \ub2e8\uc704\ub97c \uc804\ud658\ud558\uac70\ub098, \ub450 \uce7c\ub7fc\uc744 \ud65c\uc6a9\ud558\uc5ec \ube44\uc728\uc744 \uacc4\uc0b0\ud560 \ub54c \ub9d0\uc774\uc8e0.\uc774\ub7f0 \uc791\uc5c5\uc744 \uc704\ud574\uc11c mutate() \ud568\uc218\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc608\uc2dc\ub85c \ubb34\uac8c\ub97c \ud0ac\ub85c\uadf8\ub7a8 \ub2e8\uc704\ub85c \ud45c\uc2dc\ub41c \uc0c8\ub85c\uc6b4 \uce7c\ub7fc\uc744 \uc0dd\uc131\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[25]:\n\n    \nsurveys %>%\n  mutate(weight_kg = weight / 1000) %>% head\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nrecord_idmonthdayyearplot_idspecies_idsexhindfoot_lengthweightweight_kg\n\n\t1   7   16  19772   NL  M   32  NA  NA  \n\t2   7   16  19773   NL  M   33  NA  NA  \n\t3   7   16  19772   DM  F   37  NA  NA  \n\t4   7   16  19777   DM  M   36  NA  NA  \n\t5   7   16  19773   DM  M   35  NA  NA  \n\t6   7   16  19771   PF  M   14  NA  NA  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nNA \uac12\uc73c\ub85c \uac00\ub4dd\ucc28 \uc788\uae30 \ub54c\ubb38\uc5d0 \ud30c\uc774\ud504 \uccb4\uc778\uc5d0 filter() \ud568\uc218\ub97c \uc774\uc6a9\ud574 \uc5c6\ub294 \uac12\uc744 \uc81c\uac70\ud574 \ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[26]:\n\n    \nsurveys %>%\n  filter(!is.na(weight)) %>%\n  mutate(weight_kg = weight / 1000) %>%\n  head\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nrecord_idmonthdayyearplot_idspecies_idsexhindfoot_lengthweightweight_kg\n\n\t63   8    19   1977 3    DM   M    35   40   0.040\n\t64   8    19   1977 7    DM   M    37   48   0.048\n\t65   8    19   1977 4    DM   F    34   29   0.029\n\t66   8    19   1977 4    DM   F    35   46   0.046\n\t67   8    19   1977 7    DM   M    35   36   0.036\n\t68   8    19   1977 8    DO   F    32   52   0.052\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nis.na() \ud568\uc218\ub294 NA\uac00 \uc788\ub294\uc9c0 \uc5c6\ub294\uc9c0 \ud310\ub2e8\ud558\ub294 \ud568\uc218\uc785\ub2c8\ub2e4. ! \uae30\ud638\ub294 \ubd80\uc815\ud558\ub294 \uae30\ud638\ub85c NA\uac00 \uc544\ub2cc\uac83\uc744 \uc758\ubbf8\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\ub2e4\uc74c \uae30\uc900\uc744 \ub9cc\uc871\ud558\ub294 survey \ub370\uc774\ud130\uc5d0\uc11c \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \uc0c8\ub85c \uc0dd\uc131\uc2dc\ucf1c\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. species_id \uce7c\ub7fc\uacfc hindfoot_length\uc744 \ubc18\uc73c\ub85c \ub098\ub204\ub294 \uac12\uc744 \ud3ec\ud568\ud558\ub294 \uce7c\ub7fc\ub9cc \ud3ec\ud568\uc2dc\ud0a8\ub2e4. \uc0c8\ub85c\uc6b4 \uce7c\ub7fc\uba85\uc740 hindfoot_half\uc774\ub2e4. hindfoot_half \uce7c\ub7fc\uc5d0\ub294 NA \uac12\uc774 \uc5c6\uace0 \ubaa8\ub4e0 \uac12\uc740 30 \ubcf4\ub2e4 \uc791\uc544\uc57c \ud55c\ub2e4.\n\n\n\n\n\n\nIn\u00a0[29]:\n\n    \nnew_df <- surveys %>% filter(!is.na(hindfoot_length)) %>%\n        mutate(hindfoot_half = hindfoot_length/2) %>%\n        select(species_id, hindfoot_half) %>%\n        filter(hindfoot_half < 30)\nhead(new_df)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nspecies_idhindfoot_half\n\n\tNL  16.0\n\tNL  16.5\n\tDM  18.5\n\tDM  18.0\n\tDM  17.5\n\tPF   7.0\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.6. \ubd84\ud560-\uc801\uc6a9-\ubcd1\ud569\uacfc summarize() \ud568\uc218\u00b6\ub370\uc774\ud130\ubd84\uc11d \uc0c1\ub2f9\uc218 \uc791\uc5c5\uc740 \u201csplit-apply-combine(\ubd84\ud560-\uc801\uc6a9-\ubcd1\ud569)\u201d \uc73c\ub85c \ud574\uacb0\ub429\ub2c8\ub2e4. \ub370\uc774\ud130\ub97c \ucabc\uac1c\uace0, \uac01 \uc9d1\ub2e8\ubcc4\ub85c \ubd84\uc11d\uc744 \uc801\uc6a9\uc2dc\ud0a4\uace0 \ub098\uc11c, \uacb0\uacfc\ub97c \ubcd1\ud569\ud558\ub294 \uac83\uc774\uc8e0. dplyr \ud328\ud0a4\uc9c0\ub294 \uc774\ub7f0 \uc720\ud615\uc758 \uc791\uc5c5\uc744 \ub9e4\uc6b0 \uc27d\uac8c \uad6c\ud604\ud569\ub2c8\ub2e4. group_by(), summarize() \ud568\uc218\ub85c \uac01 \uc9d1\ub2e8\uc744 \ud55c\uc904\ub85c \uc694\uc57d\ud574\uc11c \ucd95\uc57d\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\uc608\uc2dc\ub85c \uc131\ubcc4\ub85c \uad6c\ubcc4\ub418\ub294 \uccb4\uc911\uc744 \uacc4\uc0b0\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[46]:\n\n    \nsurveys %>%\n    filter(sex == \"M\" | sex == \"F\") %>%\n    group_by(sex) %>%\n    summarize(mean_weight = mean(weight, na.rm = TRUE)) # na.rm\ub294 NA \uac12\uc744 \uc81c\uac70\ud569\ub2c8\ub2e4\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nsexmean_weight\n\n\tF       42.17055\n\tM       42.99538\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub2e4\uc218\uc758 \ud589\uc744 group_by()\uc5d0 \ub123\uc5b4 \uc0ac\uc6a9\ud558\ub294 \uac83\ub3c4 \uac00\ub2a5\ud569\ub2c8\ub2e4. sex \uc640 species_id \ubaa8\ub450\ub97c \uc9d1\ub2e8\uc73c\ub85c \ubb36\uace0 \uacc4\uc0b0 \ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uccb4\uc911\uc5d0 \ub300\ud55c \uc694\uc57d \ud1b5\uacc4\ub7c9\uc744 \uc0b0\ucd9c\ud558\uae30 \uc804\uc5d0 \uccb4\uc911\uc5d0 \ub300\ud55c \uacb0\uce21\uac12(NA)\uc744 \uc81c\uac70\ud588\uae30 \ub54c\ubb38\uc5d0 \ud3c9\uade0\uc744 \uacc4\uc0b0\ud560 \ub54c na.rm=TRUE\ub97c \uc0dd\ub7b5\ud574\ub3c4 \ub429\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[47]:\n\n    \nsurveys %>%\n    filter(sex == \"M\" | sex == \"F\") %>%\n    filter(!is.na(weight)) %>% \n    group_by(sex, year, species_id ) %>%\n    summarize(mean_weight = mean(weight)) %>% head\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nsexyearspecies_idmean_weight\n\n\tF         1977      DM         40.250000\n\tF         1977      DO         41.900000\n\tF         1977      DS        117.285714\n\tF         1977      OL         22.000000\n\tF         1977      OX         21.000000\n\tF         1977      PF          7.266667\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.7. \ucd1d \ud569\uacc4  \uad6c\ud558\uae30\uc640 \uac2f\uc218 \uc138\uae30(Tallying)\u00b6\uac01 \uc694\uc778\ubcc4\ub85c \uad00\uce21\uc810 \uac2f\uc218\uac00 \uba87\uac1c\ub098 \ub418\ub294\uc9c0 \ud655\uc778\ud558\ub294 \uc791\uc5c5\ud560 \ub54c\ub294 tally() \ud568\uc218\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4, \uc131\ubcc4\ub85c \uc9d1\ub2e8\uc744 \ubb36\uc5b4 \uac01 \ud589\uc758 \uac2f\uc218\ub97c \uc138\uc5b4 \ucd1d\uacc4\ub97c \uae30\ub85d\ud558\uace0\uc790 \ud558\ub294 \uacbd\uc6b0, \ub2e4\uc74c\uacfc \uac19\uc774 \uc791\uc131\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[48]:\n\n    \nsurveys %>%\n    filter(sex == \"M\" | sex == \"F\") %>%\n    group_by(sex) %>%\n    tally()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nsexn\n\n\tF    15690\n\tM    17348\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngroup_by() \uc640 summarize() \ud568\uc218\ub97c \uc0ac\uc6a9\ud574\uc11c, hindfoot_length\uc5d0 \ub300\ud55c \ud3c9\uade0, \ucd5c\uc18c\uac12, \ucd5c\ub300\uac12\uc744 \uac01 \uc885\ubcc4(species_id)\ub85c \ubb36\uc5b4 \uad6c\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[69]:\n\n    \nsurveys %>% group_by(species_id) %>% filter(!is.na(hindfoot_length)) %>%\n        summarize(mean_hindfoot_length = mean(hindfoot_length),\n                 min_hindfoot_length = min(hindfoot_length),\n                 max_hindfoot_length = max(hindfoot_length)) %>% head\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nspecies_idmean_hindfoot_lengthmin_hindfoot_lengthmax_hindfoot_length\n\n\tAH      33.0000031      35      \n\tBA      13.00000 6      16      \n\tDM      35.9823516      50      \n\tDO      35.6075526      64      \n\tDS      49.9488739      58      \n\tNL      32.2942321      70      \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.8. \ub370\uc774\ud130 \ub0b4\ubcf4\ub0b4\uae30\u00b6\uc9c0\uae08\uae4c\uc9c0 dplyr \ud328\ud0a4\uc9c0\ub97c \uc0ac\uc6a9\ud574\uc11c \ub370\uc774\ud130\uc5d0\uc11c \ud544\uc694\ud55c \uc815\ubcf4\ub97c \ucd94\ucd9c\ud558\uace0, \uc694\uc57d\ud558\ub294 \ubc29\ubc95\uc744 \ud559\uc2b5\ud588\uc2b5\ub2c8\ub2e4. \uc774\uc81c \ub370\uc774\ud130\ub97c \ub0b4\ubcf4\ub0b4\ub294 \ubc29\ubc95\uc744 \uc54c\uc544 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. CSV \ud30c\uc77c\uc744 R\ub85c \ubd88\ub7ec\uc624\ub294\ub370 \uc0ac\uc6a9\ub41c read.csv() \ud568\uc218\uc640 \ube44\uc2b7\ud558\uac8c, \ub370\uc774\ud130\ud504\ub808\uc784\uc5d0\uc11c CSV \ud30c\uc77c\uc744 \uc0dd\uc131\uc2dc\ud0a4\ub294\ub370 write.csv() \ud568\uc218\uac00 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.\n\uc6d0\ubcf8 \ub370\uc774\ud130(surveys)\uc5d0 \uacb0\uce21\uac12\uc774 \uc5c6\uc774 \uc815\uc81c\ub41c \ub370\uc774\ud130\uc14b(survey_complete)\ub97c \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[70]:\n\n    \nsurveys_complete <- surveys %>%\n  filter(species_id != \"\",         # \ube48\ubb38\uc790\uc5f4\uc744 \uac16\ub294 species_id \uc81c\uac70\n         !is.na(weight),           # weight \uacb0\uce21\uac12 \uc81c\uac70\n             !is.na(hindfoot_length),  # hindfoot_length \uacb0\uce21\uac12 \uc81c\uac70\n             sex != \"\")                # \ube48\ubb38\uc790\uc5f4\uc744 \uac16\ub294 sex \uc81c\uac70\ndim(surveys_complete)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\t30676\n\t9\n\n\n\n\n\n\n\n\n\n\n\n\n\ndim(surveys_complete)\uc744 \ud1b5\ud574 \ud655\uc778 \ud574\ubcf4\ub2c8 surveys_complete \ub370\uc774\ud130\ud504\ub808\uc784\uc740 \ud589\uac2f\uc218\uac00 30676, \uc5f4\uac2f\uc218\uac00 9\uc785\ub2c8\ub2e4. \uc774\uc81c CSV \ud30c\uc77c\ub85c \uc800\uc7a5\ud569\ub2c8\ub2e4. \uae30\ubcf8 \uc124\uc815\uc73c\ub85c, write.csv() \ud568\uc218\ub294 \ud589\uba85\uce6d(row names)\uc774 \ud3ec\ud568\ub41c \uce7c\ub7fc\uc744 \ud3ec\ud568\ud558\uc5ec \uc800\uc7a5\ud569\ub2c8\ub2e4. \uc774\ubc88 \uacbd\uc6b0\uc5d0\ub294 \ud589\uba85\uce6d\uc774 \ud589\ubc88\ud638\uc784\uc73c\ub85c row.names = FALSE\ub85c \uc124\uc815\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[35]:\n\n    \nwrite.csv(surveys_complete, file=\"surveys_complete.csv\",\n          row.names=FALSE)\n\n\n    \n\n\n\n\n\n\n\n5. \ub9c8\ubb34\ub9ac\ud558\uba70,\u00b6R\uc5d0\uc11c \ub370\uc774\ud130\ub97c \ubd88\ub7ec\uc624\uace0 \uc804\ucc98\ub9ac\ud558\ub294 \uacfc\uc815\uc744 dplyr \ud328\ud0a4\uc9c0\ub97c \uc774\uc6a9\ud574 \ud574\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uacfc\uc815\uc740 \ud544\uc218\uc801\uc774\uba74\uc11c\ub3c4 \ub178\ub3d9\uc9d1\uc57d\uc801\uc774\uae30 \ub54c\ubb38\uc5d0 \ud3c9\uc18c\uc5d0 \uc798 \uae30\uc5b5\ud574 \ub450\ub294\uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4.\n\ud30c\uc774\uc36c\uc5d0\uc11c\ub294 pandas, R\uc5d0\ub294 dplyr",
      "tags": "dataframe,dplyr,R,\ub370\uc774\ud130 \ud504\ub808\uc784",
      "url": "https://partrita.github.io/posts/dplyr/"
    },
    {
      "title": "\ud30c\uc774\uc36c\uc73c\ub85c PK \ubd84\uc11d\ud558\uae30",
      "text": "0. Pharmacokinetics(PK) \ubd84\uc11d\u00b6ELISA\ub97c \uc774\uc6a9\ud558\uc5ec \ud608\uc561\uc5d0\uc11c \uc2dc\ud5d8 \uc57d\ubb3c\uc758 \uc57d\ubb3c\ud559\uc801 \ub3d9\ud0dc(Pharmacokinetics)\ub97c \ud3c9\uac00\ud55c \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. Pharmacokinetics(\uc774\ud558, PK)\ub294 \uac04\ub2e8\ud788 \ub9d0\ud558\uba74 \ud2b9\uc815 \uc57d\ubb3c\uc5d0 \ub300\ud574\uc11c \ubab8\uc774 \uc5b4\ub5bb\uac8c \ubc18\uc751\ud558\ub294\uc9c0\ub97c \ubcf4\ub294 \uac83\uc785\ub2c8\ub2e4.\nPharmacokinetics\uc740 \uc57d\ubb3c\uc758 \ud761\uc218, \ubd84\ud3ec, \ub300\uc0ac, \ubc30\uc124\uacfc\uc815\uc744 \ub3d9\uc5ed\ud559\uc801 \uad00\uc810\uc5d0\uc11c \ud574\uc11d\ud558\uace0 \uc608\uce21\ud558\uace0\uc790 \ud558\ub294 \uac83\uc774\ub2e4. -- \uc704\ud0a4\ubc31\uacfc\n\nPK \ubd84\uc11d\uc744 \ud1b5\ud574\uc11c \uc57d\ubb3c\uc758 \ubc18\uac10\uae30\ub97c \ubd84\uc11d\ud558\uace0 \uc57d\ubb3c \uc8fc\uc785\ubc29\uc2dd\uc5d0 \ub530\ub978 \ucc28\uc774\ub97c \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n0.1. \uc2e4\ud5d8 \ub514\uc790\uc778\u00b6\uc2e4\ud5d8 \uc950\uc5d0 \uc57d\ubb3c X\ub97c \uc544\ub798\uc758 \ub450\uac00\uc9c0 \uc8fc\uc785\ubc29\uc2dd\uc73c\ub85c \uc2e4\ud5d8\ud569\ub2c8\ub2e4. \uc815\ud655\ub3c4\ub97c \uc704\ud574 3\ubc88 \ubc18\ubcf5\ud558\uc5ec \uac12\uc744 \uce21\uc815\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\nIV(intravenous injection): \uc815\ub9e5\uc8fc\uc0ac\nSC(subcutaneous injection): \ud53c\ud558\uc8fc\uc0ac  \n\n\uc8fc\uc785\ud6c4 72\uc2dc\uac04\ub3d9\uc548 \uc2e4\ud5d8 \uc950\uc758 \ud608\uc561\uc744 \ucc44\ucde8\ud574 \ub0a8\uc544\uc788\ub294 \uc57d\ubb3c X\uc758 \uc591\uc744 \uad6c\ud569\ub2c8\ub2e4.\n1. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\u00b6\ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n# load modules\n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport pandas as pd\n\n\n    \n\n\n\n\n\n\n\n\uc2e4\ud5d8 \uacb0\uacfc\ub97c \uc815\ub9ac\ud55c CSV\ud30c\uc77c\uc744 pd.read_csv()\ub97c \uc774\uc6a9\ud574 \uc77d\uc5b4\uc635\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \n# read csv file to analysis\ndf = pd.read_csv('./data/20180108_PK.csv')\nnum = df._get_numeric_data() # \uc74c\uc218 \uac12\uc744 0\uc73c\ub85c\nnum[num < 0] = 0\ndf.sample(5)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\n\n  \n    \n      \n      Inject\n      Time(h)\n      Sample\n      Wells\n      Value\n      Result\n      R\n    \n  \n  \n    \n      8\n      IV\n      8\n      8\n      C3\n      1.299\n      1.644\n      R\n    \n    \n      17\n      IV\n      48\n      20\n      C5\n      0.455\n      0.477\n      NaN\n    \n    \n      32\n      SC\n      8\n      35\n      F7\n      0.000\n      0.000\n      R\n    \n    \n      30\n      SC\n      8\n      33\n      D7\n      0.125\n      0.019\n      R\n    \n    \n      36\n      SC\n      24\n      39\n      D8\n      0.209\n      0.136\n      NaN\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n2. \ub370\uc774\ud130 \uc804\ucc98\ub9ac\u00b6Injection \ubc29\ubc95\uc5d0 \uc758\ud55c \ucc28\uc774\uc640 \uc0d8\ud50c\uc744 \ucc44\ucde8\ud55c \uc2dc\uac04, \uc2e4\ud5d8\uc6a9 \uc950\uc758 \ubc88\ud638\ub4f1\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130 \uc804\ucc98\ub9ac \uacfc\uc815\uc5d0\uc11c \ud544\uc694\uc5c6\ub294 \ud589\uc744 \uc0ad\uc81c\ud558\uace0 \ubc18\ubcf5\uce21\uc815\ud55c \uac12\uc758 \ud3c9\uade0\uac12\uacfc \ud45c\uc900\ud3b8\ucc28\ub97c \uacc4\uc0b0\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \n# \ud544\uc694\uc5c6\ub294 \ud589 \uc0ad\uc81c\ndf = df.drop(['Sample','Wells', 'Value', 'R'], axis=1) \n\n# Inject \uc885\ub958\uc5d0 \ub530\ub77c\uc11c \ub370\uc774\ud130 \ubd84\ub9ac\ndf_IV = df[df['Inject'] == 'IV']\ndf_SC = df[df['Inject'] == 'SC']\ndf_IV.head() \n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n\n  \n    \n      \n      Inject\n      Time(h)\n      Result\n    \n  \n  \n    \n      0\n      IV\n      0\n      1.637\n    \n    \n      1\n      IV\n      0\n      1.853\n    \n    \n      2\n      IV\n      0\n      1.779\n    \n    \n      3\n      IV\n      4\n      1.591\n    \n    \n      4\n      IV\n      4\n      1.234\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\ngroupby()\uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574 \uc2dc\uac04\ubcc4\ub85c \uadf8\ub8f9\ud551 \ud569\ub2c8\ub2e4. \uadf8\ub7f0\ub2e4\uc74c \ud3c9\uade0\uac12\uacfc \ud45c\uc900\ud3b8\ucc28\ub97c \uad6c\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \n# \ud3c9\uade0\uac12\nmean_IV = df_IV.groupby('Time(h)').mean()\nmean_SC = df_SC.groupby('Time(h)').mean()\n# \ud45c\uc900\ud3b8\ucc28\nstd_IV = df_IV.groupby('Time(h)').std()\nstd_SC = df_SC.groupby('Time(h)').std()\nmean_IV # IV \ud14c\uc774\ube14\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n\n  \n    \n      \n      Result\n    \n    \n      Time(h)\n      \n    \n  \n  \n    \n      0\n      1.756333\n    \n    \n      4\n      1.231333\n    \n    \n      8\n      1.655333\n    \n    \n      16\n      1.297000\n    \n    \n      32\n      1.092333\n    \n    \n      48\n      0.505667\n    \n    \n      64\n      0.102333\n    \n    \n      72\n      0.033333\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub370\uc774\ud130\uac00 \uc798 \uc815\ub3c8 \ub41c\uac83\uc744 \ud655\uc778\ud588\uc73c\ub2c8, \ub2e4\uc74c\uc73c\ub85c \uc2dc\uac01\ud654\ub97c \ud569\ub2c8\ub2e4.\n2. \uc2dc\uac01\ud654\ud558\uae30\u00b62.1. \uac04\ub2e8\ud55c \uc120\uadf8\ub798\ud504\u00b6\uc120\uadf8\ub798\ud504\ub85c \uc804\uccb4\uc801\uc778 \ubaa8\uc591\uc744 \ud655\uc778\ud574 \ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nplt.plot(mean_IV['Result'], \"o-\") # IV \uac12\nplt.plot(mean_SC['Result'], \"o--\") # SC \uac12\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n[<matplotlib.lines.Line2D at 0x7f6d0d8bc208>]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.2. \uc120\uadf8\ub798\ud504\uc5d0 \uc5d0\ub7ec\ubc14 \ucd94\uac00\ud558\uae30\u00b6\uc704\uc758 \uadf8\ub798\ud504\uc5d0\uc11c\ub294 IV injection\uc758 \ub450\ubc88\uc9f8 \uac12\uc774 \uc880 \ub0ae\uc740 \uac83 \uac19\uc740\ub370, \ud45c\uc900\ud3b8\ucc28\uac00 \ud45c\uc2dc\ub418\uc5b4 \uc788\uc9c0 \uc54a\uc544 \uc2e4\uc81c\uac12 \uc790\uccb4\uac00 \ub0ae\uc740 \uac83\uc778\uc9c0 \uc2e4\ud5d8\uc0c1\uc758 \ud3b8\ucc28\uc778\uc9c0 \uba85\ud655\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. plt.errorbar()\ub97c \uc774\uc6a9\ud574\uc11c \uc5d0\ub7ec\ubc14\ub97c \ud45c\uc2dc\ud574 \uc54c\uc544 \ubcf4\ub3c4\ub85d \ud558\uc8e0.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nfig, ax = plt.subplots()\nfig_name = 'PK_analysis'\nax.set(title = fig_name, xlabel='Time(h)', ylabel='Activity(IU/ml)')\nax.errorbar(x = mean_IV.index.values,\n            y = mean_IV['Result'],\n            yerr = std_IV['Result'], fmt = \"o-\" ,capsize=3, label = 'IV' )\nax.errorbar(x = mean_SC.index.values,\n            y = mean_SC['Result'],\n            yerr = std_SC['Result'], fmt = \"o-\" ,capsize=3, label = 'SC' )\nplt.legend() # \ubc94\ub840 \ud45c\uc2dc\nax.spines['right'].set_visible(False) # \ud504\ub808\uc784 \uc228\uae30\uae30\nax.spines['top'].set_visible(False)\n# plt.savefig(fig_name + '.png', dpi = 600 ) # \uc800\uc7a5\ud558\uae30\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIV injection\uc758 \ub450\ubc88\uc9f8 \uac12\uc758 \ud45c\uc900\ud3b8\ucc28\uac00 \ud070\uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc2e4\ud5d8\uc0c1\uc758 \ud3b8\ucc28\ub85c \uc778\ud574 \ub098\ud0c0\ub09c \ud604\uc0c1\uc774\ub77c\uace0 \ubcfc \uc218 \uc788\uaca0\uc2b5\ub2c8\ub2e4.\n3. \ubc18\uac10\uae30 \uacc4\uc0b0\u00b6Pharmacokinetics \uc2e4\ud5d8\uc758 \ubaa9\uc801\uc774\ub77c\uace0 \ud560 \uc218 \uc788\ub294 \uc57d\ubb3c\uc758 \ubc18\uac10\uae30\ub97c \uacc4\uc0b0\ud574 \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uacc4\uc0b0\uc744 \uc704\ud574\uc120 \uc2e4\ud5d8 \ub370\uc774\ud130\uc5d0 Curve fitting\uc744 \uc218\ud589\ud574\uc57c \ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc5d0\uc11c\ub294 scipy.optimize.curve_fit() \uc744 \uc0ac\uc6a9\ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \n# \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\nfrom scipy.optimize import curve_fit\nimport numpy as np\nimport warnings # \uacbd\uace0\ub97c \ubb34\uc2dc\ud569\ub2c8\ub2e4.\nwarnings.filterwarnings('ignore')\n\n\n    \n\n\n\n\n\n\n\n\uc804\uccb4\uc801\uc778 PK \ub370\uc774\ud130\uc758 \ubaa8\uc591\uc744 \ubcf4\uba74 \uac00\uc7a5 \uac04\ub2e8\ud55c one-compartment model\ub97c \uc0ac\uc6a9\ud558\uba74 \ub420 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uba3c\uc800 \uc9c0\uc218(exponential) \ud568\uc218\ub97c \uc815\uc758\ud574 Curve fitting\uc744 \ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \ndef exponential(x,D,k):\n    return D*np.exp(-k*x)\n\n\n    \n\n\n\n\n\n\n\n3.1. IV \uc8fc\uc785 \ubc18\uac10\uae30\u00b6\uacc4\uc0b0\uc744 \uc704\ud574\uc11c\ub294 IV \ub370\uc774\ud130\ub97c numpy.array()\ub85c \ubcc0\uacbd\ud574\uc57c \ud569\ub2c8\ub2e4.\nCurve fitting\u00b6\uc2e4\ud5d8\ub370\uc774\ud130\ub97c \uac00\uc7a5 \uac00\uae5d\uac8c \ubaa8\ub4e0\ub370\uc774\ud130\ub97c \uc9c0\ub098\ub294 \uc120\uc744 \uadf8\ub824\ubd05\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[18]:\n\n    \nx = np.array(mean_IV.index.values)\ny = np.array(mean_IV['Result'])\n# curve fitting \ud558\uae30\npopt, pcov = curve_fit(exponential, x, y)\n\nss_res = np.sum((y - exponential(x, *popt)) ** 2) # residual sum of squares\nss_tot = np.sum((y - np.mean(y)) ** 2) # total sum of squares\nr2 = 1 - (ss_res / ss_tot) # r-squared\nprint(\"R-squared is {:.3f}%.\".format(r2*100))\n\n# \uc2dc\uac01\ud654\nxx = np.linspace(0, 80, 1000)\nyy = exponential(xx, *popt)\nplt.plot(x,y,'o')\nplt.plot(xx,yy)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nR-squared is 86.839%.\n\n\n\n\n\n\n    Out[18]:\n\n\n\n\n\n[<matplotlib.lines.Line2D at 0x7f6cb825be10>]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub450\ubc88\uc9f8 \ud3ec\uc778\ud2b8 \uac12\uc774 \uc5ed\uc2dc\ub098 \ub9d0\uc37d\uc785\ub2c8\ub2e4. \uc804\uccb4\uc801\uc778 R2\uac12\ub3c4 \ub0ae\uc2b5\ub2c8\ub2e4. \uba87\uac1c\uc758 \uac12\uc744 \uc81c\uc678\ud558\uace0 \ub2e4\uc2dc \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[19]:\n\n    \n# 2\ubc88\uc9f8, 4\ubc88\uc9f8 \ub370\uc774\ud130\ub97c \uc81c\uc678\nselection = np.array([0,2,3,5,6,7])\nx = x[selection]\ny = y[selection]\n# curve fitting \ud558\uae30\npopt, pcov = curve_fit(exponential, x, y)\n\nss_res = np.sum((y - exponential(x, *popt)) ** 2) # residual sum of squares\nss_tot = np.sum((y - np.mean(y)) ** 2) # total sum of squares\nr2 = 1 - (ss_res / ss_tot) # r-squared\nprint(\"R-squared is {:.3f}%.\".format(r2*100))\n\n# \uc2dc\uac01\ud654\nxx = np.linspace(0, 80, 1000)\nyy = exponential(xx, *popt)\nplt.plot(x,y,'o')\nplt.plot(xx,yy)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nR-squared is 95.712%.\n\n\n\n\n\n\n    Out[19]:\n\n\n\n\n\n[<matplotlib.lines.Line2D at 0x7f6cb825bc18>]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc544\uae4c\ubcf4\ub2e4\ub294 \uc880 \ub354 \uc798\ub9de\ub294 \uac83 \uac19\uc2b5\ub2c8\ub2e4. \uc77c\ub2e8\uc740 \ubc18\uac10\uae30\ub97c \uad6c\ud574\ubcf4\ub3c4\ub85d \ud558\uc8e0.\n\ubc18\uac10\uae30 \uacc4\uc0b0\u00b6\ubc18\uac10\uae30\ub294 \uc8fc\uc785\ud55c \uc57d\ubb3c\uc758 \uc591\uc774 1/2\ub85c \uac10\uc18c\ud558\ub294 \ub370 \uc18c\uc694\ub418\ub294 \uc2dc\uac04\uc785\ub2c8\ub2e4. \ubc18\uac10\uae30\ub97c \uad6c\ud558\ub294 \uacf5\uc2dd\uc774 \ub530\ub85c \uc788\uae30\ub294 \ud569\ub2c8\ub2e4\ub9cc, \uc5ec\uae30\uc11c\ub294 Curve fiiting\uc5d0 \uc0ac\uc6a9\ud55c \ud568\uc218\uc758 \uc5ed\ud568\uc218\ub97c \uc815\uc758\ud574\uc11c \uc8fc\uc785\ud55c \uc57d\ubb3c\uc591\uc758 \uc808\ubc18\uc774 \ub418\ub294 \uc2dc\uac04\uc744 \uad6c\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[20]:\n\n    \nhalf_y = exponential(0, *popt)/2  # \uc8fc\uc785\ud55c \uc57d\ubb3c\ub7c9\uc744 2\ub85c \ub098\ub204\uc5b4 \uc90d\ub2c8\ub2e4\n# \uacc4\uc0b0\uc744 \uc704\ud55c \uc5ed\ud568\uc218\ub97c \uc815\uc758\ud569\ub2c8\ub2e4.\ndef rev_log(y,D,k):\n    \"\"\"for halflife calculate\"\"\"\n    return (np.log(y)-np.log(D))/-k\n\nhalf_life = rev_log(half_y, *popt)\nprint(\"\ubc18\uac10\uae30\ub294 {:.2f} \uc2dc\uac04 \uc785\ub2c8\ub2e4.\".format(half_life))\n# print(0.693/popt[1]) # Equation \uc5d0 \uc758\ud574 \uacc4\uc0b0\ub418\ub294 \uac12\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\ubc18\uac10\uae30\ub294 22.53 \uc2dc\uac04 \uc785\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\n\n\n\n3.2. SC \uc8fc\uc785 \ubc18\uac10\uae30\u00b6SC \uacbd\uc6b0\ub294 \ucc98\uc74c\uc5d0\ub294 \uc57d\ubb3c\uc774 \ud761\uc218\ub418\ub294 \uc2dc\uac04\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \ucc98\uc74c 3\uac1c\uc758 \uacb0\uacfc\ub294 \uc81c\uc678\ud558\uace0 \ubc18\uac10\uae30\ub97c \uad6c\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\nCurve fitting\u00b6\n\n\n\n\n\nIn\u00a0[21]:\n\n    \nx = np.array(mean_SC.index.values)\ny = np.array(mean_SC['Result'])\nx = x[3:]\ny = y[3:]\n\n# curve fitting \ud558\uae30\npopt, pcov = curve_fit(exponential, x, y)\n\nss_res = np.sum((y - exponential(x, *popt)) ** 2) # residual sum of squares\nss_tot = np.sum((y - np.mean(y)) ** 2) # total sum of squares\nr2 = 1 - (ss_res / ss_tot) # r-squared\nprint(\"R-squared is {:.3f}%.\".format(r2*100))\n\n# \uc2dc\uac01\ud654\nxx = np.linspace(16, 80, 1000)\nyy = exponential(xx, *popt)\nplt.plot(x,y,'o')\nplt.plot(xx,yy)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nR-squared is 99.541%.\n\n\n\n\n\n\n    Out[21]:\n\n\n\n\n\n[<matplotlib.lines.Line2D at 0x7f6cb7d89cf8>]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ubc18\uac10\uae30 \uacc4\uc0b0\u00b6\n\n\n\n\n\nIn\u00a0[22]:\n\n    \nhalf_y = exponential(16, *popt)/2  # \uc8fc\uc785\ud55c \uc57d\ubb3c\ub7c9\uc744 2\ub85c \ub098\ub204\uc5b4 \uc90d\ub2c8\ub2e4\n# \uacc4\uc0b0\uc744 \uc704\ud55c \uc5ed\ud568\uc218\ub97c \uc815\uc758\ud569\ub2c8\ub2e4.\ndef rev_log(y,D,k):\n    \"\"\"for halflife calculate\"\"\"\n    return (np.log(y)-np.log(D))/-k\n\nhalf_life = rev_log(half_y, *popt)\nprint(\"\ubc18\uac10\uae30\ub294 {:.2f} \uc2dc\uac04 \uc785\ub2c8\ub2e4.\".format(half_life))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\ubc18\uac10\uae30\ub294 19.93 \uc2dc\uac04 \uc785\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\n\n\n\n4. Bioavailability(BA) \uacc4\uc0b0\u00b6\n\uc57d\ubb3c\uc758 \ud761\uc218\ub294 \uc0dd\uccb4 \uc774\uc6a9\ub960(bioavailability)\ub85c \ub098\ud0c0\ub0b4\ub294\ub370, \uacbd\uad6c\ub85c \ud22c\uc5ec\ub41c \uc57d\ubb3c\uc774 \uc804\uc2e0\uc21c\ud658\uacc4\uc5d0 \ub4e4\uc5b4\uac00 \uc0dd\uccb4\uc5d0 \uc774\uc6a9\ub418\ub294 \ube44\uc728\uc744 \ub9d0\ud558\uba70, \ud22c\uc5ec \ud6c4 \ud608\uc911 \uc57d\ubb3c \ub18d\ub3c4\uc758 \ucd1d \uba74\uc801, \uc989 AUC(Area Under the Concentration- time Curve)\uac00 \uc0dd\uccb4 \uc774\uc6a9\ub960\uc758 \uc9c0\ud45c\ub85c \ud754\ud788 \uc4f0\uc774\uace0 \uc788\ub2e4. -- Kyung Soo Kim, et al. Drug Effect and Generic Substitution\n\n4.1. The absolute bioavailability\u00b6\uc815\ub9e5\ud22c\uc5ec\uc5d0 \ub300\ud55c \uc0c1\ub300\uc801\uc778 \ud761\uc218\uc728\uc744 \ub098\ud0c0\ub0b4\uba70, %\ub85c \ud45c\uc2dc\ud558\uae30\uc5d0 \uc808\ub300\uc801 \uc0dd\uccb4 \uc774\uc6a9\ub960\uc774\ub77c\uace0 \ud55c\ub2e4. \uc57d\n\ubb3c\uc744 \uc815\ub9e5\uc5d0 \ud22c\uc5ec\ud560 \ub54c\uc5d0\ub294 \uace7 \ubc14\ub85c \uc804\uc2e0\uc21c\ud658\uc5d0 \ub3c4\ub2ec\ub418\uae30 \ub54c\ubb38\uc5d0 \uc804\uc2e0\uc57d\ubb3c \ud761\uc218 \uc989 \uc0dd\uccb4 \uc774\uc6a9\ub960\uc740\n100%\uc73c\ub85c \uc0dd\uac01\ud55c\ub2e4.  -- Kyung Soo Kim, et al. Drug Effect and Generic Substitution\n\n\uc544\ub798\uc758 \uacf5\uc2dd\uc740 \uc808\ub300\uc801 \uc0dd\uccb4 \uc774\uc6a9\ub960(BA)\ub97c \uad6c\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.\n\n\npo = Oral route; \uacbd\uad6c\ud22c\uc5ec\niv = Intravenous injection; \uc815\ub9e5\uc8fc\uc0ac\nD = Dose; \ud22c\uc5ec\ub7c9\n\n\uc774\ubc88 \uc608\uc2dc\uc5d0\uc11c\ub294 \uacbd\uad6c\ud22c\uc5ec\ub300\uc2e0 SC(\ud53c\ud558\uc8fc\uc0ac) \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud574 \uc808\ub300 \uc0dd\uccb4 \uc774\uc6a9\ub960\uc744 \uad6c\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc5d0\uc11c\ub294 sklearn.metrics() \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574 \uc190\uc27d\uac8c \uadf8\ub798\ud504\uc758 AUC\ub97c \uad6c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac01\uac01\uc758 AUC\ub97c \uad6c\ud574\uc11c \uc0c1\ub300\uc801 \ube44\uad50\ub97c \ud558\uba74 BA\ub97c \uacc4\uc0b0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[24]:\n\n    \nfrom sklearn import metrics # \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\uc624\uae30\n\nx1 = np.array(mean_IV.index.values)\ny1 = np.array(mean_IV['Result'])\nx2 = np.array(mean_SC.index.values)\ny2 = np.array(mean_SC['Result'])\n\n# \uac01\uac01\uc758 AUC\ub97c \uad6c\ud569\ub2c8\ub2e4.\nIV_auc = metrics.auc(x1, y1)\nSC_auc = metrics.auc(x2, y2)\nIV_conc = 100\nSC_conc = 50\n# \uc218\uc2dd\uc5d0 \ub9de\ucdb0 BA\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\nBA = (SC_auc*IV_conc)/(IV_auc*SC_conc)\n\nprint(\"Bioavailability of SC injection is {:.2f}%.\".format(BA*100))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nBioavailability of SC injection is 12.14%.\n\n\n\n\n\n\n\n\n\n\n\n5. \ub9c8\uce58\uba70\u00b6\uc774\ubc88 \ud3ec\uc2a4\ud2b8\uc5d0\uc11c\ub294 \ud30c\uc774\uc36c\uc744 \uc774\uc6a9\ud574 \uac04\ub2e8\ud55c PK \ubd84\uc11d\uc744 \ud574\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uc800\ub3c4 \uc774\ucabd\uc758 \uc804\ubb38\uac00\uac00 \uc544\ub2c8\ub77c \uc9c1\uc811 \ucc3e\uc544\ubcf4\uba70 \uacc4\uc0b0\ud588\uc2b5\ub2c8\ub2e4. \ud2c0\ub9b0 \ubd80\ubd84\uc774 \uc788\ub2e4\uba74 \uc774\ud574\ud574\uc8fc\uc2dc\uae30 \ubc14\ub78d\ub2c8\ub2e4. \uc57d\ubb3c\uc758 \ubc18\uac10\uae30\uc640 BA\ub294 \ub2e4\uc591\ud55c PK \ubcc0\uc218\uc911\uc5d0 \uadf9\ud788 \uc77c\ubd80\uc774\uc9c0\ub9cc, \uc774\ub7ec\ud55c \ubcc0\uc218\ub97c \uad6c\ud558\ub294 \ubc29\ubc95\uc744 \uc548\ub2e4\uba74 \ub2e4\ub978 \ubcc0\uc218\ub4e4\ub3c4 \uc27d\uac8c \uacc4\uc0b0\ud560 \uc218 \uc788\uc73c\uc2e4 \uac83\uc785\ub2c8\ub2e4.",
      "tags": "Curve fitting,Pharmacokinetics,PK,Python",
      "url": "https://partrita.github.io/posts/PK/"
    },
    {
      "title": "ggpubr\ub85c \ub17c\ubb38\uae09 \ub3c4\ud45c\uadf8\ub9ac\uae30",
      "text": "0. ggpubr\u00b6\ubaa8\ub4e0 \ub0b4\uc6a9\uc740 \uacf5\uc2dd\ubb38\uc11c\uc5d0\uc11c \uac04\ucd94\ub9b0 \uac83\uc785\ub2c8\ub2e4. \uc790\uc138\ud55c\uac83\uc740 \uacf5\uc2dd\ubb38\uc11c\ub97c \uc77d\uc5b4\uc8fc\uc138\uc694.\n\nggpubr\uc740 ggplot2\uc5d0 \uae30\ubc18\ud55c R \ud328\ud0a4\uc9c0\uc785\ub2c8\ub2e4. \uc5f0\uad6c\uc790\ub4e4\uc774 \uc27d\uac8c \ub192\uc740 \uc9c8\uc758 \ub3c4\ud45c\ub97c \uadf8\ub9ac\ub294 \uac83\uc744 \ubaa9\ud45c\ub85c \ud558\uace0 \uc788\ub294 \uc2dc\uac01\ud654 \ud328\ud0a4\uc9c0\uc8e0. \uc8fc\uc694 \ud2b9\uc9d5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4:\n\nggplot2 \ud328\ud0a4\uc9c0\ub97c \uae30\ubc18\uc73c\ub85c\ud574\uc11c \uc880 \ub354 \uba85\ud655\ud55c \ubb38\ubc95\uc73c\ub85c \ubcf4\ub2e4 \uc27d\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nR \uc5b8\uc5b4\ub97c \uc798 \ubaa8\ub974\ub354\ub77c\ub3c4 \ub192\uc740 \uc9c8\uc758 \ub3c4\ud45c\ub97c \ub9cc\ub4e4\uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc790\ub3d9\uc73c\ub85c p-values \ub098 \ud1b5\uacc4\uc801 \uc720\uc758\uc131\uc744 \ud45c\uc2dc\ud560 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\uc5ec\ub7ec \ub3c4\ud45c\ub97c \ud55c \ud398\uc774\uc9c0\uc5d0 \ubc30\uc5f4 \ud560 \uc218 \uc788\ub294 \uae30\ub2a5\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\ub808\uc774\ube14\uc774\ub098 \uc0c9\uc0c1\uc744 \uc27d\uac8c \ubcc0\uacbd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uba3c\uc800 ggpubr \ub85c \uc2dc\uac01\ud654\ub97c \ud558\ub294 \uac04\ub2e8\ud55c \ubc29\ubc95\uc744 \uc0b4\ud3b4\ubcf4\uace0, \uc774\ud6c4\uc5d0 \ub2e4\uc591\ud55c \uc608\uc2dc \ub3c4\ud45c\ub97c \ubcf4\uc5ec\ub4dc\ub9ac\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\n\n1. ggpubr \uc124\uce58\ud558\uae30:\u00b6CRAN \uc744 \ud1b5\ud55c \uc124\uce58\ubc95\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\ninstall.packages(\"ggpubr\")\n\n2. ggpubr \ubd88\ub7ec\uc624\uae30:\u00b6library(\"ggpubr\")\n\n3. ggpubr\ub85c \ub3c4\ud45c \uadf8\ub9ac\uae30\u00b6\uac04\ub2e8\ud55c \uc608\uc2dc\ub97c \ub4e4\uc5b4 \uc2dc\uac01\ud654 \ubc29\ubc95\uc744 \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\ub300\uc774\ud130 \ubd88\ub7ec\uc640\uc11c \uc804\ucc98\ub9ac\ud558\uae30\n\uc2dc\uac01\ud654\ud558\uace0 \uc124\uc815\ud558\uae30\n\n3.1. \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\u00b6\n\n\n\n\n\nIn\u00a0[2]:\n\n    \n# \ud544\uc694\ud55c  \ud328\ud0a4\uc9c0 \ubd88\ub7ec\uc624\uae30\nlibrary(\"dplyr\") \nlibrary(\"ggpubr\")\noptions(warn=-1) # \uacbd\uace0\uba54\uc138\uc9c0 \ubb34\uc2dc\ud558\uae30\n\ndata(\"ToothGrowth\") # \uc608\uc81c \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\nhead(ToothGrowth,4) # \ub370\uc774\ud130 \ud14c\uc774\ube14 \ud655\uc778\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nlensuppdose\n\n\t 4.2VC  0.5 \n\t11.5VC  0.5 \n\t 7.3VC  0.5 \n\t 5.8VC  0.5 \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.2. \uc2dc\uac01\ud654 \uc124\uc815\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nggline(ToothGrowth, x = \"dose\", y = \"len\", add = \"mean_se\", # \uac01\uac01\uc758 \ucd95\uc124\uc815 \n      color = \"supp\", palette = \"npg\")+  # \uc0c9\uc0c1 \uc124\uc815\ud558\uae30\n      stat_compare_means(aes(group = supp), label = \"p.signif\", label.y = c(16, 25, 29)) + # \ud1b5\uacc4\uc801 \uc720\uc758\uc131 \ud45c\uc2dc\n      labs(list(x = 'Dose', y = 'Length', fill = 'Supp')) # \ub808\uc774\ube14 \ubcc0\uacbd\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.3. \ud55c\ud398\uc774\uc9c0\uc5d0 \uc5ec\ub7ec \ub3c4\ud45c \ub123\uae30\u00b6\uc5ec\ub7ec \ub3c4\ud45c\ub97c \ud55c\ud398\uc774\uc9c0\uc5d0 \ub123\ub294 \uae30\ub2a5\uc740 ggarrange()\uc785\ub2c8\ub2e4. cowplot\uc758 plot_grid()\ud568\uc218\uc5d0 \uae30\ubc18\ud558\uace0 \uc788\uc8e0. \uadf8\ub798\uc11c \uc0ac\uc6a9\ubc95\ub3c4 \ub3d9\uc77c\ud569\ub2c8\ub2e4.  \uc544\ub798\uc758 \uc608\uc2dc \ucf54\ub4dc\ub97c \ud655\uc778\ud558\uc138\uc694.\nggarrange(a, b, c ,  \n          labels = c(\"A\", \"B\", \"C\"),\n          ncol = 2, nrow = 2)\n\n\n\n\n\n\n\n\n4. \ub2e4\uc591\ud55c ggpubr \uc608\uc2dc\u00b6\uc544\ub798\uc5d0\ub294 \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 \ub3c4\ud45c\uc758 \uc608\uc2dc\ub97c \uc81c\uacf5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud544\uc694\ud55c \uac83\uc774 \uc788\ub294\uc9c0 \uc0b4\ud3b4\ubcf4\uc138\uc694.\n4.1. \ubd84\ud3ec(Distribution) \uc2dc\uac01\ud654\u00b6\n\n\n\n\n\nIn\u00a0[4]:\n\n    \n# \uc608\uc81c \ub370\uc774\ud130 \ub9cc\ub4e4\uae30\nset.seed(1234)\nwdata = data.frame(\n   sex = factor(rep(c(\"F\", \"M\"), each=200)),\n   weight = c(rnorm(200, 55), rnorm(200, 58)))\nhead(wdata, 4)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nsexweight\n\n\tF       53.79293\n\tF       55.27743\n\tF       56.08444\n\tF       52.65430\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \na1 <- ggdensity(wdata, x = \"weight\",\n   add = \"mean\", rug = TRUE, # Density plot with mean lines and marginal rug\n   color = \"sex\", fill = \"sex\",  # Change outline and fill colors by groups (\"sex\")\n   palette = c(\"#00AFBB\", \"#E7B800\")) # Use custom palette\n\na2 <- gghistogram(wdata, x = \"weight\",\n   add = \"mean\", rug = TRUE,\n   color = \"sex\", fill = \"sex\",\n   palette = c(\"#00AFBB\", \"#E7B800\"))\n\na3 <- ggdensity(wdata, x = \"weight\",\n   add = \"mean\", rug = TRUE,\n   fill = \"lightgray\")\n\n# Combine histogram and density plots\na4 <-  gghistogram(wdata, x = \"weight\",\n   add = \"mean\", rug = FALSE,\n   fill = \"sex\", palette = c(\"#00AFBB\", \"#E7B800\"),\n   add_density = TRUE)\n\n# \ud55c\ud398\uc774\uc9c0\uc5d0 \ub123\uae30\nggarrange(a1, a2, a3 , a4,\n          labels = c(\"A\", \"B\", \"C\", \"D\"),\n          ncol = 2, nrow = 2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.2. \ubc15\uc2a4 \uadf8\ub798\ud504(Box plots), \ubc14\uc774\uc62c\ub9b0(violin plots) \uadf8\ub798\ud504\u00b6\n\n\n\n\n\nIn\u00a0[6]:\n\n    \n# Load data\ndata(\"ToothGrowth\")\ndf <- ToothGrowth\nhead(df, 4)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nlensuppdose\n\n\t 4.2VC  0.5 \n\t11.5VC  0.5 \n\t 7.3VC  0.5 \n\t 5.8VC  0.5 \n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \n# Box plots with jittered points\np1 <- ggboxplot(df, x = \"dose\", y = \"len\",\n        color = \"dose\", palette =c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n        add = \"jitter\", shape = \"dose\")\n\n# Add p-values comparing groups\nmy_comparisons <- list( c(\"0.5\", \"1\"), c(\"1\", \"2\"), c(\"0.5\", \"2\") )\np2 <- p1 + stat_compare_means(comparisons = my_comparisons)+ # Add pairwise comparisons p-value\n        stat_compare_means(label.y = 50)                   # Add global p-value\n\n# Violin plots with box plots inside\np3 <- ggviolin(df, x = \"dose\", y = \"len\", fill = \"dose\",\n         palette = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n         add = \"boxplot\", add.params = list(fill = \"white\"))+\n         stat_compare_means(comparisons = my_comparisons, label = \"p.signif\")+ # Add significance levels\n         stat_compare_means(label.y = 50)        # Add global the p-value \n\nggarrange(p1, p2, p3,\n          labels = c(\"A\", \"B\", \"C\"),\n          ncol = 2, nrow = 2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.3. \ub9c9\ub300 \uadf8\ub798\ud504(Bar plots)\u00b64.3.1 \uac04\ub2e8\ud55c \ub9c9\ub300 \uadf8\ub798\ud504\u00b6\n\n\n\n\n\nIn\u00a0[8]:\n\n    \n# example Data\ndf <- data.frame(dose=c(\"D0.5\", \"D1\", \"D2\"),\n   len=c(4.2, 10, 29.5))\ndf2 <- data.frame(supp=rep(c(\"VC\", \"OJ\"), each=3),\n   dose=rep(c(\"D0.5\", \"D1\", \"D2\"),2),\n   len=c(6.8, 15, 33, 4.2, 10, 29.5))\ndf3 <- ToothGrowth\n\n# Change position: Interleaved (dodged) bar plot\np1 <- ggbarplot(df2, \"dose\", \"len\",\n        fill = \"supp\", color = \"supp\", palette = \"Paired\",\n        position = position_dodge(0.8))\n\n# Change fill and outline color add labels inside bars\np2 <- ggbarplot(df, \"dose\", \"len\",\n        fill = \"dose\", color = \"dose\",\n        palette = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n        label = TRUE, lab.pos = \"in\", lab.col = \"white\")\n\n# Add jitter points and errors (mean_se)\np3 <- ggbarplot(df3, x = \"dose\", y = \"len\",\n        add = c(\"mean_se\", \"jitter\"))\n\n# Multiple groups with error bars and jitter point\np4 <- ggbarplot(df3, x = \"dose\", y = \"len\", color = \"supp\",\n         add = \"mean_se\", palette = c(\"#00AFBB\", \"#E7B800\"),\n         position = position_dodge(0.8))\n\nggarrange(p1, p2, p3, p4,\n          labels = c(\"A\", \"B\", \"C\", \"D\"),\n          ncol = 2, nrow = 2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.3.2 \uc815\ub3c8\ub41c(Ordered) \ubc14 \uadf8\ub798\ud504\u00b6cyl\uc5d0 \ub530\ub77c\uc11c \uadf8\ub8f9\ud654\ud558\uace0, \uc804\uccb4\uc801\uc73c\ub85c \uc815\ub82c\ud55c \uadf8\ub798\ud504(A)\uc640 \uadf8\ub8f9\ubcc4\ub85c \uc815\ub82c\ud55c \uadf8\ub798\ud504(B)\uc758 \uc2dc\uac01\ud654\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \n# \uc0d8\ud50c \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\ndata(\"mtcars\")\ndfm <- mtcars\ndfm$cyl <- as.factor(dfm$cyl) # Convert the cyl variable to a factor\ndfm$name <- rownames(dfm) # Add the name colums\nhead(dfm[, c(\"name\", \"wt\", \"mpg\", \"cyl\")]) # \ub370\uc774\ud130 \uc0b4\ud3b4\ubcf4\uae30\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nnamewtmpgcyl\n\n\tMazda RX4Mazda RX4        2.620            21.0             6                \n\tMazda RX4 WagMazda RX4 Wag    2.875            21.0             6                \n\tDatsun 710Datsun 710       2.320            22.8             4                \n\tHornet 4 DriveHornet 4 Drive   3.215            21.4             6                \n\tHornet SportaboutHornet Sportabout3.440            18.7             8                \n\tValiantValiant          3.460            18.1             6                \n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \na1 <- ggbarplot(dfm, x = \"name\", y = \"mpg\",\n          fill = \"cyl\",               # change fill color by cyl\n          color = \"white\",            # Set bar border colors to white\n          palette = \"jco\",            # jco journal color palett. see ?ggpar\n          sort.val = \"desc\",          # Sort the value in dscending order\n          sort.by.groups = FALSE,     # Don't sort inside each group\n          x.text.angle = 90)           # Rotate vertically x axis texts\n\na2 <- ggbarplot(dfm, x = \"name\", y = \"mpg\",\n          fill = \"cyl\",               # change fill color by cyl\n          color = \"white\",            # Set bar border colors to white\n          palette = \"jco\",            # jco journal color palett. see ?ggpar\n          sort.val = \"asc\",           # Sort the value in dscending order\n          sort.by.groups = TRUE,      # Sort inside each group\n          x.text.angle = 90)           # Rotate vertically x axis texts\n\nggarrange(a1, a2,\n          labels = c(\"A\", \"B\"),\n          ncol = 1, nrow = 2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.3.3. \ud3b8\ucc28(Deviation) \uadf8\ub798\ud504\u00b6\ud3b8\ucc28(deviation) \uadf8\ub798\ud504\ub294 \uac01\uac01\uc758 \uac12\ub4e4\uc774 \ud3c9\uade0\uac12 \ub300\ube44 \uc5bc\ub9c8\ub098 \ucc28\uc774\uac00 \ub098\ub294\uc9c0\ub97c \uc2dc\uac01\ud654 \ud569\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 \uc5f0\ube44 \ud3c9\uade0\uac12\uc5d0 \ube44\uad50\ud574\uc11c \uac01 \ucc28\ub7c9\uc758 \ud3b8\ucc28\uac00 \uc5bc\ub9c8\uc778\uc9c0 \uacc4\uc0b0\ud574(Z-score) \ub3c4\ud45c\ub97c \uadf8\ub824\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \n# Calculate the z-score of the mpg data\ndfm$mpg_z <- (dfm$mpg -mean(dfm$mpg))/sd(dfm$mpg)\ndfm$mpg_grp <- factor(ifelse(dfm$mpg_z < 0, \"low\", \"high\"), \n                     levels = c(\"low\", \"high\"))\n# Inspect the data\nhead(dfm[, c(\"name\", \"wt\", \"mpg\", \"mpg_z\", \"mpg_grp\", \"cyl\")])\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nnamewtmpgmpg_zmpg_grpcyl\n\n\tMazda RX4Mazda RX4        2.620            21.0              0.1508848       high             6                \n\tMazda RX4 WagMazda RX4 Wag    2.875            21.0              0.1508848       high             6                \n\tDatsun 710Datsun 710       2.320            22.8              0.4495434       high             4                \n\tHornet 4 DriveHornet 4 Drive   3.215            21.4              0.2172534       high             6                \n\tHornet SportaboutHornet Sportabout3.440            18.7             -0.2307345       low              8                \n\tValiantValiant          3.460            18.1             -0.3302874       low              6                \n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \n# Create an ordered bar plot, colored according to the level of mpg:\nggbarplot(dfm, x = \"name\", y = \"mpg_z\",\n          fill = \"mpg_grp\",           # change fill color by mpg_level\n          color = \"white\",            # Set bar border colors to white\n          palette = \"jco\",            # jco journal color palett. see ?ggpar\n          sort.val = \"desc\",          # Sort the value in descending order\n          sort.by.groups = FALSE,     # Don't sort inside each group\n          x.text.angle = 90,          # Rotate vertically x axis texts\n          ylab = \"MPG z-score\",\n          legend.title = \"MPG Group\",\n          rotate = TRUE,\n          ggtheme = theme_minimal())\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.4 \uc810 \uadf8\ub798\ud504(Dot plot)\u00b64.4.1 \ub9c9\ub300\uc0ac\ud0d5(Lollipop) plot\u00b6\ub9c9\ub300\uc0ac\ud0d5 \uadf8\ub798\ud504\ub294 \ub9ce\uc740 \uc591\uc758 \ub370\uc774\ud130\ub97c \uc2dc\uac01\ud654\ud558\ub294\ub370 \uc801\ud569\ud569\ub2c8\ub2e4. \uc544\ub798 \uc608\uc2dc\uc5d0\uc11c\ub294 cyl \uadf8\ub8f9\uc5d0 \ub9de\ucdb0\uc11c \uc0c9\uc0c1\uc744 \uad6c\ubd84\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \nggdotchart(dfm, x = \"name\", y = \"mpg\",\n           color = \"cyl\",                                # Color by groups\n           palette = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"), # Custom color palette\n           sorting = \"descending\",                       # Sort value in descending order\n           add = \"segments\",                             # Add segments from y = 0 to dots\n           rotate = TRUE,                                # Rotate vertically\n           group = \"cyl\",                                # Order by groups\n           dot.size = 6,                                 # Large dot size\n           label = round(dfm$mpg),                        # Add mpg values as dot labels\n           font.label = list(color = \"white\", size = 9, \n           vjust = 0.5),               # Adjust label parameters\n           ggtheme = theme_pubr())                        # ggplot2 theme\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.5. \ub3c4\ud45c\uc5d0 \uc124\uba85(figure legend) \ub123\uae30\u00b6\ub3c4\ud45c \ubc11\uc5d0 \uc124\uba85\uc744 \ub123\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4. \ud55c\uc904\ub2e8\uc704\ub85c \ub0b4\uc6a9\uc744 \ub04a\uc5b4\uc11c \uc791\uc131\ud574\uc57c, \uc0b0\ucd9c\ubb3c\uc5d0\uc11c \uc904\uc774 \uc798 \ub9de\uac8c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\uc544\ub798\uc758 \uc608\uc2dc \ucf54\ub4dc\ub97c \ud655\uc778\ud558\uc138\uc694.\nggparagraph(text, color = NULL, size = NULL, face = NULL, family = NULL,\n  lineheight = NULL)\n# S3 method for splitText\ndrawDetails(x, recording)\n\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \n# Density plot\ndensity.p <- ggdensity(iris, x = \"Sepal.Length\",\n                      fill = \"Species\", palette = \"jco\")\n# Text plot\ntext <- paste(\"Iris data set gives the measurements in cm\",\n             \"of the variables sepal length and width\",\n             \"and petal length and width, respectively,\",\n             \"for 50 flowers from each of 3 species of iris.\",\n             \"The species are Iris setosa, versicolor, and virginica.\", sep = \" \")\ntext.p <- ggparagraph(text, face = \"italic\", size = 12)\n\n# Arrange the plots on the same page\nggarrange(density.p, text.p,\n         ncol = 1, nrow = 2,\n         heights = c(1, 0.3))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.6. \uc120 \uadf8\ub798\ud504\u00b6\n\n\n\n\n\nIn\u00a0[15]:\n\n    \n# Data: ToothGrowth data set we'll be used.\ndf3 <- ToothGrowth\n# Add error bars: mean_se\n# (other values include: mean_sd, mean_ci, median_iqr, ....)\n# Add labels\np1 <- ggline(df3, x = \"dose\", y = \"len\", add = \"mean_se\")\n# Add jitter points and errors (mean_se)\np2 <- ggline(df3, x = \"dose\", y = \"len\",\n add = c(\"mean_se\",'jitter'))\n# Multiple groups with error bars\np3 <- ggline(df3, x = \"dose\", y = \"len\", color = \"supp\",\n add = \"mean_se\", palette = c(\"#00AFBB\", \"#FC4E07\"))\n\nggarrange(p1, p2, p3,\n          labels = c(\"A\", \"B\", \"C\"),\n          ncol = 2, nrow = 2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.7. \ud788\uc2a4\ud1a0\uadf8\ub7a8\uacfc \uc0b0\ud3ec\ub3c4(Scatter Plot with Histograms)\u00b6\ud788\uc2a4\ud1a0\uadf8\ub7a8\uacfc \uc0b0\ud3ec\ub3c4\ub97c \ud558\ub098\uc758 \ub3c4\ud45c\uc5d0 \ud569\uccd0\uc11c \uadf8\ub824\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \n# Grouped data\nggscatterhist(\n iris, x = \"Sepal.Length\", y = \"Sepal.Width\",\n color = \"Species\", size = 3, alpha = 0.6,\n palette = c(\"#00AFBB\", \"#E7B800\", \"#FC4E07\"),\n margin.params = list(fill = \"Species\", color = \"black\", size = 0.2))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.8. \uc0c1\uad00\ubd84\uc11d(Correlation Coefficients)\uacfc P-values \ucd94\uac00\ud558\uae30\u00b6\uc0b0\ud3ec\ub3c4\uc5d0 \uc0c1\uad00\ubd84\uc11d\uacfc p-values\ub97c \ucd94\uac00\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[17]:\n\n    \n# Load data\ndata(\"mtcars\")\ndf <- mtcars\ndf$cyl <- as.factor(df$cyl)\n\n# Scatter plot with correlation coefficient\nsp <- ggscatter(df, x = \"wt\", y = \"mpg\",\n   add = \"reg.line\",  # Add regressin line\n   add.params = list(color = \"blue\", fill = \"lightgray\"), # Customize reg. line\n   conf.int = TRUE) # Add confidence interval\n# Add correlation coefficient\np1 <- sp + stat_cor(method = \"pearson\", label.x = 3, label.y = 30)\n# Color by groups and facet\nsp <- ggscatter(df, x = \"wt\", y = \"mpg\",\n   color = \"cyl\", palette = \"jco\",\n   add = \"reg.line\", conf.int = TRUE)\np2 <- sp + stat_cor(aes(color = cyl), label.x = 3)\n# Scatter plot with ellipses and group mean points\np3 <- ggscatter(df, x = \"wt\", y = \"mpg\",\n   color = \"cyl\", shape = \"cyl\",\n   mean.point = TRUE, ellipse = TRUE)+\n   stat_stars(aes(color = cyl))\n\nggarrange(p1, p2, p3,\n          labels = c(\"A\", \"B\", \"C\"),\n          ncol = 2, nrow = 2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.9. Plot Paired Data\u00b6\n\n\n\n\n\nIn\u00a0[18]:\n\n    \n# Example data\nbefore <-c(200.1, 190.9, 192.7, 213, 241.4, 196.9, 172.2, 185.5, 205.2, 193.7)\nafter <-c(392.9, 393.2, 345.1, 393, 434, 427.9, 422, 383.9, 392.3, 352.2)\n\nd <- data.frame(before = before, after = after)\np1 <- ggpaired(d, cond1 = \"before\", cond2 = \"after\", width = 0.0,\n    line.color = \"gray\", line.size = 0.4, palette = \"npg\")\np2 <- ggpaired(d, cond1 = \"before\", cond2 = \"after\", width = 0.2,\n    line.color = \"gray\", line.size = 0.4, palette = \"aaas\")\np3 <- ggpaired(d, cond1 = \"before\", cond2 = \"after\", width = 0.2,\n    line.color = \"gray\", line.size = 0.4, fill = \"condition\",palette = \"npg\")\nggarrange(p1, p2, p3,\n          labels = c(\"A\", \"B\", \"C\"),\n          ncol = 2, nrow = 2)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n4.10.  P-values \ub97c \ubc15\uc2a4 \uadf8\ub798\ud504\uc5d0 \ucd94\uac00\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[19]:\n\n    \n# Load data\ndata(\"ToothGrowth\")\nhead(ToothGrowth)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\nlensuppdose\n\n\t 4.2VC  0.5 \n\t11.5VC  0.5 \n\t 7.3VC  0.5 \n\t 5.8VC  0.5 \n\t 6.4VC  0.5 \n\t10.0VC  0.5 \n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[20]:\n\n    \n# Two independent groups\np <- ggboxplot(ToothGrowth, x = \"supp\", y = \"len\",\n    color = \"supp\", palette = \"npg\", add = \"jitter\")\n\n#  Add p-value\np1 <- p + stat_compare_means(method = \"t.test\")\n\n# Paired samples\np2 <- ggpaired(ToothGrowth, x = \"supp\", y = \"len\",\n    color = \"supp\", line.color = \"gray\", line.size = 0.4,\n    palette = \"npg\")+\n    stat_compare_means(paired = TRUE, method = \"t.test\")\n\n# More than two groups, Pairwise comparisons: Specify the comparisons you want\nmy_comparisons <- list( c(\"0.5\", \"1\"), c(\"1\", \"2\"), c(\"0.5\", \"2\") )\np3 <- ggboxplot(ToothGrowth, x = \"dose\", y = \"len\",\n          color = \"dose\", palette = \"npg\")+\n# Add pairwise comparisons p-value\n    stat_compare_means(comparisons = my_comparisons, label.y = c(29, 35, 40))+\n    stat_compare_means(label.y = 45)     # Add global Anova p-value\n\n# Multiple pairwise test against a reference group\np4 <- ggboxplot(ToothGrowth, x = \"dose\", y = \"len\",\n    color = \"dose\", palette = \"npg\")+\n    stat_compare_means(method = \"anova\", label.y = 40)+ # Add global p-value\n    stat_compare_means(aes(label = ..p.signif..),\n                      method = \"t.test\", ref.group = \"0.5\")\n\nggarrange(p1, p2, p3, p4,  ncol = 2, nrow = 2,\n          labels = c(\"A\", \"B\",\"C\",\"D\"))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[21]:\n\n    \n# Multiple grouping variables\np <- ggboxplot(ToothGrowth, x = \"supp\", y = \"len\",\n              color = \"supp\", palette = \"npg\",\n              add = \"jitter\",\n              facet.by = \"dose\", short.panel.labs = FALSE)\n# Use only p.format as label. Remove method name.\np5 <- p + stat_compare_means(aes(label = paste0(\"p = \", ..p.format..)))\np5\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n5. \uac04\ub2e8\ud55c \ud1b5\uacc4 \ubd84\uc11d\u00b6\uc704\uc5d0\uc11c \uc0ac\uc6a9\ud55c ToothGrowth \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[22]:\n\n    \n# Load data\ndata(\"ToothGrowth\")\ndf <- ToothGrowth\n\n\n    \n\n\n\n\n\n\nIn\u00a0[23]:\n\n    \n# One-sample test\ncompare_means(len ~ 1, df, mu = 0)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n.y.group1group2pp.adjp.formatp.signifmethod\n\n\tlen         1           null model  1.664007e-111.664007e-111.7e-11     ****        Wilcoxon    \n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[24]:\n\n    \n# Two-samples unpaired test\ncompare_means(len ~ supp, df)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n.y.group1group2pp.adjp.formatp.signifmethod\n\n\tlen       OJ        VC        0.064490670.064490670.064     ns        Wilcoxon  \n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[25]:\n\n    \n# Two-samples paired test\ncompare_means(len ~ supp, df, paired = TRUE)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n.y.group1group2pp.adjp.formatp.signifmethod\n\n\tlen        OJ         VC         0.0043125540.0043125540.0043     **         Wilcoxon   \n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[26]:\n\n    \n# Compare supp levels after grouping the data by \"dose\"\ncompare_means(len ~ supp, df, group.by = \"dose\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\ndose.y.group1group2pp.adjp.formatp.signifmethod\n\n\t0.5        len        OJ         VC         0.0231864270.04637285 0.023      *          Wilcoxon   \n\t1.0        len        OJ         VC         0.0040303670.01209110 0.004      **         Wilcoxon   \n\t2.0        len        OJ         VC         1.0000000001.00000000 1.000      ns         Wilcoxon   \n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[27]:\n\n    \n# pairwise comparisons\n# As dose contains more thant two levels ==>\n# pairwise test is automatically performed.\ncompare_means(len ~ dose, df)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n.y.group1group2pp.adjp.formatp.signifmethod\n\n\tlen         0.5         1           7.020855e-061.404171e-057.0e-06     ****        Wilcoxon    \n\tlen         0.5         2           8.406447e-082.521934e-078.4e-08     ****        Wilcoxon    \n\tlen         1           2           1.772382e-041.772382e-040.00018     ***         Wilcoxon    \n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[28]:\n\n    \n# Comparison against reference group\ncompare_means(len ~ dose, df, ref.group = \"0.5\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n.y.group1group2pp.adjp.formatp.signifmethod\n\n\tlen         0.5         1           7.020855e-067.020855e-067.0e-06     ****        Wilcoxon    \n\tlen         0.5         2           8.406447e-081.681289e-078.4e-08     ****        Wilcoxon    \n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[29]:\n\n    \n# Comparison against all\ncompare_means(len ~ dose, df, ref.group = \".all.\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n.y.group1group2pp.adjp.formatp.signifmethod\n\n\tlen         .all.       0.5         5.078788e-050.00015236365.1e-05     ****        Wilcoxon    \n\tlen         .all.       1           7.640429e-010.76404293860.76404     ns          Wilcoxon    \n\tlen         .all.       2           1.791243e-040.00035824860.00018     ***         Wilcoxon    \n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[30]:\n\n    \n# Anova test\ncompare_means(len ~ dose, df, method = \"anova\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n.y.pp.adjp.formatp.signifmethod\n\n\tlen         9.532727e-169.532727e-169.5e-16     ****        Anova       \n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[31]:\n\n    \n# kruskal.test\ncompare_means(len ~ dose, df, method = \"kruskal.test\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n.y.pp.adjp.formatp.signifmethod\n\n\tlen           1.475207e-09  1.475207e-09  1.5e-09       ****          Kruskal-Wallis\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6. \ub354 \uc77d\uc5b4\ubcfc\uac83\u00b6\nEasy Way to Mix Multiple Graphs on The Same Page\nAdd P-values and Significance Levels to ggplots\n\n7. \ub9c8\uce58\uba70\u00b6ggpubr\ub294 \uc815\ub9d0 \ub531 \ud544\uc694\ud55c \uae30\ub2a5\uc744 \uc544\uc8fc \uc27d\uac8c \uc0ac\uc6a9\ud560 \uc218 \uc788\uac8c \ub514\uc790\uc778\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ub108\ubb34 \uacfc\ud558\uc9c0\ub3c4 \uc54a\uace0 \ub300\ubd80\ubd84\uc758 \uacfc\ud559\uc800\ub110\uc5d0\uc11c \uc0ac\uc6a9\ub418\ub294 \uc2dc\uac01\ud654\ub97c \uc9c0\uc6d0\ud558\uc8e0. \uac04\ub2e8\ud558\uac8c \ud1b5\uacc4\ubd84\uc11d\uc744 \ud560 \uc218 \uc788\ub2e4\ub294 \uc810\ub3c4 \ub9c8\uc74c\uc5d0 \ub4ed\ub2c8\ub2e4. \ub2e4\uc74c\uc5d0\ub294 \ub370\uc774\ud130 \uc804\ucc98\ub9ac\uc5d0 \uc0ac\uc6a9\ub418\ub294 dplyr \ud328\ud0a4\uc9c0\uc5d0 \ub300\ud574 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.",
      "tags": "ggpubr,R,t-test,visualization,\uc2dc\uac01\ud654",
      "url": "https://partrita.github.io/posts/ggpubr/"
    },
    {
      "title": "\ud30c\uc774\uc36c\uc73c\ub85c \uc0ac\ud6c4\uac80\uc815(Post Hoc Analysis)",
      "text": "\ucd9c\ucc98: ca.sfu.ca , statedu\n\uc0ac\ud6c4\uac80\uc815(Post Hoc Analysis)\uc758 \ud544\uc694\uc131\u00b6ANOVA \ubd84\uc11d\uc758 \ubb38\uc81c\ub294 \ub2e4\ub974\ub2e4\ub294 \uac83\uc740 \uc54c\uc9c0\ub9cc, \uc5b4\ub5a4 \uc9d1\ub2e8\uac04\uc758 \ucc28\uc774\uac00 \uc788\ub294\uc9c0\ub294 \uc54c \uc218 \uc5c6\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub9cc\ub4e4\uc5b4\uc9c4 \ubc29\ubc95\uc774 \uc0ac\ud6c4\uac80\uc815\uc785\ub2c8\ub2e4.\npost hoc\uc740 \ub77c\ud2f4\uc5b4\ub85c \"after this\"\uc758 \ub73b\uc785\ub2c8\ub2e4.\n\n\uc0ac\ud6c4\uac80\uc815\uc5d0\ub3c4 \uc5ec\ub7ec \uc885\ub958\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uadf8 \uc911\uc5d0\uc11c \ub300\ud45c\uc801\uc73c\ub85c \uc4f0\uc774\ub294 3\uac00\uc9c0\ub97c \uaf3d\uc73c\uba74 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\nTukey's HSD (Honest Significant Difference) test.\nDuncan\u2019s new multiple range test (MRT)\nScheff\u00e9\u2019s Method\n\n\uc5ec\uae30\uc5d0\uc11c \uba85\uce6d\ub4e4\uc740 \ubaa8\ub450 \ud574\ub2f9 \ubc29\ubc95\uc744 \uac1c\ubc1c\ud55c \ud559\uc790\uc758 \uc774\ub984\uc744 \ub530\uc11c Tukey, Duncan, Scheffe\ub77c\uace0 \ubd80\ub974\uaca0\uc2b5\ub2c8\ub2e4. \uac01\uac01\uc744 \ubbfc\uac10\ub3c4(sensitivity)\ub85c \uad6c\ubd84\ud558\uba74 Scheffe < Tukey < Duncan \ub85c \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ub2e4\uc2dc\ub9d0\ud574, Duncan\uc758 \ubc29\ubc95\uc740 \uc791\uc740 \ucc28\uc774\uc5d0\ub3c4 \ucc28\uc774\uac00 \ub09c\ub2e4\ub77c\uace0 \ud558\uc9c0\ub9cc, Scheffe\uc758 \ubc29\ubc95\uc740 \ud655\uc2e4\ud55c \ucc28\uc774\uac00 \ub098\uc57c\ub9cc \ube44\ub85c\uc18c \ucc28\uc774\uac00 \uc788\ub2e4\ub77c\uace0 \ud310\ub2e8\ud569\ub2c8\ub2e4.\n\uc790\uc5f0\uacfc\ud559\uc5d0\uc11c \uc2e4\ud5d8\uc744 \ud560 \uacbd\uc6b0\uc5d0\ub294 Tukey\uc758 \ubc29\ubc95\uc744 \uc8fc\ub85c \uc774\uc6a9\ud558\uba70, Duncan\uc740 \uc0ac\ud68c\uacfc\ud559, \uc2ec\ub9ac\ud559 \ub4f1\uacfc \uc124\ubb38\uc870\uc0ac\uc778 \uacbd\uc6b0\uc5d0 \ub9ce\uc774 \uc774\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.\nTukey' HSD test\u00b6\uc800\ub294 Tukey test\ub97c \ud30c\uc774\uc36c\uc73c\ub85c \uc218\ud589\ud574\ubcf4\ub824\uace0 \ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc5d0\uc11c\ub294 \uc774\ubbf8 statsmodels\ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0 \uad6c\ud604\uc774 \ub418\uc5b4 \uac00\uc838\ub2e4 \uc4f0\uae30\ub9cc \ud558\uba74 \ub429\ub2c8\ub2e4.\n\uc774\uc804 \ud3ec\uc2a4\ud305\uc778 \ud30c\uc774\uc36c\uc73c\ub85c ANOVA \ubd84\uc11d \uc758 \uc608\uc81c\ub97c \uc7ac\uc0ac\uc6a9 \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n# \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\nimport pandas as pd\nimport urllib\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline\n\n# url\ub85c \ub370\uc774\ud130 \uc5bb\uc5b4\uc624\uae30\nurl = 'https://raw.githubusercontent.com/thomas-haslwanter/statsintro_python/master/ipynb/Data/data_altman/altman_910.txt'\ndata = np.genfromtxt(urllib.request.urlopen(url), delimiter=',')\n\n# Sort them into groups, according to column 1\ngroup1 = data[data[:,1]==1,0]\ngroup2 = data[data[:,1]==2,0]\ngroup3 = data[data[:,1]==3,0]\n\n# pandas\ub85c \ub370\uc774\ud130 \ubd88\ub7ec\uc624\uae30\ndf = pd.DataFrame(data,columns=['value', 'treatment']).set_index('treatment')\n\n# \uc608\uc2dc \ub370\uc774\ud130 \uc2dc\uac01\ud654 \ud558\uae30\nplot_data = [group1, group2, group3]\nax = plt.boxplot(plot_data)\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc774 \uc608\uc81c\ub294 ANOVA \ubd84\uc11d\uc744 \ud1b5\ud574 \ud1b5\uacc4\uc801\uc73c\ub85c \uc720\uc758\ud55c \ucc28\uc774\uac00 \uc788\ub2e4\ub294\uac83\uc744 \uc54c\uc544 \ub0c8\ub294\ub370\uc694. \uc774\ubc88\uc5d0\ub294 \uc0ac\ud6c4\uac80\uc815\uc744 \ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\nstatsmodels\uc758 Tukey test\ub97c \ud558\uae30 \uc704\ud574\uc11c\ub294 dataframe\uc758 \ud615\ud0dc\ub97c \ubcc0\uacbd\ud574\uc918\uc57c \ud569\ub2c8\ub2e4. \ud558\ub098\uc758 \uceec\ub7fc\uc740 \ubd84\ub958\ud560\uc218 \uc788\ub294 \uc774\ub984(label)\uc744 \ub2e4\ub978 \uceec\ub7fc\uc740 \uc2e4\ud5d8\uac12(values)\ub97c \uac00\uc9c0\uace0 \uc788\ub294 \ud615\ud0dc\uc5ec\uc57c \ud558\uc8e0. \ud558\uc9c0\ub9cc \uac71\uc815\ud560\uac83\uc740 \uc5c6\uc5b4\uc694. pandas\ub97c \uc0ac\uc6a9\ud558\uba74 \uac04\ub2e8\ud558\uac8c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \ndf.head()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      value\n    \n    \n      treatment\n      \n    \n  \n  \n    \n      1.0\n      243.0\n    \n    \n      1.0\n      251.0\n    \n    \n      1.0\n      275.0\n    \n    \n      1.0\n      291.0\n    \n    \n      1.0\n      347.0\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc6d0\ub798\uc758 \ub370\uc774\ud130 \ud615\ud0dc\ub294 \uc704\uc640 \uac19\uc2b5\ub2c8\ub2e4. \uc774\uac83\uc744 reset_index() \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574 index\ub97c \ud480\uc5b4\uc90d\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \ndf2 = df.reset_index()\ndf2.head()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      treatment\n      value\n    \n  \n  \n    \n      0\n      1.0\n      243.0\n    \n    \n      1\n      1.0\n      251.0\n    \n    \n      2\n      1.0\n      275.0\n    \n    \n      3\n      1.0\n      291.0\n    \n    \n      4\n      1.0\n      347.0\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub370\uc774\ud130\ub294 \ub2e4 \uc900\ube44\uac00 \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc774\uc81c \uc0ac\ud6c4\uac80\uc99d\uc778 Tukey test\uc744 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nfrom statsmodels.stats.multicomp import pairwise_tukeyhsd\n\nposthoc = pairwise_tukeyhsd(df2['value'], df2['treatment'], alpha=0.05)\nprint(posthoc)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nMultiple Comparison of Means - Tukey HSD,FWER=0.05\n===============================================\ngroup1 group2 meandiff   lower    upper  reject\n-----------------------------------------------\n 1.0    2.0   -60.1806 -116.6056 -3.7555  True \n 1.0    3.0   -38.625  -104.8246 27.5746 False \n 2.0    3.0   21.5556   -43.2141 86.3252 False \n-----------------------------------------------\n\n\n\n\n\n\n\n\n\n\n\n\uacb0\uacfc\ub97c \ubcf4\uba74 \uadf8\ub8f9 1.0\uacfc 2.0\uc5d0\uc11c\ub9cc \ud1b5\uacc4\uc801\uc778 \uc720\uc758\ubbf8\uc131(P-value < 0.05)\uc744 \uac00\uc9c8 \uc218 \uc788\ub294\uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\uc81c \uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \uc9c1\uad00\uc801\uc73c\ub85c \uc0b4\ud3b4\ubcf4\uc8e0.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nfig = posthoc.plot_simultaneous()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uadf8\ub9bc\uc5d0\uc11c \ubcfc \uc218 \uc788\ub4ef\uc774, \uadf8\ub8f9 1.0\uacfc 2.0\uc740 \uc11c\ub85c \uacb9\uce58\uc9c0 \uc54a\ub294\uac83\uc744 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubc18\uba74\uc5d0 \ub2e4\ub978 \uacbd\uc6b0\uc5d0\uc11c\ub294 \uacb9\uce58\uae30 \ub54c\ubb38\uc5d0 \uc720\uc758\ubbf8\ud55c \ucc28\uc774\uac00 \uc5c6\ub2e4\uace0 \ud560 \uc218 \uc788\uc8e0.\n\uacb0\ub860\u00b6\n\ubd84\uc0b0\ubd84\uc11d(ANOVA)\ub97c \ud1b5\ud574 3\uac00\uc9c0 \uadf8\ub8f9\uac04\uc5d0 \ud1b5\uacc4\uc801\uc778 \ucc28\uc774\uac00 \uc788\ub2e4\ub294 \uac83\uc744 \uc99d\uba85\ud588\uace0,\n\uc0ac\ud6c4\uac80\uc815\uc744 \ud1b5\ud574 \uadf8\ub8f9 1.0\uacfc 2.0\uc758 \ud3c9\uade0\uc774 \uc720\uc758\ubbf8\ud55c \ucc28\uc774\uac00 \uc788\ub2e4\ub294 \uac83\uc744 \ubcf4\uc558\uc2b5\ub2c8\ub2e4.",
      "tags": "post hoc,Python,statstics,\uc0ac\ud6c4\uac80\uc815,\ud1b5\uacc4\ubd84\uc11d",
      "url": "https://partrita.github.io/posts/post-hoc-analysis/"
    },
    {
      "title": "\uce74\uce74\uc624\uc758 REST API \uc0ac\uc6a9\ud558\uae30",
      "text": "0. \uce74\uce74\uc624 \ube44\uc804 API\u00b6\uce74\uce74\uc624\uc5d0\uc11c \ucd5c\uadfc\uc5d0 \ud765\ubbf8\ub85c\uc6b4 \uc11c\ube44\uc2a4\ub97c \uc2dc\uc791\ud588\uc2b5\ub2c8\ub2e4. \ucef4\ud4e8\ud130 \ube44\uc804(Computer Vision)\uc73c\ub85c \uc774\ubbf8\uc9c0 \ubd84\uc11d\uc744 \ud574\uc8fc\ub294 API\ub97c \uce74\uce74\uc624 \ube44\uc804\uc744 \uacf5\uac1c\ud55c \uac83\uc785\ub2c8\ub2e4. \uce74\uce74\uc624 \ube44\uc804\uc740 \uc774\ubbf8\uc9c0\ub97c \ubd84\uc11d\ud574\uc11c \ucf58\ud150\uce20 \ud615\ud0dc\uc640 \uc758\ubbf8\ub97c \uc774\ud574\ud558\uace0, \uc774\ubbf8\uc9c0\ub97c \ud65c\uc6a9\ud560 \uc218 \uc788\uac8c \ub3c4\uc640\uc8fc\ub294 API\uc785\ub2c8\ub2e4. \ud604\uc7ac \uc81c\uacf5\ub418\ub294 API\uc758 \uc885\ub958\ub294 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n\uc5bc\uad74 \uac80\ucd9c\n\uc0c1\ud488 \uac80\ucd9c\n\uc378\ub124\uc77c \uc0dd\uc131\n\uc131\uc778 \uc774\ubbf8\uc9c0 \ud310\ubcc4\n\n\uc5bc\uad74 \uc778\uc2dd\uc740 \ucef4\ud4e8\ud130 \ube44\uc804\uc5d0\uc11c \ud2b9\ubcc4\ud788 \uc0c8\ub85c\uc6b4 \uae30\uc220\uc740 \uc544\ub2d9\ub2c8\ub2e4\ub9cc, \uc800\ub294 \uce74\uce74\uc624\uc5d0\uc11c \uacf5\uac1c\ud55c API\uc758 \uc131\ub2a5\uc744 \ud55c\ubc88 \ud655\uc778\ud558\uace0\uc790 \uc2dc\ub3c4\ud574 \ubd24\uc2b5\ub2c8\ub2e4. \uce74\uce74\uc624 \ube44\uc804\uc5d0 \ub300\ud55c \uc790\uc138\ud55c \uac83\uc740 \uc774\uacf3\ub97c \ucc38\uace0\ud558\uc138\uc694.\n1. \uce74\uce74\uc624 \ube44\uc804 API \uc900\uc218\uc0ac\ud56d\u00b6API \uc0ac\uc6a9\uc2dc \ub2e4\uc74c\uacfc \uac19\uc740 \uc0ac\ud56d\uc744 \uc900\uc218\ud574\uc57c \ud569\ub2c8\ub2e4.\n\n\uc11c\ubc84\uc5d0\uc11c \ud638\ucd9c\ud558\ub294 \uacbd\uc6b0 REST API \ud0a4\ub97c \uc0ac\uc6a9\ud574 \ud638\ucd9c\ud569\ub2c8\ub2e4.\n\ubaa8\ub4e0 API\ub294 file \ub610\ub294 image_url \uc911 \ud558\ub098\uc758 \uac12\uc744 \uc9c0\uc815\ud574\uc57c \ud569\ub2c8\ub2e4.\nfile\uc5d0 \uc5c5\ub85c\ub4dc\ub418\ub294 \uc774\ubbf8\uc9c0\uc640 image_url\uc5d0 \uc9c0\uc815\ub418\ub294 \uc774\ubbf8\uc9c0\ub294 png \ub610\ub294 jpg \ud3ec\ub9f7\ub9cc \uc9c0\uc6d0\ud569\ub2c8\ub2e4.\n\n2. \ud65c\uc6a9 \uc608\uc81c \uc0b4\ud3b4\ubcf4\uae30\u00b6\uce74\uce74\uc624\uc5d0\uc11c \uac04\ub2e8\ud55c \ud30c\uc774\uc36c \uc608\uc81c \ucf54\ub4dc\ub97c \uc81c\uacf5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc800\ub294 \uac70\uae30\uc5d0\uc11c \uc5bc\uad74\uc744 \ucd94\ucd9c\ud574 \ubaa8\uc790\uc774\ud06c \ucc98\ub9ac\ud558\ub294 \uc608\uc81c\ub97c \ud14c\uc2a4\ud2b8 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc791\ub3d9\uc6d0\ub9ac\ub97c \uac04\ub2e8\ud558\uac8c \uc11c\uc220\ud574 \ubcf4\uba74, \uba3c\uc800 \uce74\uce74\uc624 API\ub85c \uc0ac\uc9c4\uc0c1\uc758 \uc5bc\uad74\uc758 \uc88c\ud45c\ub97c \uc778\uc2dd\ud558\uace0 pillow \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc774\uc6a9\ud574\uc11c \uc5bc\uad74 \ubd80\ubd84\uc758 \uc774\ubbf8\uc9c0\ub97c \uc798\ub77c\ub0c5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub9ac\uc0ac\uc774\uc988\ub97c \ud55c\ub4a4 \uc6d0\ubcf8 \uc0ac\uc9c4\uc5d0 \ub2e4\uc2dc \ubd99\uc5ec(\ubaa8\uc790\uc774\ud06c\ucc98\ub9ac) \ub123\uc2b5\ub2c8\ub2e4.\n\uc608\uc81c\ub85c \uc0ac\uc6a9\ud560 \uc0ac\uc9c4\uc740 \uc544\ub798\uc640 \uac19\uc774 \uc900\ube44\ud588\uc2b5\ub2c8\ub2e4.\n\n\uc6d0\uc22d\uc774 \uc0ac\uc9c4  \n\n\n\n\ub2e8\uccb4\uc0ac\uc9c4  \n\n\n\uc0ac\uc6a9\ud55c \ucf54\ub4dc\ub294 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4. \uba87\uac00\uc9c0 \uc124\uba85\uc744 \ub367\ubd99\uc774\uc790\uba74,\n\n\ubcf8\uc778\uc758 API \ud0a4\ub97c \ub123\uc5b4\uc57c \uc791\ub3d9\ud569\ub2c8\ub2e4.\n\ubcc0\ud658\ud560 \uc0ac\uc9c4 \ud30c\uc77c\uc740 jpg \ud639\uc740 png \ud3ec\uba67\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n\uc0ac\uc9c4 \ud30c\uc77c\uc758 \uc704\uce58\ub294 \uae30\ubcf8\uc801\uc73c\ub85c \uac19\uc740 \ud3f4\ub354\uc5d0 \uc788\uc73c\uba74 \ubc14\ub85c \uc791\ub3d9\ud558\uac8c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4.\n\ubaa8\uc790\uc774\ud06c \ucc98\ub9ac\ub41c \ud30c\uc77c\uc740 \ud30c\uc77c\uba85\uc5d0 mosaic_\ub97c \ubd99\uc5ec\uc11c \uc0dd\uc131\ub429\ub2c8\ub2e4.\n\n\ucf54\ub4dc\ub97c kakao_api.py\ub85c \uc800\uc7a5\ud558\uace0 \ud130\ubbf8\ub110\uc5d0\uc11c\npython kakao_api.py -f ./.\n\n\ub77c\uace0 \uc785\ub825\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport sys\nimport argparse\nimport requests\nfrom PIL import Image, ImageFilter\nimport glob\nimport os\n\nAPI_URL = 'https://kapi.kakao.com/v1/vision/face/detect'\n# \uc544\ub798 My Kakao api key, \ubcf8\uc778 \uacc4\uc815\uc758 API \ud0a4\ub85c \ubcc0\uacbd\ud574\uc11c \uc0ac\uc6a9\ud558\uc138\uc694.\nMYAPP_KEY = 'b5f1dde7995c36168402318b69308ef218614'\n\ndef detect_face(filename):\n    headers = {'Authorization': 'KakaoAK {}'.format(MYAPP_KEY)}\n\n    try:\n        files = { 'file' : open(filename, 'rb')}\n        resp = requests.post(API_URL, headers=headers, files=files)\n        resp.raise_for_status()\n        return resp.json()\n    except Exception as e:\n        print(str(e))\n        sys.exit(0)\n\ndef mosaic(filename, detection_result):\n    image = Image.open(filename)\n\n    for face in detection_result['result']['faces']:\n        x = int(face['x']*image.width)\n        w = int(face['w']*image.width)\n        y = int(face['y']*image.height)\n        h = int(face['h']*image.height)\n        box = image.crop((x,y,x+w, y+h))\n        # \ubaa8\uc790\uc774\ud06c \uac15\ub3c4\ub97c \uc870\uc808\ud558\ub824\uba74 \uc0ac\uc774\uc988\ub97c \uc870\uc808\ud558\uc138\uc694.\n        box = box.resize((20,20), Image.NEAREST).resize((w,h), Image.NEAREST)\n        image.paste(box, (x,y,x+w, y+h))\n    return image\n\n\n\nif __name__ == \"__main__\":\n    parser = argparse.ArgumentParser(description='Mosaic all of faces.')\n    parser.add_argument('-f', '--folder', type=str, nargs='?', default=\"./.\",\n                        help='image file to hide faces', required = True)\n    args = parser.parse_args()\n    # Make files lists\n    files = glob.glob('*.jpg') + glob.glob('*.jpeg') + glob.glob('*.png')\n    # make loop\n    for i in files:\n        head, tail = os.path.split(i)\n        try:\n            detection_result = detect_face(i)\n            image = mosaic(i, detection_result)           \n            image.save(head+'mosaic_'+tail,'JPEG')\n            print('! Add mosaic on : ' + tail)\n        except:\n            print('! Face does not detected on : ' + tail) \n    \n    print('!!  All process finished  !!')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n!!  All process finished  !!\n\n\n\n\n\n\n\n\n\n\n\n3. \uacb0\uacfc \ud655\uc778\u00b6\n\uc6d0\uc22d\uc774 \uc0ac\uc9c4  \n\n\n\n\ub2e8\uccb4\uc0ac\uc9c4  \n\n\n\uc5bc\uad74\uc744 \uc778\uc2dd\ud574\uc11c \ubaa8\uc790\uc774\ud06c \ucc98\ub9ac\uac00 \ub418\ub294\uac83\uc744 \ubcfc\uc218 \uc788\uc2b5\ub2c8\ub2e4. \uccab \ubc88\uc9f8 \uc6d0\uc22d\uc774 \uc0ac\uc9c4\uc740 \ubb3c\ub860\uc774\uace0 \ub2e8\uccb4\uc0ac\uc9c4\uc758 \uc5bc\uad74\ub3c4 \uc778\uc2dd\uc744 \uc798 \ud558\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubb3c\ub860 \ubaa8\ub4e0 \uc0ac\uc9c4\uc5d0\uc11c \uc131\uacf5\uc801\uc778 \uacb0\uacfc\ub97c \uc5bb\uc9c0\ub294 \ubabb\ud588\uc2b5\ub2c8\ub2e4\ub9cc, \uc5bc\uad74 \uc778\uc2dd\uc758 \uacbd\uc6b0\ub294 \uc0c1\ub2f9\ud788 \uc798 \uc791\ub3d9\ud569\ub2c8\ub2e4. \ub2e4\ub978 API\ub4e4\ub3c4 \ud14c\uc2a4\ud2b8\ub97c \ud574\ubcf4\ub2c8 \uc0c1\ud488 \uac80\ucd9c API\ub294 \uc544\uc9c1 \uc778\uc2dd\ub960\uacfc \uc624\uc791\ub3d9\uc774 \ub9ce\uc2b5\ub2c8\ub2e4. \uc544\ub9c8\ub3c4 \uae30\uc220\uc801\uc73c\ub85c \uc880 \ub354 \uc5b4\ub835\uae30 \ub54c\ubb38\uc774\uaca0\uc8e0. \ud14c\uc2a4\ud2b8\uc911\uc5d0 \uc54c\uc544\ub0b8 \ub610 \ub2e4\ub978\uac83\uc740 \uc0ac\uc9c4 \uc6a9\ub7c9\uc758 \uc81c\ud55c\uc785\ub2c8\ub2e4. \uc0ac\uc9c4 \ud30c\uc77c\uc758 \uc6a9\ub7c9\uc774 10MB \uc774\uc0c1\uc774\uba74 \uc5d0\ub7ec\uba54\uc138\uc9c0\uac00 \ub098\uc624\ub294\ub370 \uc544\ub9c8\ub3c4 \uc81c\ud55c\uc744 \uac78\uc5b4\ub454\uac83 \uac19\uc2b5\ub2c8\ub2e4.",
      "tags": "API,kakao,Python,RESTful,Web",
      "url": "https://partrita.github.io/posts/kakao_api/"
    },
    {
      "title": "\ud30c\uc774\uc36c\uc73c\ub85c \ubd84\uc0b0\ubd84\uc11d(ANOVA)",
      "text": "\ucd9c\ucc98 : Thomas Haslwanter, CMPT 318\nANOVA (ANalysis Of VAriance; \ubd84\uc0b0 \ubd84\uc11d)\uc740 \uc5ec\ub7ec \uadf8\ub8f9\uac04\uc758 \ud3c9\uade0\uc758 \ucc28\uc774\uac00 \ud1b5\uacc4\uc801\uc73c\ub85c \uc720\uc758\ubbf8 \ud55c\uc9c0\ub97c \ud310\ub2e8\ud558\uae30 \uc704\ud55c \uc2dc\ud5d8\ubc95\uc785\ub2c8\ub2e4. T-test \ucc98\ub7fc \ub9d0\uc774\uc8e0. \ud558\uc9c0\ub9cc \uadf8\ub8f9\uc758 \uc218\uac00 2\uac1c \uc774\uc0c1\uc77c\ub54c \uc0ac\uc6a9\ud55c\ub2e4\ub294 \uc810\uc774 \ub2e4\ub978\uc810\uc774\uc8e0.\n\ubd84\uc0b0\ubd84\uc11d\uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 3\uac00\uc9c0\uc758 \uc870\uac74\uc774 \ud544\uc694\ud574\uc694.\n\n\uc815\uaddc\uc131 : \uac01\uac01\uc758 \uadf8\ub8f9\uc5d0\uc11c \ubcc0\uc778\uc740 \uc815\uaddc\ubd84\ud3ec.\n\ubd84\uc0b0\uc758 \ub3d9\uc9c8\uc131 : Y\uc758 \ubaa8\uc9d1\ub2e8 \ubd84\uc0b0\uc740 \uac01\uac01\uc758 \ubaa8\uc9d1\ub2e8\uc5d0\uc11c \ub3d9\uc77c. \n\uad00\ucc30\uc758 \ub3c5\ub9bd\uc131: \uac01\uac01\uc758 \ubaa8\uc9d1\ub2e8\uc5d0\uc11c \ud06c\uae30\uac00 \uac01\uac01\uc778 \ud45c\ubcf8\ub4e4\uc774 \ub3c5\ub9bd\uc801\uc73c\ub85c \ud45c\uc9d1.\n\n\ud30c\uc774\uc36c\uc5d0\uc11c \ubd84\uc0b0\ubd84\uc11d\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc624\ub294 \ucf54\ub4dc\ubd80\ud130 \uc2e4\ud589\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nimport scipy.stats as stats\nimport pandas as pd\nimport urllib\nfrom statsmodels.formula.api import ols\nfrom statsmodels.stats.anova import anova_lm\nimport matplotlib.pyplot as plt\nimport numpy as np\n%matplotlib inline\n\n\n    \n\n\n\n\n\n\n\n\ubd84\uc0b0(variance)\uc758 \uc911\uc694\ud568\u00b6\uc544\ub798\uc758 \ub450\uac1c\uc758 \uadf8\ub9bc\uc744 \ud1b5\ud574 \ubd84\uc0b0\uc5d0 \ub300\ud574 \uc54c\uc544 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ud3c9\uade0\uac12\uc740 \ub3d9\uc77c\ud558\uc9c0\ub9cc \ubd84\uc0b0 \uac12\uc774 \ub2e4\ub984\uc73c\ub85c \uc778\ud574 \uc804\uccb4\uc801\uc778 \ub370\uc774\ud130\uc758 \ubaa8\uc2b5\uc774 \uc644\uc804\ud788 \ub2ec\ub77c \ubcf4\uc774\ub294\uac83\uc744 \uc54c \uc218 \uc788\uc8e0.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \ncenters = [5,5.3,4.5]\nstd = 0.1\ncolors = 'brg'\n\ndata_1 = []\nfor i in range(3):\n    data_1.append(stats.norm(centers[i], std).rvs(100))\n    plt.plot(np.arange(len(data_1[i]))+i*len(data_1[0]),data_1[i], '.', color = colors[i])\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nstd_2 = 2\ndata_2 = []\nfor i in range(3):\n    data_2.append(stats.norm(centers[i], std_2).rvs(100))\n    plt.plot(np.arange(len(data_1[i]))+i*len(data_2[0]), data_2[i], '.', color = colors[i])\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ubd84\uc0b0\uc774 \ud074\uc218\ub85d \uc9d1\ub2e8\uc758 \ud3c9\uade0\uac12\uc758 \ucc28\uc774\uac00 \ubb34\uc758\ubbf8\ud574\uc9d1\ub2c8\ub2e4.\n\n\uc774\uac83\uc744 \ud1b5\ud574 \ub450\uac00\uc9c0\ub97c \uc54c \uc218 \uc788\ub294\ub370\uc694. 1. \uc9d1\ub2e8 \ud3c9\uade0\uac12 \uc758 \ubd84\uc0b0\uc774 \ud074\uc218\ub85d \uadf8\ub9ac\uace0, 2. \uc9d1\ub2e8 \ub0b4 \ubd84\uc0b0\uc774 \uc791\uc544\uc9c8\uc218\ub85d \ud3c9\uade0\uc758 \ucc28\uc774\uac00 \ubd84\uba85\ud574\uc9d1\ub2c8\ub2e4.\n\uc9d1\ub2e8 \uac04 \ubd84\uc0b0\uacfc \uc9d1\ub2e8 \ub0b4 \ubd84\uc0b0 \uc774 \ub450\uac00\uc9c0\ub97c \uc774\uc6a9\ud574 \ubd84\uc11d\uc744 \ud558\uae30\uc5d0 \ubd84\uc0b0\ubd84\uc11d\uc774\ub77c\uace0 \ud569\ub2c8\ub2e4.\n\ubd84\uc0b0\ubd84\uc11d\uc5d0\ub294 \uc5ec\ub7ec \uc885\ub958\uac00 \uc788\uc9c0\ub9cc, \uc5ec\uae30\uc11c\ub294 \uc77c\uc6d0\ubd84\uc0b0\ubd84\uc11d(One-way ANOVA)\uacfc \uc774\uc6d0\ubd84\uc0b0\ubd84\uc11d(Two-way ANOVA)\ub97c \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\uc77c\uc6d0\ubd84\uc0b0\ubd84\uc11d(One-way ANOVA)\u00b6\uc885\uc18d\ubcc0\uc778\uc740 1\uac1c\uc774\uba70, \ub3c5\ub9bd\ubcc0\uc778\uc758 \uc9d1\ub2e8\ub3c4 1\uac1c\uc778 \uacbd\uc6b0\uc785\ub2c8\ub2e4. \ud55c\uac00\uc9c0 \ubcc0\uc218\uc758 \ubcc0\ud654\uac00 \uacb0\uacfc \ubcc0\uc218\uc5d0 \ubbf8\uce58\ub294 \uc601\ud5a5\uc744 \ubcf4\uae30 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.\n\ud30c\uc774\uc36c\uc5d0\uc11c One-way ANOVA \ubd84\uc11d\uc740 scipy.stats\uc774\ub098 statsmodel \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc774\uc6a9\ud574\uc11c \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nstatsmodel \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc880 \ub354 \ub9ce\uace0 \uaddc\uaca9\ud654\ub41c \uc815\ubcf4\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.\n\n\uc608\uc2dc \ub370\uc774\ud130(Altman 910) \uc124\uba85\u00b622\uba85\uc758 \uc2ec\uc7a5 \uc6b0\ud68c \uc218\uc220\uc744 \ubc1b\uc740 \ud658\uc790\ub97c \ub2e4\uc74c\uc758 3\uac00\uc9c0 \uadf8\ub8f9\uc73c\ub85c \ub098\ub204\uc5c8\uc2b5\ub2c8\ub2e4.\n\nGroup I: 50% \uc544\uc0b0\ud654 \uc9c8\uc18c(nitrous oxide)\uc640 50%\uc758 \uc0b0\uc18c(oxygen) \ud63c\ud569\ubb3c\uc744 24\uc2dc\uac04 \ub3d9\uc548 \ud761\uc785\ud55c \ud658\uc790\nGroup II: 50% \uc544\uc0b0\ud654 \uc9c8\uc18c\uc640 50% \uc0b0\uc18c \ud63c\ud569\ubb3c\uc744 \uc218\uc220 \ubc1b\ub294 \ub3d9\uc548\ub9cc \ud761\uc785\ud55c \ud658\uc790\nGroup III: \uc544\uc0b0\ud654 \uc9c8\uc18c \uc5c6\uc774 \uc624\uc9c1 35-50%\uc758 \uc0b0\uc18c\ub9cc 24\uc2dc\uac04\ub3d9\uc548 \ucc98\ub9ac\ud55c \ud658\uc790\n\n\uadf8\ub7f0 \ub2e4\uc74c \uc801\ud608\uad6c\uc758 \uc5fd\uc0b0 \uc218\uce58\ub97c 24\uc2dc\uac04 \uc774\ud6c4\uc5d0 \uce21\uc815\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \n# url\ub85c \ub370\uc774\ud130 \uc5bb\uc5b4\uc624\uae30\nurl = 'https://raw.githubusercontent.com/thomas-haslwanter/statsintro_python/master/ipynb/Data/data_altman/altman_910.txt'\ndata = np.genfromtxt(urllib.request.urlopen(url), delimiter=',')\n\n# Sort them into groups, according to column 1\ngroup1 = data[data[:,1]==1,0]\ngroup2 = data[data[:,1]==2,0]\ngroup3 = data[data[:,1]==3,0]\n\n# matplotlib plotting\nplot_data = [group1, group2, group3]\nax = plt.boxplot(plot_data)\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nBoxplot\uc5d0\uc11c \ubcfc \uc218 \uc788\ub4ef\uc774, \ud3c9\uade0\uac12\uc758 \ucc28\uc774\uac00 \uc2e4\uc81c\ub85c \uc758\ubbf8\uac00 \uc788\ub294 \ucc28\uc774\uc778\uc9c0, \ubd84\uc0b0\uc774 \ucee4\uc11c \uadf8\ub7f0\uac83\uc778\uc9c0 \uc560\ub9e4\ud55c \uc0c1\ud669\uc785\ub2c8\ub2e4. \uc774\ub7f0 \uc0c1\ud669\uc5d0\uc11c \ubd84\uc0b0\ubd84\uc11d\uc744 \ud1b5\ud574 \ud1b5\uacc4\uc801 \uc720\uc758\uc131\uc744 \uc54c\uc544 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nScipy.stats\uc73c\ub85c \uc77c\uc6d0\ubd84\uc0b0\ubd84\uc11d\u00b6\uc544\ub798\uc640 \uac19\uc740 \uac04\ub2e8\ud55c \ucf54\ub4dc\ub85c \ubd84\uc0b0\ubd84\uc11d\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nF_statistic, pVal = stats.f_oneway(group1, group2, group3)\n\nprint('Altman 910 \ub370\uc774\ud130\uc758 \uc77c\uc6d0\ubd84\uc0b0\ubd84\uc11d \uacb0\uacfc : F={0:.1f}, p={1:.5f}'.format(F_statistic, pVal))\nif pVal < 0.05:\n    print('P-value \uac12\uc774 \ucda9\ubd84\ud788 \uc791\uc74c\uc73c\ub85c \uc778\ud574 \uadf8\ub8f9\uc758 \ud3c9\uade0\uac12\uc774 \ud1b5\uacc4\uc801\uc73c\ub85c \uc720\uc758\ubbf8\ud558\uac8c \ucc28\uc774\ub0a9\ub2c8\ub2e4.')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nAltman 910 \ub370\uc774\ud130\uc758 \uc77c\uc6d0\ubd84\uc0b0\ubd84\uc11d \uacb0\uacfc : F=3.7, p=0.04359\nP-value \uac12\uc774 \ucda9\ubd84\ud788 \uc791\uc74c\uc73c\ub85c \uc778\ud574 \uadf8\ub8f9\uc758 \ud3c9\uade0\uac12\uc774 \ud1b5\uacc4\uc801\uc73c\ub85c \uc720\uc758\ubbf8\ud558\uac8c \ucc28\uc774\ub0a9\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\n\n\n\n\uc774\ubc88\uc5d0\ub294 \uc880 \ub354 \uc6b0\uc544\ud55c \ubc29\ubc95\uc73c\ub85c pandas\uc640 statsmodels \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud574\uc11c \ubd84\uc0b0\ubd84\uc11d\uc744 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\nStatsmodel\uc744 \uc0ac\uc6a9\ud55c \uc77c\uc6d0\ubd84\uc0b0\ubd84\uc11d\u00b6\n\n\n\n\n\nIn\u00a0[6]:\n\n    \n# \uacbd\uace0 \uba54\uc138\uc9c0 \ubb34\uc2dc\ud558\uae30\nimport warnings\nwarnings.filterwarnings('ignore')\n\ndf = pd.DataFrame(data, columns=['value', 'treatment'])    \n\n# the \"C\" indicates categorical data\nmodel = ols('value ~ C(treatment)', df).fit()\n\nprint(anova_lm(model))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n                df        sum_sq      mean_sq         F    PR(>F)\nC(treatment)   2.0  15515.766414  7757.883207  3.711336  0.043589\nResidual      19.0  39716.097222  2090.320906       NaN       NaN\n\n\n\n\n\n\n\n\n\n\n\n\ubcf4\uc2dc\ub2e4 \uc2f6\uc774 statsmodels \uc744 \uc0ac\uc6a9\ud558\uba74 \ubcf4\ub2e4 \uac04\ud3b8\ud558\uba74\uc11c\ub3c4 \uae54\ub054\ud55c \uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc774\uc6d0\ubd84\uc0b0\ubd84\uc11d(two-way ANOVA)\u00b6\ub3c5\ub9bd\ubcc0\uc778\uc758 \uc218\uac00 \ub450 \uac1c \uc774\uc0c1\uc77c \ub54c \uc9d1\ub2e8 \uac04 \ucc28\uc774\uac00 \uc720\uc758\ud55c\uc9c0\ub97c \uac80\uc99d\ud558\ub294 \ub370 \uc0ac\uc6a9\ud569\ub2c8\ub2e4. \uc0c1\ud638\uc791\uc6a9\ud6a8\uacfc(Interaction effect), \ud55c \ubcc0\uc218\uc758 \ubcc0\ud654\uac00 \uacb0\uacfc\uc5d0 \ubbf8\uce58\ub294 \uc601\ud5a5\uc774 \ub2e4\ub978 \ubcc0\uc218\uc758 \uc218\uc900\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c0\ub294\uc9c0\ub97c \ud655\uc778\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.\n\uc608\uc81c \ub370\uc774\ud130(altman_12_6) \uc124\uba85\u00b6\ud0dc\uc544\uc758 \uba38\ub9ac \ub458\ub808 \uce21\uc815 \ub370\uc774\ud130\uc785\ub2c8\ub2e4. 4\uba85\uc758 \uad00\uce21\uc790\uac00 3\uba85\uc758 \ud0dc\uc544\ub97c \ub300\uc0c1\uc73c\ub85c \uce21\uc815\uc744 \ud588\uc2b5\ub2c8\ub2e4. \uc774\ub97c \ud1b5\ud574\uc11c \ucd08\uc74c\ud30c\ub85c \ud0dc\uc544\uc758 \uba38\ub9ac \ub458\ub808\uce21\uc815 \ub370\uc774\ud130\uac00 \uc7ac\ud604\uc131\uc774 \uc788\ub294\uc9c0\ub97c \uc870\uc0ac\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \ninFile = 'altman_12_6.txt'\nurl_base = 'https://raw.githubusercontent.com/thomas-haslwanter/statsintro_python/master/ipynb/Data/data_altman/'\nurl = url_base + inFile\ndata = np.genfromtxt(urllib.request.urlopen(url), delimiter=',')\n\n# Bring them in dataframe-format\ndf = pd.DataFrame(data, columns=['head_size', 'fetus', 'observer'])\n# df.tail()\n\n# \ud0dc\uc544\ubcc4 \uba38\ub9ac \ub458\ub808 plot \ub9cc\ub4e4\uae30\ndf.boxplot(column = 'head_size', by='fetus' , grid = False)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0xb21b748>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uadf8\ub9bc\uc744 \ubcf4\ub2c8 \ud0dc\uc544(fetus) 3\uba85\uc758 \uba38\ub9ac \ub458\ub808\ub294 \ucc28\uc774\uac00 \uc788\uc5b4\ubcf4\uc785\ub2c8\ub2e4. \uadf8\ub7f0\ub370 \uc774\uac83\uc774 \uad00\uce21\uc790\uc640 \uc0c1\ud638\uc791\uc6a9\uc774 \uc788\ub294\uac83\uc778\uc9c0 \ubd84\uc11d\uc744 \ud1b5\ud574 \uc54c\uc544 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\ubd84\uc0b0\ubd84\uc11d\uc73c\ub85c \uc0c1\uad00\uad00\uacc4\u00b6statmodels \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud574 \uac04\ub2e8\ud558\uac8c \uacc4\uc0b0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nformula = 'head_size ~ C(fetus) + C(observer) + C(fetus):C(observer)'\nlm = ols(formula, df).fit()\nprint(anova_lm(lm))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n                        df      sum_sq     mean_sq            F        PR(>F)\nC(fetus)               2.0  324.008889  162.004444  2113.101449  1.051039e-27\nC(observer)            3.0    1.198611    0.399537     5.211353  6.497055e-03\nC(fetus):C(observer)   6.0    0.562222    0.093704     1.222222  3.295509e-01\nResidual              24.0    1.840000    0.076667          NaN           NaN\n\n\n\n\n\n\n\n\n\n\n\nP-value \uac00 0.05 \uc774\uc0c1 \uc785\ub2c8\ub2e4, \ub530\ub77c\uc11c \uadc0\ubb34\uac00\uc124\uc744 \uae30\uac01\ud560 \uc218 \uc5c6\uace0. \uce21\uc815\uc790\uc640 \ud0dc\uc544\uc758 \uba38\ub9ac\ub458\ub808\uac12\uc5d0\ub294 \uc5f0\uad00\uc131\uc774 \uc5c6\ub2e4\uace0 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uce21\uc815\ud558\ub294 \uc0ac\ub78c\uc774 \ub2ec\ub77c\ub3c4 \uba38\ub9ac \ub458\ub808\uac12\uc740 \uc77c\uc815\ud558\ub294 \uac83\uc774\uc8e0.\n\uacb0\ub860\uc801\uc73c\ub85c \ucd08\uc74c\ud30c\ub85c \uce21\uc815\ud558\ub294 \ud0dc\uc544\uc758 \uba38\ub9ac\ub458\ub808\uac12\uc740 \ubbff\uc744 \uc218 \uc788\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4.\n\ub9c8\uce58\uba70\u00b6\ubd84\uc0b0\ubd84\uc11d(ANOVA)\ub294 \uc804\uccb4 \uadf8\ub8f9\uac04\uc758 \ud3c9\uade0\uac12 \ucc28\uc774\uac00 \ud1b5\uacc4\uc801 \uc758\ubbf8\uac00 \uc788\ub294\uc9c0 \ud310\ub2e8\ud558\ub294\ub370 \uc720\uc6a9\ud55c \ub3c4\uad6c \uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc815\ud655\ud788 \uc5b4\ub290 \uadf8\ub8f9\uc758 \ud3c9\uade0\uac12\uc774 \uc758\ubbf8\uac00 \uc788\ub294\uc9c0\ub294 \uc54c\ub824\uc8fc\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \ucd94\uac00\uc801\uc778 \uc0ac\ud6c4\ubd84\uc11d(Post Hoc Analysis) \uc774 \ud544\uc694\ud569\ub2c8\ub2e4. \uc0ac\ud6c4\ubd84\uc11d\uc5d0 \ub300\ud574\uc11c\ub294 \ub2e4\uc74c \uae30\ud68c\uc5d0 \uc54c\uc544 \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.",
      "tags": "ANOVA,Python,statistics,\ud1b5\uacc4\ubd84\uc11d",
      "url": "https://partrita.github.io/posts/ANOVA-python/"
    },
    {
      "title": "Lab_materials",
      "text": "\uc2e4\ud5d8\ud558\uba74\uc11c \uc790\uc8fc \uc0ac\uc6a9\ub418\ub294 \uc2dc\uc57d\uc758 \uc815\ubcf4\ub97c \ubaa8\uc544\ub450\uaca0\uc2b5\ub2c8\ub2e4.\n\nTable of contents\u00b6\nMedia\nAntibiotics\nEnzymes\nBuffers\nOther common chemicals\n\n\nThis category from OpenWetWare\n\n\n\n\n\n\n\n\n\n1. Media\u00b6\n1.1. Defined Media\u00b6Synthetic Complete (SC) Medium aka (CSM, CM). Defined yeast medium\u00b6\nAdenine sulfate 20 mg/L\nUracil 20 mg/L \nL-Tryptophan 20 mg/L\nL-Histidine-HC1 20 mg/L \nL-Arginine-HC1 20 mg/L \nL-Methionine 20 mg/L \nL-Tyrosine 30 mg/L \nL-Leucine 60 mg/L \nL-Isoleucine 30 mg/L \nL-Lysine-HC1 30 mg/L \nL-Phenylalanine 50 mg/L \nL-Glutamic acid 100 mg/L \nL-Aspartic acid 100 mg/L \nL-Valine 150 mg/L \nL-Threonine 200 mg/L \nL-Serine 400 mg/L \n\n1.2. Standard Media\u00b6Luria-Bertani Medium (aka L-Broth or LB Medium)\u00b6LB is a standard growth medium for a variety of bacteria and conditions.\nIngredients for 1L\u00b6\n10 g Bacto-tryptone\n5 g yeast extract\n10 g NaCl\n\nFor plates also add\n\n15g agar\n\nNote: There are two formulations of LB, Miller and Lennox, that differ in the amount of NaCl. Lennox has less salt, only 5 g/L. The Qiagen miniprep kit recommends LB with 10 g NaCl for highest plasmid yields.\n\nProtocol\u00b6\nMix dry ingredients and add distilled water up to 1 Liter\nPour into 2 L flask (or greater)\nAutoclave (liquid cycle) 250\u00b0F, 22psi, 30 minutes\n\nNotes: We do not pH medium when we make it on the fly. However, if it is really important, pH the medium to 7.0 with 5M NaOH (~200\u00b5L). Check with pH paper\n\nFor plates\u00b6\nMix dry ingredients and add distilled water up to less than 1 Liter\nAfter dissolved, add agar\nPour into 2 L flask (or greater)\nAutoclave (liquid cycle): 250\u00b0F, 22psi, 30 minutes\nCool media down to 60-55C (uncomfortable but not painful)\nAdd appropriate antibiotic\nPour the solution on sterile plates\nLet solidify about 1 h, wrap, label (name, date, additive) keep at 4\u00b0C\n\n\n\n\n\n\n\n\n\n\n2. Antibiotics\u00b6\nKanamycin\u00b6Mode of Action\u00b6Bacteriocidal. Diffuses through the porinchannels in the outer membrane of gram-negative bacteria. Interacts with at least three ribosomal proteins, inhibiting protein synthesis and increasing translation errors.\nWorking Concentration and Stock Solution\u00b6Working concentration is 50 \u03bcg/ml, or 25 \u03bcg/ml for low-copy plasmids. Stock solution is 35 mg/ml in water (kanamycin is insoluble in 50% alcohol).\nAmpicillin\u00b6Mode of Action\u00b6Inhibits the formation of cross-links in the peptidoglycan layer (which provides rigidity to the cell wall). Most effective against cells in log phase growth (since this is when new cross-links are being formed), and has little effect on cells in stationary phase.\nStock Solution\u00b6Typical concentrations of ampicillin are 50 \u03bcg/mL for low copy plasmids and 100 \u03bcg/mL for high copy plasmids. Stock solutions are typically at 100 mg/ml, so that 1 ml of antibiotic can be added to 1 liter of broth or agar. Stock solutions made in 50% alcohol remain liquid at -20\u00b0C and are easy to pipet. Cool agar to 55\u00b0C or below prior to adding antibiotic.\nAmpicillin available from Sigma A-9518 (Ampicillin sodium salt), FW 371.39. To make 100ml of 100 mg/ml stock solution, dissolve 10 g of ampicillin in 50 ml of water and 50 ml of 100% ethanol.\nStability\u00b6Culture plates with ampicillin can be stored at 2-8\u00b0C for up to two weeks. (In our experience, plates are usable for 2-3 months when stored at 4\u00b0C and bagged to prevent evaporation.)\nStock solutions may be stored at 2-8\u00b0C for up to 3 weeks. For long term storage (4-6 months), stock solutions should be stored at -20\u00b0C. At 37\u00b0C in culture, ampicillin is stable up to 3 days. Sigma reference\nCarbenicillin\u00b6Carbenicillin is used to select for cells bearing the beta-lactamase gene bla or ampR. Beta-lactamase also neutralizes ampicillin, but due to ampicillin's lower effectiveness, carbenicillin tends to give fewer satellite colonies and makes for more reliable cloning. Ampicillin is more widely used, though, due to carbenicillin's high cost ($75/g compared to ampicillin's $10/g (Sigma)).\nTetracycline\u00b6Tetracyclines (there are many) enter the cell by diffusion through OmpF porins. It inhibits growth by preventing codon-anticodon interactions during translation.\nWorking concentration and Stock Solutions\u00b6Using a plasmid with copy number 15-20, 20\u03bcg/ml tet has proved a successful selector. The reduction in growth rate, described above was significant.\nThe RajBhandary lab uses 5\u03bcg/ml and see a minimal reduction in growth rate and never lose plasmid from their cells.\nStock solution is 15 mg/ml in 50% ethanol (note: using 95-100% ethanol is much better for dissolving stock powder). Add 1 ml per liter of cooled broth or agar. Solutions and plates are light sensitive.\nTetracycline is incompatible with (chelated by) magnesium ions, and thus unsuitable for use in minimal media\nStreptomycin\u00b6Mode of Action\u00b6Inhibits protein synthesis; binds to 30S ribosomal subunit. The rpsL50 gene mutation conveys streptomycin resistance. Resistance is recessive, so the presence of a wild type rpsL gene will convey sensitivity. This allows counter-selection against the presence of the wt rpsL gene. Mutations of wild type genes to convey resistance are common.\nWorking concentration and Stock Solutions\u00b6100 mg/mL stock solution in water. It is barely soluble in ethanol so you must dissolve it in water. Add 1 mL per liter of culture.\nChloramphenicol\u00b6Chloramphenicol is a bacteriostatic agent that binds to the 50S ribosomal subunit and inhibits ribosomal peptide bond formation. It is sometimes used as a way of \"amplifying\" plasmid production by shutting down protein synthesis in cultures, while allowing plasmid replication to continue.\nWorking Concentrations and Stock Solutions\u00b6High copy plasmids allow 35 \u03bcg/ml concentration. Low-copy plasmids like bacterial artificial chromosomes allow 12.5 \u03bcg/ml. Stock solutions can be made at 35 mg/ml in ethanol, kept at -20C.\nNeomycin\u00b6binds to ribosomal components and inhibits protein synthesis. target organism: bacteria, mammalian cells\nWorking Concentrations and Stock Solutions\u00b6stock solution: 10mg/ml in water\nworking solution: 10-50\u00b5g/ml (stable at RT for 5days)\n\n\n\n\n\n\n\n\n\n\n3. Enzymes\u00b6\n3.1 Phosphatases\u00b6Antarctic Phosphatase\u00b6This enzyme is preferable to either Calf Intestinal Phosphatase or Shrimp Alkaline Phosphatase because it is more easily heat-inactivated. After phosphatase treatment of a vector, any remaining enzymatic activity would remove 5' phosphates from the insert in a subsequent ligation reaction, preventing a successful reaction. Thus, it is critical that the phosphatase be inactivated, purified away, or digested with Proteinase K.\n3.2. DNA polymerases\u00b6Pfu\u00b6Pfu has proof reading activity which makes it more accurate than for example Taq.\nPfu does not exhibit 5' -> 3' exonuclease activity, which prevents degradation of the primers in mutagenesis methods based on ligation of primers or elongated primers.\nPfu is slower than Taq and one should calculate 2 min per 1000 bp (1 min for Taq)\nT4 DNA Polymerase\u00b6LIC quality T4 DNA Polymerase can be used to \"chewback\" 3' ends for use in Ligation Independent Cloning (LIC).\n3.3. DNA ligases\u00b6DNA ligase is a specific type of enzyme, a ligase, that facilitates the joining of DNA strands together by catalyzing the formation of a phosphodiester bond.\n3.4. RNA Polymerases\u00b63.5. Restriction enzymes\u00b6Restriction enzymes are used for performing a restriction digest.\nComprehensive information can be found in REBASE. Neeraj Dhar's good cutter list is a list of enzymes which are particularly reliable and straightforwards.\nThis is another source of info on restricition enzymes. It's by the same people who provide REBASE, but in a different format:\n3.6. Other\u00b6Lysozyme\u00b6Breaks down cell walls by catalyzing the hydrolysis of cell wall peptidoglycans.\n\n\n\n\n\n\n\n\n</div id='buffers'/>\n4. Buffers\u00b6\nTAE\u00b6TAE is a commonly used buffer for making and running DNA agarose gels. It offers a few advantages and disadvantages compared to TBE buffer:\n\nTAE buffer provides optimal resolution of fragments >4 kb in length, while TBE provides better resolution for 0.1 to 3 kb fragments. \nTAE is significantly cheaper to make \nTAE stocks can be 50X concentrated and therefore take up less space than 10X concentrated TBE stock\nTBE offers a higher resolution and has a higher buffering capacity at greater temperatures induced by relatively higher voltages\nTBE can negatively influence the yield of DNA after recovery from a gel when using glass-based protocols. Yield does not seem to be influenced when using silica-based methods.\nThe bromide ion in TBE is a powerful inhibitor of enzyme activity. This can prevent degradation of nucleic acid, but can also interfere with subsequent experiments like cloning DNA into a vector. \n\nIngredients for one litre 50X stock\n\nTris-base: 242 g\nAcetate (100% acetic acid): 57.1 ml\nEDTA: 100 ml 0.5M sodium EDTA\n\nAdd dH2O up to one litre.\nTo make 1x TAE from 50X TAE stock, dilute 20ml of stock into 980 ml of deionised water.\nPBS\u00b6PBS stands for phosphate buffered saline and is often used because it is isotonic to cells.\nRecipe\u00b61x PBS is 137 mM NaCl, 12 mM Phosphate, 2.7 mM KCl, pH 7.4\nTo make 10x PBS,\n\nCombine the following:\n80 g NaCl\n2 g KCl\n14.4 g Na2HPO4 (dibasic anhydrous) OR 18.1 g Na2HPO4 \u00b7 2H2O (dibasic dihydrate) OR 27.2 g Na2HPO4 \u00b7 7H2O (dibasic heptahydrate)\n2.4 g KH2PO4 (monobasic anhydrous)\n800 mL distilled H2O\n\n\nAdjust pH to 7.4 with HCl\nAdd H2O to 1L\nAutoclave for 20 minutes on liquid cycle. Store at RT.\n\nPBST\u00b6For some applications (washing) one adds Tween 20 PBS which makes PBST\n\nUsual concentrations of Tween 20 in PBST are 0.1 or 0.05%.\nUsual concentration of Triton X-100 in TBST is 0.1-0.3%.\n\nTE\u00b6TB buffer is used to make chemically competent cells by the Inoue method Preparing chemically competent cells (Inoue)\nPreparation: For a 1 liter solution add\n\n250 mM potassium chloride (18.65 g)\n15 mM calcium chloride (2.2 g)\n10 mM PIPES (20 ml of an 0.5 M solution)\n\nto 800 ml of DI water. Adjust pH to 6.7 with 1M KOH.\nDissolve\n\n55 mM manganese chloride (10.88 g)\n\nin 100 ml of DI water, add gradually to the solution of the remaining components. Bring solution to 1 liter. The pH of the solution will fall, which is expected.\nDo not attempt to adjust the pH. Adding base after adding manganese will precipitate a yellow/brown hydroxide.\n\nSterile filter with a pre-washed 0.22 \u03bcm filter and store indefinitely at 4 degrees.\nNEB buffers\u00b6\nNEBuffer 1 (yellow)\n\n10 mM Bis Tris Propane-HCl, 10 mM MgCl2, 1 mM DTT (pH 7.0 at 25\u00b0C). \n\n\nNEBuffer 2 (blue)\n\n10 mM Tris-HCl, 10 mM MgCl2, 50 mM NaCl, 1 mM DTT (pH 7.9 at 25\u00b0C). \n\n\nNEBuffer 3 (red)\n\n50 mM Tris-HCl, 10 mM MgCl2, 100 mM NaCl, 1 mM DTT (pH 7.9 at 25\u00b0C). \n\n\nNEBuffer 4 (green)\n\n20 mM Tris-acetate, 10 mM magnesium acetate, 50 mM potassium acetate, 1 mM DTT (pH 7.9 at 25\u00b0C).\n\n\nT4 DNA Ligase Buffer\n\n50 mM Tris-HCl, 10 mM MgCl2, 1 mM ATP, 10 mM Dithiothreitol (pH 7.5 at 25\u00b0C).\n\n\nNEBuffer EcoRI\n\n100 mM Tris-HCl, 50 mM NaCl, 10 mM MgCl2, 0.025 % Triton X-100 (pH 7.5 at 25\u00b0C).\n\n\n\nSDS sample buffer\u00b6For preparation and loading of protein samples onto a gel for SDS-PAGE analysis (Western blot/protein blot).\nPreparation:\u00b6SDS contained in the sample buffer makes proteins negatively charged proportionally to their length. 2-mercapto-ethanol/DTT breaks disulphide bonds.\nLoading:\u00b6glycerol makes the sample buffer more dense than the surrounding running buffer of the protein gel, enabling easy loading into the gel pockets.\nTo make 10 mL of 4x stock\u00b6\n2.0 ml 1M Tris-HCl pH 6.8\n0.8 g SDS\n4.0 ml 100% glycerol\n0.4 ml 14.7 M \u03b2-mercaptoethanol\n1.0 ml 0.5 M EDTA\n8 mg bromophenol Blue \n\nFinal concentrations (1x)\u00b6\n50 mM Tris-HCl pH 6.8\n2% SDS\n10% glycerol\n1% \u03b2-mercaptoethanol\n12.5 mM EDTA\n0.02 % bromophenol blue\n\nTBS\u00b6TBS stands for tris-buffered saline and is used in many protocols for washing Endconzentration in 1x TBS will be 20mM Tris and 150mM NaCl\n5xTBS for 1 liter with stock solutions:\u00b6\n100 ml 1M Tris-HCl pH 7.5\n150 ml 5M NaCl\n750 ml ddH2O\n\nPrepare and sterilize filter. Store at 4\u00b0C. After diluting the 5x to 1x filter again\nTBST\u00b6TBST: For some applications one adds Tween 20 or Triton X-100 to TBS which makes TBST (people use the name TBST for both, probably it's lab dependent.\n\nUsual concentrations of Tween 20 in TBST are 0.1 or 0.05%.\nUsual concentration of Triton X-100 in TBST is 0.1%.\n\nKilling Buffer\u00b6Killing Buffer is used to kill bacterial cells. Usually one would use cold Killing buffer in a 50:50 ratio to harvest cells in liquid medium. The buffer contains NaN3 and kills the cells quickly. Fast killing and down cooling is important for example to stop RNases if you want to isolate RNA from that specific time point of cell growth.\nEndconzentration will be 20mM Tris and 5mM MgCl2 and 20mM NaN3\nKilling Buffer for 1 liter:\u00b6\n2 ml 1M Tris-HCl pH 7.5\n0.5 ml 1M MgCl2\n1.3 g NaN3\n997.5 ml ddH2O\n\nStore at 4\u00b0C.\nNote that NaN3 is highly toxic and should be handled accordingly.\n\n\n\n\n\n\n\n\n\n\n\n5. Other common chemicals\u00b6\nEthidium bromide\u00b6Ethidium Bromide, often abbreviated EtBr. Intercalating agent that inserts itself between DNA base pairs Fluorescent under UV light\nCaution: Carcinogen/Mutagen\n\nIPTG\u00b6Isopropyl-beta-D-thiogalactopyranoside\nInduces transcription from promoters regulated by LacI repressor.\nMolecular weight is 238.31 g/mol. The chemical formula is here.\n\nDissolve 1g in 4196 \u03bcL deionized water to make 1M solution.\nFilter sterilize with syringe and 0.22\u03bcm filter\n\nAlternatively\n\nDissolve 238 mg IPTG (sigma I-6758) in 10 ml DW for (100mM stock)\nstore in 1 ml aliquotes at -20\u00b0C\n\nGenerally a 1mM solution is an effective amount to induce the pLac promoter region.\nEDTA\u00b6EDTA stands for ethylene-diamine-tetraacetic acid. It chelates divalent cations and is therefore used in many buffers. Its relative EGTA has a higher affinity for calcium than for magnesium ions. \n\n0.5 M EDTA stock\u00b6\n18.61 g EDTA (Sodium Salt)\ndH2O to 90 ml\nadjust pH to 7.0\nadjust volume to 100 ml\n\n0.5M 500ml pH 8.0 with NaOH pre-calculated\u00b6\n93.05g of Na2.EDTA (FW 372.2)\n10.14g of NaOH (FW 40)\n500 ml dH2O\n\nPhenol\u00b6Phenol is an important chemical in biological research. It is used primarily for isolation and purification of DNA and RNA. Pure phenol is solid at room temperature. Almost all biochemical uses of phenol use a water saturated phenol solution, or a mixture of phenol in chloroform.\nSafety\u00b6Phenol is caustic and causes nasty chemical burns which are slow to heal. It is also a systemic poison which can be rapidly absorbed through the skin.\nGlucose\u00b6The molecular weight of anhydrous glucose is 180.16 g/mol.\nTo make 1M glucose, dissolve 18g in 100mL H2O.\n1M glucose = 18% glucose\nPMSF\u00b6PMSF stands for Phenylmethylsulfonyl fluoride. It is used as an irreversible inhibitor of serine protease activity for example in protein purification or co-immunoprecipitation. It has no effect on other proteases that might be present. It can also inactivate some non-proteolytic enzymes that contain serine in the active site.\nUse\u00b6PMSF is not soluble in water, dissolve in isopropanol, ethanol or methanol. 200 mM stock solution (0.035 g/mL) is stable for months at 4\u00b0C, although storage at -20 is probably better. A common final concentration of PMSF is 1mM. PMSF is extremely toxic, and preparation of solutions should be done very carefully. PMSF is not stable in alkaline conditions, or in water. For disposal, add alkali in water and wait to dispose.\nSafety\u00b6PMSF is extremely poisonous and should be handled carefully.\nGlycerol\u00b6\nGlycerol is an alcohol often used in the lab to avoid freezing and increase the density of liquids. Its standardised IUPAC name is propane-1,2,3-triol. It is also often referred to as glycerine or glycerin.\nDensity\u00b6Glycerol is used in many loading buffers to increase the density of the solution which enables good loading into already liquid filled wells of agarose and polyacrylamide gels. See agarose gel loading buffer and SDS sample buffer.\nFreezing\u00b6Glycerol is also used to decrease the freezing point of protein solution which are easily degraded by repeated freeze/thaw cycles. A 50% (w/v) glycerol/water solution freezes at -25\u00baC and can thus be stored in a -20\u00baC freezer. Note that glycerol with 1.26g/cm3 is much denser than water and, therefore, a 50% (v/v) solution will be very different from a 50% (w/v) solution. For example, restriction enzymes are typically stored in a glycerol/water solution.\nFicoll\u00b6Ficoll\u2122 is a sucrose polymer commonly used to adjust the density and viscosity of solutions in the lab. It is employed in density gradients and loading buffers.\nUse\u00b6One of the most common applications for Ficoll is as a density gradient for the isolation of eukaryotic cells, organelles, bacterial cells, and pancreatic islets.\nProperties\u00b6Ficoll is an uncharged, highly branched polymer formed by the co-polymerisation of sucrose and epichlorohydrin. Due to its many hydroxyl groups, Ficoll is highly soluble in water. Densities of up to 1.2 g/ml can be attained.\nStability & storage\u00b6Since Ficoll does not contain any ionized groups, the molecule does not readily react under physiological conditions. It is stable in alkaline and neutral solutions, but is rapidly hydrolysed in solution at pH 3, especially at high temperature. However, Ficoll can be autoclaving at 110\u00baC for 30 minutes in neutral solutions. Strong oxidizing and reducing agents should be avoided. Shipping and storage are at ambient temperatures.\nDNA dyes\u00b6DNA dyes stain deoxyribonucleic acid for laboratory purposes such as detection and quantification. Many DNA dyes also bind to RNA and could be more broadly described as nucleic acid stains. Common dyes included ethidium bromide (EtBr), esp. for agarose gel electrophoresis of DNA, and DAPI for staining the cell nucleus in fluorescent microscopy.\nDyes for DNA in agarose gel electrophoresis\u00b6\nEthidium bromide : traditional DNA stain.\nSYBR Gold : 10x more sensitive than EtBr\nSYBR Green : 20x more sensitive than EtBr\nSYBR Safe : sensitivity similar to EtBr\n\nDNTPs\u00b6dNTP's or deoxynucleosides are the monomers that DNA polymerase uses to form DNA.\nProteinA Sepharose Beads\u00b6P3391 ProteinA-Sepharose beads from Staphylococcus aureus. Lyophilized powder\nTween 20\u00b6\nTween (full name Tween 20 or Polysorbate 20) is a common detergent used in biology used in cell lysis and membrane protein solubilisation among other uses.\nTriton X-100\u00b6\nTriton (full name Triton X-100) is a common, nonionic detergent used for solubilisation, permeabilisation, and lysis.\nSDS\u00b6\nSDS (sodium dodecyl sulfate/sulphate) is an anionic detergent effective in both acidic and alkaline solutions. SDS has a wide variety of applications, but is most often used in protein and lipid solubilisation.\nWarnings\u00b6\nhighly flammable\nharmful in contact with skin and if swallowed\nirritating to eyes, respiratory system and skin",
      "tags": "materials,protocols",
      "url": "https://partrita.github.io/posts/lab_materials/"
    },
    {
      "title": "Model fitting by python",
      "text": "python\uc744 \ud65c\uc6a9\ud55c model fitting \ud558\uae30\u00b6python\uc758 scipy \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc774\uc6a9\ud574 model fitting\uc744 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. scipy.optimize.curve_fit \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud560\ub54c\ub294 \ub450\uac00\uc9c0\uac00 \ud544\uc694\ud569\ub2c8\ub2e4.\n\n\uc2e4\uc81c\uc758 \ub370\uc774\ud130 \nmodel\ub85c \uc0ac\uc6a9\ud560 \ubc29\uc815\uc2dd\n\n\ub9d0\ub85c \uc124\uba85\ud558\ub294 \uac83 \ubcf4\ub2e4\ub294 \uc608\ub97c \ub4e4\uc5b4\uac00\uba74\uc11c \uc0b4\ud3b4\ubcf4\ub3c4\ub85d \ud558\uc8e0.\n\n\uba3c\uc800 \ub2e4\uc591\ud55c \uc218\ud559\uc801 \ub3c4\uad6c\uc640 \uc790\ub8cc\uad6c\uc870\ub97c \uc704\ud574 numpy\ub97c \nModel fitting\uc744 \uc704\ud574 scipy.optimize\uc5d0\uc11c curve_fit\uc744 \ubd88\ub7ec\uc635\ub2c8\ub2e4.\n\ub9c8\uc9c0\ub9c9\uc73c\ub85c \uc2dc\uac01\ud654\ub97c \uc704\ud574 matplotlib\uc744 \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nimport numpy as np\nfrom scipy.optimize import curve_fit\nimport matplotlib.pyplot as plt\n# notebook \uc548\uc5d0 plot\uc744 \ud45c\uc2dc\ud558\ub294 \ub9e4\uc9c1\uba85\ub839\uc5b4\n%matplotlib inline \n\n\n    \n\n\n\n\n\n\n\n\uc120\ud615 \ud68c\uadc0\u00b6\uac04\ub2e8\ud55c \uc120\ud615\ud68c\uadc0\uc758 \uc608\ub97c \ub4e4\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\uc120\ud615 \ud68c\uadc0(linear regression)\ub294 \uc885\uc18d \ubcc0\uc218 y\uc640 \ud55c \uac1c \uc774\uc0c1\uc758 \ub3c5\ub9bd \ubcc0\uc218 (\ub610\ub294 \uc124\uba85 \ubcc0\uc218) X\uc640\uc758 \uc120\ud615 \uc0c1\uad00 \uad00\uacc4\ub97c \ubaa8\ub378\ub9c1\ud558\ub294 \ud68c\uadc0\ubd84\uc11d \uae30\ubc95\uc774\ub2e4. \ud55c \uac1c\uc758 \uc124\uba85 \ubcc0\uc218\uc5d0 \uae30\ubc18\ud55c \uacbd\uc6b0\uc5d0\ub294 \ub2e8\uc21c \uc120\ud615 \ud68c\uadc0, \ub458 \uc774\uc0c1\uc758 \uc124\uba85 \ubcc0\uc218\uc5d0 \uae30\ubc18\ud55c \uacbd\uc6b0\uc5d0\ub294 \ub2e4\uc911 \uc120\ud615 \ud68c\uadc0\ub77c\uace0 \ud55c\ub2e4. -- wikipedia\n\n\uba3c\uc800 \ubaa8\ub378\ub85c \uc0ac\uc6a9\ud560 \ubc29\uc815\uc2dd\uc744 python function\uc73c\ub85c \uad6c\ud604\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \n## \uc77c\ucc28\ubc29\uc815\uc2dd\ndef func(x, a, b):\n    return a*x + b\n\n\n    \n\n\n\n\n\n\n\n\uc774\uc81c model fitting\uc744 \ud560 \ub370\uc774\ud130\uac00 \ud544\uc694\ud55c\ub370\uc694. \uc5ec\uae30\uc11c\ub294 numpy\ub97c \uc774\uc6a9\ud574 \uac00\uc0c1\uc758 \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \n# 0\ubd80\ud130 10\uae4c\uc9c0 100\uac1c\uc758 \uad6c\uac04\uc73c\ub85c \ub098\ub214\nx = np.linspace(0, 10, 100)\nprint(x)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[  0.           0.1010101    0.2020202    0.3030303    0.4040404\n   0.50505051   0.60606061   0.70707071   0.80808081   0.90909091\n   1.01010101   1.11111111   1.21212121   1.31313131   1.41414141\n   1.51515152   1.61616162   1.71717172   1.81818182   1.91919192\n   2.02020202   2.12121212   2.22222222   2.32323232   2.42424242\n   2.52525253   2.62626263   2.72727273   2.82828283   2.92929293\n   3.03030303   3.13131313   3.23232323   3.33333333   3.43434343\n   3.53535354   3.63636364   3.73737374   3.83838384   3.93939394\n   4.04040404   4.14141414   4.24242424   4.34343434   4.44444444\n   4.54545455   4.64646465   4.74747475   4.84848485   4.94949495\n   5.05050505   5.15151515   5.25252525   5.35353535   5.45454545\n   5.55555556   5.65656566   5.75757576   5.85858586   5.95959596\n   6.06060606   6.16161616   6.26262626   6.36363636   6.46464646\n   6.56565657   6.66666667   6.76767677   6.86868687   6.96969697\n   7.07070707   7.17171717   7.27272727   7.37373737   7.47474747\n   7.57575758   7.67676768   7.77777778   7.87878788   7.97979798\n   8.08080808   8.18181818   8.28282828   8.38383838   8.48484848\n   8.58585859   8.68686869   8.78787879   8.88888889   8.98989899\n   9.09090909   9.19191919   9.29292929   9.39393939   9.49494949\n   9.5959596    9.6969697    9.7979798    9.8989899   10.        ]\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \ny = func(x,1,2)\n# np.random.normal\uc744 \ud1b5\ud574 0.9\u00d7N(0,1)\uc758 \ub09c\uc218\ub97c \ud2b9\uc815 \uac1c\uc218\ub9cc\ud07c \ubc1c\uc0dd\uc2dc\ucf1c\uc11c y\uac12\uc5d0 \ub354\ud574\uc8fc\uaca0\uc2b5\ub2c8\ub2e4.\nnp.random.seed(1)\nyn = y + 0.9*np.random.normal(size = len(x))\n\n\n    \n\n\n\n\n\n\n\n\ub2e4\uc74c\uc73c\ub85c curve_fit \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574 model fitting\uc744 \ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \npopt, pcov = curve_fit(func, x, yn)\n#popt\ub294 \uc8fc\uc5b4\uc9c4 func \ubaa8\ub378\uc5d0\uc11c \uac00\uc7a5 \ucd5c\uace0\uc758 fit values\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.\n#pcov\uc758 \ub300\uac01\uc131\ubd84\ub4e4\uc740 \uac01 parameter\ub4e4\uc758 variances \uc785\ub2c8\ub2e4.\n\n\n    \n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \nplt.scatter(x, yn, marker='.')\nplt.plot(x, y, linewidth = 2)\nplt.plot(x, func(x, *popt), color = 'red', linewidth = 2)\nplt.legend(['not fit','fitting'], loc = 2)\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ube68\uac04\uc0c9\uc73c\ub85c \ud45c\ud604\ub41c\uac83\uc774 curve_fit\uc744 \ud1b5\ud55c \uc120\ud615 \ud68c\uadc0\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\n\nGaussian model\uc744 fitting\ud558\ub294 \uac83\uc744 \uc54c\uc544\ubd05\uc2dc\ub2e4.\u00b6\ub2e4\ub978 \uc608\uc2dc\ub85c \uac00\uc6b0\uc2dc\uc548 \ubaa8\ub378\uc744 \uc0b4\ud3b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\uac00\uc6b0\uc2dc\uc548 \ubaa8\ub378(Gaussian model)\uc740 \uc790\uc5f0\uc801\uc778 \ud604\uc0c1\uc744 \ud45c\ud604\ud558\uae30\uc5d0 \uc88b\uc740 \ubaa8\ub378\uc774\uae30 \ub54c\ubb38\uc5d0, \ub9ce\uc740 \ubd84\uc57c\uc5d0\uc11c \uac00\uc6b0\uc2dc\uc548 \ubaa8\ub378\uc774 \uc0ac\uc6a9\ub420 \uc218 \uc788\ub2e4. --wikipedia\n\n\uc804\uacfc \ub3d9\uc77c\ud558\uac8c\n\nModel\uc744 \uc0dd\uc131\ud558\uace0\n\uc2e4\ud5d8\ub370\uc774\ud130\ub97c \ub9cc\ub4e0\ub4a4\ncurve_fit \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \n# Gaussian model\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\ndef func(x, a, b, c):\n    return a*np.exp(-(x-b)**2/(2*c**2))\n\n# \ub9c8\ucc2c\uac00\uc9c0\ub85c 0~10\uae4c\uc9c0 100\uac1c \uad6c\uac04\uc73c\ub85c \ub098\ub208 x\ub97c \uac00\uc9c0\uace0\nx = np.linspace(0, 10, 100)\ny = func(x, 1, 5, 2) # \ub2f5\uc778 y\ub4e4\uacfc\nyn = y + 0.2*np.random.normal(size=len(x)) # noise\uac00 \ub080 y\uac12\ub4e4\uc744 \ub9cc\ub4ed\ub2c8\ub2e4.\n## \uadf8\ub7f0 \ud6c4\uc5d0 curve_fit\uc744 \ud558\uace0 best fit model\uc758 \uacb0\uacfc\ub97c \ucd9c\ub825\ud569\ub2c8\ub2e4.\npopt, pcov = curve_fit(func, x, yn)\n\n\n    \n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nplt.scatter(x, yn, marker='.')\nplt.plot(x, y, linewidth=2, color='blue')\nplt.plot(x, func(x, *popt), color='red', linewidth=2)\nplt.legend(['Original', 'Best Fit'], loc=2)\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n6~8 \uc0ac\uc774\uc5d0\uc11c\ub294 \uc870\uae08 \ucc28\uc774\uac00 \ub098\ub294 \uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc8e0.\n\ub9c8\uc9c0\ub9c9\uc73c\ub85c 2\uac1c\uc758 \ub3c5\ub9bd\uc801\uc778 Gaussian\ud568\uc218\ub85c fitting\ud558\ub294 \uc608\uc81c\uc785\ub2c8\ub2e4.\u00b6\ubc29\ubc95\uc740 \ub3d9\uc77c\ud569\ub2c8\ub2e4. \ubaa8\ub378\ub9cc \ub2e4\ub97c\ubfd0\uc774\uc8e0.\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \ndef func(x, a0, b0, c0, a1, b1, c1):\n    return a0*np.exp(-(x-b0)**2/(2*c0**2)) + a1*np.exp(-(x-b1)**2/(2*c1**2))\nx = np.linspace(0, 20, 200)\ny = func(x, 1, 3, 1, -2, 15, 0.5)\nyn = y + 0.2*np.random.normal(size=len(x))\n\n#p0=Initial guess\ub294 \ucd08\uae30\uc5d0 \uc774 \uac12\ub4e4\uc744 \uae30\uc900\uc73c\ub85c optimal value\ub97c \ucc3e\uc73c\ub77c\ub294 \uc124\uc815\uac12\uc785\ub2c8\ub2e4.\ninitial_guess = [1, 3, 1, 1, 15, 1] \npopt, pcov = curve_fit(func, x, yn, p0=initial_guess)\n\nplt.scatter(x, yn, marker='.')\nplt.plot(x, y, linewidth=2)\nplt.plot(x, func(x, *popt), color='red', linewidth=2)\nplt.legend(['Original', 'Best Fit'], loc=2)\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub9c8\uce58\uba70\u00b6scipy\ub85c  model fitting\ud558\ub294 \ubc29\ubc95\uc744 \uac04\ub2e8\ud788 \uc54c\uc544\ubcf4\uc558\uc2b5\ub2c8\ub2e4. \uba3c\uc800 Model\uc744 \uc0dd\uc131\ud558\uace0\n\uc2e4\ud5d8\ub370\uc774\ud130\uc5d0 curve_fit \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud55c\ub2e4\ub294 \uac83\uc744 \uaf2d \uae30\uc5b5\ud574\uc8fc\uc138\uc694.",
      "tags": "curve_fit,scipy",
      "url": "https://partrita.github.io/posts/python-model-fitting/"
    },
    {
      "title": "\ud30c\uc774\uc36c\uc73c\ub85c \ub79c\ub364 \ud3ec\ub808\uc2a4\ud2b8 \ubd84\uc11d",
      "text": "\uc6d0\ubb38 \ucd9c\ucc98\n\uc774 \uae00\uc5d0\uc11c\ub294 \uae30\uacc4\ud559\uc2b5\uc758 \uc54c\uace0\ub9ac\uc998 \uc911\uc758 \ud558\ub098\uc778 Random forest\uc744 \uac04\ub7b5\ud558\uac8c \uc0ac\uc6a9\ud574\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uad6c\uccb4\uc801\uc778 Random forest\uc758 \uc774\ub860\uc740 \uc0dd\ub7b5\ud558\ub3c4\ub85d \ud560\uac8c\uc694. \ub300\uc2e0\uc5d0 \uc800\uc640 \uac19\uc774 \uae30\uacc4\ud559\uc2b5\uc744 \ubc30\uc6b0\ub824\ub294 \ucd08\ubcf4\uc790\uac00 \ud765\ubbf8\ub97c \ub290\ub084 \ubc29\ubc95\ub860 \uc704\uc8fc\ub85c \uc791\uc131\ud588\uc2b5\ub2c8\ub2e4.\n\ud30c\uc774\uc36c\uc758 \uc720\uba85 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc778 Scikit-learn\uc744 \uc774\uc6a9\ud560\uac70\uc5d0\uc694.\n\n\uc608\uc81c \ub370\uc774\ud130\u00b6Scikit-learn\uc5d0\ub294 \uc608\uc81c\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\ub294 \ub370\uc774\ud130\uac00 \uc774\ubbf8 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uac00\uc9dc\uac00 \uc544\ub2cc \uc9c4\uc9dc \ub370\uc774\ud130\ub4e4\uc774\uace0, \uba87\uba87\uc740 \uc544\uc8fc \uc720\uba85\ud55c \uac83\uc774\uc8e0. \uc5ec\uae30\uc11c\ub294 Iris \ub370\uc774\ud130\ub97c \uc368\ubcfc\uac70\uc5d0\uc694.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nimport numpy as np\nimport pandas as pd\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\nfrom sklearn import datasets\n\niris = datasets.load_iris()\n\n\n    \n\n\n\n\n\n\n\nRandom forest\uc73c\ub85c \ub370\uc774\ud130 \ubd84\ub958\ud558\uae30\u00b6\uccab\ubc88\uc9f8\ub85c \uc6b0\ub9ac\ub294 \uc544\uc8fc \uac04\ub2e8\ud55c \ubd84\ub958\uc791\uc5c5\uc744 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. Iris\ub370\uc774\ud130\ub97c pandas\uc758 dataframe\uc73c\ub85c \ub9cc\ub4e4\uace0 \uc2dc\uac01\ud654 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc778 seaborn\uc73c\ub85c \uadf8\ub9bc\uc744 \uadf8\ub824\ubcfc\uac8c\uc694.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \ndf = pd.DataFrame(iris.data, columns=iris.feature_names)\n\n# sklearn provides the iris species as integer values since this is required for classification\n# here we're just adding a column with the species names to the dataframe for visualisation\ndf['species'] = np.array([iris.target_names[i] for i in iris.target])\n\nsns.pairplot(df, hue='species')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n<seaborn.axisgrid.PairGrid at 0x7f716547fd30>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uadf8\ub9bc\uc774 \uc544\uc8fc \uba4b\uc9d1\ub2c8\ub2e4. \uc790\uc138\ud788 \uc0b4\ud3b4\ubcf4\uba74 \ud30c\ub780\uc0c9\uc758 setosa\ub294 petal length \uc640 petal width\uc5d0\uc11c \ub2e4\ub978\uac83\ub4e4\uacfc \uad6c\ubcc4\uc774 \ub418\ub294\uac83\uc744 \uc54c \uc218 \uc788\uad6c\uc694. \ub2e4\ub978 \ub450 \uc885\uc740 \uad6c\ubcc4\uc774 \uc26c\uc6cc \ubcf4\uc774\uc9c0\ub294 \uc54a\uc544 \ubcf4\uc785\ub2c8\ub2e4. \uc774 \uc815\ub3c4\uba74 \ubd84\uc11d\uc5d0 \uc55e\uc11c \ucda9\ubd84\ud788 \uc0b4\ud3b4\ubcf8\uac83 \uac19\uad70\uc694.\n\ubcf8\uaca9\uc801\uc73c\ub85c, \ubd84\uc11d\uc744 \uc2dc\uc791\ud558\ub3c4\ub85d \ud558\uc8e0. \uba3c\uc800 \ub370\uc774\ud130\ub97c training \uacfc test \uc138\ud2b8\ub85c \ub098\ub204\uaca0\uc2b5\ub2c8\ub2e4. \ubcf4\ud1b5 75/25\uc758 \ube44\uc728\ub85c \ub098\ub204\uae30 \ub54c\ubb38\uc5d0 \uc6b0\ub9ac\ub3c4 \uc77c\ub2e8\uc740 \uadf8\ub807\uac8c \ud558\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\ud30c\uc774\uc36c\uc5d0\uc11c\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \ud55c\uc904\uc758 \ucf54\ub4dc\ub85c \ud574\uacb0 \ud560 \uc218 \uc788\uc8e0.\n\n\n\n\n\n\nIn\u00a0[17]:\n\n    \nfrom sklearn.model_selection import train_test_split\n\nX_train, X_test, y_train, y_test = train_test_split(df[iris.feature_names], iris.target, test_size=0.25, stratify=iris.target, random_state=123456)\n\n\n    \n\n\n\n\n\n\n\ntraning\uc138\ud2b8\uac00 \uc900\ube44\uac00 \ub418\uc5c8\uc73c\ub2c8 Scikit-learn\uc744 \uc0ac\uc6a9\ud574 \ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5b4 \ubcfc\uac8c\uc694. \ub300\ubd80\ubd84\uc758 \uc124\uc815\uc740 \uae30\ubcf8\uac12\uc73c\ub85c \ub450\uc9c0\ub9cc out-of-bag estimate\uc740 True \uac12\uc73c\ub85c \ubcc0\uacbd\ud558\uaca0\uc2b5\ub2c8\ub2e4.\nout-of-bag score\uc740 \uc608\uce21\uc774 \uc5bc\ub9c8\ub098 \uc815\ud655\ud55c\uac00\uc5d0 \ub300\ud55c \ucd94\uc815\uc744 \uc218\uce58\ub85c \ub098\ud0c0\ub0b8 \uac83\uc785\ub2c8\ub2e4.\n\n\uc2e4\uc81c \uc608\uce21\uc758 \uc815\ud655\ub3c4\ub97c \uacc4\uc0b0\ud574\uc11c \ub450\uac1c\uc758 \uac12\uc774 \uc5bc\ub9c8\ub098 \ube44\uc2b7\ud55c\uc9c0 \ubcf4\ub3c4\ub85d \ud560\uac8c\uc694.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nfrom sklearn.ensemble import RandomForestClassifier\n\nrf = RandomForestClassifier(n_estimators=100, oob_score=True, random_state=123456)\nrf.fit(X_train, y_train)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\nRandomForestClassifier(bootstrap=True, class_weight=None, criterion='gini',\n            max_depth=None, max_features='auto', max_leaf_nodes=None,\n            min_impurity_split=1e-07, min_samples_leaf=1,\n            min_samples_split=2, min_weight_fraction_leaf=0.0,\n            n_estimators=100, n_jobs=1, oob_score=True,\n            random_state=123456, verbose=0, warm_start=False)\n\n\n\n\n\n\n\n\n\n\n\n\uc774\uc81c \uc6b0\ub9ac\uac00 \ub9cc\ub4e0 \ubaa8\ub378\uc744 \uac00\uc9c0\uace0 test \uc138\ud2b8\ub97c \ubd84\ub958\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nfrom sklearn.metrics import accuracy_score\n\npredicted = rf.predict(X_test)\naccuracy = accuracy_score(y_test, predicted)\n\nprint(f'Out-of-bag score estimate: {rf.oob_score_:.3}')\nprint(f'Mean accuracy score: {accuracy:.3}')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nOut-of-bag score estimate: 0.973\nMean accuracy score: 0.933\n\n\n\n\n\n\n\n\n\n\n\n\ub450\uac1c\uc758 \uac12\uc774 \uc11c\ub85c \ube44\uc2b7\ud558\ub124\uc694. \ud558\uc9c0\ub9cc \uc8fc\uc758\ud560 \uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uac04\ub2e8\ud55c \ube44\uad50\ub294 \uc9c4\uc9dc\ub85c \uc6b0\ub9ac\uac00 \uc81c\ub300\ub85c\ub41c \ubaa8\ub378\uc744 \uc0ac\uc6a9 \ud558\uace0 \uc788\ub2e4\ub294 \uac83\uc744 \uc758\ubbf8 \ud558\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4. \uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \ubcf4\ub2e4 \uad6c\uccb4\uc801\uc73c\ub85c \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nfrom sklearn.metrics import confusion_matrix\n\ncm = pd.DataFrame(confusion_matrix(y_test, predicted), columns=iris.target_names, index=iris.target_names)\nsns.heatmap(cm, annot=True)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[11]:\n\n\n\n\n\n<matplotlib.axes._subplots.AxesSubplot at 0x7f70f7448320>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub9c8\uce58\uba70\u00b6\uc2dc\uac01\ud654\ub97c \ud1b5\ud574 \uc6b0\ub9ac\uc758 \ubaa8\ub378\uc774 setosa\ub294 \uc815\ud655\ud788 \ubd84\ub958\ud574 \ub0b4\uace0 \uc788\uc9c0\ub9cc, versicolor \uc640 virginica\ub97c \uad6c\ubcc4\ud558\ub294\ub370\ub294 \uc560\ub97c \uba39\uace0 \uc788\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc774\ub807\uac8c \uac04\ub2e8\ud558\uac8c \ud30c\uc774\uc36c\uc73c\ub85c Random forest\ub97c \ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uc544 \ubcf4\uc558\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc5d0\ub294 \ub354 \uad6c\uccb4\uc801\uc774\uace0 \uc2ec\ud654\ub41c \ub0b4\uc6a9\uc73c\ub85c \ucc3e\uc544 \ubd59\uaca0\uc2b5\ub2c8\ub2e4.",
      "tags": "machine learning,random forest,sklearn",
      "url": "https://partrita.github.io/posts/random-forest-python/"
    },
    {
      "title": "R\ub85c \uc11c\uc5f4\ubd84\uc11d\ud558\uae30",
      "text": "R\uc744 \uc774\uc6a9\ud574\uc11c \uac04\ub2e8\ud55c \uc0dd\ubb3c\uc815\ubcf4\ud559(bioinformatics) \ubd84\uc11d\uc744 \ud574\ubcf4\ub3c4\ub85d \ud560\uac8c\uc694. \uc5ec\uae30\uc11c \uc6b0\ub9ac\uac00 \ucd08\uc810\uc744 \ub9de\ucd9c \uac83\uc740 \ub2e8\ubc31\uc9c8\uc758 \uc11c\uc5f4\uc785\ub2c8\ub2e4.\n\uc0dd\ubb3c\ud559\uc5d0 \ub300\ud55c \uae30\ucd08\uc801\uc778 \uc774\ud574\uac00 \uc788\ub2e4\uace0 \uac00\uc815\ud558\uace0 R\ub85c \ubd84\uc11d\ud558\ub294 \uac83 \uc704\uc8fc\ub85c \uc124\uba85\uc744 \ud560 \uac81\ub2c8\ub2e4. R\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc77c\ub2e8 \ucef4\ud4e8\ud130\uc5d0 \uc124\uce58\ub97c \ud574\uc57c \ud560\ud150\ub370\uc694. \uc124\uce58\uac00 \ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4\uba74 \ub2e4\uc74c \ub9c1\ud06c\ub97c \ucc38\uace0\ud574\uc11c \uc124\uce58\ud558\ub3c4\ub85d \ud558\uc138\uc694.\n0. \uc0dd\ubb3c\uc815\ubcf4\ud559 \uc704\ud55c R packages:\u00b6\ub450 \uac00\uc9c0\uc758 \uc720\uba85\ud55c \ud328\ud0a4\uc9c0\uac00 \uc54c\ub824\uc838\uc788\uc2b5\ub2c8\ub2e4.\n\nBioconductor \nSeqinR\n\n\uac01\uac01\uc758 \ud2b9\uc9d5\uc744 \uac04\ub7b5\ud558\uac8c \uc54c\uc544\ubcf4\uc790\uba74 Bioconductor\ub294 \ub9c8\uc774\ud06c\ub85c \uc5b4\ub808\uc774 \ub370\uc774\ud130 \uac19\uc740 \ube44\uad50\uc801 \ud070 \ub370\uc774\ud130 \ubd84\uc11d\uc744 \uc704\ud55c \ud234\ub4e4\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \n\ubc18\uba74\uc5d0, SeqinR\uc740 DNA\ub098 \ub2e8\ubc31\uc9c8 \uc11c\uc5f4\uc744 \ubd84\uc11d\ud558\ub294\ub370 \uc911\uc810\uc744 \ub450\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 SeqinR\uc744 \uc0ac\uc6a9\ud574\ubcfc \uac81\ub2c8\ub2e4.\nSeqinR\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 \uba3c\uc800 \uc124\uce58\ubd80\ud130 \ud574\uc57c\uaca0\uc8e0. \ub2e4\uc74c \uba85\ub839\uc5b4\ub97c \ud1b5\ud574 \uc124\uce58\ub97c \ud558\uace0, \uc2e4\ud589\uc744 \ud574\ubd05\uc2dc\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n# package \uc124\uce58\ud558\uae30\ninstall.packages('seqinr')\n# package \uc2e4\ud589\nlibrary('seqinr')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nUpdating HTML index of packages in '.Library'\nMaking 'packages.html' ... done\n\n\n\n\n\n\n\n\n\n\n\nFASTA \ud615\uc2dd(format)\u00b6FASTA \ud615\uc2dd\uc740 \uac04\ub2e8\ud558\uace0 \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 \ud615\ud0dc\uc758 \ud30c\uc77c\uc785\ub2c8\ub2e4. sequence alignment\uc6a9 FASTA\ub77c\ub294 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \ucc98\uc74c\uc73c\ub85c \uc0ac\uc6a9\ub418\uc5c8\uc8e0. \uc544\ub798\uc5d0 \uc608\uc2dc\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc2dc\ud000\uc2a4\uc5d0 \ub300\ud55c \uc124\uba85\uc740 > \uaebd\uc1c4\ub85c \uc2dc\uc791\ud55c \uccab\ubc88\uc9f8 \uc904\uc5d0 \uc801\ud600 \uc788\uace0, \ub2e4\uc74c \uc904\uc5d0\ub294 \uc11c\uc5f4 \uc815\ubcf4\uac00 \ub4e4\uc5b4\uac11\ub2c8\ub2e4.\n\n> A06852 183 residues\nMPRLFSYLLGVWLLLSQLPREIPGQSTNDFIKACGRELVRLWVEICGSVSWGRTALSLEE\nPQLETGPPAETMPSSITKDAEILKMMLEFVPNLPQELKATLSERQPSLRELQQSASKDSN\nLNFEEFKKIILNRQNEAEDKSLLELKNLGLDKHSRKKRLFRMTLSEKCCQVGCIRKDIAR\n\n\n\n\n\n\n\n1. \uc11c\uc5f4 \uc815\ubcf4\ub97c R\ub85c \uc77d\uc5b4\uc624\uae30\u00b6SeqinR \ud328\ud0a4\uc9c0\ub97c \uc0ac\uc6a9\ud574\uc11c \ud30c\uc2a4\ud0c0(FASTA) \ud30c\uc77c\uc744 \uc77d\uc5b4 \ubcf4\ub3c4\ub85d \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\nNCBI\uc5d0 NC_001477\ub85c accession \ub418\uc5b4 \uc788\ub294 DEN-1 Dengue virus genome sequence\uc758 \ud30c\uc2a4\ud0c0 \ud30c\uc77c\uc744 \ub2e4\uc6b4\ubc1b\uc544 \uc8fc\uc138\uc694. \ud30c\uc77c\uba85\uc740 DEN-1.fasta\ub85c \ud558\uaca0\uc2b5\ub2c8\ub2e4.\ngetncbiseq()\uc744 \uc774\uc6a9\ud574 \ud55c\ubc88\uc5d0 \ubd88\ub7ec\uc624\ub294 \ubc29\ubc95\ub3c4 \uc788\uc5b4\uc694.\n\n\ub2e4\uc6b4\ubc1b\uc740 \ud30c\uc2a4\ud0c0 \ud30c\uc77c\uc774 \uc788\ub294 \ud3f4\ub354\uc5d0\uc11c \uc544\ub798\uc758 \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nlibrary(\"seqinr\")\n\ndengue <- read.fasta(file = \"den1.fasta\")\n# In fact, the first element of the list object dengue contains the the DNA sequence\ndengueseq <- dengue[[1]]\n\n\n    \n\n\n\n\n\n\n\nDNA \uc11c\uc5f4\uc758 \uae38\uc774\u00b6DNA \uc11c\uc5f4\uc744 \ubd88\ub7ec\uc628 \ub2e4\uc74c\uc5d0\ub294 \uc81c\ub300\ub85c \ubd88\uc5b4\uc654\ub294\uc9c0\ub97c \ud655\uc778\ud558\uae30 \uc704\ud574 \ucd1d \uc11c\uc5f4\uc758 \uae38\uc774\ub97c \uc54c\uc544 \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nlength(dengueseq)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n10735\n\n\n\n\n\n\n\n\n\n\n\n\ucd1d 10735\uac1c\uc758 DNA \uc11c\uc5f4\ub85c \uad6c\uc131\ub418\uc5b4\uc788\ub2e4\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uad70\uc694.\n\uc6d0\ud558\ub294 \ubd80\ubd84\uc758 \uc11c\uc5f4\ub9cc \uc5bb\uae30\u00b6DNA \uc11c\uc5f4\uc5d0\uc11c\ub3c4 \ud2b9\uc815 \ubd80\ubd84\ub9cc \ud544\uc694\ud560 \ub54c\uac00 \uc788\uc2b5\ub2c8\ub2e4. DEN-1 Dengue virus genome sequence\uc758 \ucc98\uc74c\ubd80\ud130 50\ubc88\uc9f8 \uae4c\uc9c0\uc758 \uc11c\uc5f4\uc744 \ud655\uc778\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nprint(dengueseq[1:50])\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n [1] \"a\" \"g\" \"t\" \"t\" \"g\" \"t\" \"t\" \"a\" \"g\" \"t\" \"c\" \"t\" \"a\" \"c\" \"g\" \"t\" \"g\" \"g\" \"a\"\n[20] \"c\" \"c\" \"g\" \"a\" \"c\" \"a\" \"a\" \"g\" \"a\" \"a\" \"c\" \"a\" \"g\" \"t\" \"t\" \"t\" \"c\" \"g\" \"a\"\n[39] \"a\" \"t\" \"c\" \"g\" \"g\" \"a\" \"a\" \"g\" \"c\" \"t\" \"t\" \"g\"\n\n\n\n\n\n\n\n\n\n\n\nDNA \uc11c\uc5f4\uc0c1\uc758 \uc5fc\uae30 \uad6c\uc131\u00b6DNA\ub294 4\uac00\uc9c0\uc758 nucleotides (\u201cA\u201d, \u201cC\u201d, \u201cG\u201d, \u201cT\u201d) \ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. DEN-1.fasta\uc5d0 \uac01\uac01\uc774 \uba87\uac1c\ub098 \uc788\ub294\uc9c0 \uc54c\uc544 \ubcf4\ub3c4\ub85d \ud558\uc8e0.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \ntable(dengueseq)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\ndengueseq\n   a    c    g    t \n3426 2240 2770 2299 \n\n\n\n\n\n\n\n\n\n\n\nDEN-1 Dengue virus genome sequence\uc5d0\ub294 3426\uac1c\uc758 A, 2240\uac1c\uc758 C, 2770\uac1c\uc758 G and \uadf8\ub9ac\uace0 2299\uac1c\uc758 T\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uad70\uc694.\nGC Content of DNA\u00b6genome sequene\uc5d0\uc11c \uac00\uc7a5 \uae30\ucd08\uc801\uc778 \ubd84\uc11d\uc740 GC content \uc785\ub2c8\ub2e4. DNA \uc11c\uc5f4\uc0c1\uc5d0 G\uc640 C\uc758 \ube44\uc728\uc774 \uc5bc\ub9c8\ub098 \ub418\ub294\uc9c0\ub97c \ud45c\ud604\ud558\uc8e0. SeqinR\uc5d0\uc11c\ub294 GC() \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\uae30 \ub54c\ubb38\uc5d0 \uc190\uc27d\uac8c \uc54c\uc544 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nGC(dengueseq)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n0.466697717745692\n\n\n\n\n\n\n\n\n\n\n\nGC content\ub294 \ucd1d 46.66977%\uc785\ub2c8\ub2e4. \uc57d\uac04 \uc801\uc740 \ud3b8\uc774\ub124\uc694.\n\ud2b9\uc815 \ubd80\ubd84\uc758 GC content\u00b6\uc880\uc804\uc758 \ubd84\uc11d\uc740 \uc804\uccb4 \uc11c\uc5f4\uc0c1\uc5d0\uc11c \ud3c9\uade0 GC content\uc774\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc DNA\uc11c\uc5f4\uc0c1\uc758 \ud2b9\uc815\ubd80\ubd84\uc5d0\uc11c\uc758 GC content\ub294 \uc5b4\ub5bb\uac8c \uc54c \uc218 \uc788\uc744\uae4c\uc694?\n\uc804\uccb4\uc11c\uc5f4\uc744 \uc5ec\ub7ec\uac1c\uc758 \uc870\uac01\uc73c\ub85c \ub098\ub204\uc5b4 GC()\uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\uc608\uc2dc\ub85c \uc5ec\uae30\uc11c\ub294 300\uac1c\uc529 \uc798\ub77c\ubcf4\uc558\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \nslidingwindowplot <- function(windowsize, inputseq)\n{\n   starts <- seq(1, length(inputseq)-windowsize, by = windowsize)\n   n <- length(starts)    # Find the length of the vector \"starts\"\n   chunkGCs <- numeric(n) # Make a vector of the same length as vector \"starts\", but just containing zeroes\n   for (i in 1:n) {\n        chunk <- inputseq[starts[i]:(starts[i]+windowsize-1)]\n        chunkGC <- GC(chunk)\n        # print(chunkGC)\n        chunkGCs[i] <- chunkGC\n   }\n   plot(starts,chunkGCs,type=\"b\",xlab=\"Nucleotide start position\",ylab=\"GC content\")\n}\n\n# 300\uac1c\uc529 \uc11c\uc5f4\uc744 \ub098\ub204\uc5b4\uc11c GC() \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\nslidingwindowplot(300, dengueseq)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc804\uccb4\uc801\uc778 \uc11c\uc5f4\uc0c1\uc5d0\uc11c GC contents\uac00 \ud2b9\ubcc4\ud558\uac8c \ub0ae\uc740 \uad6c\uc5ed\uc740 4000\ubc88(40%) \uc988\uc74c\uc774\uad70\uc694.\n\ud30c\uc2a4\ud0c0(FASTA) \ud30c\uc77c \uc4f0\uae30\u00b6\ud30c\uc2a4\ud0c0 \ud30c\uc77c\uc744 \ubd88\ub7ec\ub4e4\uc5ec \uac04\ub2e8\ud788 \ubd84\uc11d\uc744 \ud574\ubcf4\uc558\ub294\ub370, \uc774\uc81c\ub294 \ud3b8\uc9d1\ud55c \uc11c\uc5f4\uc744 \ud30c\uc2a4\ud0c0 \ud30c\uc77c\ub85c \uc800\uc7a5\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\uc544\ub798\uc640 \uac19\uc774 \uc791\uc131\ud574\uc8fc\uba74, den1.fasta\ub77c\ub294 \ud30c\uc77c\uc774 \ud3f4\ub354\uc5d0 \uc0dd\uae34\uac83\uc744 \ud655\uc778 \ud560\uc218 \uc788\uc5b4\uc694.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nwrite.fasta(names=\"DEN-1\", sequences=dengueseq, file.out=\"den1.fasta\")\n\n\n    \n\n\n\n\n\n\n\n\ud30c\uc2a4\ud0c0 \ud30c\uc77c\uc5d0\uc11c \ub2e8\ubc31\uc9c8 \uc11c\uc5f4\uc744 \ubd88\ub7ec\uc624\uae30\u00b6SeqinR\uc744 \uc0ac\uc6a9\ud558\uba74 DNA \uc11c\uc5f4\uacfc \ub3d9\uc77c\ud55c \ubc29\ubc95\uc73c\ub85c \ub2e8\ubc31\uc9c8 \uc11c\uc5f4\ub3c4 \uc77d\uc744\uc218 \uc788\uc2b5\ub2c8\ub2e4. Uniprot \uc5d0 \uac01\uac01 Q9CD83 , A0PQ23\uc73c\ub85c \uc800\uc7a5\ub418\uc5b4 \uc788\ub294 \ub2e8\ubc31\uc9c8 \uc11c\uc5f4\uc758 \ud30c\uc2a4\ud0c0 \ud30c\uc77c\uc744 \ub2e4\uc6b4\ubc1b\uc73c\uc138\uc694.\n\uc608\uc2dc\ub85c \uc0ac\uc6a9\ud55c Q9CD83, A0PQ23 ?\u00b6Q9CD83 \uacfc A0PQ23 \ub294 Chorismate pyruvate-lyase\ub77c\ub294 \ud6a8\uc18c\uc785\ub2c8\ub2e4. \ucc28\uc774\uc810\uc740 \uc11c\ub85c \ub2e4\ub978 \uade0\uc8fc\uc5d0\uc11c \ubc1c\ud604\ub41c\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4.\n\nQ9CD83\uc740 Mycobacterium leprae \nA0PQ23\uc740 Mycobacterium ulcerans\n\nR\uc5d0\uc11c \uc544\ub798\uc640 \uac19\uc774 \uc785\ub825\ud558\uc138\uc694.\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \nleprae <- read.fasta(file = \"Q9CD83.fasta\")\nlepraeseq <- leprae[[1]]\n\nulcerans <- read.fasta(file = \"A0PQ23.fasta\")\nulceransseq <- ulcerans[[1]]\n\nlepraeseq # Display the contents of \"lepraeseq\"\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n  [1] \"m\" \"t\" \"n\" \"r\" \"t\" \"l\" \"s\" \"r\" \"e\" \"e\" \"i\" \"r\" \"k\" \"l\" \"d\" \"r\" \"d\" \"l\"\n [19] \"r\" \"i\" \"l\" \"v\" \"a\" \"t\" \"n\" \"g\" \"t\" \"l\" \"t\" \"r\" \"v\" \"l\" \"n\" \"v\" \"v\" \"a\"\n [37] \"n\" \"e\" \"e\" \"i\" \"v\" \"v\" \"d\" \"i\" \"i\" \"n\" \"q\" \"q\" \"l\" \"l\" \"d\" \"v\" \"a\" \"p\"\n [55] \"k\" \"i\" \"p\" \"e\" \"l\" \"e\" \"n\" \"l\" \"k\" \"i\" \"g\" \"r\" \"i\" \"l\" \"q\" \"r\" \"d\" \"i\"\n [73] \"l\" \"l\" \"k\" \"g\" \"q\" \"k\" \"s\" \"g\" \"i\" \"l\" \"f\" \"v\" \"a\" \"a\" \"e\" \"s\" \"l\" \"i\"\n [91] \"v\" \"i\" \"d\" \"l\" \"l\" \"p\" \"t\" \"a\" \"i\" \"t\" \"t\" \"y\" \"l\" \"t\" \"k\" \"t\" \"h\" \"h\"\n[109] \"p\" \"i\" \"g\" \"e\" \"i\" \"m\" \"a\" \"a\" \"s\" \"r\" \"i\" \"e\" \"t\" \"y\" \"k\" \"e\" \"d\" \"a\"\n[127] \"q\" \"v\" \"w\" \"i\" \"g\" \"d\" \"l\" \"p\" \"c\" \"w\" \"l\" \"a\" \"d\" \"y\" \"g\" \"y\" \"w\" \"d\"\n[145] \"l\" \"p\" \"k\" \"r\" \"a\" \"v\" \"g\" \"r\" \"r\" \"y\" \"r\" \"i\" \"i\" \"a\" \"g\" \"g\" \"q\" \"p\"\n[163] \"v\" \"i\" \"i\" \"t\" \"t\" \"e\" \"y\" \"f\" \"l\" \"r\" \"s\" \"v\" \"f\" \"q\" \"d\" \"t\" \"p\" \"r\"\n[181] \"e\" \"e\" \"l\" \"d\" \"r\" \"c\" \"q\" \"y\" \"s\" \"n\" \"d\" \"i\" \"d\" \"t\" \"r\" \"s\" \"g\" \"d\"\n[199] \"r\" \"f\" \"v\" \"l\" \"h\" \"g\" \"r\" \"v\" \"f\" \"k\" \"n\" \"l\"\nattr(,\"name\")\n[1] \"sp|Q9CD83|PHBS_MYCLE\"\nattr(,\"Annot\")\n[1] \">sp|Q9CD83|PHBS_MYCLE Chorismate pyruvate-lyase OS=Mycobacterium leprae (strain TN) GN=ML0133 PE=3 SV=1\"\nattr(,\"class\")\n[1] \"SeqFastadna\"\n\n\n\n\n\n\n\n\n\n\n\n\ud30c\uc2a4\ud0c0 \ud30c\uc77c\uc774 \uc544\ubbf8\ub178\uc0b0 \uc11c\uc5f4\uc744 \ub2f4\uace0 \uc788\ub294\uac83\uc744 \ud655\uc778\ud560 \uc218 \uc788\uace0, \uc11c\uc5f4\uc73c \uc815\ubcf4(\uade0\uc8fc, \uc774\ub984)\ub4f1\uc744 \uc54c\uc218 \uc788\uad70\uc694.\n\ub450 \uc11c\uc5f4\uc744 \uc810\ub3c4\ud45c\ub85c \ube44\uad50\ud558\uae30\u00b6\ub450\uac00\uc9c0\uc758 \uc11c\uc5f4\uc744 \ube44\uad50\ud560\ub54c\ub294 \uba3c\uc800 \uc810\ub3c4\ud45c(dotplot)\uc744 \uadf8\ub824\ubcf4\ub294\uac83\uc740 \uc5b8\uc81c\ub098 \uc88b\uc740 \uc0dd\uac01\uc785\ub2c8\ub2e4.\ndotPlot()\uc774\ub77c\ub294 \uae30\ub2a5\uc73c\ub85c \uc27d\uac8c \uadf8\ub824 \ubcfc \uc218 \uc788\uc8e0. \uc704\uc5d0\uc11c \uc608\ub85c \ub4e4\uc5c8\ub358 Mycobacterium leprae \uacfc Mycobacterium ulcerans\uc758 Chorismate pyruvate-lyase\ub97c \ube44\uad50\ud574\ubcf4\ub3c4\ub85d \ud558\uc8e0.\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \ndotPlot(lepraeseq, ulceransseq)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704\uc758 \uc810\ub3c4\ud45c\uc5d0\uc11c, M. leprae\uc758 \uc11c\uc5f4\uc740 x\ucd95\uc5d0, M. ulcerans\uc758 \uc11c\uc5f4\uc740 y\ucd95\uc73c\ub85c \ud45c\ud604\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \ub450\uac1c\uc758 \uc11c\uc5f4\uc774 \ub3d9\uc77c\ud558\uba74 \uc810\uc73c\ub85c \ud45c\uc2dc\ub429\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4 x\ucd95\uc758 \uc544\ubbf8\ub178\uc0b0 50\ubc88\uacfc y\ucd95\uc758 53\ubc88\uc9f8 \uc544\ubbf8\ub178\uc0b0\uc774 \ub3d9\uc77c\ud558\uae30\ub54c\ubb38\uc5d0 \uc810\uc774 \ucc0d\ud600 \uc788\uc2b5\ub2c8\ub2e4.\n\ub450\uac1c\uc758 \uc11c\uc5f4\uc774 \uc720\uc0ac\ud560\uc218\ub85d \ub300\uac01\uc120\uc774 \uc120\uba85\ud558\uac8c \ub098\ud0c0\ub0a9\ub2c8\ub2e4. \uc6b0\ub9ac\uac00 \uc0ac\uc6a9\ud55c \ub2e8\ubc31\uc9c8 \uc11c\uc5f4\uc740 \uc11c\ub85c \uc720\uc0ac\ud55c \ud6a8\uc18c(homologues)\uc774\uae30 \ub54c\ubb38\uc5d0 \uc608\uc0c1\ud55c\uac83 \ucc98\ub7fc \uc120\uba85\ud55c \ub300\uac01\uc120\uc744 \ubcfc \uc218 \uc788\uc8e0.\n\n\n\n\n\n\n\n\ucf54\ub3c8\ud45c\u00b6SeqinR \ud328\ud0a4\uc9c0\uc5d0\ub294 tablecode() \ub77c\ub294 \uae30\ub2a5\uc73c\ub85c \ud45c\uc900 \ucf54\ub3c8\ud45c\ub97c \uc81c\uacf5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc640 \uac19\uc774 \ud655\uc778\ud560 \uc218 \uc788\uc8e0.\n\ubcf4\ud1b5 \uc778\ud130\ub137\uc5d0\uc11c \uc27d\uac8c \ud655\uc778 \ud560 \uc218 \uc788\ub294\uac83\uc774\ub77c \ud070 \uc4f8\ubaa8\ub294 \uc5c6\uc744 \uc218\ub3c4 \uc788\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \ntablecode()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub9c8\uce58\uba70\u00b6R\uc758 SeqinR\uc774\ub77c\ub294 \ud328\ud0a4\uc9c0\ub97c \uc0ac\uc6a9\ud574 \uc0dd\ubb3c\ud559\uc801 \uc11c\uc5f4\uc815\ubcf4\ub97c \uac04\ub7b5\ud558\uac8c \ubd84\uc11d\ud574\ubcf4\uc558\uc2b5\ub2c8\ub2e4. R\uc5d0\uc11c \uae30\ubcf8\uc801\uc73c\ub85c \uc81c\uacf5\ud558\ub294 \ub2e4\uc74c\uc758 \uae30\ub2a5\uacfc\n\n\ubca1\ud130(vector)\ub098 \ub9ac\uc2a4\ud2b8(list)\uc758 \uae38\uc774\ub97c \uc54c \uc218 \uc788\ub294 length()\n\ubca1\ud130(vector)\ub098 \ub9ac\uc2a4\ud2b8(list)\uc758 \uad6c\uc131\uc131\ubd84\uc758 \uac2f\uc218\ub97c \uc54c\ub824\uc8fc\ub294 table() \n\nSeqinR \ud328\ud0a4\uc9c0\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uae30\ub2a5\n\nDNA \uc11c\uc5f4\uc758 GC content\ub97c \uacc4\uc0b0\ud574\uc8fc\ub294 GC()\n\n\ub97c \uae30\uc5b5\ud574\uc8fc\uc138\uc694.\nSource\u00b6\nhttps://a-little-book-of-r-for-bioinformatics.readthedocs.io",
      "tags": "Bioinformatics,R,SeqinR",
      "url": "https://partrita.github.io/posts/R-bio/"
    },
    {
      "title": "\ud30c\uc774\uc36c \uc2dc\uac01\ud654 \uc608\uc81c",
      "text": "\uc18c\uac1c\u00b6Matplotlib\ub294 \ud30c\uc774\uc36c\uc5d0\uc11c \uc790\ub8cc\ub97c \ucc28\ud2b8(chart)\ub098 \ud50c\ub86f(plot)\uc73c\ub85c \uc2dc\uac01\ud654(visulaization)\ud558\ub294 \ud328\ud0a4\uc9c0\uc785\ub2c8\ub2e4.\n\uc8fc\ud53c\ud130(Jupyter) \ub178\ud2b8\ubd81\uc744 \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0\uc5d0\ub294 \ub2e4\uc74c\ucc98\ub7fc \ub9e4\uc9c1(magic) \uba85\ub839\uc73c\ub85c \ub178\ud2b8\ubd81 \ub0b4\ubd80\uc5d0 \uadf8\ub9bc\uc744 \ud45c\uc2dc\ud558\ub3c4\ub85d \uc9c0\uc815\ud574\uc57c \ud569\ub2c8\ub2e4.\n%matplotlib inline\n\n\uadf8\ub9bc\uc758 \uad6c\uc870\u00b6Matplotlib\uc758 \uadf8\ub9bc\uc740 Figure \uac1d\uccb4, Axes \uac1d\uccb4, Axis \uac1d\uccb4 \ub4f1\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. Figure \uac1d\uccb4\ub294 \ud55c \uac1c \uc774\uc0c1\uc758 Axes \uac1d\uccb4\ub97c \ud3ec\ud568\ud558\uace0 Axes \uac1d\uccb4\ub294 \ub2e4\uc2dc \ub450 \uac1c \uc774\uc0c1\uc758 Axis \uac1d\uccb4\ub97c \ud3ec\ud568\ud569\ub2c8\ub2e4. \ub9d0\ub85c \ud558\uba74 \uc774\ud574\ud558\uae30 \ud798\ub4dc\ub2c8 \uadf8\ub9bc\uc73c\ub85c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\nFigure\ub294 \uadf8\ub9bc\uc774 \uadf8\ub824\uc9c0\ub294 \uce94\ubc84\uc2a4\ub098 \uc885\uc774\ub97c \ub73b\ud558\uace0 Axes\ub294 \ud558\ub098\uc758 \uadf8\ub9bc, \uadf8\ub9ac\uace0 Axis\ub294 \uac00\ub85c\ucd95\uc774\ub098 \uc138\ub85c\ucd95 \ub4f1\uc758 \ucd95\uc785\ub2c8\ub2e4.\n\ucc38\uace0\u00b6\n\ud6a8\uacfc\uc801\uc73c\ub85c matplotlib\uc0ac\uc6a9\ud558\uae30 \ub9c1\ud06c\nMatplotlib\ub97c \uc0ac\uc6a9\ud55c \uc2dc\uac01\ud654 \uc608\uc81c\ub4e4\uc744 \ubcf4\uace0 \uc2f6\ub2e4\uba74 Matplotlib \uac24\ub7ec\ub9ac\ub97c \ubc29\ubb38\ud558\uc138\uc694.\n\ub370\uc774\ud130 \uc0ac\uc774\uc5b8\uc2a4 \uc2a4\ucfe8\uc758 Matplotlib \uc18c\uac1c\n\n\ud14c\uc2a4\ud2b8\ud558\uae30\u00b6\n\n\n\n\n\nIn\u00a0[2]:\n\n    \n# \ud544\uc694\ud55c \ubaa8\ub4c8\uc744 \ubd88\ub7ec\uc635\ub2c8\ub2e4.\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# \uadf8\ub798\ud504\ub97c \uadf8\ub9b4 X, Y \uac12\uc744 \uc785\ub825\ud569\ub2c8\ub2e4.\nx = [1,2,3,4,5,6,7,8,9,10]\ny = [2,3,4,6,7,9,10,16,17,20]\n\n# Get the figure and the axes\nfig, (ax0, ax1) = plt.subplots(nrows=1,ncols=2, sharey=False, figsize=(8, 4))\n\n# \uccab\ubc88\uc9f8 \uadf8\ub798\ud504\nax0.plot(x,y) # \uc120 \uadf8\ub798\ud504\nax0.set_ylim([2,20]) # y\ucd95\uc758 \uac12\uc744 \uc9c0\uc815\nax0.set(title='First', xlabel='Score', ylabel='Time')\n\n# \ub450\ubc88\uc9f8 \uadf8\ub798\ud504\nax1.bar(x,y) # \ub9c9\ub300 \uadf8\ub798\ud504\nax1.set_ylim([0,30])\nax1.set(title='Second', xlabel='Score', ylabel='Time')\n\n# Title the figure\nfig.suptitle('TEST', fontsize=14, fontweight='bold')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\nText(0.5,0.98,'TEST')\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub9c9\ub300 \uadf8\ub798\ud504 (Bar graph)\u00b6\ub450\uac00\uc9c0 \uadf8\ub8f9 (group1, group2)\uc5d0 \uac01\uac01 (E7, E8, E9, E10) \uc0d8\ud50c\uc774 \uc788\uace0 \uc5ec\ub7ec\ubc88 \uac12\uc744 \uce21\uc815\ud558\uc5ec \ud45c\uc900\ud3b8\ucc28\ub97c \uc5d0\ub7ec\ubc14\ub85c \ud45c\uc2dc\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \n# \ud544\uc694\ud55c \ubaa8\ub4c8\uc744 \uc784\ud3ec\ud2b8\nimport numpy as np\nimport matplotlib.pyplot as plt\n%matplotlib inline\n\n# number of data in each group\nn_groups = 4\n\n# \uac01 \ub370\uc774\ud130\uc758 \ud3c9\uade0\nmeans_group1 = (121.32, 272.88, 277.08, 227.03)\nmeans_group2 = (141.21, 472.15, 457.01, 327.34)\n\n# \uac01 \ub370\uc774\ud130\uc758 \ud45c\uc900\ud3b8\ucc28\nstd_group1 = (8.0, 5.8, 2.0, 19.9)\nstd_group2 = (5.0, 15.8, 12.0, 9.1)\nfig, ax = plt.subplots()\nindex = np.arange(n_groups)\nbar_width = 0.3 # space between bar\nrects2 = plt.bar(index, means_group1, bar_width,\n#color='r' , # color of bar\nyerr=std_group1, # error bar\ncapsize=3, # cap length for error bar\necolor='k', # color of error bar\nlabel='group1')\nrects2 = plt.bar(index + bar_width, means_group2, bar_width,\n#color='b', # color of bar\nyerr=std_group2, # error bar\ncapsize=3, # cap length for error bar\necolor='k', # color of error bar\nlabel='treatment group')\n\nplt.xlabel('Sample') # x\ucd95 \uc774\ub984\nplt.ylabel('mg/ml') # y\ucd95 \uc774\ub984\nplt.title('TEST') # \uadf8\ub798\ud504 \uc774\ub984\nplt.xticks(index + bar_width/2, ('E7', 'E8', 'E9', 'E10')) # x\ucd95 \ud2f1\nplt.legend() # \ub808\uc804\ub4dc \ud45c\uc2dc\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uacb9\uce5c \ub9c9\ub300 \uadf8\ub798\ud504\u00b6\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nA = [5., 30., 45., 22.]\nB = [5., 25., 50., 20.]\n\nX= range(4)\nplt.bar(X, A )\nplt.bar(X, B, bottom = A)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n<Container object of 4 artists>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc218\ud3c9 \ub9c9\ub300 \uadf8\ub798\ud504\u00b6\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nimport numpy as np\nimport matplotlib.pyplot as plt\n\nwomen_pop = np.array([5., 30., 45., 22.])\nmen_pop = np.array([5.,25.,50.,20.])\nX = np.arange(4)\n\nplt.barh(X, women_pop, label = 'women')\nplt.barh(X, -men_pop, label = 'man')\nplt.legend()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n<matplotlib.legend.Legend at 0x84c3e48>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc5d0\ub7ec\ubc14 \uc788\ub294 \uc120 \uadf8\ub798\ud504\u00b6\n\n\n\n\n\nIn\u00a0[3]:\n\n    \nimport matplotlib.pyplot as plt\n\n# Data to draw\nx = [0.083, 1, 2,4,8]\ny = [523.11, 62.32, 37.93, 24.85, 13.81]\ny2 = [733.31, 220.25, 132.63, 72.63, 25.17]\nstd = [101.62, 22.61, 13.00, 4.64, 3.56]\n\n\nfig, ax = plt.subplots(nrows=1,ncols=1, figsize=(5, 4))\n# fig = plt.figure() # figure setting\n# ax = fig.add_subplot(1,1,1) # Get the figure and the axes\n\n#\nax.errorbar(x, y, std, fmt = \"ko-\" ,capsize= 3 ) # \uc5d0\ub7ec\ubc14\uac00 \uc788\ub294 \uc120 \uadf8\ub798\ud504\ub97c \uadf8\ub824\uc90d\ub2c8\ub2e4.\nax.errorbar(x, y2, std, fmt = \"o--\" ,capsize= 3  ) # \uc5d0\ub7ec\ubc14\uac00 \uc788\ub294 \uc120 \uadf8\ub798\ud504\ub97c \uadf8\ub824\uc90d\ub2c8\ub2e4.\n\n# Label\uacfc Title\uc744 \uc815\ud574\uc90d\ub2c8\ub2e4.\nax.set(title='Pharmacokinetics ', xlabel='Hours', ylabel='Protein conc.')\n# Y\ucd95\uc744 log\ub85c \ubc14\uafb8\uc5b4 \uc90d\ub2c8\ub2e4. \nax.set_yscale('log')\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nscatter plot\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nimport numpy as np\nimport matplotlib.pyplot as plt\n\nline = plt.figure()\n\nnp.random.seed(5)\nx = np.arange(1, 101)\ny = 20 + 3 * x + np.random.normal(0, 60, 100)\nplt.plot(x, y, \"o\")\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n[<matplotlib.lines.Line2D at 0x8524400>]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ubc15\uc2a4 \uadf8\ub798\ud504(Box plot)\u00b6\uc815\ud655\ud55c \uba85\uce6d\uc740 box-and-whisker plot\uc785\ub2c8\ub2e4. \ud1b5\uacc4\ud559\uc801\uc73c\ub85c \uc720\uc6a9\ud55c \uc5ec\ub7ec\uac12\uc744 \ud55c\ubc88\uc5d0 \uc2dc\uac01\ud654 \ud574\uc90d\ub2c8\ub2e4.\n\n\uc911\uc559\uac12(Median)\n\ubc15\uc2a4(Box): 25~75%\uc758 \uac12\uc744 \ud45c\ud604, \uac00\uc7a5 \uc544\ub798\uac00 Q1\uc774\uace0 \uac00\uc7a5 \uc704\uac00 Q3\uc785\ub2c8\ub2e4.\n\uc218\uc5fc(Whiskers): \ubc15\uc2a4\uc758 \uc704\uc544\ub798\ub85c Q1~Q3\uc73c\ub85c \ubd80\ud130 1.5\ubc30 \ub0b4\uc5d0 \uc788\ub294 \uac00\uc7a5 \ub5a8\uc5b4\uc9c4 \ub370\uc774\ud130\n\uc774\uc0c1\uce58(Outlier): \uc218\uc5fc\ubcf4\ub2e4 \uba40\ub9ac\uc788\ub294 \uac12\n\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nimport matplotlib.pyplot as plt\nimport numpy as np\n\n## Create data\nnp.random.seed(10)\ncollectn_1 = np.random.normal(100, 10, 200)\ncollectn_2 = np.random.normal(80, 30, 200)\ncollectn_3 = np.random.normal(90, 20, 200)\ncollectn_4 = np.random.normal(70, 25, 200)\n\n## combine these different collections into a list    \ndata = [collectn_1, collectn_2, collectn_3, collectn_4]\n\nfig1, ax = plt.subplots(nrows=1,ncols=1, figsize=(8, 4))\n\n# plotting\nax.boxplot(data)\n\n## Custom x-axis labels\nax.set_xticklabels(['Sample1', 'Sample2', 'Sample3', 'Sample4'])\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n[Text(0,0,'Sample1'),\n Text(0,0,'Sample2'),\n Text(0,0,'Sample3'),\n Text(0,0,'Sample4')]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \ndata = np.random.randn(100)\n#\uc815\uaddc\ubd84\ud3ec\uc5d0\uc11c \uc5bb\uc740 100\uac1c\uc758 \uac12\uc744 \uc0dd\uc131\nplt.boxplot(data)\n#\uac12 \uc9d1\ud569\uc744 \ucde8\ud55c\ud6c4, \uc790\uccb4\uc5d0\uc11c \ud3c9\uade0\uac12, \uc911\uc559\uac12\uacfc \ub2e4\ub978 \ud1b5\uacc4\uc218\ub7c9\uc744 \uacc4\uc0b0\ud55c\ub2e4.\nplt.show()\n#\ube68\uac04 \ub9c9\ub300\ub294 \ud3c9\uade0\uac12, \ud30c\ub780\uc0c1\uc790\ub294 \uc81c 1\uc0ac\ubd84\uc704\uc218\ubd80\ud130 \uc81c 3\uc0ac\ubd84\uc704\uc218\uae4c\uc9c0\uc758 \ub370\uc774\ud130\uc758 \uc808\ubc18\uc744 \ud3ec\ud568\ud55c\ub2e4 = \ub370\uc774\ud130\ud3c9\uade0\uac12\uc758 \uc911\uc2ec\uc774\ub2e4.\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud788\uc2a4\ud1a0\uadf8\ub7a8(Histogram)\u00b6\ud788\uc2a4\ud1a0\uadf8\ub7a8(histogram)\uc740 \ud45c\ub85c \ub418\uc5b4 \uc788\ub294 \ub3c4\uc218 \ubd84\ud3ec\ub97c \uc815\ubcf4 \uadf8\ub9bc\uc73c\ub85c \ub098\ud0c0\ub0b8 \uac83\uc774\ub2e4. \ub354 \uac04\ub2e8\ud558\uac8c \ub9d0\ud558\uba74, \ub3c4\uc218\ubd84\ud3ec\ud45c\ub97c \uadf8\ub798\ud504\ub85c \ub098\ud0c0\ub0b8 \uac83\uc774\ub2e4\n\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nN_points = 100000\nn_bins = 20\n\n# Generate a normal distribution, center at x=0 and y=5\nx = np.random.randn(N_points)\ny = .4 * x + np.random.randn(100000) + 5\n\nfig, ax = plt.subplots()\n\n# We can set the number of bins with the `bins` kwarg\nax.hist(x, bins=n_bins)\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ntriplot\u00b6\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nimport matplotlib.tri as tri\n\ndata = np.random.rand(100,2)\n\ntriangles = tri.Triangulation(data[:,0],data[:,1])\n\nplt.triplot(triangles)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n[<matplotlib.lines.Line2D at 0x860afd0>,\n <matplotlib.lines.Line2D at 0x8613198>]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2.\uceec\ub7ec\uc640 \uc2a4\ud0c0\uc77c \uc0ac\uc6a9\uc790 \uc815\uc758\u00b6\n\n\n\n\n\nIn\u00a0[9]:\n\n    \ndef pdf(X, mu, sigma):\n    a = 1. / (sigma * np.sqrt(2. * np.pi))\n    b = -1. / (2. * sigma **2)\n    return a * np.exp(b* (X - mu)**2)\nX = np.linspace(-6,6,1000)\nfor i in range(5):\n    samples = np.random.standard_normal(50) #50\uac1c\uc758 \ud45c\ubcf8 \uc9d1\ud569\uc744 5\uac1c \uc0dd\uc131\n    mu, sigma = np.mean(samples), np.std(samples) \n    plt.plot(X, pdf(X, mu, sigma), color = '.75')\n\nplt.plot(X, pdf(X, 0., 1.), color = 'k')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\n[<matplotlib.lines.Line2D at 0x8638c50>]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \nA = np.random.standard_normal((100,2))\nA += np.array((-1,-1))\n\nB = np.random.standard_normal((100,2))\nB += np.array((1,1))\n\nplt.scatter(A[:,0],A[:,1], color = '.25')\nplt.scatter(B[:,0],B[:,1], color = '.75')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\n<matplotlib.collections.PathCollection at 0x86eb940>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \ndata = np.random.standard_normal((100,2))\n\nplt.scatter(data[:,0],data[:,1],color ='1.0',edgecolor = '0.0')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[11]:\n\n\n\n\n\n<matplotlib.collections.PathCollection at 0x87509e8>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \nimport matplotlib.cm as cm\nimport matplotlib.colors as col\n\nvalues = np.random.randint(99, size = 50)\ncmap = cm.ScalarMappable(col.Normalize(0,99), cm.binary)\n\nplt.bar(np.arange(len(values)), values, color = cmap.to_rgba(values))\nplt.show()\n#\ub192\uc774\uc5d0 \ub530\ub77c \uc0c9\uc774 \uc9c4\ud574\uc9d0\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \nimport numpy as np\nimport matplotlib.pyplot as plt\ndef pdf(X, mu, sigma):\n    a = 1. / (sigma * np.sqrt(2. * np.pi))\n    b = -1. / (2. * sigma **2)\n    return a * np.exp(b* (X - mu)**2)\nX = np.linspace(-6,6,1024)\nplt.plot(X, pdf(X,0.,1.),color='k', linestyle = 'solid')\n\nplt.plot(X, pdf(X,0.,5.),color='k', linestyle = 'dashed')\n\nplt.plot(X, pdf(X,0.,25.),color='k', linestyle = 'dashdot')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[14]:\n\n\n\n\n\n[<matplotlib.lines.Line2D at 0xa060630>]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \nX = np.linspace(-6, 6, 1024)\nY1 = np.sinc(X)\nY2 = np.sinc(X) +1\n\nplt.plot(X,Y1, marker ='o', color = '.75')\nplt.plot(X, Y2, marker = 'o', color ='k', markevery = 32)\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n3.\uc8fc\uc11d\uc0ac\uc6a9\u00b6\n\n\n\n\n\nIn\u00a0[17]:\n\n    \nX = np.linspace(-4,4,1024)\nY = .25*(X+4.)*(X+1.)*(X-2.)\n\nplt.title('Power curve')\nplt.xlabel('Air speed')\nplt.ylabel('Total drag')\nplt.plot(X,Y, c='k')\nplt.text(-0.5,-0.25, 'Bracjmard')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[17]:\n\n\n\n\n\nText(-0.5,-0.25,'Bracjmard')\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[18]:\n\n    \nN = 16\nfor i in range(N):\n    plt.gca().add_line(plt.Line2D((0,i),(N-i,0), color = '.45'))\n    #Line2d \ud568\uc218\ub294 \uc0c8\ub85c\uc6b4 16\uac1c\uc758 \ub3c5\ub9bd\uc801\uc778 \uc120\uc744 \uadf8\ub9b0\ub2e4.\nplt.grid(True)\nplt.axis('scaled')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[18]:\n\n\n\n\n\n(-0.75, 15.75, -0.80000000000000004, 16.800000000000001)\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[20]:\n\n    \nimport matplotlib.ticker as ticker\nname_list = ('Omar', 'Serguey', 'Max', 'Zhou', 'Abdin')\nvalue_list = np.random.randint(0,99,size = len(name_list))\npos_list = np.arange(len(name_list))\n\nax = plt.axes()\nax.xaxis.set_major_locator(ticker.FixedLocator((pos_list)))\nax.xaxis.set_major_formatter(ticker.FixedFormatter((name_list)))\n\nplt.bar(pos_list, value_list, color = '.75', align = 'center')\nplt.show()\n# \ub208\uae08\uc758 \uc704\uce58\ub97c \uc0dd\uc131\ud558\ub294 ticker.locater\ub97c \ubcf4\uc558\ub2e4. ticker.formatter \uac1d\uccb4 \uc778\uc2a4\ud134\uc2a4\ub294 \ub208\uae08\uc6a9 \ub808\uc774\ube14\uc744 \uc0dd\uc131\ud55c\ub2e4.\n# \uc5ec\uae30\uc11c \uc0ac\uc6a9\ud588\ub358 formatter \uc778\uc2a4\ud134\uc2a4\ub294 fixedformatter\uc774\uba70 \ubb38\uc790\uc5f4 \ubaa9\ub85d\uc5d0\uc11c \ub808\uc774\ube14\uc744 \uac00\uc838\uc628\ub2e4 \n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[28]:\n\n    \nx = [1,2,3,4]\ny = [5,4,3,2]\n\nfig, ax = plt.subplots(ncols = 3, nrows = 2)\nax[0,0].plot(x, y)\nax[0,1].bar(x, y)\nax[0,2].barh(x, y)\nax[1,0].bar(x, y)\ny1 = [7,8,5,3] # we need more data for stacked bar charts\nax[1,0].bar(x, y1, bottom=y, color = 'r')\nax[1,1].boxplot(x)\nax[1,2].scatter(x,y)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[28]:\n\n\n\n\n\n<matplotlib.collections.PathCollection at 0xa949048>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nAdding a legend and annotations\u00b6Legends and annotations explain data plots clearly and in context. By assigning each plot \na short description about what data it represents, we are enabling an easier mental model \nin the reader's (viewer's) head. This recipe will show how to annotate specific points on our \nfigures and how to create and position data legends.\n\n\n\n\n\n\nIn\u00a0[35]:\n\n    \nx1 = np.random.normal(30, 3, 100)\nx2 = np.random.normal(20, 2, 100)\nx3 = np.random.normal(10, 3, 100)\n\nplt.plot(x1, label='plot')\nplt.plot(x2, label='2nd plot')\nplt.plot(x3, label='last plot')\n# annotate an important value\nplt.annotate(\"Important value\", (55,20), xycoords='data',\n         xytext=(15, 36),\n         arrowprops=dict(arrowstyle='->'))\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nsmoothing raw_ data\u00b6Another very popular signal smoothing algorithm is Median Filter. The main idea of this filter \nis to run through the signal entry by entry, replacing each entry with the median of neighboring \nentries. This idea makes this filter fast and usable both for one-dimensional datasets as well \nas for two-dimensional datasets (such as images).\nIn the following example, we use the implementation from the SciPy signal toolbox:\n\n\n\n\n\n\nIn\u00a0[36]:\n\n    \nimport scipy.signal as signal\nx = np.linspace (0, 1, 101) # get some linear data\nx[3::10] = 1.5 # add some noisy signal\nplt.plot(x)\nplt.plot(signal.medfilt(x,3))\nplt.plot(signal.medfilt(x,15))\nplt.legend(['original signal', 'length 3','length 15'])\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[36]:\n\n\n\n\n\n<matplotlib.legend.Legend at 0xc6fdf98>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nWe see in the following plot that the bigger the window, the more our signal gets distorted as compared to the original but the smoother it looks:\nThere are many more ways to smooth data (signals) that you receive from external sources. It depends a lot on the area you are working in and the nature of the signal. Many algorithms are specialized for a particular signal, and there may not be a general solution for every case you encounter.\nThere is, however, one important question: \"When should you not smooth a signal?\" One \ncommon situation where you should not smooth signals is prior to statistical procedures, such as least-squares curve fitting, because all smoothing algorithms are at least slightly lossy and they change the signal shape. Also, smoothed noise may be mistaken for an actual signal.",
      "tags": "matplotlib,Python,\uc2dc\uac01\ud654",
      "url": "https://partrita.github.io/posts/matplotlib-examples/"
    },
    {
      "title": "\ub2f9\ub1e8\ubcd1 \uc608\uce21\ud558\uae30",
      "text": "Reddit \uc5d0\uc11c \ud765\ubbf8\ub85c\uc6b4 \uae00\uc744 \ubd24\uc5b4\uc694. \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \uc774\uc6a9\ud574\uc11c \ub2f9\ub1e8\ub97c \uc608\uce21\ud558\ub294 \ud29c\ud1a0\ub9ac\uc5bc\uc774\uc5c8\uc8e0. \ud30c\uc774\uc36c\uc744 \uc774\uc6a9\ud574\uc11c 15\uc904\uc758 \ucf54\ub4dc\uac00 \uc804\ubd80\uc600\uc2b5\ub2c8\ub2e4.\n0. \uae30\uacc4\ud559\uc2b5\uc774\ub77c\uace0?\u00b62016\ub144\ub3c4 \uc774\uc138\ub3cc\uc744 \uc774\uacbc\ub358 AlphaGO\ub97c \uae30\uc5b5\ud558\uc2dc\ub098\uc694? AlphaGO\ub77c\ub294 \uc778\uacf5\uc9c0\ub2a5\uc744 \ubc14\ub85c \uae30\uacc4\ud559\uc2b5\uc73c\ub85c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4.\n\uae30\uacc4 \ud559\uc2b5 \ub610\ub294 \uba38\uc2e0 \ub7ec\ub2dd(\uc601\uc5b4: machine learning)\uc740 \uc778\uacf5 \uc9c0\ub2a5\uc758 \ud55c \ubd84\uc57c\ub85c, \ucef4\ud4e8\ud130\uac00 \ud559\uc2b5\ud560 \uc218 \uc788\ub3c4\ub85d \ud558\ub294 \uc54c\uace0\ub9ac\uc998\uacfc \uae30\uc220\uc744 \uac1c\ubc1c\ud558\ub294 \ubd84\uc57c\ub97c \ub9d0\ud55c\ub2e4. \uac00\ub839, \uae30\uacc4 \ud559\uc2b5\uc744 \ud1b5\ud574\uc11c \uc218\uc2e0\ud55c \uc774\uba54\uc77c\uc774 \uc2a4\ud338\uc778\uc9c0 \uc544\ub2cc\uc9c0\ub97c \uad6c\ubd84\ud560 \uc218 \uc788\ub3c4\ub85d \ud6c8\ub828\ud560 \uc218 \uc788\ub2e4.    - wikipedia\n\n\ubaa8\ub4e0 \uacbd\uc6b0\uc758 \uc218\ub97c \uc0ac\ub78c\uc774 \ucf54\ub529\ud560 \ud544\uc694\uac00 \uc5c6\uc774 \ucd5c\uc18c\ud55c\uc758 \uac83\ub9cc \ud574\uc8fc\uba74, \uc778\uacf5 \uc9c0\ub2a5\uc774 \uc54c\uc544\uc11c \ud55c\ub2e4. \uadf8\uac83\uc774 \uae30\uacc4\ud559\uc2b5\uc758 \ub9e4\ub825\uc774\uc8e0. \uae30\uacc4\ud559\uc2b5\uc5d0\ub3c4 \uc5ec\ub7ec \uc885\ub958\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc6b0\ub9ac\uac00 \uc774\ubc88\uc5d0 \uc0ac\uc6a9\ud560 \uac83\uc740 \uc778\uacf5 \uc2e0\uacbd\ub9dd\uc774\ub77c\ub294 \uac83\uc785\ub2c8\ub2e4.\n\uc778\uacf5\uc2e0\uacbd\ub9dd\u00b6\n\uc778\uacf5\uc2e0\uacbd\ub9dd(artificial neural network, ANN)\uc740 \uae30\uacc4\ud559\uc2b5\uacfc \uc778\uc9c0\uacfc\ud559\uc5d0\uc11c \uc0dd\ubb3c\ud559\uc758 \uc2e0\uacbd\ub9dd(\ub3d9\ubb3c\uc758 \uc911\ucd94\uc2e0\uacbd\uacc4\uc911 \ud2b9\ud788 \ub1cc)\uc5d0\uc11c \uc601\uac10\uc744 \uc5bb\uc740 \ud1b5\uacc4\ud559\uc801 \ud559\uc2b5 \uc54c\uace0\ub9ac\uc998\uc774\ub2e4. - wikipedia\n\n\uc5b4\ub5bb\uac8c \uc778\uacf5\uc2e0\uacbd\ub9dd\uc744 \ub9cc\ub4dc\ub0d0\uace0\uc694? \ud30c\uc774\uc36c\uc5d0\ub294 \uc774\ubbf8 \uae30\uacc4\ud559\uc2b5\uc5d0 \uc0ac\uc6a9\ub418\ub294 \ud504\ub808\uc784\uc6cc\ud06c(\uc608\ub97c \ub4e4\uba74 TensorFlow)\uac00 \uc874\uc7ac\ud574\uc11c, \uc6b0\ub9ac\ub294 \uadf8\ub0e5 \uc4f0\uae30\ub9cc \ud558\uba74\ub418\uc694!\n1. Keras\ub97c \uc0ac\uc6a9\ud560 \uac70\uc5d0\uc694.\u00b6\nKeras is a high-level neural networks API, written in Python and capable of running on top of TensorFlow, CNTK, or Theano. It was developed with a focus on enabling fast experimentation.\n\nKeras\ub294 \ub2e4\uc74c\uacfc \uac19\uc740 \ud2b9\uc9d5\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc27d\uac8c \uadf8\ub9ac\uace0 \ube60\ub974\uac8c \ucf54\ub529\uc774 \uac00\ub2a5\nCPU \uc640 GPU \uc790\uc6d0\uc744 \ubb38\uc81c\uc5c6\uc774 \uc0ac\uc6a9\n\ud30c\uc774\uc36c 2.7 - 3.6\uc744 \uc9c0\uc6d0\n\n\uc790\uc138\ud55c \ub0b4\uc6a9\uc740 \uacf5\uc2dd \uc0ac\uc774\ud2b8\ub97c \ubc29\ubb38\ud558\uc138\uc694.\n\ub370\uc774\ud130 \uc138\ud2b8 \uc124\uba85\u00b6\uc0ac\uc6a9\ud55c \ub370\uc774\ud130 \uc138\ud2b8\ub294 Pima Indians Diabetes Data Set \uc785\ub2c8\ub2e4. \ucd9c\ucc98\ub294 \ub9c1\ud06c\ub97c \ud655\uc778\ud558\uc138\uc694.\n\ubbf8\uad6d \uc6d0\uc8fc\ubbfc \uc911 Pima \uc871\uc740 \uc6d0\ub798\ub294 \ub2f9\ub1e8\ubcd1\uc758 \uc720\ubcd1\uc728\uc774 \uc801\uc5c8\ub294\ub370, \uc11c\uad6c\uc2dd \uc2dd\uc2b5\uad00\uc5d0 \uc758\ud574 \uae09\uc18d\ub3c4\ub85c \ub2f9\ub1e8\ubcd1\uc5d0 \uac78\ub838\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub2f9\ub1e8\ubcd1\uc744 \uc5f0\uad6c\ud558\ub294\ub370 \uadc0\uc911\ud55c \ub370\uc774\ud130\ub85c \uc0ac\uc6a9\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\ub370\uc774\ud130 \uc138\ud2b8\ub294 CSV \ud3ec\uba67\uc774\uace0 \ucd1d 9\uac00\uc9c0\uc758 \uc18d\uc131\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc784\uc2e0\ud69f\uc218\n\uae00\ub8e8\ucf54\uc2a4 \ub0b4\uc131(glucose tolerance)\uc2e4\ud5d8 \ud6c4\uc758 \ud608\ub2f9\uc218\uce58 \n\ud655\uc7a5\uae30 \ud608\uc555(mm Hg)\n\uc0c1\uc644 \uc0bc\ub450\uadfc \ud53c\ubd80 \ub450\uaed8 (mm)\n\ud608\uc561\ub0b4 \uc778\uc290\ub9b0 \uc218\uce58 (mu U/ml)\nBMI(\ube44\ub9cc\ub3c4) \uc218\uce58 (weight in kg/(height in m)2)\n\ub2f9\ub1e8\ubcd1 \uac00\uc871\ub825: \uacc4\uc0b0\uc2dd\uc740 \ub370\uc774\ud130\uc138\ud2b8\uc758 \ucd9c\ucc98\uc5d0\uc11c \ud655\uc778\ud558\uc138\uc694.\n\ub098\uc774 (years)\n\ub2f9\ub1e8\ubcd1 \uc5ec\ubd80 (0 or 1; 1\uc740 \ubc1c\ubcd1)\n\n\ucd9c\ucc98\u00b6\uc6d0\uc791\uc790\uc758 \ucf54\ub4dc\ub97c \ud655\uc778\ud558\uace0 \uc2f6\ub2e4\uba74 \ub2e4\uc74c \ub9c1\ud06c\ub97c \ud655\uc778\ud558\uc138\uc694.\n2. \uc774\uc81c \uc2e4\uc2b5\uc744 \ud574\ubd05\uc2dc\ub2e4.\u00b6\n\n\n\n\n\nIn\u00a0[2]:\n\n    \n# \ud544\uc694\ud55c \ubaa8\ub4c8\uc744 \ubd88\ub7ec\ub4e4\uc785\ub2c8\ub2e4.\nfrom keras.models import Sequential\nfrom keras.layers import Dense\nimport numpy\nfrom urllib import request\nimport matplotlib.pyplot as plt\n%matplotlib inline \n\n# \ub370\uc774\ud130 \uc138\ud2b8\uc758 URL\uc744 \uc124\uc815\nurl = \"http://archive.ics.uci.edu/ml/machine-learning-databases/pima-indians-diabetes/pima-indians-diabetes.data\"\nf = request.urlopen(url)\n\n# random seed for reproducibility\nnumpy.random.seed(2)\n\n# \ub370\uc774\ud130 \uc138\ud2b8\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4. \ndataset = numpy.loadtxt(f, delimiter=\",\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nUsing TensorFlow backend.\n\n\n\n\n\n\n\n\n\n\n\n\uc774\uac78\ub85c \ub370\uc774\ud130 \uc138\ud2b8\ub294 \uc900\ube44\uac00 \ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n\ubaa8\ub378 \ub9cc\ub4e4\uae30\u00b6\ub2e4\uc74c\uc73c\ub85c Keras\ub97c \uc774\uc6a9\ud574 \uac04\ub2e8\ud55c \ubaa8\ub378\uc744 \ub9cc\ub4e4\uace0, 800\ubc88\uc758 \ud559\uc2b5(epochs)\uc744 \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n800\ubc88 \uc815\ub3c4 \uc2e4\ud589\uc2dc\ud0a4\uba74 \uc2dc\uac04\uc774 \uc880 \uac78\ub9bd\ub2c8\ub2e4. \uae30\ub2e4\ub824 \uc8fc\uc138\uc694.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \n# \ub370\uc774\ud130\uc138\ud2b8\ub97c \ub450 \uac00\uc9c0 \uc6d0\uc778(X) \uacfc \uacb0\uacfc(Y)\ub85c \ub098\ub204\uc5b4 \uc90d\ub2c8\ub2e4. \nX = dataset[:,0:8]\nY = dataset[:,8]\n\n# create model, add dense layers one by one specifying activation function\nmodel = Sequential()\nmodel.add(Dense(12, input_dim=8, activation='relu')) # input layer requires input_dim param\nmodel.add(Dense(15, activation='relu'))\nmodel.add(Dense(8, activation='relu'))\nmodel.add(Dense(10, activation='relu'))\nmodel.add(Dense(1, activation='sigmoid')) # sigmoid instead of relu for final probability between 0 and 1\n\n# compile the model, adam gradient descent (optimized)\nmodel.compile(loss=\"binary_crossentropy\", optimizer=\"adam\", metrics=['accuracy'])\n\n# call the function to fit to the data (training the network)\n# verbose=0 \ub294 \ud504\ub85c\uadf8\ub798\uc2a4\ub97c \uc228\uae41\ub2c8\ub2e4.\nhistory = model.fit(X, Y, epochs = 800, batch_size=10, verbose=0)\n\n# \ubaa8\ub378\uc758 \uc815\ud655\ub3c4\ub97c \uacc4\uc0b0\ud569\ub2c8\ub2e4.\nscores = model.evaluate(X, Y)\nprint(\"\\n%s: %.2f%%\" % (model.metrics_names[1], scores[1]*100))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n768/768 [==============================] - 0s 80us/step\n\nacc: 87.89%\n\n\n\n\n\n\n\n\n\n\n\n\uc6b0\ub9ac\uc758 \ubaa8\ub378\uc774 \ud559\uc2b5\uacb0\uacfc 87.89% \ub77c\ub294 \uc815\ud655\ub3c4\ub97c \uac00\uc9c0\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n2. \uc2dc\uac01\ud654\ud558\uae30\u00b6\uc774\uc81c \ub2e4 \ub05d\ub0ac\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uc73c\ub85c\ub294 Keras\uac00 \ud559\uc2b5\uc744 \ubc18\ubcf5\ud560 \ub54c\ub9c8\ub2e4 \uc815\ud655\ub3c4\uac00 \uc5bc\ub9c8\ub098 \uc62c\ub77c\uac00\ub294\uc9c0 \uc2dc\uac01\ud654\ub97c \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \n# Get the figure and the axes\nfig, (ax0, ax1) = plt.subplots(nrows=1,ncols=2, sharey=False, figsize=(10, 5))\n\n# \ubaa8\ub378\uc758 \uc815\ud655\ub3c4\ub97c \uadf8\ub9bd\ub2c8\ub2e4.\nax0.plot(history.history['acc']) \nax0.set(title='model accuracy', xlabel='epoch', ylabel='accuracy')\n\n# \ubaa8\ub378\uc758 \uc624\ucc28\ub97c \uadf8\ub9bd\ub2c8\ub2e4.\nax1.plot(history.history['loss'])\nax1.set(title='model loss', xlabel='epoch', ylabel='loss')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n[Text(0,0.5,'loss'), Text(0.5,0,'epoch'), Text(0.5,1,'model loss')]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uacb0\uacfc\ub97c \ubcf4\ub2c8, \ud55c 800\ubc88 \uc815\ub3c4 \ud559\uc2b5\ud558\uba74 \uaf64 \uc815\ud655\ud55c \ubaa8\ub378\uc744 \uc5bb\uc744 \uc218 \uc788\ub124\uc694.\n3. \ub9c8\uce58\uba70,\u00b6\ubaa8\ub378\uc744 \ub9cc\ub4e4\uc5c8\ub2e4\uba74, \uc774\uc81c \ubaa8\ub378\uc744 \uc720\uc6a9\ud558\uac8c \uc0ac\uc6a9\ud560 \uc2dc\uac04\uc785\ub2c8\ub2e4. \uac00\uc0c1\uc758 \ud658\uc790 \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uc5b4 \uadf8 \ud658\uc790\uac00 \ub2f9\ub1e8\uc5d0 \uac78\ub9b4 \ud655\ub960\uc744 \uc54c\uc544\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\npatient_1 \ub294\n\n\uc784\uc2e0\ud55c \uc801 \uc5c6\uc74c\n\uae00\ub8e8\ucf54\uc2a4 \ub0b4\uc131(glucose tolerance)\uc2e4\ud5d8 \ud6c4\uc758 \ud608\ub2f9\uc218\uce58\ub294 137 \n\ud655\uc7a5\uae30 \ud608\uc555\uc740 90(mm Hg)\n\uc0c1\uc644 \uc0bc\ub450\uadfc \ud53c\ubd80 \ub450\uaed8\ub294 35(mm)\n\ud608\uc561\ub0b4 \uc778\uc290\ub9b0 \uc218\uce58\ub294 168 (mu U/ml)\nBMI(\ube44\ub9cc\ub3c4) \uc218\uce58\ub294 43.1\n\ub2f9\ub1e8\ubcd1 \uac00\uc871\ub825\uc740 2.288 \n\ub098\uc774 (years)\ub294 33\uc0b4\n\n\uc774\ub77c\uace0 \uac00\uc815\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \n# \uac00\uc0c1\uc758 \ud658\uc790 \ub370\uc774\ud130 \uc785\ub825\npatient_1 = numpy.array([[0,137,90,35,168,43.1,2.288,33]])\n\n# \ubaa8\ub378\ub85c \uc608\uce21\ud558\uae30\nprediction = model.predict(patient_1)\n\n# \uc608\uce21\uacb0\uacfc \ucd9c\ub825\ud558\uae30\nprint(prediction*100)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n[[30.039745]]\n\n\n\n\n\n\n\n\n\n\n\n\uc6b0\ub9ac\uc758 \ubaa8\ub378\uc5d0 \ub530\ub974\uba74, patient_1\ub294 \ub2f9\ub1e8\ubcd1\uc5d0 \uac78\ub9b4 \ud655\ub960\uc774 \uc57d 30% \uc785\ub2c8\ub2e4.",
      "tags": "KERAS,machine learning,prediction,Python,\ub2f9\ub1e8\ubcd1",
      "url": "https://partrita.github.io/posts/ML-by-Keras/"
    },
    {
      "title": "\uae54\ub054\ud55c \ub370\uc774\ud130(Tidy data)",
      "text": "\uae54\ub054\ud55c \ub370\uc774\ud130(Tidy data)\ub780?\u00b6\uc6b0\ub9ac\ub294 \ub370\uc774\ud130 \ubd84\uc11d\uc744 \uc218\ud589\ud558\uba74\uc11c \ub2e4\uc591\ud55c \ub370\uc774\ud130 \ubcc0\ud658 \uc791\uc5c5\uc744 \uc218\ud589\ud558\uac8c \ub41c\ub2e4. \uc774\ub294 \ub370\uc774\ud130\uac00 \uc6d0\ub798 \ud2b9\uc815 \ubd84\uc11d\uc744 \uc5fc\ub450\uc5d0 \ub450\uace0 \ub9cc\ub4e4\uc5b4\uc9c0\ub294 \uacbd\uc6b0\uac00 \uac70\uc758 \uc5c6\uae30 \ub54c\ubb38\uc774\uba70, \uc0ac\uc2e4 \uc560\ucd08 \ub370\uc774\ud130 \uc124\uacc4\ub97c \ud560 \ub54c \ubd84\uc11d \ubaa9\uc801\uc744 \uc54c\uae30\ub3c4 \ubd88\uac00\ub2a5\ud558\ub2e4\ub294 \uac8c \uac00\uc7a5 \ud070 \uc6d0\uc778\uc774 \uc544\ub2d0\uae4c \ud55c\ub2e4. \uc774\ub7f0 \uc5f0\uc720\ub85c \uc804\uccb4 \ub370\uc774\ud130 \ubd84\uc11d \uc791\uc5c5\uc5d0\uc11c 70% \ud639\uc740 80% \uc774\uc0c1\uc774 \uc774\ub7f0 \ub370\uc774\ud130 \ubcc0\ud658 \ubc0f \uc804\ucc98\ub9ac \uc791\uc5c5\uc5d0\uc11c \uc18c\ubaa8\ub41c\ub2e4. 1\n\n\ub2e4\ub978 \uc0ac\ub78c\ub4e4\uacfc \ub370\uc774\ud130(\uc608\ub97c \ub4e4\uba74 \uc5d1\uc140\ud30c\uc77c)\ub97c \uc8fc\uace0 \ubc1b\ub2e4 \ubcf4\uba74 \uae68\ub2eb\uac8c \ub429\ub2c8\ub2e4. \ubaa8\ub4e0 \uc0ac\ub78c\uc758 \uc0dd\uac01\uc740 \ub2e4\ub974\ub2e4\ub294 \uac83\uc744\uc694.\n\uc0ac\ub78c\ub9c8\ub2e4 (\uc88b\uac8c \ub9d0\ud558\uba74) \uac01\uc591\uac01\uc0c9\uc73c\ub85c \uc815\ub9ac\ub97c \ud558\ub2e4\ubcf4\ub2c8, \uc5ec\ub7ec\uba85\uc774 \uc791\uc131\ud55c \uc5d1\uc140 \ud30c\uc77c\uc744 \ud558\ub098\uc758 \ud30c\uc77c\ub85c \ud569\uce58\ub824 \ubcf4\uba74 \uacb0\uad6d\uc5d0\ub294 \ub204\uad70\uac00\uac00 \uc0c8\ub85c \uc815\ub9ac\ub97c \ud574\uc57c \ud558\ub294 \uc0c1\ud669\uc774 \ub429\ub2c8\ub2e4.\nTidy data\uc758 \uac1c\ub150\uc740 \uadf8\ub7f0 \uc0c1\ud669\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud574 Jeff Leek\uc774 \n\ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4. \ub370\uc774\ud130 \ucc98\ub9ac\uc5d0 \uac00\uc7a5 \ub9ce\uc740 \uc2dc\uac04\uc774 \uc18c\uc694\ub418\ub294 \uc804\ucc98\ub9ac \uacfc\uc815\uc744 \uc904\uc5ec \ubcf4\uc790, \uadf8\ub7ec\uae30 \uc704\ud574 \ucc98\uc74c\ubd80\ud130 \ub370\uc774\ud130\ub97c \ud45c\uc900\ud654\ud574\uc11c \ub9cc\ub4e4\uc790\ub294 \uac83\uc785\ub2c8\ub2e4. \ucc98\uc74c\ubd80\ud130 \uae30\ubcf8\uc801\uc778 \uaddc\uce59\uc744 \uac00\uc9c0\uace0 \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uba74, \ubaa8\ub450\uc758 \uc2dc\uac04\uc744 \uc544\ub084 \uc218 \uc788\uc73c\ub2c8\uae4c\uc694.\n\uc704\ud0a4\ud53c\ub514\uc544\uc5d0 \ub530\ub974\uba74 Tidy data\uc758 \uc815\uc758\ub294 \ub2e4\uc74c\uc640 \uac19\uc2b5\ub2c8\ub2e4. \"\ubc11\ubc14\ub2e5 \ubd80\ud130 \uc2dc\uc791\ud560 \ud544\uc694 \uc5c6\ub294 \ub370\uc774\ud130\"\nTidy data there\u2019s no need to start from scratch. -from wiki\n\n\ub354 \uc54c\uc544 \ubcf4\uae30\u00b6\n2014\ub144\ub3c4\uc5d0 \ucd9c\ud310\ub41c \ub17c\ubb38 \uc785\ub2c8\ub2e4.\n\ub370\uc774\ud130\uc758 \ucd9c\ucc98\ub294 \uc774\uacf3 \uc785\ub2c8\ub2e4. \n\n\uae54\ub054\ud55c \ub370\uc774\ud130(Tidy data)\uc758 \ud2b9\uc9d5\u00b6Jeff Leek\uac00 \uc4f4 \ucc45 The Elements of Data Analytic Style\uc5d0\uc11c \uc815\uc758\ud55c \uae54\ub054\ud55c \ub370\uc774\ud130\ub294 \uc544\ub798\uc640 \uac19\uc740 \ud2b9\uc9d5\uc744 \uac00\uc9d1\ub2c8\ub2e4.\n\n\uac01 \ubcc0\uc218\ub294 \uac1c\ubcc4\uc758 \uc5f4(column)\uc73c\ub85c \uc874\uc7ac\ud55c\ub2e4.\n\uac01 \uad00\uce21\uce58\ub294 \ud589(row)\ub97c \uad6c\uc131\ud55c\ub2e4.\n\uac01 \ud45c\ub294 \ub2e8 \ud558\ub098\uc758 \uad00\uce21\uae30\uc900\uc5d0 \uc758\ud574\uc11c \uc870\uc9c1\ub41c \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud55c\ub2e4.\n\ub9cc\uc57d \uc5ec\ub7ec\uac1c\uc758 \ud45c\uac00 \uc874\uc7ac\ud55c\ub2e4\uba74, \uc801\uc5b4\ub3c4 \ud558\ub098\uc774\uc0c1\uc758 \uc5f4(column)\uc774 \uacf5\uc720\ub418\uc5b4\uc57c \ud55c\ub2e4.\n\n\n\ubcc0\uc218(Variable): \uc608\ub97c \ub4e4\uba74 \ud0a4, \ubab8\ubb34\uac8c, \uc131\ubcc4\n\uac12(Value): \uc608\ub97c \ub4e4\uc790\uba74 152 cm, 80 kg, \uc5ec\uc131\n\uad00\uce21\uce58(Observation): \uac12\uc744 \uce21\uc815\ud55c \ub2e8\uc704, \uc5ec\uae30\uc11c\ub294 \uac01\uac01\uc758 \uc0ac\ub78c\n\n\ub108\ubb34 \ubcf5\uc7a1\ud558\ub2e4\uace0 \uc0dd\uac01\ub418\uc2e0\ub2e4\uba74 \uc544\ub798 \uc608\uc2dc\ub97c \ud655\uc778\ud558\uc138\uc694.\n\uc9c0\uc800\ubd84\ud55c \ub370\uc774\ud130\uc758 \uc608:\u00b6\n\n\n\n\n\n\n\n\n\nTreatment A\n\nTreatment B\n\n\n\n\n\n\n\n\n\nJohn Smith\n\n-\n\n2\n\n\n\n\n\nJane Doe\n\n16\n\n11\n\n\n\n\n\nMary Johnson\n\n3\n\n1\n\n\n\n\n\n\n\n\uae54\ub054\ud55c \ub370\uc774\ud130(Tidy data)\uc758 \uc608:\u00b6\n\n\n\n\n\n\n\nName\n\nTreatment\n\nResult\n\n\n\n\n\n\n\n\n\nJohn Smith\n\na\n\n-\n\n\n\n\n\nJane Doe\n\na\n\n16\n\n\n\n\n\nMary Johnson\n\na\n\n3\n\n\n\n\n\nJohn Smith\n\nb\n\n2\n\n\n\n\n\nJane Doe\n\nb\n\n11\n\n\n\n\n\nMary Johnson\n\nb\n\n1\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc9c0\uc800\ubd84\ud55c \ub370\uc774\ud130 \ucc98\ub9ac\ud558\uae30\u00b6Wickham\uc758 \ub17c\ubb38\uc5d0 \uc788\ub358 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uace0 \uc544\ub798\uc758 \ubb38\uc81c\ub97c \ud574\uacb0\ud574 \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \n\uc5ec\uae30\uc11c \uc6b0\ub9ac\uc758 \ubaa9\ud45c\ub294 \ub370\uc774\ud130 \ubd84\uc11d\uc774 \uc544\ub2c8\uace0 \uae54\ub054\ud55c \ub370\uc774\ud130\ub97c \ub9cc\ub4dc\ub294 \uac83\uc784\uc744 \uba85\uc2ec\ud558\uc138\uc694.\n\uc9c0\uc800\ubd84\ud55c \ub370\uc774\ud130\uc758 \uc77c\ubc18\uc801\uc778 \ubaa8\uc2b5\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n\uc5f4 \uc774\ub984(Column header)\uc774 \ubcc0\uc218 \uc774\ub984\uc774 \uc544\ub2c8\uace0 \uac12\uc778 \uacbd\uc6b0\n\uac19\uc740 \ud45c\uc5d0 \ub2e4\uc591\ud55c \uad00\uce21 \ub2e8\uc704(observational units)\uac00 \uc788\ub294 \uacbd\uc6b0\n\ud558\ub098\uc758 \uc5f4(column)\uc5d0 \uc5ec\ub7ec \uac12\uc774 \ub4e4\uc5b4 \uc788\ub294 \uacbd\uc6b0\n\ubcc0\uc218\uac00 \ud589\uacfc \uc5f4\uc5d0 \ubaa8\ub450 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 \uacbd\uc6b0 \n\ud558\ub098\uc758 \uad00\uce21 \ub2e8\uc704(observational units)\uac00 \uc5ec\ub7ec \ud30c\uc77c\ub85c \ub098\ub204\uc5b4\uc838 \uc788\ub294 \uacbd\uc6b0\n\n\uc6b0\ub9ac\ub294 Python\uc758 \ub300\ud45c\uc801\uc778 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc778 Pandas\ub97c \uc0ac\uc6a9\ud558\ub3c4\ub85d \ud560\uac8c\uc694.\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \n# \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac \ubd88\ub7ec\ub4e4\uc774\uae30\nimport pandas as pd\nimport datetime\nfrom os import listdir\nfrom os.path import isfile, join\nimport glob\nimport re # \uc815\uaddc\uc2dd\n\n\n    \n\n\n\n\n\n\n\n1. \uc5f4 \uc774\ub984(Column header)\uc774 \ubcc0\uc218 \uc774\ub984\uc774 \uc544\ub2c8\uace0 \uac12\uc778 \uacbd\uc6b0\u00b6\n\n\n\n\n\n\nPew Research Center Dataset\u00b6\uc885\uad50\uc5d0 \ub530\ub978 \uac1c\uc778\uc758 \uc218\uc785\uc758 \uad00\ud55c \ub370\uc774\ud130\uc785\ub2c8\ub2e4. \uba3c\uc800 pandas\uc758 read_csv\uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574 \ud30c\uc77c\uc744 \uc77d\uc5b4\uc635\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \ndf = pd.read_csv(\"./data/pew-raw.csv\")\ndf\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n\n  \n    \n      \n      religion\n      <$10k\n      $10-20k\n      $20-30k\n      $30-40k\n      $40-50k\n      $50-75k\n    \n  \n  \n    \n      0\n      Agnostic\n      27\n      34\n      60\n      81\n      76\n      137\n    \n    \n      1\n      Atheist\n      12\n      27\n      37\n      52\n      35\n      70\n    \n    \n      2\n      Buddhist\n      27\n      21\n      30\n      34\n      33\n      58\n    \n    \n      3\n      Catholic\n      418\n      617\n      732\n      670\n      638\n      1116\n    \n    \n      4\n      Dont know/refused\n      15\n      14\n      15\n      11\n      10\n      35\n    \n    \n      5\n      Evangelical Prot\n      575\n      869\n      1064\n      982\n      881\n      1486\n    \n    \n      6\n      Hindu\n      1\n      9\n      7\n      9\n      11\n      34\n    \n    \n      7\n      Historically Black Prot\n      228\n      244\n      236\n      238\n      197\n      223\n    \n    \n      8\n      Jehovahs Witness\n      20\n      27\n      24\n      24\n      21\n      30\n    \n    \n      9\n      Jewish\n      19\n      19\n      25\n      25\n      30\n      95\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\nEvangelical Prot\ub294 \uae30\ub3c5\uad50 \uc885\ud30c\uc911\uc5d0 \ud558\ub098\ub85c '\uac1c\uc2e0\uad50'\uc785\ub2c8\ub2e4.\n\n\ubb38\uc81c\uc810: \uc774 \ub370\uc774\ud130\ub4e4\uc758 \ubb38\uc81c\ub294 \uc5f4 \uc774\ub984(columns headers)\uc774 \uac1c\uc778\uc18c\ub4dd\uc758 \ubc94\uc704\ub85c \ub418\uc5b4 \uc788\ub2e4\ub294 \uac83\uc774\uc8e0.\n\ub2e4\uc2dc \ub9d0\ud574\uc11c \ubcf4\uae30\uc5d0\ub294 \uc88b\uc544\ubcf4\uc77c\uc9c0\ub294 \ubab0\ub77c\ub3c4 \ubd84\uc11d\ud558\uae30\uc5d0\ub294 \uc5b4\ub824\uc6b4 \ud615\uc2dd\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\n\uc774\ub7ec\ud55c \ub370\uc774\ud130\ub97c Tidy data \ud615\ud0dc\ub85c \ubcc0\ud658\ud558\uae30 \uc704\ud574\uc11c pandas\ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c\ub294 \uc544\uc8fc \uc26c\uc6b4 \uae30\ub2a5\uc744 \uc81c\uacf5\ud574 \uc90d\ub2c8\ub2e4.\n\ubc14\ub85c melt\ub77c\ub294 \uae30\ub2a5\uc774\uc9c0\uc694. pivot table\uc758 \ubc18\ub300\ub418\ub294 \uac1c\ub150\uc73c\ub85c \ud589\uc774 \ub9ce\uc740 \ub370\uc774\ud130\ub97c \uc5f4\uc774 \ub9ce\uc740 \ub370\uc774\ud130\ub85c \ubc14\uafd4\uc90d\ub2c8\ub2e4. \nmelt\ub294 \uc544\uc8fc \uc720\uc6a9\ud558\uae30 \ub54c\ubb38\uc5d0 \uc55e\uc73c\ub85c\ub3c4 \uc790\uc8fc \uc5b8\uae09 \ub429\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \nformatted_df = pd.melt(df,[\"religion\"], var_name=\"income\", value_name=\"freq\")\nformatted_df = formatted_df.sort_values(by=[\"religion\"]) # \uc885\uad50 \uc774\ub984\uc21c\uc73c\ub85c \uc815\ub82c\nformatted_df.head(10) # \ub108\ubb34 \uae38\uae30 \ub54c\ubb38\uc5d0 \uc717\ucabd 10\uac1c\ub9cc \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n\n  \n    \n      \n      religion\n      income\n      freq\n    \n  \n  \n    \n      0\n      Agnostic\n      <$10k\n      27\n    \n    \n      30\n      Agnostic\n      $30-40k\n      81\n    \n    \n      40\n      Agnostic\n      $40-50k\n      76\n    \n    \n      50\n      Agnostic\n      $50-75k\n      137\n    \n    \n      10\n      Agnostic\n      $10-20k\n      34\n    \n    \n      20\n      Agnostic\n      $20-30k\n      60\n    \n    \n      41\n      Atheist\n      $40-50k\n      35\n    \n    \n      21\n      Atheist\n      $20-30k\n      37\n    \n    \n      11\n      Atheist\n      $10-20k\n      27\n    \n    \n      31\n      Atheist\n      $30-40k\n      52\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc774\uac83\uc774 Pew Research Center Dataset \uc758 Tidy data \ud615\ud0dc \uc785\ub2c8\ub2e4.\n\n\n\n\n\n\n\nBillboard Top 100 Dataset\u00b6\uc774 \ub370\uc774\ud130\ub294 \uc544\uc8fc \uc624\ub798\uc804 \uac19\uc740 1999\ub144\ubd80\ud130 2000\ub144\uae4c\uc9c0\uc758 \ube4c\ubcf4\ub4dc\ucc28\ud2b8 \uc8fc\uac04 \uc21c\uc704 \ubcc0\ub3d9\uc744 \ud3ec\ud568\ud558\uace0 \uc788\ub294 \ub370\uc774\ud130 \uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[69]:\n\n    \ndf = pd.read_csv(\"./data/billboard.csv\", encoding=\"mac_latin2\")\ndf.head(10)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[69]:\n\n\n\n\n\n\n  \n    \n      \n      year\n      artist.inverted\n      track\n      time\n      genre\n      date.entered\n      date.peaked\n      x1st.week\n      x2nd.week\n      x3rd.week\n      ...\n      x67th.week\n      x68th.week\n      x69th.week\n      x70th.week\n      x71st.week\n      x72nd.week\n      x73rd.week\n      x74th.week\n      x75th.week\n      x76th.week\n    \n  \n  \n    \n      0\n      2000\n      Destiny's Child\n      Independent Women Part I\n      3:38\n      Rock\n      2000-09-23\n      2000-11-18\n      78\n      63.0\n      49.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      1\n      2000\n      Santana\n      Maria, Maria\n      4:18\n      Rock\n      2000-02-12\n      2000-04-08\n      15\n      8.0\n      6.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      2\n      2000\n      Savage Garden\n      I Knew I Loved You\n      4:07\n      Rock\n      1999-10-23\n      2000-01-29\n      71\n      48.0\n      43.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      3\n      2000\n      Madonna\n      Music\n      3:45\n      Rock\n      2000-08-12\n      2000-09-16\n      41\n      23.0\n      18.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      4\n      2000\n      Aguilera, Christina\n      Come On Over Baby (All I Want Is You)\n      3:38\n      Rock\n      2000-08-05\n      2000-10-14\n      57\n      47.0\n      45.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      5\n      2000\n      Janet\n      Doesn't Really Matter\n      4:17\n      Rock\n      2000-06-17\n      2000-08-26\n      59\n      52.0\n      43.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      6\n      2000\n      Destiny's Child\n      Say My Name\n      4:31\n      Rock\n      1999-12-25\n      2000-03-18\n      83\n      83.0\n      44.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      7\n      2000\n      Iglesias, Enrique\n      Be With You\n      3:36\n      Latin\n      2000-04-01\n      2000-06-24\n      63\n      45.0\n      34.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      8\n      2000\n      Sisqo\n      Incomplete\n      3:52\n      Rock\n      2000-06-24\n      2000-08-12\n      77\n      66.0\n      61.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n    \n      9\n      2000\n      Lonestar\n      Amazed\n      4:25\n      Country\n      1999-06-05\n      2000-03-04\n      81\n      54.0\n      44.0\n      ...\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n      NaN\n    \n  \n\n10 rows \u00d7 83 columns\n\n\n\n\n\n\n\n\n\n\n\n\n\ubb38\uc81c\uc810:\n\n\uc5f4 \uc774\ub984(columns headers)\uc774 \uac12\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\ub2e4: x1st.week, x2st.week \ub4f1\ub4f1\n\uc21c\uc704\uac00 100\uc704\uad8c \ubc16\uc73c\ub85c \ubc00\ub824\ub098\uac8c \ub418\uba74 Nan \uac12\uc744 \uac00\uc9c0\uace0, \ub530\ub77c\uc11c \ud544\uc694\uc5c6\ub294 \ubd80\uc218\uc801\uc778 \uac12\uc774 \ub9ce\uc544\uc9c4\ub2e4.\n\n\uc704 \ub370\uc774\ud130\uc758 \uae54\ub054\ud55c \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574\uc11c\ub294 \ub2e4\uc2dc melt \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uac01\uac01\uc758 \uc5f4\uc774 \ud589\uc774 \ub418\ub3c4\ub85d \ud558\uace0, \uc21c\uc704\uac00 100\uc704 \ubc16\uc73c\ub85c \ubc00\ub824\ub09c \uacbd\uc6b0(Nan\uac12\uc744 \uac16\ub294\uacbd\uc6b0)\uc5d0\ub294 \ud589\uc744 \uc0ad\uc81c\ud560\uac8c\uc694.\n\n\n\n\n\n\nIn\u00a0[70]:\n\n    \n# Melting\nid_vars = [\"year\",\"artist.inverted\",\"track\",\"time\",\"genre\",\"date.entered\",\"date.peaked\"]\ndf = pd.melt(frame=df,id_vars=id_vars, var_name=\"week\", value_name=\"rank\")\n\n# Formatting \ndf[\"week\"] = df['week'].str.extract('(\\d+)', expand=False).astype(int) # \uc815\uaddc\uc2dd\uc73c\ub85c x1st.week \uc5d0\uc11c \uc22b\uc790 1\ub9cc \ucd94\ucd9c\ndf[\"rank\"] = df[\"rank\"].astype(int)\n\n# \ud544\uc694\uc5c6\ub294 \ud589\uc744 \uc0ad\uc81c\ud569\ub2c8\ub2e4.\ndf = df.dropna()\n\n# Create \"date\" columns\ndf['date'] = pd.to_datetime(df['date.entered']) + pd.to_timedelta(df['week'], unit='w') - pd.DateOffset(weeks=1)\n\ndf = df[[\"year\", \"artist.inverted\", \"track\", \"time\", \"genre\", \"week\", \"rank\", \"date\"]]\ndf = df.sort_values(ascending=True, by=[\"year\",\"artist.inverted\",\"track\",\"week\",\"rank\"])\n\n# Assigning the tidy dataset to a variable for future usage\nbillboard = df\n\ndf.head(10)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[70]:\n\n\n\n\n\n\n  \n    \n      \n      year\n      artist.inverted\n      track\n      time\n      genre\n      week\n      rank\n      date\n    \n  \n  \n    \n      246\n      2000\n      2 Pac\n      Baby Don't Cry (Keep Ya Head Up II)\n      4:22\n      Rap\n      1\n      87\n      2000-02-26\n    \n    \n      563\n      2000\n      2 Pac\n      Baby Don't Cry (Keep Ya Head Up II)\n      4:22\n      Rap\n      2\n      82\n      2000-03-04\n    \n    \n      880\n      2000\n      2 Pac\n      Baby Don't Cry (Keep Ya Head Up II)\n      4:22\n      Rap\n      3\n      72\n      2000-03-11\n    \n    \n      1197\n      2000\n      2 Pac\n      Baby Don't Cry (Keep Ya Head Up II)\n      4:22\n      Rap\n      4\n      77\n      2000-03-18\n    \n    \n      1514\n      2000\n      2 Pac\n      Baby Don't Cry (Keep Ya Head Up II)\n      4:22\n      Rap\n      5\n      87\n      2000-03-25\n    \n    \n      1831\n      2000\n      2 Pac\n      Baby Don't Cry (Keep Ya Head Up II)\n      4:22\n      Rap\n      6\n      94\n      2000-04-01\n    \n    \n      2148\n      2000\n      2 Pac\n      Baby Don't Cry (Keep Ya Head Up II)\n      4:22\n      Rap\n      7\n      99\n      2000-04-08\n    \n    \n      287\n      2000\n      2Ge+her\n      The Hardest Part Of Breaking Up (Is Getting Ba...\n      3:15\n      R&B\n      1\n      91\n      2000-09-02\n    \n    \n      604\n      2000\n      2Ge+her\n      The Hardest Part Of Breaking Up (Is Getting Ba...\n      3:15\n      R&B\n      2\n      87\n      2000-09-09\n    \n    \n      921\n      2000\n      2Ge+her\n      The Hardest Part Of Breaking Up (Is Getting Ba...\n      3:15\n      R&B\n      3\n      92\n      2000-09-16\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704\uc640 \uac19\uc774 \ub370\uc774\ud130\ub97c \uae54\ub054\ud558\uac8c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc track, time, genre \uc5f4\uc744 \ubcf4\uc2dc\uba74 \uc544\uc8fc \ub9ce\uc740 \uc911\ubcf5\uc774 \uc788\ub294 \uac83\uc744 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc810\uc744 \ud574\uacb0 \ud558\ub294 \ubc29\ubc95\uc740 \ub2e4\uc74c \uc608\uc81c\uc5d0\uc11c \ub2e4\ub8e8\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\n\n2. \ud558\ub098\uc758 \ud45c\uc5d0 \uc5ec\ub7ec\uac00\uc9c0 \ud0c0\uc785\u00b6\uc704\uc5d0\uc11c \ub2e4\ub8e8\uc5c8\ub358 \ube4c\ubcf4\ub4dc\ucc28\ud2b8 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uace0 \ub370\uc774\ud130\uac00 \ubc18\ubcf5\ub418\ub294 \ubb38\uc81c\ub97c \ud574\uacb0\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\ubb39\uc81c\uc810:\n\n\ub2e4\uc591\ud55c \uad00\uce21 \ub2e8\uc704(observational units), \uc5ec\uae30\uc11c\ub294 song \uacfc rank\uac00 \ud558\ub098\uc758 \ud45c\uc5d0 \ub4e4\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574\uc11c\ub294 \ud45c\ub97c \ub098\ub20c \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4.  \n\n\uba3c\uc800, \uac01\uac01\uc758 \ub178\ub798\uc758 \uc790\uc138\ud55c \ub0b4\uc6a9\uc744 \ub2f4\uace0 \uc788\ub294 \ud45c\ub97c \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0\ub2e4\uc74c \uac01\uac01\uc758 song_id\ub97c \ubd80\uc5ec\ud569\ub2c8\ub2e4. \uadf8\ub7f0\ub2e4\uc74c \uc21c\uc704 \uac12\uc744 \uac00\uc9c0\uace0 \uc788\ub294 \ud45c\ub97c song_id\ub85c \uc815\ub9ac\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nsongs_cols = [\"year\", \"artist.inverted\", \"track\", \"time\", \"genre\"]\nsongs = billboard[songs_cols].drop_duplicates()\nsongs = songs.reset_index(drop=True)\nsongs[\"song_id\"] = songs.index\nsongs.head(10)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[11]:\n\n\n\n\n\n\n  \n    \n      \n      year\n      artist.inverted\n      track\n      time\n      genre\n      song_id\n    \n  \n  \n    \n      0\n      2000\n      2 Pac\n      Baby Don't Cry (Keep Ya Head Up II)\n      4:22\n      Rap\n      0\n    \n    \n      1\n      2000\n      2Ge+her\n      The Hardest Part Of Breaking Up (Is Getting Ba...\n      3:15\n      R&B\n      1\n    \n    \n      2\n      2000\n      3 Doors Down\n      Kryptonite\n      3:53\n      Rock\n      2\n    \n    \n      3\n      2000\n      3 Doors Down\n      Loser\n      4:24\n      Rock\n      3\n    \n    \n      4\n      2000\n      504 Boyz\n      Wobble Wobble\n      3:35\n      Rap\n      4\n    \n    \n      5\n      2000\n      98\u00b0\n      Give Me Just One Night (Una Noche)\n      3:24\n      Rock\n      5\n    \n    \n      6\n      2000\n      A*Teens\n      Dancing Queen\n      3:44\n      Pop\n      6\n    \n    \n      7\n      2000\n      Aaliyah\n      I Don't Wanna\n      4:15\n      Rock\n      7\n    \n    \n      8\n      2000\n      Aaliyah\n      Try Again\n      4:03\n      Rock\n      8\n    \n    \n      9\n      2000\n      Adams, Yolanda\n      Open My Heart\n      5:30\n      Gospel\n      9\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc704 \uc640\uac19\uc740 \uc0c8\ub85c\uc6b4 \ud45c\ub97c \ubd84\ub9ac\ud558\uace0, \uc544\ub798\uc640 \uac19\uc774 \uc21c\uc704\ub97c \ud3ec\ud568\ud558\uace0 \uc788\ub294 \ud45c\ub97c \uc0c8\ub85c \ub9cc\ub4e4\uc5b4\uc90d\ub2c8\ub2e4.\n\ub450\uac1c\uc758 \ud45c\ub97c \uc5f0\uacb0\ud558\uae30 \uc704\ud574 song_id\uc5f4\uc744 \ub9cc\ub4dc\ub294 \uac83\uc744 \uc8fc\uc758\ud558\uc138\uc694\n\n\n\n\n\n\n\nIn\u00a0[12]:\n\n    \nranks = pd.merge(billboard, songs, on=[\"year\",\"artist.inverted\", \"track\", \"time\", \"genre\"])\nranks = ranks[[\"song_id\", \"date\",\"rank\"]]\nranks.head(10)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[12]:\n\n\n\n\n\n\n  \n    \n      \n      song_id\n      date\n      rank\n    \n  \n  \n    \n      0\n      0\n      2000-02-26\n      87\n    \n    \n      1\n      0\n      2000-03-04\n      82\n    \n    \n      2\n      0\n      2000-03-11\n      72\n    \n    \n      3\n      0\n      2000-03-18\n      77\n    \n    \n      4\n      0\n      2000-03-25\n      87\n    \n    \n      5\n      0\n      2000-04-01\n      94\n    \n    \n      6\n      0\n      2000-04-08\n      99\n    \n    \n      7\n      1\n      2000-09-02\n      91\n    \n    \n      8\n      1\n      2000-09-09\n      87\n    \n    \n      9\n      1\n      2000-09-16\n      92\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n3. \ub2e4\uc591\ud55c \ubcc0\uc218\uac00 \ud558\ub098\uc758 \uc5f4\uc5d0 \uc788\ub294 \uacbd\uc6b0 Multiple variables stored in one column\u00b6\n\n\n\n\n\n\nTubercolosis Example\u00b6WHO(World Health Organization)\uc5d0\uc11c \uc218\uc9d1\ud55c \uacb0\ud575\ud658\uc790\uc758 \uae30\ub85d\uc785\ub2c8\ub2e4. \uc774 \ub370\uc774\ud130\uc5d0\ub294 \ud655\uc778\ub41c \uacb0\ud575\ud658\uc790\uc758 \uad6d\uac00, \uc5f0\ub3c4, \ub098\uc774, \uc131\ubcc4\uc774 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\ubb38\uc81c\uc810:\n\n\uba87\uac1c\uc758 \uc5f4(columns)\uc5d0 \ub2e4\uc591\ud55c \ubcc0\uc218\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.(\uc131\ubcc4\uacfc \ub098\uc774)\n\uac12\uc774 \uc874\uc7ac\ud558\uc9c0 \uc54a\ub294 \uacf3\uc5d0 NaN\uacfc 0 \uc774 \ud63c\uc7ac\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ubbf8\ub9ac \uc54c\uc544\ub458 \uc810:\n\n\uc5f4\uc758 \uc774\ub984\uc5d0 \uc801\ud600\uc788\ub294 \"m\"\uc774\ub098 \"f\"\ub294 \uc131\ubcc4\uc744 \ub73b\ud569\ub2c8\ub2e4.\n\uc5f4\uc758 \uc774\ub984\uc5d0 \uc801\ud600\uc788\ub294 \uc22b\uc790\ub294 \ub098\uc774\ub300(\"0-14\",\"15-24\", \"25-34\", \"45-54\", \"55-64\", \"65\", \"unknown\")\ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4.\n\n\n\n\n\n\n\nIn\u00a0[49]:\n\n    \ndf = pd.read_csv(\"./data/tb-raw.csv\")\ndf\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[49]:\n\n\n\n\n\n\n  \n    \n      \n      country\n      year\n      m014\n      m1524\n      m2534\n      m3544\n      m4554\n      m5564\n      m65\n      mu\n      f014\n    \n  \n  \n    \n      0\n      AD\n      2000\n      0.0\n      0.0\n      1.0\n      0.0\n      0\n      0\n      0.0\n      NaN\n      NaN\n    \n    \n      1\n      AE\n      2000\n      2.0\n      4.0\n      4.0\n      6.0\n      5\n      12\n      10.0\n      NaN\n      3.0\n    \n    \n      2\n      AF\n      2000\n      52.0\n      228.0\n      183.0\n      149.0\n      129\n      94\n      80.0\n      NaN\n      93.0\n    \n    \n      3\n      AG\n      2000\n      0.0\n      0.0\n      0.0\n      0.0\n      0\n      0\n      1.0\n      NaN\n      1.0\n    \n    \n      4\n      AL\n      2000\n      2.0\n      19.0\n      21.0\n      14.0\n      24\n      19\n      16.0\n      NaN\n      3.0\n    \n    \n      5\n      AM\n      2000\n      2.0\n      152.0\n      130.0\n      131.0\n      63\n      26\n      21.0\n      NaN\n      1.0\n    \n    \n      6\n      AN\n      2000\n      0.0\n      0.0\n      1.0\n      2.0\n      0\n      0\n      0.0\n      NaN\n      0.0\n    \n    \n      7\n      AO\n      2000\n      186.0\n      999.0\n      1003.0\n      912.0\n      482\n      312\n      194.0\n      NaN\n      247.0\n    \n    \n      8\n      AR\n      2000\n      97.0\n      278.0\n      594.0\n      402.0\n      419\n      368\n      330.0\n      NaN\n      121.0\n    \n    \n      9\n      AS\n      2000\n      NaN\n      NaN\n      NaN\n      NaN\n      1\n      1\n      NaN\n      NaN\n      NaN\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc774 \ub370\uc774\ud130\ub97c \uc815\ub9ac\ud558\uae30 \uc704\ud574\uc11c\ub294 \uba3c\uc800 melt\ub97c \uc774\uc6a9\ud574 sex + age group \ub97c \ud569\uccd0\uc11c \ud558\ub098\uc758 \ud589\uc73c\ub85c \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4.\n\uadf8\ub7f0 \ub2e4\uc74c\uc5d0 \ub2e4\uc2dc \ud589\uc744 sex, age\ub85c \uad6c\ubd84\ud574\uc11c \uc815\ub9ac\ud558\ub3c4\ub85d \ud558\uc8e0.\n\n\n\n\n\n\nIn\u00a0[50]:\n\n    \ndf = pd.melt(df, id_vars=[\"country\",\"year\"], value_name=\"cases\", var_name=\"sex_and_age\")\n\n# Extract Sex, Age lower bound and Age upper bound group\ntmp_df = df[\"sex_and_age\"].str.extract(\"(\\D)(\\d+)(\\d{2})\", expand=False)    \n\n# Name columns\ntmp_df.columns = [\"sex\", \"age_lower\", \"age_upper\"]\n\n# Create `age`column based on `age_lower` and `age_upper`\ntmp_df[\"age\"] = tmp_df[\"age_lower\"] + \"-\" + tmp_df[\"age_upper\"]\n\n# Merge \ndf = pd.concat([df, tmp_df], axis=1)\n\n# Drop unnecessary columns and rows\ndf = df.drop(['sex_and_age',\"age_lower\",\"age_upper\"], axis=1)\ndf = df.dropna()\ndf = df.sort_values(ascending=True,by=[\"country\", \"year\", \"sex\", \"age\"])\ndf.head(10)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[50]:\n\n\n\n\n\n\n  \n    \n      \n      country\n      year\n      cases\n      sex\n      age\n    \n  \n  \n    \n      0\n      AD\n      2000\n      0.0\n      m\n      0-14\n    \n    \n      10\n      AD\n      2000\n      0.0\n      m\n      15-24\n    \n    \n      20\n      AD\n      2000\n      1.0\n      m\n      25-34\n    \n    \n      30\n      AD\n      2000\n      0.0\n      m\n      35-44\n    \n    \n      40\n      AD\n      2000\n      0.0\n      m\n      45-54\n    \n    \n      50\n      AD\n      2000\n      0.0\n      m\n      55-64\n    \n    \n      81\n      AE\n      2000\n      3.0\n      f\n      0-14\n    \n    \n      1\n      AE\n      2000\n      2.0\n      m\n      0-14\n    \n    \n      11\n      AE\n      2000\n      4.0\n      m\n      15-24\n    \n    \n      21\n      AE\n      2000\n      4.0\n      m\n      25-34\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc774\uac83\uc774 \uc815\ub9ac\ub41c \uacb0\uacfc \uc785\ub2c8\ub2e4.\n\n\n\n\n\n\n\n4. \ubcc0\uc218\uac00 \ud589\uacfc \uc5f4\uc5d0(rows and columns) \ubaa8\ub450 \ud3ec\ud568\ub418\uc5b4 \uc788\ub294 \uacbd\uc6b0\u00b6\n\n\n\n\n\n\nGlobal Historical Climatology Network Dataset\u00b6\uc774\uac83\uc740 2010\ub144\ub3c4 \uba55\uc2dc\ucf54 \uae30\uc0c1\uccad(MX17004)\uc5d0\uc11c 5\uac1c\uc6d4 \ub3d9\uc548 \uce21\uc815\ud55c \uae30\uc0c1 \ub370\uc774\ud130\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[24]:\n\n    \ndf = pd.read_csv(\"./data/weather-raw.csv\")\n\n\n    \n\n\n\n\n\n\n\n\ubb38\uc81c\uc810:\n\n\ubcc0\uc218\ub4e4\uc774 \ud589(tmin, tmax) \uacfc \uc5f4(days)\uc5d0 \uc874\uc7ac\ud569\ub2c8\ub2e4.\n\n\uae54\ub054\ud55c \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 melt\uae30\ub2a5\uc744 \uc0ac\uc6a9\ud574 day_raw\ub97c \uac01\uac01\uc758 \uc5f4\ub85c \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[25]:\n\n    \ndf = pd.melt(df, id_vars=[\"id\", \"year\",\"month\",\"element\"], var_name=\"day_raw\")\ndf.head(10)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[25]:\n\n\n\n\n\n\n  \n    \n      \n      id\n      year\n      month\n      element\n      day_raw\n      value\n    \n  \n  \n    \n      0\n      MX17004\n      2010\n      1\n      tmax\n      d1\n      NaN\n    \n    \n      1\n      MX17004\n      2010\n      1\n      tmin\n      d1\n      NaN\n    \n    \n      2\n      MX17004\n      2010\n      2\n      tmax\n      d1\n      NaN\n    \n    \n      3\n      MX17004\n      2010\n      2\n      tmin\n      d1\n      NaN\n    \n    \n      4\n      MX17004\n      2010\n      3\n      tmax\n      d1\n      NaN\n    \n    \n      5\n      MX17004\n      2010\n      3\n      tmin\n      d1\n      NaN\n    \n    \n      6\n      MX17004\n      2010\n      4\n      tmax\n      d1\n      NaN\n    \n    \n      7\n      MX17004\n      2010\n      4\n      tmin\n      d1\n      NaN\n    \n    \n      8\n      MX17004\n      2010\n      5\n      tmax\n      d1\n      NaN\n    \n    \n      9\n      MX17004\n      2010\n      5\n      tmin\n      d1\n      NaN\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uadf8\ub7fc\uc5d0\ub3c4 \uc544\uc9c1 \ubd88\ud544\uc694\ud55c \uac83\ub4e4\uc774 \ubcf4\uc774\ub294 \uad70\uc694. \uc880 \ub354 \uae54\ub054\ud55c \ub370\uc774\ud130\ub97c \ub9cc\ub4e4\uae30 \uc704\ud574 tmin, tmax\ub97c \uac01\uac01\uc758 \uc5f4\ub85c \ub9cc\ub4e4\uaca0\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \ub0a0\uc9dc \uc815\ubcf4\ub4e4\uc744 \ud569\uccd0\uc11c date\ub85c \ud1b5\ud569\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[26]:\n\n    \n# Extracting day\ndf[\"day\"] = df[\"day_raw\"].str.extract(\"d(\\d+)\", expand=False)  \ndf[\"id\"] = \"MX17004\"\n\n# To numeric values\ndf[[\"year\",\"month\",\"day\"]] = df[[\"year\",\"month\",\"day\"]].apply(lambda x: pd.to_numeric(x, errors='ignore'))\n\n# Creating a date from the different columns\ndef create_date_from_year_month_day(row):\n    return datetime.datetime(year=row[\"year\"], month=int(row[\"month\"]), day=row[\"day\"])\n\ndf[\"date\"] = df.apply(lambda row: create_date_from_year_month_day(row), axis=1)\ndf = df.drop(['year',\"month\",\"day\", \"day_raw\"], axis=1)\ndf = df.dropna()\n\n# Unmelting column \"element\"\ndf = df.pivot_table(index=[\"id\",\"date\"], columns=\"element\", values=\"value\")\ndf.reset_index(drop=False, inplace=True)\ndf\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[26]:\n\n\n\n\n\n\n  \n    \n      element\n      id\n      date\n      tmax\n      tmin\n    \n  \n  \n    \n      0\n      MX17004\n      2010-02-02\n      27.3\n      14.4\n    \n    \n      1\n      MX17004\n      2010-02-03\n      24.1\n      14.4\n    \n    \n      2\n      MX17004\n      2010-03-05\n      32.1\n      14.2\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ucda9\ubd84\ud788 \uae54\ub054\ud55c \ubaa8\uc591\uc0c8\uac00 \ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n5. \ud558\ub098\uc758 \uad00\uce21 \ub2e8\uc704(observational units)\uac00 \uc5ec\ub7ec \ud30c\uc77c\ub85c \ub098\ub204\uc5b4\uc838 \uc788\ub294 \uacbd\uc6b0\u00b6\n\n\n\n\n\n\nBaby Names in Illinois\u00b62014, 2015\ub144\ub3c4 \ubbf8\uad6d \uc77c\ub9ac\ub178\uc774 \uc8fc(Illinois)\uc758 \uc2e0\uc0dd\uc544\uc758 (\ub0a8\uc790)\uc774\ub984\uc744 \uc218\uc9d1\ud55c \ub370\uc774\ud130 \uc785\ub2c8\ub2e4.\n\ubb38\uc81c\uc810:\n\n\uc5ec\ub7ec \ud45c\uc640 \ud30c\uc77c\uc5d0 \ub370\uc774\ud130\uac00 \ud769\uc5b4\uc838 \uc788\ub2e4.\n\uc5f0\ub3c4(Year)\u201d\uac00 \ud30c\uc77c \uc774\ub984\uc5d0 \uc801\ud600\uc838 \uc788\ub2e4.\n\n\uc11c\ub85c \ub2e4\ub978 \ud30c\uc77c\uc5d0 \ub370\uc774\ud130\uac00 \ud769\uc5b4\uc838 \uc788\uc5b4 \uc870\uae08 \ubcf5\uc7a1\ud55c \uacfc\uc815\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.\n\uba3c\uc800 \uc544\ub798\uc758 \ucf54\ub4dc\ub85c \ud30c\uc77c \ub9ac\uc2a4\ud2b8\ub97c \ub9cc\ub4e4\uace0 \uac70\uae30\uc5d0\uc11c \uc5f0\ub3c4 \uac12\uc744 \ubf51\uc544\ub0c5\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c \uac01\uac01\uc758 \ud30c\uc77c\uc5d0\uc11c \ud45c\ub97c \ub9cc\ub4e4\uc5b4\ub0b4\uace0 \ub9c8\uc9c0\ub9c9\uc73c\ub85c concat\uae30\ub2a5\uc73c\ub85c \uc0ac\uc6a9\ud574 \ud558\ub098\uc758 \ud45c\ub85c \ud569\uce58\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \ndef extract_year(string):\n    match = re.match(\".+(\\d{4})\", string) \n    if match != None: return match.group(1)\n    \npath = './data'\nallFiles = glob.glob(path + \"/201*-baby-names-illinois.csv\")\nframe = pd.DataFrame()\ndf_list= []\nfor file_ in allFiles:\n    df = pd.read_csv(file_,index_col=None, header=0)\n    df.columns = map(str.lower, df.columns)\n    df[\"year\"] = extract_year(file_)\n    df_list.append(df)\n    \ndf = pd.concat(df_list)\ndf.head(5)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n\n  \n    \n      \n      rank\n      name\n      frequency\n      sex\n      year\n    \n  \n  \n    \n      0\n      1\n      Noah\n      837\n      Male\n      2014\n    \n    \n      1\n      2\n      Alexander\n      747\n      Male\n      2014\n    \n    \n      2\n      3\n      William\n      687\n      Male\n      2014\n    \n    \n      3\n      4\n      Michael\n      680\n      Male\n      2014\n    \n    \n      4\n      5\n      Liam\n      670\n      Male\n      2014\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub9c8\uce58\uba70\u00b6\uc774 \uae00\uc5d0\uc11c \uac00\uc7a5 \uc911\uc810\uc73c\ub85c \ub454\uac83\uc740 \ud30c\uc774\uc36c\uc73c\ub85c \uc9c0\uc800\ubd84\ud55c \ub370\uc774\ud130\ub97c \uae54\ub054\ud558\uac8c \ub9cc\ub4dc\ub294 \uac83\uc774 \uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\uac78\uc744 \uc704\ud574 Wickham\uc758 \ub17c\ubb38\uc5d0\uc11c \uc0ac\uc6a9\ub41c \ub370\uc774\ud130\ub97c \uc0b4\ud3b4 \ubcf4\uc558\uc8e0. \uae54\ub054\ud55c \ub370\uc774\ud130(Tidy data)\uc758 \ucd5c\uace0\uc758 \uc7a5\uc810\uc740 \uc2dc\uac01\ud654(Visualization)\uc774 \uc27d\ub2e4\ub294 \uac83\uc5d0 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\uac83\uc740 \ub2e4\uc74c\uc5d0 \ub2e4\ub8e8\uc5b4 \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\uc55e\uc73c\ub85c\ub294 Tidy data\ub97c \uace0\ub824\ud574\uc11c \ub370\uc774\ud130\ub97c \uc218\uc9d1\ud558\ub3c4\ub85d \ud558\uc138\uc694. \ubaa8\ub450\uc758 \uc2dc\uac04\uc740 \uc18c\uc911\ud558\ub2c8\uae4c\uc694.",
      "tags": "clean data,data,tidy data",
      "url": "https://partrita.github.io/posts/tidy-data/"
    },
    {
      "title": "About",
      "text": "Image from pictogram-illustration.com\n\n\uc9e7\uc740 \uc18c\uac1c\n\uc774 \ube14\ub85c\uadf8\ub294 \uc81c\uac00 \uc0dd\ubb3c\ud559\uc790 \uacb8 \uac1c\ubc1c\uc790 \ub85c\uc11c \ud765\ubbf8\ub86d\uace0 \uc720\uc6a9\ud558\ub2e4\uace0 \uc0dd\uac01\ub418\ub294 \uac83\uc744 \uc62c\ub9ac\uace0 \uc788\uc5b4\uc694. \uacfc\ud559\uc790\ub85c\uc11c\uc758 \uc0b6 \uc740 \ud765\ubbf8\ub85c\uc6b4 \uac83\ub4e4\ub85c \uac00\ub4dd\ucc2c \ubaa8\ud5d8\uc774\uc5b4\uc57c \ud569\ub2c8\ub2e4. \uadf8\ub798\uc11c \ub4a4\uc8fd\ubc15\uc8fd \uc5c9\ub9dd\ucc98\ub7fc \ubcf4\uc77c \uc218 \uc788\uc9c0\ub9cc \ub098\ub984 \uacf5\uc744 \ub4e4\uc5ec \uc815\ub9ac\ud55c \uac83\ub4e4 \uc785\ub2c8\ub2e4.\n\n\u2018\uacfc\ud559\uc790\ub294 \uc720\uc6a9(\u6709\u7528)\ud558\uac8c \uc4f8 \uc218 \uc788\ub2e4\uace0 \ud574\uc11c \uc5f0\uad6c\ud558\ub294 \uac83\uc774 \uc544\ub2c8\ub2e4. \uadf8 \uc18d\uc5d0\uc11c \ud76c\uc5f4\uc744 \ub290\ub07c\uae30 \ub54c\ubb38\uc774\ub2e4.\u2019\n\u2014Henri Poincar\u00e9\n\n\n\n\n\ubb34\uacc4\ud68d\uc774 \uacc4\ud68d\n\uc2b5\uad00\uc801\uc73c\ub85c \uc77c\uc744 \ubbf8\ub8e8\ub294 \ub098\uc758 \ud589\ub3d9\uc744 \uc815\ub2f9\ud558\uae30 \uc704\ud55c \ubcc0\uba85\uc785\ub2c8\ub2e4. \uc5b8\uc820\uac00 \ud558\uaca0\ub2e4\ub294 \uc0dd\uac01\uc740 \ub298\ud574\uc654\uc9c0\ub9cc \uae00\uc744 \uc4f0\ub294 \uc77c\uc740 \ud558\uae30 \uc2eb\uc740 \uc77c\uc785\ub2c8\ub2e4. \uc544\ubb34\ub9ac \uc801\uc5b4\ub3c4 \ub2e4\uc2dc \uc77d\uc5b4\ubcf4\uba74 \ub0b4\uc6a9\uc774 \ud615\ud3b8 \uc5c6\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \uadf8\ub798\ub3c4 \uc870\uae08\uc774\ub098\ub9c8 \uae00\uc4f0\ub294 \ud798\uc744 \ud0a4\uc6b0\uae30 \uc704\ud574 \uc774 \ube14\ub85c\uadf8\ub97c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \ud070 \ubaa9\ud45c\uc640 \ubaa9\uc801 \uc5c6\uc774 \uc77c\ubc8c\ub808\uc640 \uac8c\uc73c\ub984\ubc45\uc774 \uacfc\ud559\uc790 \uc0ac\uc774\uc5d0\uc11c \ub0b4 \ub9c8\uc74c\ub300\ub85c \uc870\uae08 \uc720\uc775\ud55c \uc77c\uc744 \ud558\ub824\uace0 \ud569\ub2c8\ub2e4.\n\n\n\n\uc791\uc5c5 \ud658\uacbd\n\uc81c\uac00 \uc0ac\uc6a9\ud558\ub294 \ud658\uacbd\uc5d0 \ub300\ud574\uc11c \uac04\ub7b5\ud788 \uc801\uc5b4\ubcfc\uac8c\uc694.\n\n\uc0ac\uc6a9\ud558\ub294 OS\ub294 Windows 1 \uc640 Linux 2 \uc785\ub2c8\ub2e4. Linux \uc911 \uc5d0\uc11c\ub3c4 Ubuntu\ub97c \uc880 \ub354 \uc120\ud638\ud588\uc5c8\uc8e0. \uadf8\ub7f0\ub370 \ucd5c\uadfc\uc5d0\ub294 \ub354 \uc774\uc05c Solus \ub97c \uc4f0\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\ucf54\ub529\ud560 \ub54c\ub294 Visual studio code \ub97c \uc4f0\uace0, \ud30c\uc774\ud3ab\ud305 \ud560 \ub54c\ub294 Eppendorf \ud30c\uc774\ud3ab \uc744 \uc501\ub2c8\ub2e4, \uac00\ubccd\uac70\ub4e0\uc694.\n\uc8fc\ub85c \uc4f0\ub294 \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\ub294 Python \uc774\uace0 R \uacfc Julia \ub97c \uacf5\ubd80\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\uc774 \ube14\ub85c\uadf8\ub294 Github \uc5d0\uc11c \ubb34\ub8cc \ud638\uc2a4\ud305\ub418\uace0, Static site generator \uc778 Nikola \ub97c \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\uc65c \ube14\ub85c\uadf8\ub97c \ud558\ub294\uac00?\n\uc624\ub798\uc804\ubd80\ud130(\uc544\ub9c8\ub3c4 2006\ub144) \uc874\uc7ac\uac10 \uc5c6\ub294 \ube14\ub85c\uadf8\ub97c \ub9cc\ub4e4\uc5b4\uc654\uc2b5\ub2c8\ub2e4. \uc81c\uac00 \uae30\uc5b5\ud558\ub294 \uc120\uc5d0\uc11c \ud55c\ubc88 \ub098\uc5f4\ud574\ubcf4\uc8e0.\n\nhttp://netsphere.codex.kr/ : \ud638\uc2a4\ud305 \uc5c5\uccb4\uac00 \ub9dd\ud574\ubc84\ub838\uc2b5\ub2c8\ub2e4.\nhttp://partrita.posterous.com/ : \uc11c\ube44\uc2a4\uac00 \uc885\ub8cc\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\nhttps://partrita.blogspot.kr/ : \uad6c\uae00\uac80\uc0c9\uc5b4 \ub178\ucd9c\uc5d0 \uc720\ub9ac 3 \ud588\uc9c0\ub9cc, \uc81c\uc57d\uc774 \ub9ce\uc544\uc11c \uc6cc\ub4dc\ud504\ub808\uc2a4\ub85c \uc774\uc0ac\nhttps://partrita.wordpress.com/ : \ucc98\uc74c\uc5d0\ub294 \uc124\uce58\ud615\uc744 \uc0ac\uc6a9\ud558\ub2e4. \ubb34\ub8cc\ud638\uc2a4\ud305\uc744 \uc81c\uacf5\ud558\ub294 wordpress.com \uc73c\ub85c \uc774\uc0ac\ud588\uc2b5\ub2c8\ub2e4.\nhttps://partrita.github.io/ : PHP(\uc6cc\ub4dc\ud504\ub808\uc2a4)\ub294 \ub108\ubb34 \uc62c\ub4dc\ud55c \uac83 \uac19\uace0 \ud56b\ud55c \uae43\ud5d9\uc73c\ub85c \uc774\uc804\ud588\uc2b5\ub2c8\ub2e4.\n\n\uc5ec\ub7ec\ubc88 \uc774\uc804\uc744 \ud558\uba74\uc11c \uacfc\uac70\uc758 \uae00\uc740 \uc18c\uc2e4(\ub098\uc911\uc5d0 \ubcf4\ub2c8 \ubd80\ub044\ub7ec\uc6cc \uc0ad\uc81c)\ub418\uc5c8\ub124\uc694. \ubb50 \uad1c\ucc2e\uc2b5\ub2c8\ub2e4. \uc81c\uac00 \ube14\ub85c\uadf8\ub97c \ud558\ub294 \uc774\uc720\ub3c4 \uba85\ud655\ud558\uc9c0 \uc54a\uac70\ub4e0\uc694. \uadf8\ub0e5 \uc7ac\ubbf8\ub85c \ud558\ub294 \uac81\ub2c8\ub2e4.\n\n\nNikola \ube14\ub85c\uadf8\nStatic site generator \uc911\uc5d0 \uac00\uc7a5 \uc720\uba85\ud55c\uac74 Jekyll \uc785\ub2c8\ub2e4. \uc800\ub3c4 \ucc98\uc74c\uc5d0\ub294 Jekyll\uc744 \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub2e4 Nikola \ub97c \ubc1c\uacac\ud588\uace0 Jupyter notebook \ud3ec\uc2a4\ud305\uc744 \uc81c\uacf5 \ud55c\ub2e4\ub294 \uc0ac\uc2e4\uc744 \uc54c\uc558\uc8e0. \uc800\ub294 \uc8fc\ub85c Jupyter notebook\uc5d0 \ucf54\ub529\uc744 \ud558\uae30 \ub54c\ubb38\uc5d0 \ubc14\ub85c Nikola\ub85c \uac08\uc544 \ud0d4\uc2b5\ub2c8\ub2e4.\n\n\uc7a5\uc810:\n\nJupyter notebook \ud3ec\ub9f7(ipynb) \ubcc0\uacbd\uc774 \ud544\uc694\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\nPython\uc73c\ub85c \uc791\uc131\ub418\uc5b4 \uc788\uc5b4 \uac00\ub3c5\uc131\uc774 \uc88b\uace0 (\ub0b4\uac00) \ud3b8\uc9d1\uc774 \uc27d\uc8e0.\n\uc5ec\ub7ec\uac00\uc9c0 \ud3b8\ub9ac\ud55c \uba85\ub839\uc5b4\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74 github_deploy \ub85c \ud55c\ubc29\uc5d0 \uc62c\ub9ac\uae30!\n\n\n\ub2e8\uc810:\n\n\uc0ac\uc6a9\uc790 \uc218\uac00 \uc801\uc5b4 \uc815\ubcf4\uac00 \uc801\uace0 \uc55e\uc73c\ub85c\ub3c4 \ub298\uc5b4\ub0a0 \uac83 \uac19\uc9c0\ub294 \uc54a\uc2b5\ub2c8\ub2e4.\n\ud14c\ub9c8\ub294 \ub9ce\uc774 \ubd80\uc871\ud569\ub2c8\ub2e4.\n\n\n\n\uc800\ucc98\ub7fc Jupyter notebook\uc73c\ub85c \ube14\ub85c\uadf8 \ud3ec\uc2a4\ud2b8\ub97c \uc791\uc131\ud558\uace0 \uc2f6\uc73c\uc2e0 \ubd84\ub4e4\uc740 \uc124\uce58 \uac00\uc774\ub4dc \ub97c \ucc38\uace0 \ud558\uc138\uc694.\n\n\n\n\ub77c\uc988\ubca0\ub9ac\ud30c\uc774 4\n\ucd5c\uadfc\uc5d0 \uc6f9 \ud504\ub85c\uadf8\ub798\ubc0d\uc5d0 \uad00\uc2ec\uc774 \uc0dd\uaca8\uc11c \uac1c\uc778\ud504\ub85c\uc81d\ud2b8\uc6a9\uc73c\ub85c \uc11c\ubc84\ub85c \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc811\uc18d \uc8fc\uc18c\ub294 http://partrita.iptime.org \uc785\ub2c8\ub2e4.\n\n\ub77c\uc988\ubca0\ub9ac\uc548 OS\ub97c \uc0ac\uc6a9 \uc911\uc785\ub2c8\ub2e4.\nDjango + Nginx + celery\ub97c \uac19\uc774 \uad74\ub9ac\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\uac04\uc774 NAS\ub85c \ub354 \uc720\uc6a9\ud558\uac8c \uc4f0\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ub77c\uc988\ubca0\ub9ac\uc5d0 \ub300\ud574\uc11c\ub3c4 \uc815\ub9ac\ud574\uc11c \uc62c\ub824\ub193\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\uc800\uc791\uad8c\uc5d0 \ub300\ud558\uc5ec\n\uc774 \uacf3\uc5d0 \uc62c\ub9ac\ub294 \uae00\uc758 \ub300\ubd80\ubd84\uc740 \uc800\uc758 \ub3c5\ucc3d \uc801\uc778 \ub0b4\uc6a9\uc774 \uc544\ub2d9\ub2c8\ub2e4.\n\uc81c\uac00 \ub2e4\ub978 \uacf3(\uc8fc\ub85c \uc778\ud130\ub137)\uc5d0\uc11c \uc5bb\uc740 \uc815\ubcf4\ub4e4\uc744 \uc81c\uba4b\ub300\ub85c \ud3b8\uc9d1 \ud574\ub193\uc740 \uac83\uc774\uc9c0\uc694.\n\uadf8\ub798\uc11c \uc81c\uac00 \uc4f4 \uae00\uc5d0 \uc800\uc791\uad8c \ubcf4\ud638\ub97c \ubc1b\ub294 \uc790\ub8cc\uac00 \ud3ec\ud568\ub418\uc5b4 \uc788\uc744 \uc218\ub3c4 \uc788\uc5b4\uc694.\n\ub9cc\uc57d \uc800\uc791\uad8c\uc744 \uce68\ud574\ud55c \uac83\uc774 \uc788\ub2e4\uba74 \uc774\uba54\uc77c 5 \uc73c\ub85c \uc5f0\ub77d \uc8fc\uc2dc\uba74 \ubc14\ub85c \ucc98\ub9ac\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n1\n\uac70\uc758 \ubc18\uac15\uc81c\uc801\uc73c\ub85c \uc0ac\uc6a9\ud558\ub294\uac70\ub77c \uc88b\uc544\ud558\uc9c4 \uc54a\uc2b5\ub2c8\ub2e4.\n\n2\n\ub9ac\ub204\uc2a4 \ud1a0\ubc1c\uc988\uac00 \uac1c\ubc1c\ud55c \ucef4\ud4e8\ud130 \uc6b4\uc601 \uccb4\uc81c.\n\n3\n\ube14\ub85c\uac70 \uc11c\ube44\uc2a4\uac00 \uad6c\uae00\uc5d0 \uc778\uc218\ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n\n4\n\uc601\uad6d \ub77c\uc988\ubca0\ub9ac \ud30c\uc774(Raspberry Pi) \uc7ac\ub2e8\uc5d0\uc11c \ub9cc\ub4e0 \ucd08\uc18c\ud615/\ucd08\uc800\uac00 PC\n\n5\npartrita@gmail.com",
      "tags": "",
      "url": "https://partrita.github.io/pages/about/"
    },
    {
      "title": "\uc544\ubbf8\ub178\uc0b0 \ube48\ub3c4 \uacc4\uc0b0\ud558\uae30",
      "text": "\uc544\ubbf8\ub178\uc0b0 \ube48\ub3c4 \uacc4\uc0b0\ud558\uae30\u00b6\uc774\ubc88\uc5d0\ub294 \ud30c\uc774\uc36c\uc744 \uc774\uc6a9\ud574\uc11c \ub2e8\ubc31\uc9c8\uc5d0\uc11c \uc544\ubbf8\ub178\uc0b0\uc758 \uc11c\uc5f4 \ube48\ub3c4\ub97c \uacc4\uc0b0\ud558\uaca0\uc2b5\ub2c8\ub2e4.\nProtein?\u00b6Protein(\ub2e8\ubc31\uc9c8)\uc740 \uc0dd\ubb3c\uc758 \ubab8\uc744 \uad6c\uc131\ud558\ub294 \uace0\ubd84\uc790 \uc720\uae30 \ubb3c\uc9c8\uc774\ub2e4. \uadf8\ub9ac\uc2a4\uc5b4\uc758 proteios\uc5d0\uc11c \uc720\ub798\ub41c \uac83\uc774\ub2e4. \uc218\ub9ce\uc740 \uc544\ubbf8\ub178\uc0b0\uc758 \uc5f0\uacb0\uccb4\ub85c 20\uac00\uc9c0\uc758 \uc11c\ub85c \ub2e4\ub978 \uc544\ubbf8\ub178\uc0b0\ub4e4\uc774 \ud3a9\ud0c0\uc774\ub4dc \uacb0\ud569\uc774\ub77c\uace0 \ud558\ub294 \ud654\ud559 \uacb0\ud569\uc73c\ub85c \uae38\uac8c \uc5f0\uacb0\ub41c \uac83\uc744 \ud3f4\ub9ac\ud3a9\ud0c0\uc774\ub4dc\ub77c\uace0 \ud55c\ub2e4. - \uc704\ud0a4\ubc31\uacfc\n\n\uc704\ud0a4\ubc31\uacfc\uc5d0 \uc11c\uc220\ub418\uc5b4 \uc788\ub4ef\uc774, \ub2e8\ubc31\uc9c8\uc740 20\uac00\uc9c0\uc758 \uc544\ubbf8\ub178\uc0b0\uc73c\ub85c \uad6c\uc131\ub418\uc5b4 \uc788\uc5b4\uc694. \uc544\ubbf8\ub178\uc0b0\uc758 \uc11c\uc5f4\uc774 \uc5b4\ub5bb\uac8c \ub2e4\ub974\ub0d0\uc5d0 \ub530\ub77c\uc11c \ub2e4\ub978 \ub2e8\ubc31\uc9c8\uc774 \ub418\uc8e0.\n\uc608\uc81c\u00b6Factor8 \uc774\ub77c\uace0 \ud558\ub294 \ud608\uc6b0\ubcd1\uc5d0 \uad00\ub828\ub41c \ub2e8\ubc31\uc9c8\uc744 \uac00\uc9c0\uace0 \uc608\ub97c \ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\nFactor 8 (FVIII) is an essential blood-clotting protein, also known as anti-hemophilic factor (AHF). \nIn humans, factor 8 is encoded by the F8 gene. Defects in this gene result in hemophilia A.\n\uc544\ubbf8\ub178\uc0b0\uc740 \ub300\ubb38\uc790 \uc54c\ud30c\ubcb3\uc73c\ub85c \ud45c\ud604\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4. \uac01\uac01\uc758 \uc57d\uc5b4\uac00 \ub73b\ud558\ub294 \uc544\ubbf8\ub178\uc0b0\uc740 \ub9c1\ud06c \uc5d0\uc11c \ud655\uc778\ud558\uc138\uc694.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n%matplotlib inline\n# \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\ub4e4\uc785\ub2c8\ub2e4.\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\n    \n\n\n\n\n\n\n\n\ub2e8\ubc31\uc9c8\uc758 \uc11c\uc5f4\uc744 \ubb38\uc790\uc5f4\ub85c \ub123\uc5b4\uc92c\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \nprotein_seq = '''MQIELSTCFFLCLLRFCFSATRRYYLGAVELSWDYMQSDLGELPVDARFPPRVPKSFPFN\nTSVVYKKTLFVEFTDHLFNIAKPRPPWMGLLGPTIQAEVYDTVVITLKNMASHPVSLHAV\nGVSYWKASEGAEYDDQTSQREKEDDKVFPGGSHTYVWQVLKENGPMASDPLCLTYSYLSH\nVDLVKDLNSGLIGALLVCREGSLAKEKTQTLHKFILLFAVFDEGKSWHSETKNSLMQDRD\nAASARAWPKMHTVNGYVNRSLPGLIGCHRKSVYWHVIGMGTTPEVHSIFLEGHTFLVRNH\nRQASLEISPITFLTAQTLLMDLGQFLLFCHISSHQHDGMEAYVKVDSCPEEPQLRMKNNE\nEAEDYDDDLTDSEMDVVRFDDDNSPSFIQIRSVAKKHPKTWVHYIAAEEEDWDYAPLVLA\nPDDRSYKSQYLNNGPQRIGRKYKKVRFMAYTDETFKTREAIQHESGILGPLLYGEVGDTL\nLIIFKNQASRPYNIYPHGITDVRPLYSRRLPKGVKHLKDFPILPGEIFKYKWTVTVEDGP\nTKSDPRCLTRYYSSFVNMERDLASGLIGPLLICYKESVDQRGNQIMSDKRNVILFSVFDE\nNRSWYLTENIQRFLPNPAGVQLEDPEFQASNIMHSINGYVFDSLQLSVCLHEVAYWYILS\nIGAQTDFLSVFFSGYTFKHKMVYEDTLTLFPFSGETVFMSMENPGLWILGCHNSDFRNRG\nMTALLKVSSCDKNTGDYYEDSYEDISAYLLSKNNAIEPRSFSQNSRHPSTRQKQFNATTI\nPENDIEKTDPWFAHRTPMPKIQNVSSSDLLMLLRQSPTPHGLSLSDLQEAKYETFSDDPS\nPGAIDSNNSLSEMTHFRPQLHHSGDMVFTPESGLQLRLNEKLGTTAATELKKLDFKVSST\nSNNLISTIPSDNLAAGTDNTSSLGPPSMPVHYDSQLDTTLFGKKSSPLTESGGPLSLSEE\nNNDSKLLESGLMNSQESSWGKNVSSTESGRLFKGKRAHGPALLTKDNALFKVSISLLKTN\nKTSNNSATNRKTHIDGPSLLIENSPSVWQNILESDTEFKKVTPLIHDRMLMDKNATALRL\nNHMSNKTTSSKNMEMVQQKKEGPIPPDAQNPDMSFFKMLFLPESARWIQRTHGKNSLNSG\nQGPSPKQLVSLGPEKSVEGQNFLSEKNKVVVGKGEFTKDVGLKEMVFPSSRNLFLTNLDN\nLHENNTHNQEKKIQEEIEKKETLIQENVVLPQIHTVTGTKNFMKNLFLLSTRQNVEGSYD\nGAYAPVLQDFRSLNDSTNRTKKHTAHFSKKGEEENLEGLGNQTKQIVEKYACTTRISPNT\nSQQNFVTQRSKRALKQFRLPLEETELEKRIIVDDTSTQWSKNMKHLTPSTLTQIDYNEKE\nKGAITQSPLSDCLTRSHSIPQANRSPLPIAKVSSFPSIRPIYLTRVLFQDNSSHLPAASY\nRKKDSGVQESSHFLQGAKKNNLSLAILTLEMTGDQREVGSLGTSATNSVTYKKVENTVLP\nKPDLPKTSGKVELLPKVHIYQKDLFPTETSNGSPGHLDLVEGSLLQGTEGAIKWNEANRP\nGKVPFLRVATESSAKTPSKLLDPLAWDNHYGTQIPKEEWKSQEKSPEKTAFKKKDTILSL\nNACESNHAIAAINEGQNKPEIEVTWAKQGRTERLCSQNPPVLKRHQREITRTTLQSDQEE\nIDYDDTISVEMKKEDFDIYDEDENQSPRSFQKKTRHYFIAAVERLWDYGMSSSPHVLRNR\nAQSGSVPQFKKVVFQEFTDGSFTQPLYRGELNEHLGLLGPYIRAEVEDNIMVTFRNQASR\nPYSFYSSLISYEEDQRQGAEPRKNFVKPNETKTYFWKVQHHMAPTKDEFDCKAWAYFSDV\nDLEKDVHSGLIGPLLVCHTNTLNPAHGRQVTVQEFALFFTIFDETKSWYFTENMERNCRA\nPCNIQMEDPTFKENYRFHAINGYIMDTLPGLVMAQDQRIRWYLLSMGSNENIHSIHFSGH\nVFTVRKKEEYKMALYNLYPGVFETVEMLPSKAGIWRVECLIGEHLHAGMSTLFLVYSNKC\nQTPLGMASGHIRDFQITASGQYGQWAPKLARLHYSGSINAWSTKEPFSWIKVDLLAPMII\nHGIKTQGARQKFSSLYISQFIIMYSLDGKKWQTYRGNSTGTLMVFFGNVDSSGIKHNIFN\nPPIIARYIRLHPTHYSIRSTLRMELMGCDLNSCSMPLGMESKAISDAQITASSYFTNMFA\nTWSPSKARLHLQGRSNAWRPQVNNPKEWLQVDFQKTMKVTGVTTQGVKSLLTSMYVKEFL\nISSSQDGHQWTLFFQNGKVKVFQGNQDSFTPVVNSLDPPLLTRYLRIHPQSWVHQIALRM\nEVLGCEAQDLY'''\n\n\n    \n\n\n\n\n\n\n\n\ub2e8\ubc31\uc9c8 \uc11c\uc5f4\uc5d0 \uc904\ubc14\uafc8\uc774 \uc788\ub294\uc9c0\ub97c \ud655\uc778\ud558\uace0, \uadf8\ub9ac\uace0 \ucd1d 2351\uac1c\uc758 \uc544\ubbf8\ub178\uc0b0 \uac2f\uc218\uac00 \uc138\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \n# data check\nprotein_seq = protein_seq.replace('\\n','')\nlen(protein_seq)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n2351\n\n\n\n\n\n\n\n\n\n\n\nlen \uae30\ub2a5\uc744 \uc774\uc6a9\ud574\uc11c \uac04\ub2e8\ud558\uac8c \uac2f\uc218\uac00 2351\uac1c\uc784\uc744 \uc54c \uc218 \uc788\uc5b4\uc694\n\ube48\ub3c4 \uacc4\uc0b0\ud558\uae30\u00b6\ud30c\uc774\uc36c \uae30\ubcf8 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc778 counter\uc5d0\ub294 collections\uc774\ub77c\ub294 \uae30\ub2a5\uc774 \uc774\ubbf8 \ub4e4\uc5b4\uc788\uc2b5\ub2c8\ub2e4. \uc774 \uae30\ub2a5\uc744 \uc774\uc6a9\ud574\uc11c \uc544\ubbf8\ub178\uc0b0\uc758 \uac2f\uc218\ub97c \uc138\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nfrom collections import Counter\ntable = Counter(protein_seq)\ntable\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\nCounter({'A': 110,\n         'C': 26,\n         'D': 121,\n         'E': 148,\n         'F': 109,\n         'G': 129,\n         'H': 75,\n         'I': 110,\n         'K': 158,\n         'L': 222,\n         'M': 61,\n         'N': 125,\n         'P': 128,\n         'Q': 110,\n         'R': 104,\n         'S': 219,\n         'T': 155,\n         'V': 125,\n         'W': 37,\n         'Y': 79})\n\n\n\n\n\n\n\n\n\n\n\n\uc774\uc81c factor8\uc774\ub77c\ub294 \ub2e8\ubc31\uc9c8\uc758 \uc544\ubbf8\ub178\uc0b0 \ube48\ub3c4\ub97c \uc54c \uc218 \uc788\uc5b4\uc694. A(\uc54c\ub77c\ub2cc)\uc740 110\uac1c \uc774\uad70\uc694.\n\uc2dc\uac01\ud654\u00b6\uc880 \ub354 \ud3b8\ud558\uac8c \uc2dc\uac01\ud654\ud558\uae30 \uc704\ud574 pandas\uc758 dataframe\uc73c\ub85c \ub370\uc774\ud130\ub97c \ubcc0\ud658 \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \ndf = pd.DataFrame.from_dict(table, orient='index')\ndf2 = df.rename(columns={'index':'AA', 0:'count'}) # column\uc758 label\uc744 \ubcc0\uacbd\ud574\uc90d\ub2c8\ub2e4.\ndf2.head()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      count\n    \n  \n  \n    \n      A\n      110\n    \n    \n      C\n      26\n    \n    \n      E\n      148\n    \n    \n      D\n      121\n    \n    \n      G\n      129\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub9c9\ub300 \uadf8\ub798\ud504 \uadf8\ub9ac\uae30\u00b6\n\n\n\n\n\nIn\u00a0[6]:\n\n    \ndf2[::-1].plot.barh(legend=None) # [::-1]\uc740 \uc21c\uc11c\ub97c \ub9de\ucd94\uae30 \uc704\ud568\uc785\ub2c8\ub2e4\nplt.title('frequency of amino acid ')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\nText(0.5,1,u'frequency of amino acid ')\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud30c\uc774\ucc28\ud2b8 \uadf8\ub9ac\uae30\u00b6\uc0c1\ub300\uc801\uc778 \uc544\ubbf8\ub178\uc0b0\uc758 \ube48\ub3c4\ub97c \uc54c\uc544\ubcf4\uae30\uc5d0\ub294 \ud30c\uc774\ucc28\ud2b8\uac00 \uc880 \ub354 \ub098\uc744 \uac83 \uac19\ub124\uc694.\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \ndf2.plot.pie(subplots=True, legend = None, colormap = 'tab20') # 20\uac00\uc9c0\uc758 \uc0c9\uc0c1\uc744 \ud45c\ud604\ud558\uae30 \uc704\ud574 color map\uc744 \ubcc0\uacbd\ud588\uc2b5\ub2c8\ub2e4.\nplt.title('frequency of amino acid ')\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\nText(0.5,1,u'frequency of amino acid ')\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uacb0\ub860\u00b6\ud655\uc2e4\ud788, \ub9c9\ub300 \uadf8\ub798\ud504\ubcf4\ub2e4\ub294 \ud30c\uc774\ucc28\ud2b8\uac00 \ub208\uc5d0 \uc798 \ub4e4\uc5b4\uc635\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc815\ud655\ud55c \uac12\uc740 \uc54c\uae30 \uc5b4\ub835\uad70\uc694.\n\uc704\uc758 \uc608\ub97c \ubcf4\uba74 Leucine\uacfc Serine\uc758 \ube48\ub3c4\uac00 \ub192\uace0 \ubc18\uba74\uc5d0 Cysteine\uc740 \ub9e4\uc6b0 \uc801\uc740 \uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc774\uac83\uc744 \uc751\uc6a9\ud574\uc11c \ub2e4\uc74c \ubc88\uc5d0\ub294 \uc5ec\ub7ec\uac1c\uc758 \uc11c\uc5f4\uc744 \uc77d\uace0 \ud30c\uc774\ucc28\ud2b8\ub97c \uadf8\ub824\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4.",
      "tags": "Amino acid,Python",
      "url": "https://partrita.github.io/posts/frequency-of-amino-acid/"
    },
    {
      "title": "Statistics in Python",
      "text": "\uc65c \ud30c\uc774\uc36c\uc73c\ub85c \ud1b5\uacc4\ubd84\uc11d\uc744 \ud558\ub098\uc694?\u00b6\ud1b5\uacc4 \uacc4\uc0b0\uc744 \uc704\ud55c \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\uc5d0 R \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4(\uc904\uc5ec\uc11c R)\uac00 \uc788\ub294\ub370, \uc65c \ud30c\uc774\uc36c\uc744 \uc368\uc57c \ud560\uae4c\uc694?\nR\uc740 \ubb38\ubc95 \uc790\uccb4\ubd80\ud130 \ud1b5\uacc4\uc5d0 \ud2b9\ud654\ub418\uc5b4 \uc788\uace0 \uc5ec\ub7ec\uac00\uc9c0 \ud1b5\uacc4\ubd84\uc11d\uc744 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7fc\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 \uc81c\uac00 \ud30c\uc774\uc36c\uc744 \ud1b5\uacc4\ubd84\uc11d\uc5d0 \uc0ac\uc6a9\ud558\ub294 \uc774\uc720\ub294 \uac04\ub2e8\ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc740 \ubcf4\ub2e4 \ubc94\uc6a9\uc801\uc778 \uc5b8\uc5b4\uc774\uace0 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \ud48d\ubd80\ud574\uc11c \uc81c\uac00 \uc6d0\ud558\ub294 \uae30\ub2a5\uc740 \uac70\uc758 \uc774\ubbf8 \ub2e4 \uc788\uae30 \ub54c\ubb38\uc774\uc8e0.\n\ud544\uc694\ud558\uba74 \uadf8\ub0e5 \uac00\uc838\ub2e4 \uc500\uc73c\ub85c \uc2dc\uac04\uc744 \uc808\uc57d\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc608\ub97c \ub4e4\uc5b4\ubd05\uc2dc\ub2e4.\u00b6\uc5ec\uae30, brain_size \ub77c\ub294 \ub370\uc774\ud130\ub97c \uc0b4\ud3b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n# \ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc635\ub2c8\ub2e4.\n%matplotlib inline\nimport pandas as pd\nimport matplotlib.pyplot as plt\n\n\n    \n\n\n\n\n\n\n\nCSV \ud30c\uc77c \uc77d\uc5b4\uc624\uae30\u00b6brain_size \ub370\uc774\ud130\ub294 Willerman\uc774 1991\ub144\uc5d0 \uc0ac\ub78c\uc758 \ub1cc \ud06c\uae30\uc640 \ubb34\uac8c, \uadf8\ub9ac\uace0 IQ\uc5d0 \ub300\ud558\uc5ec \uce21\uc815\ud55c \uac12\uc785\ub2c8\ub2e4. \ubc94\uc8fc\ud615\uc758 \ub370\uc774\ud130\uc640 \uc218\uce58\ud615 \ub370\uc774\ud130\ub85c \uad6c\uc131 \ub418\uc5b4 \uc788\uc8e0.\nPandas\uc758 read_csv \uae30\ub2a5\uc744 \uc774\uc6a9\ud574 \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \ndf = pd.read_csv('http://www.scipy-lectures.org/_downloads/brain_size.csv',\n                 sep = ';', index_col= 0, na_values='.')\ndf.head() # \uc0c1\ub2e8\uc758 5\uac1c\uc758 \ub370\uc774\ud130 \ud655\uc778\ud558\uae30\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Gender\n      FSIQ\n      VIQ\n      PIQ\n      Weight\n      Height\n      MRI_Count\n    \n  \n  \n    \n      1\n      Female\n      133\n      132\n      124\n      118.0\n      64.5\n      816932\n    \n    \n      2\n      Male\n      140\n      150\n      124\n      NaN\n      72.5\n      1001121\n    \n    \n      3\n      Male\n      139\n      123\n      150\n      143.0\n      73.3\n      1038437\n    \n    \n      4\n      Male\n      133\n      129\n      128\n      172.0\n      68.8\n      965353\n    \n    \n      5\n      Female\n      137\n      132\n      134\n      147.0\n      65.0\n      951545\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uac04\ub2e8\ud788 \uc0b4\ud3b4\ubcf4\uba74, \ucd1d 40\uba85\uc758 \uc0ac\ub78c\ub4e4\uc758 \uc131\ubcc4, IQ, \ubab8\ubb34\uac8c, \ud0a4 \uadf8\ub9ac\uace0 MRI_count(total pixel Count from the 18 MRI scans) \uac12\uc774 \uce21\uc815\ub418\uc5b4 \uc788\uc2b5\ub2c8\ub2e4.\nIQ\uc758 \uacbd\uc6b0 3\uc885\ub958\ub85c \uc138\ubd84\ud654 \ub418\uc5b4\uc788\ub294\ub370 \uac01\uac01\uc744 \uc54c\uc544 \ubcf4\uba74 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\nFull Scale Intelligence Quotient (FSIQ) : VIQ\uc640 PIQ\uc758 \uc885\ud569\uc801\uc778 \uc218\uce58\uc785\ub2c8\ub2e4\nVerbal IQ (VIQ) : \uc5b8\uc5b4\uc801\uc778 \uce21\uba74\uc744 \uce21\uc815\ud569\ub2c8\ub2e4.\nPerformance IQ (PIQ) : \ub17c\ub9ac, \uacc4\uc0b0\uc801\uc778 \uce21\uba74\uc744 \uce21\uc815\n\nPandas \uc124\uba85\ud1b5\uacc4\u00b6pandas\uc5d0\uc11c\ub294 \uac04\ub2e8\ud558\uac8c \ud3c9\uade0\uac12\uacfc \ud45c\uc900\ud3b8\ucc28\ub4f1\uc744 \uacc4\uc0b0\ud574\uc8fc\ub294 \uae30\ub2a5\uc774 \uc788\uc2b5\ub2c8\ub2e4.\ndescribe() \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uba74 \ubaa8\ub4e0 \uc5f4\uc5d0 \ub300\ud55c \uc124\uba85\ud1b5\uacc4\uac12\uc744 \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \n# padas \uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uc124\uba85 \ud1b5\uacc4\ndf.describe()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      FSIQ\n      VIQ\n      PIQ\n      Weight\n      Height\n      MRI_Count\n    \n  \n  \n    \n      count\n      40.000000\n      40.000000\n      40.00000\n      38.000000\n      39.000000\n      4.000000e+01\n    \n    \n      mean\n      113.450000\n      112.350000\n      111.02500\n      151.052632\n      68.525641\n      9.087550e+05\n    \n    \n      std\n      24.082071\n      23.616107\n      22.47105\n      23.478509\n      3.994649\n      7.228205e+04\n    \n    \n      min\n      77.000000\n      71.000000\n      72.00000\n      106.000000\n      62.000000\n      7.906190e+05\n    \n    \n      25%\n      89.750000\n      90.000000\n      88.25000\n      135.250000\n      66.000000\n      8.559185e+05\n    \n    \n      50%\n      116.500000\n      113.000000\n      115.00000\n      146.500000\n      68.000000\n      9.053990e+05\n    \n    \n      75%\n      135.500000\n      129.750000\n      128.00000\n      172.000000\n      70.500000\n      9.500780e+05\n    \n    \n      max\n      144.000000\n      150.000000\n      150.00000\n      192.000000\n      77.000000\n      1.079549e+06\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\nIQ\uc758 \ud3c9\uade0\uac12\uc740 113\uc774\uad70\uc694. \ubab8\ubb34\uac8c\ub294 kg\uc73c\ub85c \ubcc0\ud658\ud558\uba74 \uc57d 70kg\ucbe4 \ub429\ub2c8\ub2e4.\n\uc0b0\ud3ec \ud589\ub82c\uc744 \uadf8\ub824\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\u00b6\uc804\uccb4\uc801\uc778 \ub370\uc774\ud130\uc758 \uc591\uc0c1\uc744 \ubcf4\uae30\uc5d0\ub294 \uc2dc\uac01\ud654\uac00 \uc911\uc694\ud569\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc5d0\uc11c\ub294 \uac04\ub2e8\ud558\uac8c \uc0b0\ud3ec \ud589\ub82c(sactter matrix)\ub97c \uadf8\ub824 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uba3c\uc800 \ud0a4\uc640 \ubab8\ubb34\uac8c, MRI_count \uac04\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \n# Plotting data\nfrom pandas.plotting import scatter_matrix\n# \ud0a4\uc640 \ubab8\ubb34\uac8c, MRI_count \nscatter_matrix(df[['Weight', 'Height', 'MRI_Count']])  \n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\narray([[<matplotlib.axes._subplots.AxesSubplot object at 0x000000000A1D2B70>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x000000000A443668>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x000000000A47E588>],\n       [<matplotlib.axes._subplots.AxesSubplot object at 0x000000000A4B9588>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x000000000A56D4A8>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x000000000A56D4E0>],\n       [<matplotlib.axes._subplots.AxesSubplot object at 0x000000000A5DC978>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x000000000A614EB8>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x000000000A643B70>]], dtype=object)\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ud0a4\uc640 \ubab8\ubb34\uacc4\ub294 \uc11c\ub85c \uc5f0\uad00\uc774 \uc788\ub294\ub4ef \ud558\uace0 \ub098\uba38\uc9c0\ub294 \uadf8\ub2e4\uc9c0 \uc11c\ub85c \uc5f0\uad00\uc774 \uc5c6\uc5b4 \ubcf4\uc785\ub2c8\ub2e4.\n\uadf8 \ub2e4\uc74c\uc73c\ub85c\ub294 \uc5ec\ub7ec IQ \uc218\uce58\uac04\uc5d0 \uc0c1\uad00\uad00\uacc4\ub97c \uc54c\uc544 \ubcf4\uc8e0.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \nscatter_matrix(df[['PIQ', 'VIQ', 'FSIQ']])\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\narray([[<matplotlib.axes._subplots.AxesSubplot object at 0x000000000A9AD6A0>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x000000000A9F34A8>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x000000000AA2E3C8>],\n       [<matplotlib.axes._subplots.AxesSubplot object at 0x000000000AA64358>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x000000000AAA0358>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x000000000AAA0390>],\n       [<matplotlib.axes._subplots.AxesSubplot object at 0x000000000AB01EB8>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x000000000AB3DEB8>,\n        <matplotlib.axes._subplots.AxesSubplot object at 0x000000000AB72EB8>]], dtype=object)\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub2f9\uc5f0\ud558\uc9c0\ub9cc, FSIQ\ub294 VIQ, PIQ \uac01\uac01\uacfc \uc5f0\uad00\uc131\uc774 \uc788\uc5b4 \ubcf4\uc785\ub2c8\ub2e4. VIQ\uc640 PIQ\uac04\uc5d0\ub294 \uc560\ub9e4\ud558\uac8c \uc5f0\uad00\uc131\uc774 \uc5c6\uc5b4 \ubcf4\uc774\ub124\uc694. FSIQ\uc758 \ud788\uc2a4\ud1a0\uadf8\ub7a8\uc5d0\uc11c\ub294 100 - 125 \uc0ac\uc774\uc5d0\ub294 \ub370\uc774\ud130\uac00 \uc5c6\ub294 \uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uac00\uc124 \uac80\uc815: \ub450 \uadf8\ub8f9\uac04\uc758 \ube44\uad50\u00b6T-test \ub294 \ub450 \uadf8\ub8f9\uac04\uc758 \ud3c9\uade0\uc758 \ucc28\uc774\uac00 \ud1b5\uacc4\uc801\uc73c\ub85c \uc758\ubbf8\uac00 \uc788\ub294\uc9c0\ub97c \uc54c\uc544\ubcfc\ub54c \uc0ac\uc6a9\ub429\ub2c8\ub2e4.T-test\uc5d0\ub294 \ub2e4\uc74c\uacfc \uac19\uc774 \uc138 \uc885\ub958\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n\n1-sample T-test\n2-sample T-test\npaired T-test \n\n\uc5ec\uae30\uc11c\ub294 \uac04\ub2e8\ud55c \uac00\uc124 \uac80\uc815 \ubc29\ubc95\uc73c\ub85c scipy\uc758 scipy.stats \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud574, 1-sample, 2-sample T-test\ub97c \ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\uac01\uac01\uc758 T-test\ub294 \uc0ac\uc6a9\ub418\ub294 \uacbd\uc6b0\uac00 \ub2e4\ub974\uae30\uc5d0 \uc8fc\uc758 \ud574\uc57c \ud569\ub2c8\ub2e4.\n\n1-sample T-test\u00b6\ud558\ub098\uc758 \uc9d1\ub2e8\uc758 \ud3c9\uade0\uc774 \ud2b9\uc815 \uae30\uc900\ubcf4\ub2e4 \uc720\uc758\ubbf8\ud558\uac8c \ub2e4\ub978\uc9c0 \ub97c \uc54c\uc544\ubcf4\ub294 \ubd84\uc11d \ubc29\ubc95\uc785\ub2c8\ub2e4.\nStudent T-test\uc774\ub77c\uace0\ub3c4 \ud558\ub294 1-sample T-test \ub97c \uc0ac\uc6a9\ud558\ub824\uba74 scipy.stats.ttest_1samp() \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uba74 \ub429\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \nfrom scipy import stats\n\n\n    \n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \n## Student\u2019s t-test: the simplest statistical test\nstats.ttest_1samp(df['VIQ'], 0) \n# VIQ\uc758 \ud3c9\uade0\uac12\uc774 0\uacfc \ud1b5\uacc4\uc801\uc73c\ub85c \uc720\uc758\ubbf8\ud558\uac8c \ub2e4\ub978\uc9c0 \uc54c\uc544 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\nTtest_1sampResult(statistic=30.088099970849328, pvalue=1.3289196468728067e-28)\n\n\n\n\n\n\n\n\n\n\n\n\uac04\ub2e8\ud558\uac8c \uacb0\ub860\ub9cc \ub9d0\ud558\uc790\uba74, p-value\uac00 \uc544\uc8fc \ub0ae\uc74c(10\uc758 -28\uc81c\uacf1) \uc73c\ub85c VIQ\uc758 \ud3c9\uade0\uc740 0\uc774 \uc544\ub2c8\ub77c\uace0 \ub9d0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n2-sample t-test\u00b6\uc11c\ub85c \ub2e4\ub978 \ub450\uac1c\uc758 \uadf8\ub8f9 \uac04 \ud3c9\uade0\uc758 \ucc28\uc774\uac00 \uc720\uc758\ubbf8 \ud55c\uc9c0 \uc5ec\ubd80\ub97c \ud310\ub2e8\ud558\uae30 \uc704\ud574 \uc2dc\ud589\ud569\ub2c8\ub2e4. 2-sample t-test \ub294 scipy.stats.ttest_ind(): \ud568\uc218\ub97c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\uc608\ub97c \ub4e4\uc5b4 \uc5ec\uc790\uc758 VIQ\uc640 \ub0a8\uc790\uc758 VIQ\uc758 \ud3c9\uade0\uc740 \ud1b5\uacc4\uc801\uc73c\ub85c \ucc28\uc774\uac00 \uc788\ub294\uc9c0 \uc54c\uc544 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \n# \uc5ec\uc790\uc758 VIQ\nfemale_viq = df[df['Gender'] == 'Female']['VIQ']\n# \ub0a8\uc790\uc758 VIQ\nmale_viq = df[df['Gender'] == 'Male']['VIQ']\n# \ub450\uac1c\uc758 \ub9ac\uc2a4\ud2b8\ub97c \uac00\uc9c0\uace0 t-test\uc2e4\ud589\nstats.ttest_ind(female_viq, male_viq) \n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\nTtest_indResult(statistic=-0.77261617232750113, pvalue=0.44452876778583217)\n\n\n\n\n\n\n\n\n\n\n\np-value\uac00 0.44\ub85c \uc544\uc8fc \ub192\uac8c \ub098\uc654\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uae30\ubb34\uac00\uc124\uc774\uc5c8\ub358 \ub0a8\uc790\uc640 \uc5ec\uc790\uc758 VIQ \ud3c9\uade0\uc5d0\ub294 \ucc28\uc774\uac00 \uc788\ub2e4. \ub294 \uae30\uac01\ub418\uace0 \ucc28\uc774\uac00 \uc5c6\ub2e4 \ub77c\uace0 \uacb0\ub860\uc744 \ub0bc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nPaired tests:\u00b6Paired t-test\ub294 \ub3d9\uc77c\ud55c \uc9d1\ub2e8\uc5d0\uc11c\uc758 \ubc18\ubcf5\uc801\uc778 \uce21\uc815\uc5d0 \uc758\ud55c \ucc28\uc774\ub97c \ube44\uad50\ud558\uae30 \uc704\ud574 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74 \ucee4\ud53c\uac00 \uc218\uba74\uc2dc\uac04\uc5d0 \ubbf8\uce58\ub294 \uc601\ud5a5\uc744 \ubcf4\uae30 \uc704\ud574 \ucee4\ud53c\ub97c \ub9c8\uc2dc\uc9c0 \uc54a\uace0 \uce21\uc815\ud558\uace0 \ucee4\ud53c\ub97c \ub9c8\uc2dc\uace0 \uce21\uc815\ud55c \ub370\uc774\ud130\ub97c \uc218\uc9d1\ud558\uc5ec \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\uc804\uc81c\uc870\uac74\uc744 \ucda9\uc871\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc2e4\ud5d8\uc774 \uae38\uc5b4\uc9c0\ub294 \ub2e8\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4\n\nbrain_size \ub370\uc774\ud130\uc758 T-test\u00b6\uc8fc\uc5b4\uc9c4 brain_size \ub370\uc774\ud130\uc5d0\uc11c 3\uac00\uc9c0 IQ\uc218\uce58 PIQ, VIQ, FSIQ\uac00 \uc81c\uacf5 \ub418\uace0 \uc788\ub294\ub370, FSIQ \ud3c9\uade0 \uac12\uacfc PIQ \ud3c9\uade0\uc774 \ud1b5\uacc4\uc801\uc73c\ub85c \ucc28\uc774\uac00 \uc788\ub294\uc9c0 \uc54c\uc544 \ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574\uc11c 2-sample T-test\ub97c \uc218\ud589\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\uba3c\uc800, \uc804\uccb4\uc801\uc778 \ub370\uc774\ud130\uc758 \ubaa8\uc2b5\uc744 \uc54c\uae30 \uc704\ud55c boxplot\uc744 \uadf8\ub824\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[9]:\n\n    \n# Box plots of different columns for each gender\ngroupby_gender = df.groupby('Gender')\ngroupby_gender.boxplot(column=['FSIQ', 'VIQ', 'PIQ'])\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[9]:\n\n\n\n\n\nFemale         AxesSubplot(0.1,0.15;0.363636x0.75)\nMale      AxesSubplot(0.536364,0.15;0.363636x0.75)\ndtype: object\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[10]:\n\n    \n# 2-sample t-test\nstats.ttest_ind(df['FSIQ'], df['PIQ'])\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[10]:\n\n\n\n\n\nTtest_indResult(statistic=0.46563759638096403, pvalue=0.64277250094148408)\n\n\n\n\n\n\n\n\n\n\n\nT-test \uacb0\uacfc p-value\uac00 0.64\ub85c \ub9e4\uc6b0 \ub192\uae30 \ub54c\ubb38\uc5d0 \uae30\ubb34\uac00\uc124\uc744 \uae30\uac01\ud558\uc9c0 \ubabb\ud569\ub2c8\ub2e4. \ub530\ub77c\uc11c, FSIQ\uc640 PIQ\uac12\uc5d0 \ud1b5\uacc4\uc801\uc73c\ub85c \uc720\uc758\uc801\uc778 \ucc28\uc774\ub294 \uc5c6\ub2e4\uace0 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc5ec\uae30\uc11c \ud55c\uac00\uc9c0 \ubb38\uc81c \uc810\uc774 \uc788\ub294\ub370, \uac01\uac01\uc758 FSIQ\uc640 PIQ\uac12\uc740 \uac19\uc740 \uac1c\uc778\uc5d0\uc11c \uce21\uc815\ub418\uc5c8\uae30 \ub54c\ubb38\uc5d0, paried T-test \uc73c\ub85c \ucd94\uac00\uc801\uc778 \ud655\uc778\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[11]:\n\n    \nstats.ttest_rel(df['FSIQ'], df['PIQ'])  \n# This is equivalent to a 1-sample test on the difference:\n# stats.ttest_1samp(df['FSIQ'] - df['PIQ'], 0) \n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[11]:\n\n\n\n\n\nTtest_relResult(statistic=1.7842019405859857, pvalue=0.082172638183642358)\n\n\n\n\n\n\n\n\n\n\n\nPaired T-test\uacb0\uacfc\uc5d0\uc11c\ub3c4 p-value \uac12\uc774 0.05 \uc774\uc0c1\uc784\uc73c\ub85c \ud1b5\uacc4\uc801\uc73c\ub85c \uc720\uc758\ubbf8\ud55c \ucc28\uc774\uac00 \uc5c6\ub2e4\uace0 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc131\ubcc4\uacfc VIQ \uc218\uce58\uc758 \uad00\uacc4\u00b6\ub0a8\uc131\uacfc \uc5ec\uc131\uc774 VIQ \ucc28\uc774\uac00 \uc788\ub294\uc9c0\ub97c \ud310\ub2e8\ud558\uae30 \uc704\ud574\uc11c\ub294 \ub1cc\uc758 \ud06c\uae30, \ud0a4, \ubab8\ubb34\uac8c\uc5d0 \uc758\ud55c \uc601\ud5a5\uc744 \ubc30\uc81c\ud574\uc57c \ud569\ub2c8\ub2e4. \uc774\ub97c \uc704\ud574\uc11c\ub294 statsmodels \ub77c\uc774\ube0c\ub7ec\ub9ac\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 ols(ordinary least squares)\ubaa8\ub378\uc744 \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uadf8\ub7f0 \ub2e4\uc74c F-test\uc744 \ud1b5\ud574 \ud1b5\uacc4\uc801 \uc720\uc758\uc131\uc744 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\nF-test\u00b6F-test\ub294 \ub450 \ud45c\ubcf8\uc758 \ubd84\uc0b0\uc5d0 \ub300\ud55c \ucc28\uc774\uac00 \ud1b5\uacc4\uc801\uc73c\ub85c \uc720\uc758\ud55c\uac00\ub97c \ud310\ubcc4\ud558\ub294 \uac80\uc815\uae30\ubc95\uc785\ub2c8\ub2e4. \ub2e4\ub978 \uc774\ub984\uc73c\ub85c var-test\ub85c\ub3c4 \ubd88\ub9bd\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \nfrom statsmodels.formula.api import ols\n\nmodel = ols('VIQ ~ Gender + MRI_Count + Height', df).fit()\nprint(model.summary())\nprint(model.f_test([0, 1, 0, 0]))\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n                            OLS Regression Results                            \n==============================================================================\nDep. Variable:                    VIQ   R-squared:                       0.246\nModel:                            OLS   Adj. R-squared:                  0.181\nMethod:                 Least Squares   F-statistic:                     3.809\nDate:                Thu, 21 Dec 2017   Prob (F-statistic):             0.0184\nTime:                        15:34:54   Log-Likelihood:                -172.34\nNo. Observations:                  39   AIC:                             352.7\nDf Residuals:                      35   BIC:                             359.3\nDf Model:                           3                                         \nCovariance Type:            nonrobust                                         \n==================================================================================\n                     coef    std err          t      P>|t|      [0.025      0.975]\n----------------------------------------------------------------------------------\nIntercept        166.6258     88.824      1.876      0.069     -13.696     346.948\nGender[T.Male]     8.8524     10.710      0.827      0.414     -12.890      30.595\nMRI_Count          0.0002   6.46e-05      2.615      0.013    3.78e-05       0.000\nHeight            -3.0837      1.276     -2.417      0.021      -5.674      -0.494\n==============================================================================\nOmnibus:                        7.373   Durbin-Watson:                   2.109\nProb(Omnibus):                  0.025   Jarque-Bera (JB):                2.252\nSkew:                           0.005   Prob(JB):                        0.324\nKurtosis:                       1.823   Cond. No.                     2.40e+07\n==============================================================================\n\nWarnings:\n[1] Standard Errors assume that the covariance matrix of the errors is correctly specified.\n[2] The condition number is large, 2.4e+07. This might indicate that there are\nstrong multicollinearity or other numerical problems.\n<F test: F=array([[ 0.68319608]]), p=0.4140878441244722, df_denom=35, df_num=1>\n\n\n\n\n\n\n\n\n\n\n\nF test \uacb0\uacfc, p-value \uac00 0.41\ub85c \uc544\uc8fc \ub192\uac8c \ub098\uc654\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uae30\ubb34\uac00\uc124\uc744 \uae30\uac01\ud558\uc9c0 \ubabb\ud569\ub2c8\ub2e4. \ub2e4\uc2dc \ub9d0\ud574 \uc131\ubcc4\uc5d0 \uc758\ud55c VIQ \ucc28\uc774\ub294 \uc5c6\ub2e4 \ub77c\uace0 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc2dc\uac01\ud654\u00b6\uc2dc\uac01\ud654\ub97c \ud558\uba74 \ud1b5\uacc4\ubd84\uc11d\uc5d0 \uc0ac\uc6a9\ub41c \ubcc0\uc218\uac04\uc758 \uc0c1\uad00\uad00\uacc4\ub97c \uc190\uc27d\uac8c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798 \ucf54\ub4dc\ub294 scatter_matrix\ub97c \uadf8\ub9ac\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[17]:\n\n    \n# This plotting is useful to get an intuitions on the relationships between\n# our different variables\n\n# Fill in the missing values for Height for plotting\ndf['Height'].fillna(method='pad', inplace=True)\n\n# The parameter 'c' is passed to plt.scatter and will control the color\n# The same holds for parameters 'marker', 'alpha' and 'cmap', that\n# control respectively the type of marker used, their transparency and\n# the colormap\nscatter_matrix(df[['VIQ', 'MRI_Count', 'Height']],\n                        c=(df['Gender'] == 'Female'), marker='o',\n                        alpha=0.7)\n\nfig = plt.gcf()\nfig.suptitle(\"purple: male, yellow: female\", size=13)\n\nplt.show()\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uacb0\ub860\u00b6\uc2dc\uac01\ud654\uc640 F-test \uacb0\uacfc\ub97c \ud1b5\ud574 \uc131\ubcc4\uc740 VIQ\uac12\uc5d0 \uc544\ubb34\ub7f0 \uc0c1\uad00\uad00\uacc4\ub97c \uac00\uc9c0\uace0 \uc788\uc9c0 \uc54a\ub2e4\ub294 \uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc5c8\uc2b5\ub2c8\ub2e4.",
      "tags": "ANOVA,statistics,t-test",
      "url": "https://partrita.github.io/posts/statistics-in-python/"
    },
    {
      "title": "\uba74\uc5ed\uc6d0\uc131(Immunogenicity) \uc608\uce21\ud558\uae30",
      "text": "1. \uba74\uc5ed\uc6d0\uc131(Immunogenicity) \uc608\uce21\u00b6\uace0\ubd84\uc790 \ubb3c\uc9c8(\uc608\ub97c \ub4e4\uba74 \ub2e8\ubc31\uc9c8 \uc758\uc57d\ud488)\uc774 \uccb4\ub0b4\uc5d0 \ub4e4\uc5b4\uc654\uc744\ub54c \uba74\uc5ed\ubc18\uc751\uc744 \uc720\ubc1c\ud558\ub294 \uc131\uc9c8\uc744 \uba74\uc5ed\uc6d0\uc131 (immunogenicity)\uc774\ub77c \ud569\ub2c8\ub2e4. \uba74\uc5ed\uc6d0\uc131\uc740 \ub2e8\ubc31\uc9c8 \uc758\uc57d\ud488\uc758 \uc57d\ud6a8\ubfd0\ub9cc \uc544\ub2c8\ub77c \ud658\uc790\uc758 \uc5d0\ub3c4 \ubb38\uc81c\ub97c \uc77c\uc73c\ud0ac\uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc7ac\uc870\ud569 \ub2e8\ubc31\uc9c8\uc774\ub098 \ud56d\uccb4\uc640 \uac19\uc740 \ub2e8\ubc31\uc9c8 \uc758\uc57d\ud488 \uac1c\ubc1c \uc2dc \uba74\uc5ed\uc6d0\uc131\uc744 \uc0ac\uc804\uc5d0 \uc608\ubc29\ud558\uace0 \ucd5c\uc18c\ud654\ud558\ub294 \uac83\uc774 \ubc18\ub4dc\uc2dc \ud544\uc694\ud558\uc8e0.\nin silico \uae30\uc220\uc744 \ud65c\uc6a9\ud558\uc5ec \uae30\uc874\uc758 \uc54c\ub824\uc9c4 DB\ub97c \uac80\uc0c9\ud558\uc5ec \uba74\uc5ed\uc6d0\uc131\uc744 \uc608\uce21\ud558\ub294 \ubc29\ubc95\uc744 \uc54c\uc544 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n1.1. NetMHC 4.0 Server\u00b6MHC class I\uc5d0 \ubd99\ub294 \ud3a9\ud0c0\uc774\ub4dc\ub97c \uc608\uce21\ud574\uc8fc\ub294 \ud504\ub85c\uadf8\ub7a8\uc785\ub2c8\ub2e4. \ub2e4\uc74c\uc740 \ud648\ud398\uc774\uc9c0\uc758 \uc18c\uac1c \uae00\uc785\ub2c8\ub2e4.\nPrediction of peptide-MHC class I binding using artificial neural networks (ANNs). ANNs have been trained for 81 different Human MHC alleles including HLA-A, -B, -C and -E. Furthermore, predictions for 41 animal (Monkey, Cattle, Pig, and Mouse) alleles are available.\n\n\ub2e8\ubc31\uc9c8 \uc11c\uc5f4\ub9cc \ub123\uc5b4\uc8fc\uba74 \uc5b4\ub290 \ubd80\ubd84\uc774 MHC class I\uc5d0 \ubd99\uc744\uc9c0\ub97c \uacc4\uc0b0\ud574 \uc90d\ub2c8\ub2e4. \uad81\uadf9\uc801\uc73c\ub85c \uc774\uac83\uc744 \ud1b5\ud574 Immunogenicity\ub97c \uc608\uce21 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \n%matplotlib inline\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport pandas as pd\n\n\n    \n\n\n\n\n\n\n\n\ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubd88\ub7ec\uc624\uace0, NetMHC \uc11c\ubc84\uc5d0\uc11c \ub098\uc628 \uacb0\uacfc\ub97c \uc5d1\uc140\ud30c\uc77c\ub85c \ub2e4\uc6b4\ubc1b\uc544 \ub85c\uceec\uc5d0 \uc800\uc7a5\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \n# parse the excel file\nxls = pd.ExcelFile('G:\\prediction.xlsx') # \uc704\uce58\uc640 \ud30c\uc77c\uba85\uc740 \ubcc0\uacbd\ud574\uc8fc\uc138\uc694.\n\n# make dataframe from sheet\ndf_M113HC = xls.parse('M113 (HC)',index_col=0)\ndf_M113LC = xls.parse('M113 (LC)',index_col=0)\ndf_mAb2021HC = xls.parse('mAb2021 (HC)',index_col=0)\ndf_mAb2021LC = xls.parse('mAb2021 (LC)',index_col=0)\ndf_Bay_HC = xls.parse('Bay-B (HC)',index_col=0)\ndf_Bay_LC = xls.parse('Bay-B (LC)',index_col=0)\n\n\n    \n\n\n\n\n\n\n\n\uc5d1\uc140\ud30c\uc77c\uc744 pandas \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ud1b5\ud574 \uc77d\uc5b4\ub4e4\uc774\uace0, \uac01\uac01\uc758 \uc2dc\ud2b8\ub97c \uac01\uac01\uc758 \ub370\uc774\ud130\ud504\ub808\uc784\uc73c\ub85c \ub9cc\ub4e4\uc5c8\uc2b5\ub2c8\ub2e4. \uc798 \ub9cc\ub4e4\uc5b4 \uc84c\ub294\uc9c0 \ud558\ub098\uc758 \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \ud45c\uc2dc\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \ndf_M113HC.head() \n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n\n  \n    \n      \n      DRB1_0101\n      DRB1_0301\n      DRB1_0401\n      DRB1_0403\n      DRB1_0405\n      DRB1_0406\n      DRB1_0410\n      DRB1_0701\n      DRB1_0802\n      DRB1_0803\n      DRB1_0901\n      DRB1_1101\n      DRB1_1201\n      DRB1_1202\n      DRB1_1301\n      DRB1_1302\n      DRB1_1401\n      DRB1_1407\n      DRB1_1501\n      DRB1_1502\n    \n    \n      Peptide\n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n      \n    \n  \n  \n    \n      EVQLVESGGGLVKPG\n      311.99\n      8664.84\n      3989.47\n      6338.94\n      5373.34\n      6338.94\n      2634.71\n      1082.11\n      5368.11\n      1715.37\n      714.05\n      5425.98\n      1391.91\n      2083.95\n      685.17\n      758.31\n      4138.06\n      6196.80\n      1946.21\n      3408.39\n    \n    \n      VQLVESGGGLVKPGG\n      350.21\n      9685.61\n      5547.56\n      8448.85\n      7251.92\n      8448.85\n      3781.46\n      1250.97\n      6269.37\n      2049.98\n      829.42\n      6173.44\n      1778.93\n      2698.32\n      831.89\n      893.20\n      4808.39\n      6974.27\n      2254.98\n      3797.98\n    \n    \n      QLVESGGGLVKPGGS\n      744.61\n      12900.80\n      8900.20\n      12395.21\n      10933.17\n      12395.21\n      6455.01\n      2376.86\n      8643.02\n      3217.39\n      1483.77\n      8500.01\n      2978.00\n      4274.31\n      1517.35\n      1651.02\n      7602.71\n      9759.88\n      3819.41\n      5610.82\n    \n    \n      LVESGGGLVKPGGSL\n      2031.56\n      19704.16\n      13747.03\n      17624.09\n      16544.21\n      17624.09\n      12547.56\n      5857.65\n      9547.54\n      4827.00\n      3480.35\n      10593.37\n      5764.85\n      7177.91\n      4684.63\n      5097.43\n      13908.77\n      14562.81\n      7342.24\n      8169.02\n    \n    \n      VESGGGLVKPGGSLR\n      1573.87\n      8900.58\n      12312.74\n      17260.07\n      16667.82\n      17260.07\n      11976.50\n      5182.46\n      8052.22\n      2695.43\n      3503.55\n      5319.49\n      2526.99\n      3082.52\n      5448.22\n      6827.86\n      8645.83\n      12890.06\n      5489.64\n      7360.93\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\ndf_M113HC \ub370\uc774\ud130\ud504\ub808\uc784\uc744 \ubcf4\uba74 \uc778\ub371\uc2a4\ub85c\ub294 \ud3a9\ud0c0\uc774\ub4dc \uc11c\uc5f4\uc774 \uc788\uace0, \uac01\uac01\uc758 \uc5f4\uc740 alleles \ub97c \ub098\ud0c0\ub0c5\ub2c8\ub2e4. allele\uc5d0 \ub300\ud574\uc11c\ub294 \uc704\ud0a4\ud53c\ub514\uc544\ub97c \ucc38\uace0\ud558\uc138\uc694. \uc22b\uc790\ub294 \ud3a9\ud0c0\uc774\ub4dc\uac00 \ubd99\uc744 \ud655\ub960\uc744 \ub098\ud0c0\ub0c5\ub2c8\ub2e4. \uc22b\uc790\uac00 \ud06c\uba74 \uac00\ub2a5\uc131\uc774 \ud06c\uace0, \ub0ae\uc73c\uba74 \uc801\ub2e4\uace0 \ubcfc \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc6b0\ub9ac\uac00 \uc54c\uace0 \uc2f6\uc740 \uac83\uc740 \uac01\uac01\uc758 \uc544\ubbf8\ub178\uc0b0\uc73c\ub85c \uc720\ubc1c\ub418\ub294 \uba74\uc5ed\uc6d0\uc131\uc784\uc73c\ub85c Peptide\uc758 \uccab\ubc88\uc9f8 \uc544\ubbf8\ub178\uc0b0\ub9cc \ub0a8\uaca8\uc90d\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \ndef make_simple(df):\n    ''' \n    peptide\uc758 \ub9e8 \uc55e \uc544\ubbf8\ub178\uc0b0\ub9cc \ub0a8\uae30\uae30\n    '''\n    df2 = df.rename(index = lambda x : x[:1])\n    return df2\n\n\n    \n\n\n\n\n\n\n\n1.2. \uc2dc\uac01\ud654\ud558\uae30\u00b6\ub2e4\uc74c\uacfc \uac19\uc774 \ud788\ud2b8\ub9f5\uc744 \uadf8\ub9ac\ub294 \uae30\ub2a5\uc744 \ub9cc\ub4e4\uc5b4 \uc0ac\uc6a9\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \ndef drawing_plot(x):\n    '''\n    \uadf8\ub9bc \uadf8\ub9ac\uae30\n    '''\n    # \uadf8\ub9bc \uc0ac\uc774\uc988 \uc815\ud558\uae30\n    plt.figure(figsize=(100,5))\n    # \uceec\ub7ec\ub9f5\uacfc \ucd5c\ub300\uac12\uacfc \ucd5c\uc18c\uac12\uc744 \uc815\ud558\uae30\n    sns.heatmap(make_seq(x).T,cmap='Blues_r',square=True, vmax = 500, vmin = 50)\n    # \uadf8\ub9bc \uc800\uc7a5 \uc635\uc158\n    plt.savefig(str(x)+'.png',dpi=120, format='png')\n\n\n    \n\n\n\n\n\n\n\n\uc2e4\uc81c\ub85c\ub294 \uc544\ub798\uc640 \uac19\uc774 \ud558\ub4dc\ucf54\ub529\uc744 \ud1b5\ud574\uc11c \uc9c4\ud589\uc744 \ud574\ubc84\ub838\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[18]:\n\n    \n# \ud50c\ub86f \uadf8\ub9ac\uae30\nplt.figure(figsize=(100,5))\nsns.heatmap(make_simple(df_MG1113HC).T,cmap='Blues_r',square=True, vmax = 500, vmin = 50)\nplt.savefig('df_M113HC.png',dpi=120,format='png',bbox_inches='tight')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[17]:\n\n    \n# \ud50c\ub86f \uadf8\ub9ac\uae30\nplt.figure(figsize=(100,5))\nsns.heatmap(make_simple(df_MG1113LC).T,cmap='Blues_r',square=True, vmax = 500, vmin = 50)\nplt.savefig('df_M113LC.png',dpi=120,format='png',bbox_inches='tight')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[16]:\n\n    \n# \ud50c\ub86f \uadf8\ub9ac\uae30\nplt.figure(figsize=(100,5))\nsns.heatmap(make_simple(df_mAb2021HC).T,cmap='Blues_r',square=True, vmax = 500, vmin = 50)\nplt.savefig('df_mAb2021HC.png',dpi=120,format='png',bbox_inches='tight')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[15]:\n\n    \n# \ud50c\ub86f \uadf8\ub9ac\uae30\nplt.figure(figsize=(100,5))\nsns.heatmap(make_simple(df_mAb2021LC).T,cmap='Blues_r',square=True, vmax = 500, vmin = 50)\nplt.savefig('df_mAb2021LC.png',dpi=120,format='png',bbox_inches='tight')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[14]:\n\n    \n# \ud50c\ub86f \uadf8\ub9ac\uae30\nplt.figure(figsize=(100,5))\nsns.heatmap(make_simple(df_Bay_HC).T,cmap='Blues_r',square=True, vmax = 500, vmin = 50)\nplt.savefig('df_Bay_HC.png',dpi=120,format='png',bbox_inches='tight')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \n# \ud50c\ub86f \uadf8\ub9ac\uae30\nplt.figure(figsize=(100,5))\nsns.heatmap(make_simple(df_Bay_LC).T,cmap='Blues_r',square=True, vmax = 500, vmin = 50)\nplt.savefig('df_Bay_LC.png',dpi=120,format='png',bbox_inches='tight')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n2. \ub9c8\uce58\uba70\u00b6\ucd1d 6\uc885\ub958\uc758 \ub2e8\ubc31\uc9c8\uc5d0 \ub300\ud55c \uac01\uac01\uc758 \uba74\uc5ed\uc6d0\uc131\uc744 \ubd84\uc11d\ud588\uc2b5\ub2c8\ub2e4. allele\uc5d0 \ub530\ub77c \uba74\uc5ed\ubc18\uc751\uc774 \ub2e4\ub974\uc9c0\ub9cc \uc804\uccb4\uc801\uc73c\ub85c \ud30c\ub780\uc0c9\uc744 \ub744\ub294 \uc11c\uc5f4\uc744 \uc9c1\uad00\uc801\uc73c\ub85c \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ub9cc\uc57d \uc778\uc704\uc801\uc73c\ub85c \ub123\uc740 \uc11c\uc5f4\uc774 \ub9e4\uc6b0 \ud478\ub978\uc0c9\uc744 \ub748\ub2e4\uba74 \ud53c\ud558\ub294 \ud3b8\uc774 \uc88b\uc2b5\ub2c8\ub2e4.",
      "tags": "prediction",
      "url": "https://partrita.github.io/posts/netMHC/"
    },
    {
      "title": "Learn_Jupyter",
      "text": "\ub178\ud2b8\ubd81 \uc18c\uac1c\u00b6\uc6d0\ub798 ipython\ub294 \ud30c\uc774\uc36c\uc744 \uc704\ud55c \ud5a5\uc0c1\ub41c \ub300\ud654\ud615 \ucee4\ub9e8\ub4dc\ub77c\uc778 \ucf58\uc194\uc785\ub2c8\ub2e4. Jupyter notebook\uc740 \uadf8\uac83\uc5d0\uc11c \ubcf4\ub2e4 \ubc1c\uc804\ub41c \ud615\ud0dc\ub85c \ucf54\ub529\uacfc \ubb38\uc11c\ud654\ub97c \ub3d9\uc2dc\uc5d0 \ud574\uc11c \uc0dd\uc0b0\uc131\uc744 \uadf9\ub300\ud654 \ud558\ub294 \ub3c4\uad6c\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \nprint(\"Hello!\")\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\nHello!\n\n\n\n\n\n\n\n\n\n\n\n\ub9e4\uc9c1 \uba85\ub839\uc5b4(Magic commands)\u00b6\ud30c\uc77c \uc2dc\uc2a4\ud15c\uacfc \uc0c1\ud638\uc791\uc6a9\uc744 \ud560 \uc218 \uc788\ub294 \uba85\ub839\uc5b4\ub85c % \uae30\ud638\ub85c \uc2dc\uc791\ud569\ub2c8\ub2e4. \ud604\uc7ac \ub514\ub809\ud1a0\ub9ac \uc704\uce58\ub97c \ucd9c\ub825\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \n%pwd\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\n'/home/partrita/Documents/blog/partrita.github.io/posts'\n\n\n\n\n\n\n\n\n\n\n\n\ub354 \ub9ce\uc740 \ub9e4\uc9c1 \uba85\ub839\uc5b4\ub294 %lsmagic\uc73c\ub85c \ud655\uc778 \ud560 \uc218 \uc788\uace0, \uac01 \uba85\ub839\uc5b4\uc5d0 ?\ub97c \ucd94\uac00\ud558\uba74 \ucd94\uac00 \uc815\ubcf4\ub97c \ubcf4\uc5ec\uc90d\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \n%lsmagic\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\nAvailable line magics:\n%alias  %alias_magic  %autocall  %automagic  %autosave  %bookmark  %cat  %cd  %clear  %colors  %config  %connect_info  %cp  %debug  %dhist  %dirs  %doctest_mode  %ed  %edit  %env  %gui  %hist  %history  %killbgscripts  %ldir  %less  %lf  %lk  %ll  %load  %load_ext  %loadpy  %logoff  %logon  %logstart  %logstate  %logstop  %ls  %lsmagic  %lx  %macro  %magic  %man  %matplotlib  %mkdir  %more  %mv  %notebook  %page  %pastebin  %pdb  %pdef  %pdoc  %pfile  %pinfo  %pinfo2  %popd  %pprint  %precision  %profile  %prun  %psearch  %psource  %pushd  %pwd  %pycat  %pylab  %qtconsole  %quickref  %recall  %rehashx  %reload_ext  %rep  %rerun  %reset  %reset_selective  %rm  %rmdir  %run  %save  %sc  %set_env  %store  %sx  %system  %tb  %time  %timeit  %unalias  %unload_ext  %who  %who_ls  %whos  %xdel  %xmode\n\nAvailable cell magics:\n%%!  %%HTML  %%SVG  %%bash  %%capture  %%debug  %%file  %%html  %%javascript  %%js  %%latex  %%markdown  %%perl  %%prun  %%pypy  %%python  %%python2  %%python3  %%ruby  %%script  %%sh  %%svg  %%sx  %%system  %%time  %%timeit  %%writefile\n\nAutomagic is ON, % prefix IS NOT needed for line magics.\n\n\n\n\n\n\n\n\n\n\n\n\uc790\ub3d9\uc644\uc131 (Tab completion)\u00b6\uc790\ub3d9\uc644\uc131\uc740 \ubbff\uc744 \uc218 \uc5c6\uc744 \uc815\ub3c4\ub85c \uc544\uc8fc \uc720\uc6a9\ud55c \uae30\ub2a5\uc785\ub2c8\ub2e4. \ucf54\ub529\uc744 \ud558\uba74\uc11c \ubaa8\ub4e0 \uac83\uc744 \ud0c0\uc774\ud551\ud558\ub294\uac83\ubcf4\ub2e4 tab\ud0a4\ub97c \ub204\ub974\uba74 \uc54c\uc544\uc11c \uc644\uc131\ud574\uc8fc\ub294 \uae30\ub2a5\uc785\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\ub178\ud2b8\ubd81\uc5d0 \ub300\ud654\ud615 \uc704\uc82f \ub9cc\ub4e4\uae30\u00b6\ub178\ud2b8\ubd81\uc5d0\ub294 \uc704\uc82f\uc774\ub77c\ub294 \ub300\ud654\ud615 \uc694\uc18c\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4. \uae30\ubcf8\uc801\uc778 \uc608\uc81c\ub97c \uc0b4\ud3b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \nfrom IPython.display import YouTubeVideo\nYouTubeVideo('J9YpkSX7NNM') #\uc608\uc81c\ub85c \uc0ac\uc6a9\ub41c \uc601\uc0c1\uc740 \ud604\uc7ac \uc7ac\uc0dd\uc774 \ub418\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n        \n        \n\n\n\n\n\n\n\n\n\n\n\nMatplotlib \uacfc Seaborn\u00b6matplotlib\uc740 \ud30c\uc774\uc36c\uc758 \uc911\uc2ec \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. \uc0ac\uc6a9\ud558\uae30 \ubcf5\uc7a1\ud560 \uc218 \uc788\uc9c0\ub9cc \ud48d\ubd80\ud558\uace0 \uac15\ub825\ud55c \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\uc8e0. \ub2e4\ub9cc \uae30\ubcf8 \uc2a4\ud0c0\uc77c\uc774 \ucd0c\uc2a4\ub7fd\uac8c \ub290\uaef4\uc9c8\uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c seaborn\uc774 \ub9cc\ub4e4\uc5b4 \uc84c\uc8e0. seaborn\uc740 matplotlib \uae30\ubc18\uc73c\ub85c \uc0ac\uc6a9\ud558\uae30 \uc27d\uace0 \ud1b5\uacc4\uc801\uc778 \uc2dc\uac01\ud654\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n# \ud544\uc694\ud55c \ubaa8\ub4c8\uc744 \uc784\ud3ec\ud2b8\ud569\ub2c8\ub2e4.\nimport numpy as np\nimport matplotlib.pyplot as plt\nimport seaborn as sns\n%matplotlib inline\n\n\n    \n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \n# matplotlib \uc73c\ub85c \uc784\uc758\uc758 \uc2e0\ud638\ub97c \uc0dd\uc131\ud558\uace0 \uadf8\ub824\ubcf4\uc790\ny = np.random.randn(1000)\nplt.plot(y)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\n[<matplotlib.lines.Line2D at 0xa591048>]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \n# \uc218\ud559\ud568\uc218\ub97c \uadf8\ub798\ud504\ub85c \uadf8\ub824\ubcf4\uc790\nx = np.linspace(-10.0,10.0,1000)\ny = np.sin(3*x)*np.exp(-0.1, x**2)\nplt.plot(x,y)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n[<matplotlib.lines.Line2D at 0xb5f5d68>]\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \n# \uc0b0\uc810\ub3c4\ub97c \uadf8\ub824\ubcf4\uc790\nx = np.random.randn(100)\ny = x + np.random.randn(100)\nplt.scatter(x,y)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n<matplotlib.collections.PathCollection at 0xb66f4a8>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\nSeaborn  \uc2dc\uac01\ud654\u00b6seaborn\uc740 \uc0ac\uc6a9\ud558\uae30 \uc26c\uc6b4 \ubc1c\uc804\ub41c \uae30\ub2a5\uc744 \uc81c\uacf5 \ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \n# \uc608\uc81c\uc5d0 \uc0ac\uc6a9\ub420 \ub370\uc774\ud130\ub97c \uc77d\uc5b4\uc624\uc790\ndf = sns.load_dataset('iris')\ndf.head() # \ub370\uc774\ud130\uc758 \ubaa8\uc591\uc744 \ud655\uc778\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      sepal_length\n      sepal_width\n      petal_length\n      petal_width\n      species\n    \n  \n  \n    \n      0\n      5.1\n      3.5\n      1.4\n      0.2\n      setosa\n    \n    \n      1\n      4.9\n      3.0\n      1.4\n      0.2\n      setosa\n    \n    \n      2\n      4.7\n      3.2\n      1.3\n      0.2\n      setosa\n    \n    \n      3\n      4.6\n      3.1\n      1.5\n      0.2\n      setosa\n    \n    \n      4\n      5.0\n      3.6\n      1.4\n      0.2\n      setosa\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc0ac\uc6a9\ud55c \ub370\uc774\ud130\uc14b\uc740 \ubd93\uaf43(iris) \uc758 3\uac00\uc9c0 \uc885(setosa, versicolor, virginica)\uc5d0 \ub300\ud574 \uaf43\ubc1b\uce68(sepal)\uacfc \uaf43\uc78e(petal)\uc758 \ub113\uc774\uc640 \uae38\uc774\ub97c \uc815\ub9ac\ud55c \ub370\uc774\ud130\uc785\ub2c8\ub2e4.\n\n\uc704 \uadf8\ub9bc\uc744 \ucc38\uace0\ud558\uc2dc\uba74 \uc774\ud574\uac00 \ub418\uc2e4 \uac81\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \n# pair plot\uc744 \uadf8\ub824\ubcf8\ub2e4\nsns.pairplot(df, hue = 'species', size = 2.5)\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\n<seaborn.axisgrid.PairGrid at 0xb63eb70>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uac01\uac01\uc758 \ubd93\uaf43\uc885\uc5d0 \ub530\ub77c \uaf43\ubc1b\uce68(sepal)\uacfc \uaf43\uc78e(petal)\uc5d0 \uc5b4\ub5a0\ud55c \uc5f0\uad00\uc131\uc774 \uc788\ub294 \uc9c0 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uba74 \uaf43\uc78e\uc758 \uae38\uc774\uac00 \uae38\uba74 \ub113\uc774\ub3c4 \ub113\uc5b4\uc9c0\ub294\uac83\uc740 \ubaa8\ub4e0\uc885\uc5d0\uc11c \uc5f0\uad00\uad00\uacc4\uac00 \uc788\ub294 \uac83\uc744 \ubcfc\uc218 \uc788\uc2b5\ub2c8\ub2e4.",
      "tags": "development environment,jupyer,\uc8fc\ud53c\ud130 \ub178\ud2b8\ubd81",
      "url": "https://partrita.github.io/posts/learn_jupyter/"
    },
    {
      "title": "Ancestral reconstruction",
      "text": "Ancestral Reconstruction\u00b6Methods\u00b6\nUniprot\uc5d0\uc11c \ubaa9\uc801 \ub2e8\ubc31\uc9c8\uc744 \uac80\uc0c9\ud569\ub2c8\ub2e4.\nSequnce \uc815\ubcf4\ub97c \uc5bb\uae30 \uc704\ud574 BLAST! \ud558\uace0 \uacb0\uacfc\ub97c \uc11c\uc5f4\uc744 \ub2e4\uc6b4 \ubc1b\uc2b5\ub2c8\ub2e4.\nClustral Omega \uc5d0\uc11c MSA \uc2e4\ud589\ud569\ub2c8\ub2e4.\nhttp://fastml.tau.ac.il \uc5d0\uc11c \uc5c5\ub85c\ub4dc\ud574\uc11c \ubd84\uc11d \uc2dc\uc791\n\uacb0\uacfc \ud30c\uc77c\ub85c Ancestral reconstruction sequence\uc640 tree\ub97c \ub2e4\uc6b4\ub85c\ub4dc\ud569\ub2c8\ub2e4.\n\nResults\u00b6\n\n\n\n\n\nIn\u00a0[24]:\n\n    \nimport matplotlib\nimport matplotlib.pyplot as plt\nfrom Bio import Phylo\n\ndef plot_tree(treedata, x, y):\n    #handle = StringIO(treedata)  # parse the newick string\n    tree = Phylo.read(treedata, \"newick\")\n    tree.ladderize()\n    matplotlib.rc('font', size=7)\n    # set the size of the figure\n    fig = plt.figure(figsize=(x,y), dpi=100)\n    # alternatively\n    # fig.set_size_inches(10, 20)\n    axes = fig.add_subplot(1, 1, 1)\n    axes.axis('off')\n    Phylo.draw(tree, axes=axes)\n        #plt.savefig(output_file)\n    return\n\n\n    \n\n\n\n\n\n\nIn\u00a0[25]:\n\n    \n# Albumin phyrogenetic tree\nplot_tree('tree.newick.txt',8,3)\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uac01\uac01\uc758 \uacf5\ud1b5\uc870\uc0c1\uc758 \uc544\ubbf8\ub178\uc0b0 \uc11c\uc5f4\u00b6FASTA \ud3ec\uba67\uc73c\ub85c \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n>N1\nMKWVTLISLLFLFSSATSRNLQRFRRDAEAHKSEIAHRYNDLGEEHFKGLVLITFAQYLQKCPYEELAKLVKEVTDLAQACVADESAADCSKPLHTIFLDKICAVPKLRDTYGAMADCCAKADPERNECFLSHKDSQPDLVPPYQRPEPDVLCQAYQDNKESFLGHYIYEVARRHPFLYAPAILSFAQKFKAVLTECCEEADKGACLTTKLTALREKALIVSVKQRLSCGILQKFGDRVFQAWQLVRLSQKYPKAPFAEVSKLVTDLTKVHKECCHGDMLECMDDRADLTKHMCEHQDTISSKLKECCEKPIVERSHCIVELENDEMPADLPSLVEKFVEDKEVCKSFEEAKDVFLAEFLYEYSRRHPEFSVQLLLRIAKGYESTLEKCCETDNPHECYANAQDELNQLIKEPQDLVKQNCELLQKLGEYNFQNALLIRYTKKMPQVSTPTLVEISKSMTKVGSKCCKLPEAQRMPCAEGYLSVVINELCVLQETTPINENVTKCCSQSYANRRPCFTALGVDETYVPPEFNADTFTFHEDLCTLPEEERKIKKQTLLVNLVKHKPHVTEEQLKTIAGEFTAMVDKCCAAEDKEACFAEEGPKLIEQSKATLGLGA\n>N2\nMKWVTFISLLFLFSSAYSRGVQRFRRDAEAHKSEIAHRFNDLGEEHFKGLVLITFSQYLQKCPYEEHAKLVKEVTDLAKACVADESAANCDKSLHTIFGDKICAVPSLRDTYGDMADCCEKQEPERNECFLQHKDDKPDLVPPFARPEPDVLCKAFHDNEEAFLGHYLYEVARRHPYFYAPELLYYAQKYKAVLTECCEAADKGACLTPKLDALREKALISSAKQRLRCASLQKFGDRAFKAWALVRLSQKFPKADFAEISKLVTDLTKVHKECCHGDLLECADDRADLAKYMCEHQDTISSKLKECCDKPILEKSHCIAELENDEMPADLPALAEEFVEDKDVCKNYEEAKDVFLGKFLYEYSRRHPDYSVSLLLRLAKAYEATLEKCCATDDPHACYAKVLDEFKPLVEEPQNLVKQNCELFEKLGEYNFQNALLVRYTKKVPQVSTPTLVEISRSLGKVGSKCCKHPEAERMPCAEDYLSVVLNRLCVLHEKTPVSEKVTKCCSESLVNRRPCFSALGVDETYVPKEFNAETFTFHADICTLPETERKIKKQTALVELVKHKPHATEEQLKTVVGEFTALVDKCCAAEDKEACFAEEGPKLVESSKATLGLGA\n>N3\nMKWVTFISLLFLFSSAYSRGVQRFRRDAEAHKSEIAHRFNDLGEEHFKGLVLIAFSQYLQQCPFEEHVKLVNEVTEFAKTCVADESAANCDKSLHTLFGDKLCTVASLRETYGEMADCCEKQEPERNECFLQHKDDNPDLVPPLVRPEPDAMCTAFHDNEETFLGKYLYEVARRHPYFYAPELLYYAEKYKAVFTECCQAADKAACLTPKLDALREKVLASSAKQRLKCASLQKFGERAFKAWAVARLSQKFPKADFAEISKLVTDLTKVHKECCHGDLLECADDRADLAKYMCENQDSISSKLKECCDKPLLEKSHCIAEVENDEMPADLPALAADFVEDKDVCKNYQEAKDVFLGTFLYEYSRRHPDYSVSLLLRLAKAYEATLEKCCATDDPHACYAKVFDEFKPLVEEPQNLVKQNCELFEKLGEYGFQNALLVRYTKKVPQVSTPTLVEVSRSLGKVGSKCCKHPEAERMPCAEDYLSVVLNRLCVLHEKTPVSEKVTKCCTESLVNRRPCFSALEVDETYVPKEFNAETFTFHADICTLPETEKQIKKQTALVELVKHKPKATEEQLKTVMGDFAAFVDKCCAAEDKEACFAEEGPKLVASSQAALALGA\n>N4\nMKWVTFISLLFLFSSAYSRGVQRFRRDAEAHKSEIAHRFNDLGEEHFKGLVLIAFSQYLQQCPFEEHVKLVNEVTEFAKTCVADESAENCDKSLHTLFGDKLCTVATLRETYGEMADCCEKQEPERNECFLQHKDDNPNLVPPLVRPEPDAMCTAFHDNEETFLGKYLYEVARRHPYFYAPELLYYAEKYKAVFTECCQAADKAACLTPKLDALREKVLASSAKQRLKCASLQKFGERAFKAWAVARLSQKFPKADFAEVSKLVTDLTKVHKECCHGDLLECADDRADLAKYMCENQDSISSKLKECCDKPLLEKSHCIAEVENDEMPADLPALAADFVEDKDVCKNYAEAKDVFLGTFLYEYSRRHPDYSVSLLLRLAKAYEATLEKCCATADPHACYAKVFDEFKPLVEEPQNLVKQNCELFEKLGEYGFQNALLVRYTKKVPQVSTPTLVEVSRSLGKVGSKCCKHPEAERMPCAEDYLSVVLNRLCVLHEKTPVSEKVTKCCTESLVNRRPCFSALEVDETYVPKEFNAETFTFHADICTLPEKEKQIKKQTALVELVKHKPKATEEQLKTVMGDFAAFVDKCCKAEDKEACFAEEGPKLVASSQAALALGA\n>N5\nMKWVTFISLLFLFSSAYSRGVQRFRRDAEAHKSEIAHRFNDLGEKHFKGLVLIAFSQYLQQCPFEEHVKLVNEVTEFAKTCVADESAENCDKSLHTLFGDKLCTVATLRETYGEMADCCEKQEPERNECFLQHKDDNPNLVPPLVRPEPDAMCTAFQENPETFLGKYLYEVARRHPYFYAPELLYYAEKYKAVFTECCQAADKAACLTPKLDALKEKVLVSSAKQRLKCSSLQKFGERAFKAWAVARLSQKFPKADFAEVSKLVTDLTKVHKECCHGDLLECADDRADLAKYMCENQDSISSKLKACCDKPLLQKSHCIAEVENDDMPADLPALAADFVEDKDVCKNYAEAKDVFLGTFLYEYSRRHPDYSVSLLLRLAKTYEATLEKCCAEADPHACYATVFDEFKPLVEEPQNLVKQNCELFEKLGEYGFQNALLVRYTKKAPQVSTPTLVEVSRSLGKVGSKCCKLPEAERLPCAEDYLSVVLNRLCVLHEKTPVSEKVTKCCTESLVERRPCFSALEVDETYVPKEFKAETFTFHADICTLPEKEKQIKKQTALAELVKHKPKATEEQLKTVMGDFAAFVDKCCKAEDKEACFAEEGPKLVASSQAALALGA\n>N6\nMKWVTFLLLLFVSGSAFSRGVQRFRRDAEAHKSEIAHRYKDLGEKHFKGLVLIAFSQYLQKCPYEEHVKLVQEVTDFAKTCVADESAENCDKSLHTLFGDKLCAIPNLRENYGEMADCCAKQEPERNECFLQHKDDNPNLVPPFQRPEPDAMCTAFQENPETFMGHYLHEVARRHPYFYAPELLYYAEKYNAVLTECCAAADKAACLTPKLDALKEKALVSAVRQRLKCSSMQKFGERAFKAWAVARMSQTFPNADFAEITKLATDLTKVNKECCHGDLLECADDRAELAKYMCENQASISSKLQACCDKPLLQKSHCLAEVEHDDMPADLPALAADFVEDKDVCKNYAEAKDVFLGTFLYEYSRRHPDYSVSLLLRLAKKYEATLEKCCAEADPHACYGTVFDEFKPLVEEPQNLVKTNCELYEKLGEYGFQNAVLVRYTKKAPQVSTPTLVEAARSLGRVGTKCCTLPEAQRLPCVEDYLSAILNRVCVLHEKTPVSEKVTKCCSGSLVERRPCFSALTVDETYVPKEFKAETFTFHADICTLPEKEKQIKKQTALAELVKHKPKATEEQLKTVMGDFAEFVDKCCKAEDKEACFSTEGPKLVARSQEALALGA\n>N7\nMKWVTFLLLLFVSGSAFSRGVQRFRREAEAHKSEIAHRYKDLGEQHFKGLVLIAFSQYLQKCPYEEHVKLVQEVTDFAKTCVADESAENCDKSLHTLFGDKLCAIPNLRENYGELADCCAKQEPERNECFLQHKDDNPNLVPPFQRPEAEAMCTSFQENPTTFMGHYLHEVARRHPYFYAPELLYYAEKYNEVLTQCCAEADKAACLTPKLDAVKEKALVSAVRQRMKCSSMQKFGERAFKAWAVARMSQTFPNADFAEITKLATDLTKVNKECCHGDLLECADDRAELAKYMCENQATISSKLQACCDKPLLQKSHCLAEVEHDNMPADLPAIAADFVEDKEVCKNYAEAKDVFLGTFLYEYSRRHPDYSVSLLLRLAKKYEATLEKCCAEADPPACYGTVLAEFQPLVEEPKNLVKTNCELYEKLGEYGFQNAVLVRYTQKAPQVSTPTLVEAARNLGRVGTKCCTLPEAQRLPCVEDYLSAILNRVCVLHEKTPVSEKVTKCCSGSLVERRPCFSALTVDETYVPKEFKAETFTFHSDICTLPEKEKQIKKQTALAELVKHKPKATEEQLKTVMGDFAQFVDKCCKAADKDTCFSTEGPNLVARSKEALALGA\n>N8\nMKWVTFISLLFLFSSAYSRGVQRFRRDAEAHKSEVAHRFKDLGEEHFKGLVLIAFSQYLQQCPFEEHVKLVNEVTEFAKTCVADESAENCDKSLHTLFGDKLCTVATLRETYGEMADCCAKQEPERNECFLQHKDDNPNLVPPLVRPEVDVMCTAFHDNEETFLKKYLYEVARRHPYFYAPELLFFAARYKAAFTECCQAADKAACLLPKLDELRDEGKASSAKQRLKCASLQKFGERAFKAWAVARLSQKFPKAEFAEVSKLVTDLTKVHTECCHGDLLECADDRADLAKYMCENQDSISSKLKECCDKPLLEKSHCIAEVENDEMPADLPSLAADFVESKDVCKNYAEAKDVFLGMFLYEYARRHPDYSVVLLLRLAKAYEATLEKCCAAADPHECYAKVFDEFKPLVEEPQNLVKQNCELFEQLGEYKFQNALLVRYTKKVPQVSTPTLVEVSRNLGKVGSKCCKHPEAKRMPCAEDYLSVVLNRLCVLHEKTPVSEKVTKCCTESLVNRRPCFSALEVDETYVPKEFNAETFTFHADICTLSEKEKQIKKQTALVELVKHKPKATKEQLKTVMDDFAAFVEKCCKADDKEACFAEEGPKLVAASQAALALGA\n>N9\nMKWVTFISLLFLFSSAYSRGVQRFRRDAEAHKSEVAHRFKDLGEENFKALVLIAFAQYLQQCPFEDHVKLVNEVTEFAKTCVADESAENCDKSLHTLFGDKLCTVATLRETYGEMADCCAKQEPERNECFLQHKDDNPNLVPRLVRPEVDVMCTAFHDNEETFLKKYLYEIARRHPYFYAPELLFFAKRYKAAFTECCQAADKAACLLPKLDELRDEGKASSAKQRLKCASLQKFGERAFKAWAVARLSQRFPKAEFAEVSKLVTDLTKVHTECCHGDLLECADDRADLAKYICENQDSISSKLKECCEKPLLEKSHCIAEVENDEMPADLPSLAADFVESKDVCKNYAEAKDVFLGMFLYEYARRHPDYSVVLLLRLAKTYETTLEKCCAAADPHECYAKVFDEFKPLVEEPQNLIKQNCELFEQLGEYKFQNALLVRYTKKVPQVSTPTLVEVSRNLGKVGSKCCKHPEAKRMPCAEDYLSVVLNQLCVLHEKTPVSERVTKCCTESLVNRRPCFSALEVDETYVPKEFNAETFTFHADICTLSEKERQIKKQTALVELVKHKPKATKEQLKTVMDDFAAFVEKCCKADDKETCFAEEGKKLVAASQAALGLGA\n>N10\nMKWVTFISLLFLFSSAYSRGVQRFRRDAEAHKSEIAHRFNDLGEEHFKGLVLIAFSQYLQQCPFEEHVKLVNEVTEFAKTCVADESAANCDKSLHTLFGDKLCTVASLRETYGDMADCCEKQEPERNECFLQHKDDNPDLVPPLVRPEPDAMCTAFHDNEQRFLGKYLYEIARRHPYFYAPELLYYAEKYKGVFTECCQAADKAACLTPKIDALREKVLASSAKQRLKCASLQKFGERAFKAWSVARLSQKFPKAEFAEISKLVTDLTKVHKECCHGDLLECADDRADLAKYMCENQDSISSKLKECCDKPLLEKSHCIAEVEKDEMPADLPPLAADFVEDKDVCKNYQEAKDVFLGTFLYEYSRRHPEYSVSLLLRLAKEYEATLEKCCATDDPHACYAKVFDEFKPLVEEPQNLVKQNCELFEKLGEYGFQNALLVRYTKKVPQVSTPTLVEVSRSLGKVGSKCCKHPEAERMPCAEDYLSVVLNRLCVLHEKTPVSEKVTKCCTESLVNRRPCFSALEVDETYVPKEFNAETFTFHADICTLPETEKQIKKQTALVELLKHKPKATEEQLKTVMGDFAAFVDKCCAAEDKEACFAEEGPKLVASSQAALALGA\n>N11\nMKWVTFISLLFLFSSAYSRGVQRVRREAEAHKSEIAHRFNDLGEEHFRGLVLVAFSQYLQQCPFEDHVKLVNEVTEFAKACVADESAANCDKSLHTLFGDKLCTVASLRDKYGDMADCCEKQEPERNECFLQHKDDNPGFVPPLVTPEPDAMCTAFHDNEQRFLGKYLYEIARRHPYFYAPELLYYAEKYKGVFTECCQAADKAACLTPKIDALREKVLASSAKERLKCASLQKFGERAFKAWSVARLSQKFPKAEFAEISKLVTDLTKVHKECCHGDLLECADDRADLAKYMCENQDSISTKLKECCDKPVLEKSHCIAEVERDELPADLPPLAADFVEDKEVCKNYQEAKDVFLGTFLYEYSRRHPEYSVSLLLRLAKEYEATLEKCCATDDPPACYAKVFDEFKPLVEEPQNLVKTNCELFEKLGEYGFQNALLVRYTKKVPQVSTPTLVEVSRSLGKVGSKCCKHPEAERMSCAEDYLSVVLNRLCVLHEKTPVSERVTKCCTESLVNRRPCFSALEVDETYVPKEFNAETFTFHADLCTLPEAEKQIKKQTALVELLKHKPKATEEQLKTVMGDFGAFVDKCCAAEDKEACFAEEGPKLVAAAQAALALGA",
      "tags": "Bioinformatics,Python",
      "url": "https://partrita.github.io/posts/Ancestral-reconstruction/"
    },
    {
      "title": "Nikola for jupyer blog",
      "text": "\uba87 \ub144\uc804\ubd80\ud130 Jupyter notebook\uc791\uc131\ud55c \uac83\uc744 \uc5b8\uc820\uac00\ub294 \ube14\ub85c\uadf8\uc5d0 \uc62c\ub824\uc57c\uc9c0 \ub77c\ub294 \uc0dd\uac01\uc740 \ud558\uace0 \uc788\uc5c8\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uae30\uc874\uc5d0 \uac00\uc9c0\uace0 \uc788\ub358 \uc6cc\ub4dc\ud504\ub808\uc2a4 \ube14\ub85c\uadf8\uc5d0\ub294 \ud3b8\uc9d1\uc744 \ud574\uc11c \uc62c\ub824\uc57c \ud588\uae30\uc5d0 \ub108\ubb34\ub098\ub3c4 \uadc0\ucc2e\uc558\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub2e4\uac00 \ucd5c\uadfc\uc5d0 Nikola\ub77c\ub294 \ud234\uc744 \uc54c\uac8c \ub418\uba74\uc11c \ub2e4\uc2dc \ube14\ub85c\uae45\uc744 \ud558\uac8c \ub418\uc5c8\uc2b5\ub2c8\ub2e4. Nikola\ub294 \uac04\ub2e8\ud558\uac8c \ub9d0\ud574\uc11c HTML \ud398\uc774\uc9c0\ub97c \uc790\ub3d9\uc73c\ub85c \ub9cc\ub4e4\uc5b4 \uc90d\ub2c8\ub2e4. \uc81c\uac00 \ud560\uc77c\uc740 Jupyter notebook\uc744 \uc791\uc131\ud558\uae30\ub9cc \ud558\uba74 \ub418\ub294\uac70\uc8e0.\n0. \ud658\uacbd \uc124\uc815\u00b6\uba3c\uc800, Anaconda\uac00 \uc774\ubbf8 \uc124\uce58 \ub418\uc5b4\uc788\ub2e4\uace0 \uac00\uc815\ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc124\uce58\ub418\uc5b4 \uc788\uc9c0 \uc54a\ub2e4\uba74 \uac80\uc0c9\uc744 \ud1b5\ud574 \uc124\uce58\ud574\uc8fc\uc138\uc694.\n\uac00\uc0c1\ud658\uacbd \ub9cc\ub4e4\uace0 \uc2e4\ud589\ud558\uae30\u00b6nikola_blog\ub77c\ub294 \uc774\ub984\uc758 \uac00\uc0c1\ud658\uacbd\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\nconda create -n nikola_blog python=3\n\n\uc774\ub984\uc740 \uc6d0\ud558\ub294\uac83\uc73c\ub85c \uc218\uc815\ud558\uc2dc\uba74 \ub418\uace0, \ud30c\uc774\uc36c3\ub97c \uad8c\uc7a5\ud569\ub2c8\ub2e4.\n\n\ud130\ubbf8\ub110\uc5d0 \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uba74 \uba87\uac00\uc9c0 \ud328\ud0a4\uc9c0\ub97c \uc124\uce58 \ud560 \uac83\uc778\uc9c0 \ubb3c\uc5b4\ubcf4\uace0, \ubaa8\ub450 Yes\ud574\uc8fc\uc2dc\uba74 \ub429\ub2c8\ub2e4.\nsource activate nikola_blog\npip install nikola[extras]\n\n\uac00\uc0c1\ud658\uacbd\uc744 \uc2e4\ud589\ud558\uace0, nikola\ub97c \uc124\uce58 \ud569\ub2c8\ub2e4.\n1. \ube14\ub85c\uadf8 \ub9cc\ub4e4\uae30\u00b6Nikola\uac00 \uc124\uce58\uac00 \ub418\uc5c8\ub2e4\uba74 \uc774\uc81c \ube14\ub85c\uadf8\ub97c \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc6d0\ud558\ub294 \ud3f4\ub354\uc5d0\uc11c \ud130\ubbf8\ub110\uc744 \uc5f4\uace0 \uc544\ub798\uc758 \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uc138\uc694.\nnikola init\n\n\uc5ec\ub7ec\uac00\uc9c0 \uc9c8\ubb38\ub4e4\uc774 \ub098\uc624\uba74\uc11c \uc0ac\uc774\ud2b8\uc758 \uc774\ub984, \uc800\uc790, \uc124\uba85\uacfc URL\uc744 \ubb3c\uc5b4\ubd05\ub2c8\ub2e4. \ub098\uc911\uc5d0 \ubaa8\ub450 conf.py \ud30c\uc77c\uc5d0\uc11c \uc218\uc815\uc774 \uac00\ub2a5\ud558\ub2c8\uae4c \ub108\ubb34 \uace0\ubbfc\ud558\uc9c0\ub9d0\uace0 \ub118\uc5b4\uac00\uc8fc\uc138\uc694.\n\uc9c8\ubb38\uc774 \ub05d\ub098\uba74 \ud3f4\ub354\uc548\uc5d0 \uc5ec\ub7ec \ud30c\uc77c\uacfc \ub2e4\ub978 \ud3f4\ub354\uac00 \uc0dd\uae34\uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nJupyter notebook \ud655\uc7a5\uc790 \ucd94\uac00\ud558\uae30\u00b6Nikola\uac00 Jupyter notebook\uc744 \ucc98\ub9ac\ud558\uae30 \uc704\ud574\uc11c\ub294 \ud655\uc7a5\uc790\ub97c \ucd94\uac00\ud574 \uc918\uc57c\ud569\ub2c8\ub2e4.\n\ud3f4\ub354\uc548\uc758 conf.py \ud30c\uc77c\uc744 \uc5f4\uc5b4\uc11c \uc544\ub798\uc640 \ube44\uc2b7\ud55c \ucf54\ub4dc\ub97c \ucc3e\uace0 \ub2e4\uc74c\uacfc \uac19\uc774 (\"pages/*.ipynb\", \"\", \"story.tmpl\"), \ub97c \ucd94\uac00\ud569\ub2c8\ub2e4.\nPOSTS = (\n    (\"posts/*.ipynb\", \"blog\", \"post.tmpl\"),\n    (\"posts/*.md\", \"blog\", \"post.tmpl\"),\n    (\"posts/*.rst\", \"blog\", \"post.tmpl\"),\n    (\"posts/*.txt\", \"blog\", \"post.tmpl\"),\n)\nPAGES = (\n    (\"pages/*.md\", \"\", \"story.tmpl\"),\n    (\"pages/*.ipynb\", \"\", \"story.tmpl\"),\n    (\"pages/*.rst\", \"\", \"story.tmpl\"),\n    (\"pages/*.txt\", \"\", \"story.tmpl\"),\n)\n\n2. \uc0c8 \ud3ec\uc2a4\ud2b8 \uc791\uc131\ud558\uae30\u00b6\uc774\uc81c \uc0c8\ub85c\uc6b4 \ud3ec\uc2a4\ud2b8\ub97c \uc791\uc131\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc774 \ud130\ubbf8\ub110\uc5d0 \uc785\ub825\uc744 \ud558\uc138\uc694.\nnikola new_post -f ipynb\n\n\uc81c\ubaa9\uc744 \ubb3c\uc5b4\ubcf4\uace0\ub294 \uc54c\uc544\uc11c \uc0c8 Jupyter notebook\uc744 \ub9cc\ub4e4\uc5b4\uc90d\ub2c8\ub2e4. \ud3f4\ub354\uc5d0 \uc0c8\ub85c\uc6b4 \ud30c\uc77c\uc774 \uc0dd\uc131\ub41c\uac83\uc744 \ud655\uc778\ud558\uc168\ub2e4\uba74, \ubaa8\ub4e0 \uc900\ube44\uac00 \ub418\uc5c8\uc2b5\ub2c8\ub2e4.\n3. \ube14\ub85c\uadf8 \uc2e4\ud589\ud558\uae30\u00b6\ud130\ubbf8\ub110\uc5d0\uc11c \uc544\ub798 \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\uace0 \uc6f9\ube0c\ub77c\uc6b0\uc800\uc5d0\uc11c localhost:8000\uc5d0 \uc811\uc18d\ud558\uc138\uc694.\nnikola auto\n\n\ube14\ub85c\uadf8 \uc0dd\uc131\ub41c\uac83\uc744 \ud655\uc778 \ud558\uc168\ub098\uc694?\n4. Github page\uc5d0 \uc62c\ub9ac\uae30\u00b6git \uc2dc\uc791\ud558\uae30\u00b6\uae43\ud5c8\ube0c(Github)\ub294 \ub108\ubb34\ub098\ub3c4 \uc720\uba85\ud558\uae30 \ub54c\ubb38\uc5d0 \ub530\ub85c \uc124\uba85\ub4dc\ub9ac\uc9c0\ub294 \uc54a\uc744\uac8c\uc694. \ube14\ub85c\uadf8\ub97c \uc778\ud130\ub137\uc5d0 \uc62c\ub9ac\uae30 \uc704\ud574\uc11c \uae43\ud5c8\ube0c\uc5d0\uc11c \uc81c\uacf5\ud558\ub294 \uc11c\ube44\uc2a4\ub97c \uc774\uc6a9\ud560 \uac70\uc5d0\uc694. \uae43(git)\uc744 \uc5b4\ub290\uc815\ub3c4 \uc774\ud574\ud55c\ub2e4\ub294 \uc804\uc81c\ud558\uc5d0 \uac04\ub7b5\ud558\uac8c \uc124\uba85\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\uba3c\uc800 \uae43\ud5c8\ube0c\uc5d0\uc11c \uc0c8\ub85c\uc6b4 \uc800\uc7a5\uc18c(repository)\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4. \uc774\ub54c \uc774\ub984\uc740 USERNAME.github.io\ub85c \ud558\uc138\uc694. USERNAME\uc740 \ubcf8\uc778\uc758 ID\uc785\ub2c8\ub2e4.\n\uc0c8\ub85c\uc6b4 \uc800\uc7a5\uc18c\uac00 \uc0dd\uc131 \ub418\uba74 \uc544\ub798\uc640 \uac19\uc774 \ud130\ubbf8\ub110\uc5d0 \uc785\ub825\ud558\uc138\uc694.git init\ngit add *\ngit commit -am \"Initial commit\"\ngit remote add origin https://github.com/USERNAME/UsERNAME.github.io.git\ngit push origin -u\n\n\n\ub9cc\uc57d push \uc624\ub958\uac00 \ubc1c\uc0dd\ud55c\ub2e4\uba74 \uc0c8\ub85c\uc6b4 \ud30c\uc77c\uc744 \ub2e4\uc74c\uacfc \uac19\uc774 \uc791\uc131\ud558\uace0 \ub2e4\uc2dc push \ud558\uc138\uc694touch readme.md\n\n\uae43\ud5c8\ube0c\uc5d0 \uc811\uc18d\ud574\ubcf4\uba74 \ud30c\uc77c\ub4e4\uc774 \uc815\uc0c1\uc801\uc73c\ub85c \uc5c5\ub85c\ub4dc \ub418\uc5b4\uc788\ub294\uac83\uc744 \ud655\uc778 \ud558\uc2e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ube14\ub85c\uae45\ud558\uae30\u00b6\uc774\uc81c \ubaa8\ub4e0 \ub2e8\uacc4\uac00 \ub05d\ub0ac\uc2b5\ub2c8\ub2e4. \ub85c\uceec\uc5d0 \uc788\ub294 \ube14\ub85c\uadf8 \ud3f4\ub354\uc5d0\uc11c \uc791\uc5c5\uc744 \ud558\uace0 github\uc5d0 \uc62c\ub9ac\uae30\ub9cc \ud558\uba74 \ub418\ub294 \uac83\uc774\uc9c0\uc694. Nikola\uc5d0\uc11c \ubcf4\ub2e4 \ud3b8\ud558\uac8c \ud3ec\uc2a4\ud305\ud560 \uc218 \uc788\ub3c4\ub85d \uc544\ub798\uc758 \uba85\ub839\uc5b4\ub97c \uc9c0\uc6d0\ud569\ub2c8\ub2e4.\nnikola github_deploy\n\n\uae43\ud5c8\ube0c\uc5d0 \ud478\uc26c\ud558\uace0 \ube0c\ub79c\uce58\ub97c \ub098\ub204\ub294 \uc791\uc5c5\ub3c4 \uc54c\uc544\uc11c \ud574\uc8fc\ub294 \uac15\ub825\ud55c \uae30\ub2a5\uc785\ub2c8\ub2e4. \ubcc0\uacbd\uc0ac\ud56d\uc774 \uc801\uc6a9\ub418\ub294\ub370\ub294 \uba87\ubd84\uc774 \uac78\ub9ac\uc9c0\ub9cc \uc774\uc81c, http://USERNAME.github.io \uc5d0 \uc811\uc18d\ud558\uba74 \ube14\ub85c\uadf8\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc744 \uac81\ub2c8\ub2e4.\n\n\n\n\n\n\n\n5. Pipenv \uc0ac\uc6a9\ud558\uae30\u00b6Pipenv\ub294 pip\uc640 virtualenv\uc758 \ubd88\ud3b8\ud568\uc744 \ud574\uacb0\ud558\uae30 \uc704\ud55c \ud234\uc785\ub2c8\ub2e4. Python.org\uc5d0\uc11c \uacf5\uc2dd\uc801\uc73c\ub85c \uad8c\uc7a5\ud558\ub294 \ud328\ud0a4\uc9c0 \uc124\uce58 \ud234\uc774\uae30\ub3c4 \ud558\uc8e0. \ud2b9\uc9d5\uc740 \uc544\ub798\uc640 \uac19\uc2b5\ub2c8\ub2e4.\n\npip\uc640 virtualenv\ub97c \ub530\ub85c \uc4f8 \ud544\uc694\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\nrequirements.txt\ub97c \ub300\uc2e0\ud574 pipfile\uc640 pipfile.lock\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\ud574\uc26c\uac00 \uc790\ub3d9\uc0dd\uc131\ub418\uc5b4 \ubcf4\uc548\uc774 \uac15\ud654\ub429\ub2c8\ub2e4.\n\ud328\ud0a4\uc9c0\ub4e4\uc758 \uc758\uc874\uc131 \uadf8\ub798\ud504\ub97c \uadf8\ub824\ubcfc\uc218 \uc788\uc2b5\ub2c8\ub2e4. \n\ub2e4\ub9cc \uc18d\ub3c4\ub294 \ub290\ub9b0\ud3b8\uc774\uc8e0.\n\n5.1. \uc124\uce58\u00b6pip install pipenv\n\n5.2. \uc2e4\ud589\u00b6pipenv\ub97c \uc0ac\uc6a9\ud558\uace0 \uc2f6\uc740 \ud3f4\ub354\uc5d0 \ub4e4\uc5b4\uac00\uc11c \uc544\ub798\uc758 \uba85\ub839\uc5b4\ub97c \uc2e4\ud589\ud569\ub2c8\ub2e4.\npipenv install\n\n\uadf8\ub7ec\uba74 \uc790\ub3d9\uc73c\ub85c pipfile, pipfile.lock\ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\uc774\uc81c \uac00\uc0c1\ud658\uacbd\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n5.3. \uac00\uc0c1\ud658\uacbd \uc2e4\ud589\u00b6pipenv shell\n\n5.4. \ud328\ud0a4\uc9c0 \uc124\uce58\u00b6pipenv install nikola\n\n5.5. Pipenv\uc774 \ub9e4\ub825\uc801\uc778 \uc810\u00b6\uae43\ud5c8\ube0c(github)\uc5d0 pipfile, pipfile.lock \ud30c\uc77c\ub9cc \ucee4\ubc0b\ud558\uba74 \uc0c8\ub85c\uc6b4 \uc7a5\uc18c\uc5d0\uc11c \uc190\uc27d\uac8c \uac00\uc0c1\ud658\uacbd\uc744 \uc124\uc815\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc640 \uac19\uc774 \ub9d0\uc774\uc8e0.\ngit clone [https://github.com/pypa/pipenv.git] # pull\ud558\uace0 \uc2f6\uc740 \uc800\uc7a5\uc18c\npipenv install",
      "tags": "",
      "url": "https://partrita.github.io/posts/nikola-for-jupyer-blog/"
    },
    {
      "title": "\ud658\uacbd\uc124\uc815(Environment_setup)",
      "text": "1. \ud30c\uc774\uc36c \uc124\uce58\u00b6\ud30c\uc774\uc36c\uc740 \uc544\uc8fc \uc778\uae30\uc788\ub294 \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\ub85c, \uc6f9 \uc0ac\uc774\ud2b8\ub294 \ubb3c\ub860 \uac8c\uc784, \uacfc\ud559\uc6a9 \uc18c\ud504\ud2b8\uc6e8\uc5b4, \uadf8\ub798\ud53d \uc18c\ud504\ud2b8\uc6e8\uc5b4 \ub4f1 \ub2e4\uc591\ud55c \uac83\uc744 \ub9cc\ub4e4 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc740 1980\ub144\ub300 \ud6c4\ubc18\uc5d0 \uadc0\ub3c4 \ubc18 \ub85c\uc378 \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\ub97c \uae30\uacc4 \ubfd0\ub9cc \uc544\ub2c8\ub77c \uc778\uac04\ub3c4 \uc77d\uc744 \uc218 \uc788\ub3c4\ub85d \ub9cc\ub4e4\uace0\uc790 \ud0c4\uc0dd\ud55c \uc5b8\uc5b4\uc785\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc774 \ub2e4\ub978 \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\ubcf4\ub2e4 \ud6e8\uc52c \uac04\ub2e8\ud558\uac8c \ubcf4\uc774\uace0, \ubc30\uc6b0\uae30\ub3c4 \uc26c\uc6b4 \uc774\uc720\ub3c4 \uadf8 \ub54c\ubb38\uc774\uc8e0. \uc774\ub97c \ubc14\ud0d5\uc73c\ub85c \uacfc\uac70 15\ub144 \ub3d9\uc548 numpy,scipy,matplotlib,jupyter \uac19\uc774 \ub110\ub9ac \uc0ac\uc6a9\ub418\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uac1c\ubc1c\ub418\uc5b4\uc788\uc2b5\ub2c8\ub2e4. \n\ud30c\uc774\uc36c\uc740 \uc0ac\uc6a9\uc911\uc778 OS\uc758 \uc885\ub958\uc5d0 \ub530\ub77c\uc11c \uc124\uce58\ubc29\ubc95\uc774 \ub2e4\ub985\ub2c8\ub2e4.\nWindows\u00b6\n\uc0ac\uc6a9 \uc911\uc778 \ucef4\ud4e8\ud130 \uc708\ub3c4\uc6b0 \uc6b4\uc601\uccb4\uc81c\uac00 32\ube44\ud2b8\uc778\uc9c0 64\ube44\ud2b8\uc778\uc9c0 \ud655\uc778\ud558\uc138\uc694.\n\uacf5\uc2dd \uc6f9\uc0ac\uc774\ud2b8\uc5d0\uc11c \ub2e4\uc6b4\ub85c\ub4dc \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \n64 \ube44\ud2b8 \ubc84\uc804\uc758 Windows\uc778 \uacbd\uc6b0 Windows x86-64 executable installer\ub97c \ub2e4\uc6b4\ub85c\ub4dc\ud558\uc138\uc694.\n32 \ube44\ud2b8 \ubc84\uc804\uc740 Windows x86 executable installer\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\uc138\uc694.\n\n\n\uc124\uce58 \ud504\ub85c\uadf8\ub7a8\uc744 \ub2e4\uc6b4\ub85c\ub4dc \ud55c \ud6c4\uc5d0 \uc2e4\ud589(\ub354\ube14 \ud074\ub9ad)\ud558\uace0 \uc9c0\uc2dc \uc0ac\ud56d\uc744 \ub530\ub974\uc138\uc694.\n\nOSX\u00b6\uc6f9 \uc0ac\uc774\ud2b8\ub85c \uac00\uc11c \ud30c\uc774\uc36c \uc124\uce58 \ud30c\uc77c\uc744 \ub2e4\uc6b4 \ubc1b\uc73c\uc138\uc694.\nLinux\u00b6\uc774\ubbf8 \ud30c\uc774\uc36c\uc774 \uc124\uce58\ub418\uc5c8\uc744 \uac81\ub2c8\ub2e4. \uc124\uce58\ub41c \ubc84\uc804\uc744 \ud655\uc778\ud558\ub824\uba74 \ucf58\uc194\uc744 \uc5f4\uace0 \ub2e4\uc74c \uba85\ub839\uc744 \uc785\ub825\ud558\uc138\uc694.\n$ python3 --version\n\n\ud558\uc9c0\ub9cc \uc704\uc758 \ubc29\ubc95\ubcf4\ub2e4\ub294 \uc800\ub294 Anaconda\ub97c \uc0ac\uc6a9\ud558\ub294\uac83\uc744 \ucd94\ucc9c\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\n\n2. Anaconda \uc124\uce58\u00b6\ud30c\uc774\uc36c \uae30\ubc18\uc758 \ub370\uc774\ud130 \ubd84\uc11d\uc5d0 \ud2b9\ud654\ub41c \uac01\uc885 OpenSource \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \ubaa8\uc544\ub193\uc740 \uac1c\ubc1c \ud50c\ub7ab\ud3fc\uc785\ub2c8\ub2e4. \ubb34\uc5c7\ubcf4\ub2e4\ub3c4 Panda, Numpy, Numba, Scipy, IPython, GPGPU, \uacfc\ud559, \uc218\ud559, \ub370\uc774\ud130 \ubd84\uc11d\ub4f1\uacfc \uad00\ub828\ub41c \uc218\ub9ce\uc740 \ub77c\uc774\ube0c\ub7ec\ub9ac \ud55c\ubc88\uc5d0 \uadf8\ub9ac\uace0 \uc758\uc874\uc131(dependency)\ubb38\uc81c \uc5c6\uc774 \uc124\uce58 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c conda\ub77c\ub294 \uad00\ub9ac \ub77c\uc774\ube0c\ub7ec\ub9ac \ub9e4\ub2c8\uc800\uac00 \uc788\uc5b4\uc11c \ud3b8\ub9ac \ud569\ub2c8\ub2e4.Anaconda \ud648\ud398\uc774\uc9c0\nAnaconda\u00b6\uacf5\uc2dd \ud648\ud398\uc774\uc9c0\uc5d0\uc11c OS\uc5d0 \ub9de\ub294 \ud30c\uc77c\uc744 \ub2e4\uc6b4\ubc1b\uc544 \"Next\"\ub9cc \ub204\ub974\uba74 \ud574\uacb0\ub418\ubbc0\ub85c \ubcc4\ub3c4\uc758 \uc124\uba85\uc740 \uc11c\uc220\ud558\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\nMiniconda\u00b6Anaconda\uc5d0\uc11c \ub77c\uc774\ube0c\ub7ec\ub9ac \uad00\ub9ac \uba54\ub2c8\uc800\uc778 conda\ub9cc\uc744 \uc124\uce58 \ud558\uace0 \uc2f6\ub2e4\uba74 miniconda\ub97c \ub2e4\uc6b4\ubc1b\uc544 \uc124\uce58 \ud558\uba74 \ub429\ub2c8\ub2e4.\n\uac1c\uc778\uc801\uc73c\ub85c Miniconda\ub97c \ucd94\ucc9c\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\n3. Conda \uba85\ub839\uc5b4 \uc0ac\uc6a9\ubc95\u00b6conda\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \uad00\ub9ac\ub97c \uc704\ud574 \uc81c\uacf5\ub418\ub294 \uc560\ud50c\ub9ac\ucf00\uc774\uc158\uc785\ub2c8\ub2e4. \ud30c\uc774\uc36c \uc0dd\ud0dc\uacc4\uc758 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub294 \uc11c\ub85c\uc5d0 \ub300\ud574 \uc544\ubb34 \ub9ce\uc774 \uc758\uc874\uc801\uc774\uae30 \ub54c\ubb38\uc5d0 \uac01\uac01\uc758 \ubc84\uc804\uc774 \ub108\ubb34 \ub9ce\uc740 \ubb38\uc81c\uac00 \ubc1c\uc0dd\ud558\uae30\ub3c4 \ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc conda\ub97c \uc0ac\uc6a9\ud558\uba74 \uc774 \ubaa8\ub4e0 \uace0\ubbfc\uc744 \uc2e0\uacbd\uc4f0\uc9c0 \uc54a\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub2e4\uc2dc \ub9d0\ud574, conda\ub294 \ud30c\uc774\uc36c \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \uad50\ud1b5\uc815\ub9ac\ub97c \ud574\uc90d\ub2c8\ub2e4.\nconda \uc678\uc5d0\ub3c4 virtualenv\uc744 \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc8fc\uc694\uae30\ub2a5\u00b6conda\ub294 \uc790\ub3d9\uc73c\ub85c \uc758\uc874\uc131\uc744 \ud574\uacb0\ud574 \uc90d\ub2c8\ub2e4. \uc790\uc8fc \uc0ac\uc6a9\ud558\ub294 conda \uba85\ub839\uc5b4\ub294 \uae30\uc5b5\ud574 \ub450\uc138\uc694.\nnumpy\ub97c \uae30\uc900\uc73c\ub85c \uc124\uba85\ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\uae30\ub2a5\n\uba85\ub839\uc5b4\n\n\n\n\n\ub77c\uc774\ube0c\ub7ec\ub9ac \uc124\uce58\nconda install numpy \n\n\n\ub3d9\uc2dc\uc5d0 \uc5ec\ub7ec \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc124\uce58\nconda install numpy scipy pandas\n\n\n\ud2b9\uc815 \ubc84\uc804 \uc124\uce58\nconda install numpy=1.10\n\n\n\ub77c\uc774\ube0c\ub7ec\ub9ac \uc81c\uac70\nconda remove numpy\n\n\n\ub77c\uc774\ube0c\ub7ec\ub9ac \uc5c5\ub370\uc774\ud2b8\nconda update numpy\n\n\n\ubaa8\ub4e0 \ub77c\uc774\ube0c\ub7ec\ub9ac \uc5c5\ub370\uc774\ud2b8\nconda update \u2013all\n\n\n\uc124\uce58\ub41c \ubaa9\ub85d \ucd9c\ub825\nconda list\n\n\n\uc124\uce58\ud558\ub824\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac \uac80\uc0c9\nconda search numpy\n\n\n\n\ucc3e\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 \uc5c6\ub2e4\uba74 pip\ub97c \uc0ac\uc6a9\ud574\ubcf4\uc138\uc694\n\n\uac00\uc0c1\ud658\uacbd \ub9cc\ub4e4\uae30\u00b6\ud30c\uc774\uc36c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc758 \uc758\uc874\uc131 \ubb38\uc81c\ub97c \ud53c\ud558\uae30 \uc704\ud574 \uc0c8\ub85c\uc6b4 \ud504\ub85c\uc81d\ud2b8\ub97c \uc2dc\uc791\ud560\ub54c\uba74 \uac00\uc0c1\ud658\uacbd\uc744 \ub9cc\ub4e4\uc5b4 \uc791\uc5c5\ud558\ub294\uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \uc5ec\uae30\uc11c\ub294 virtualenv \ub300\uc2e0\uc5d0 conda\ub97c \uc0ac\uc6a9\ud574\uc11c \uac04\ub2e8\ud788 \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\uc0c8\ub85c\uc6b4 \uac00\uc0c1\ud658\uacbd \uc774\ub984\uc740 ENV_NAME\n\uc0ac\uc6a9\ud560 Python \ubc84\uc804\uc740 3\uc774\uc0c1\uc73c\ub85c \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\ud130\ubbf8\ub110\uc5d0 \ub2e4\uc74c\uacfc \uac19\uc774 \uc785\ub825\ud558\uba74 \uc0c8\ub85c\uc6b4 \uac00\uc0c1\ud658\uacbd\uc774 \ub9cc\ub4e4\uc5b4 \uc9d1\ub2c8\ub2e4.conda create -n ENV_NAME python=3\n\n\n\uac00\uc0c1\ud658\uacbd\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 activate \uc2dc\ucf1c\uc918\uc57c \ud569\ub2c8\ub2e4. \ud65c\uc131\ud654\ub418\uba74 \ud130\ubbf8\ub110\uc5d0 (ENV_NAME)\uc774 \ud45c\uc2dc\ub429\ub2c8\ub2e4.source activate ENV_NAME\n\n\n\ud544\uc694\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub4e4\uc744 \uc124\uce58\ud569\ub2c8\ub2e4.conda install numpy pandas\n\n\n\n\uac00\uc0c1\ud658\uacbd \ud655\uc778 \ubc0f \uc81c\uac70\u00b6\uac00\uc0c1\ud658\uacbd\uc758 \ubaa9\ub85d\uc744 \ud655\uc778\ud558\ub824\uba74 \uc544\ub798\uc640 \uac19\uc774 \uc785\ub825\ud558\uc138\uc694.\nconda env list\n\n\uac00\uc0c1\ud658\uacbd\uc744 \uc0ad\uc81c\ud558\ub824\uba74 \uc544\ub798\uc640 \uac19\uc774 \uc785\ub825\ud558\uc138\uc694.\nconda env remove -n ENV_NAME\n\nConda \uc81c\uac70\ud558\uae30\u00b6Windows\u00b6\uc81c\uc5b4\ud310\uc5d0 \ub4e4\uc5b4\uac00\uc11c Python (Anaconda) \ud639\uc740 \u201cPython (Miniconda)\ub97c \uc81c\uac70\ud569\ub2c8\ub2e4.\nLinux, OSX\u00b6\ub514\ub809\ud1a0\ub9ac\ub9cc \uc0ad\uc81c\ud558\uba74 \ub429\ub2c8\ub2e4.\nrm -rf ~/miniconda\nrm -rf ~/anaconda\n\n\n\n\n\n\n\n\n4. \ucf54\ub4dc \uc5d0\ub514\ud130\u00b6\ucf54\ub4dc \uc5d0\ub514\ud130\ub294 \uc885\ub958\uac00 \ub9ce\uace0 \ub2e4\uc591\ud574 \uc790\uc2e0\uc758 \ucde8\ud5a5\uc5d0 \ub530\ub77c \uc120\ud0dd\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uac04\ub2e8\ud558\uc9c0\ub9cc \uac15\ub825\ud55c \uae30\ub2a5\uc744 \uac16\ucd98 \uc5d0\ub514\ud130 \ud504\ub85c\uadf8\ub7a8\uc744 \uc544\ub798\uc5d0 \ucd94\ucc9c\ud569\ub2c8\ub2e4.\nGedit\u00b6Gedit\ub294 \ubaa8\ub4e0 \uc6b4\uc601\uccb4\uc81c\uc5d0\uc11c \uc0ac\uc6a9 \uac00\ub2a5\ud55c \ubb34\ub8cc \uc624\ud508\uc18c\uc2a4\uc5d0\uc694.\nSublime Text 3\u00b6Sublime Text\ub294 \uac00\uc7a5 \ub110\ub9ac \uc54c\ub824\uc9c4 \ud504\ub85c\uadf8\ub7a8\uc73c\ub85c \uc0c1\uc6a9\ud504\ub85c\uadf8\ub7a8\uc774\uc9c0\ub9cc, \ubb34\ub8cc\ub85c \uc0ac\uc6a9\ud560 \uc218 \uc788\uace0 \uc18d\ub3c4\uac00 \ube68\ub77c\uc694. \n\ubb3c\ub860 \ubaa8\ub4e0 \uc6b4\uc601\uccb4\uc81c\uc5d0\uc11c \uc4f8 \uc218 \uc788\uc5b4\uc694.\nAtom\u00b6Atom\uc740 GitHub\uc5d0\uc11c \ub9cc\ub4e0 \ubb34\ub8cc\ub85c \uc81c\uacf5\ub418\ub294 \uc624\ud508\uc18c\uc2a4\uc774\uba70, \uc124\uce58\ub098 \uc0ac\uc6a9\uc774 \uc26c\uc6cc\uc694. \ubaa8\ub4e0 \uc6b4\uc601\uccb4\uc81c\uc5d0\uc11c \uc4f8 \uc218 \uc788\uc5b4\uc694.\nVScode\u00b6Microsoft\uc5d0\uc11c \ub9cc\ub4e0 \ubb34\ub8cc \uc5d0\ub514\ud130\uc5d0\uc694. \uc124\uce58\uc640 \uc0ac\uc6a9\uc774 \uc27d\uace0 \uc548\uc815\uc801\uc785\ub2c8\ub2e4.\n\uc65c \ucf54\ub4dc \uc5d0\ub514\ud130\ub97c \uc124\uce58\ud574\uc57c \ud558\ub098\uc694?\u00b6\uc6cc\ub4dc\ub098 \ub178\ud2b8\ud328\ub4dc\uac00 \uc788\ub294\ub370\ub3c4, \uad73\uc774 \ucf54\ub4dc \uc5d0\ub514\ud130 \uc18c\ud504\ud2b8\uc6e8\uc5b4\ub97c \uc124\uce58\ud574\uc57c \ud558\ub294 \uc774\uc720\uac00 \uad81\uae08\ud560 \uac70\uc5d0\uc694.\n\uccab \ubc88\uc9f8\ub85c \ucf54\ub4dc\ub294 \uc77c\ubc18 \ud14d\uc2a4\ud2b8\uc5ec\uc57c \ud558\ub294\ub370, \uc6cc\ub4dc\ub098 \ud14d\uc2a4\ud2b8\uc5d0\ub527(Textedit)\uacfc \uac19\uc740 \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c\ub294 \uc77c\ubc18 \ud14d\uc2a4\ud2b8\uac00 \uc544\ub2cc RTF(Rich Text Format)\uc640 \uac19\uc740 \uc0ac\uc6a9\uc790 \uc11c\uc2dd\uc744 \uc4f4 \ub9ac\uce58 \ud14d\uc2a4\ud2b8(\ud3f0\ud2b8\uc640 \uc11c\uc2dd\uc774 \uc788\ub294 \ud14d\uc2a4\ud2b8)\uac00 \uc0dd\uc131\ub418\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \n\ub450 \ubc88\uc9f8\ub294 \ucf54\ub4dc \uc5d0\ub514\ud130 \ud504\ub85c\uadf8\ub7a8\uc740 \uac1c\ubc1c\uc5d0 \uc720\uc6a9\ud55c \uc5ec\ub7ec \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \ub300\ud45c\uc801\uc778 \uc608\ub85c, \ucf54\ub4dc\ub97c \ud574\uc11d\ud574 \ubb38\ubc95\uc744 \ud558\uc774\ub77c\uc774\ud305\ud574\uc8fc\ub294 \uae30\ub2a5\uc774\ub77c\ub4e0\uac00 \ud070\ub530\uc634\ud45c(\"\")\ub97c \uc790\ub3d9\uc73c\ub85c \ub2eb\uc544\uc8fc\ub294 \uae30\ub2a5\uc774\uc9c0\uc694. \uc55e\uc73c\ub85c \ucf54\ub4dc \uc5d0\ub514\ud130\uac00 \uc5b4\ub5bb\uac8c \uc791\ub3d9\ud558\ub294\uc9c0 \uc54c\uc544\ubcfc \uac70\uc5d0\uc694. \uace7 \uc5ec\ub7ec\ubd84\uc740 \ub0b4\uac00 \uc0ac\uc6a9\ud558\ub294 \ucf54\ub4dc \uc5d0\ub514\ud130\ub97c \uc81c\uc77c \uc88b\uc544\ud558\uac8c \ub420 \uac70\ub78d\ub2c8\ub2e4.\n\n\n\n\n\n\n\n5. \ucd94\ucc9c \ub77c\uc774\ube0c\ub7ec\ub9ac\u00b6Biopython\u00b6\n\uc0dd\ubb3c\uc815\ubcf4 \ub370\uc774\ud130 \ubd84\uc11d\uc744 \ud558\ub2e4 \ubcf4\uba74 \uacf5\ud1b5\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 \uae30\ub2a5\ub4e4\uc774 \ub9ce\uc2b5\ub2c8\ub2e4. \uc608\ub97c \ub4e4\uc5b4\n\nNCBI\uc5d0\uc11c \ub9ce\uc740 \uc218\uc758 nucleotide \uc11c\uc5f4\uc744 ID\ub9cc \uac00\uc9c0\uace0 GenBank \ud615\uc2dd \ub610\ub294 FASTA \ud615\uc2dd\uc73c\ub85c \ub2e4\uc6b4 \ubc1b\ub294\ub2e4\ub4e0\uc9c0, \n\ub2e4\uc6b4\ub85c\ub4dc \ubc1b\uc740 \uc11c\uc5f4\ub4e4\uc744 protein \uc11c\uc5f4\ub85c translation\ud55c \ud6c4 multiple alignment\ub97c \uc218\ud589\ud558\uace0\uc790 \ud560 \uacbd\uc6b0 NCBI\uc5d0\uc11c \uc11c\uc5f4\uc744 \ub2e4\uc6b4\ub85c\ub4dc\ud558\uae30 \nGenBank \ud639\uc740 FASTA \ud3ec\ub9f7\uc758 \uc11c\uc5f4\uc744 \ud615\uc2dd\uc5d0 \ub9de\uac8c id, description, \uc11c\uc5f4 \ubd80\ubd84\uc744 \uad6c\ubd84\ud558\uc5ec \ub530\ub85c\ub530\ub85c \uc77d\uc5b4\ub4e4\uc774\ub294 \uae30\ub2a5, \uc77d\uc5b4\ub4e4\uc778 \uc11c\uc5f4\uc744 translation \ud558\ub294 \uae30\ub2a5 \uadf8\ub9ac\uace0 multiple alignment\ub97c \uc218\ud589\uc774 \uc788\uaca0\uc2b5\ub2c8\ub2e4.\n\n\uc774\ub807\uac8c Python\uc73c\ub85c \uc0dd\ubb3c\uc815\ubcf4 \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud558\uace0\uc790 \ud560 \ub54c \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 \ucf54\ub4dc\ub97c \ubaa8\uc544\ub454 \ub77c\uc774\ube0c\ub7ec\ub9ac\uac00 Biopython \uc785\ub2c8\ub2e4.1\n\uc124\uce58\ud558\uae30\u00b6\ub2e4\ub978 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc640 \ub9c8\ucc2c\uac00\uc9c0\ub85c pip install \ud639\uc740 conda install\ub85c \uc124\uce58\ud569\ub2c8\ub2e4.\nconda install biopython\n\n\uc0ac\uc6a9\ud558\uae30\u00b6from Bio.Seq import Seq\n\n#create a sequence object\nmy_seq = Seq('CATGTAGACTAG')\n\n#print out some details about it\nprint 'seq %s is %i bases long' % (my_seq, len(my_seq))\nprint 'reverse complement is %s' % my_seq.reverse_complement()\nprint 'protein translation is %s' % my_seq.translate()\n\nPandas\u00b6\n\ub370\uc774\ud130\ub85c \ud45c\ub97c \ub9cc\ub4e4\uace0 \ud3b8\uc9d1\ud558\ub294\uac83\uc744 \uc544\uc8fc \ud3b8\ub9ac\ud558\uac8c \ud574\uc8fc\ub294 \ud544\uc218 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4.\npandas \ub294 BSD \ub77c\uc774\uc13c\uc2a4\ub97c \ub530\ub974\ub294 \uc624\ud508 \uc18c\uc2a4\uc785\ub2c8\ub2e4. pandas\ub294 \ube60\ub974\uace0 \uc27d\uac8c \ub370\uc774\ud130\ub97c \ubd84\uc11d\ud558\ub294 \ub3c4\uad6c\ub85c \ud30c\uc774\uc36c\uc73c\ub85c \uc4f0\uc5ec\uc84c\uc2b5\ub2c8\ub2e4.\n\n\uc124\uce58\ud558\uae30\u00b6conda install pandas\n\n\uc0ac\uc6a9\ud558\uae30\u00b6import pandas as pd\n\nMatplotlib\u00b6\nMatplotlib\uc740 \ud30c\uc774\uc36c\uc758 \uc2dc\uac01\ud654 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. \ucd9c\ud310\uc6a9 \ud488\uc9c8\uc758 \uadf8\ub9bc\ubd80\ud130 \uc0c1\ud638\uc791\uc6a9 \uac00\ub2a5\ud55c \uc2dc\uac01\ud654\uae4c\uc9c0 \ub2e4\uc591\ud55c \ub3c4\uad6c\ub97c \uc81c\uacf5\ud569\ub2c8\ub2e4.\n\uc124\uce58\ud558\uae30\u00b6conda install matplotlib\n\n\uc0ac\uc6a9\ud558\uae30\u00b6import matplotlib.pyplot as plt",
      "tags": "setup",
      "url": "https://partrita.github.io/posts/setup/"
    },
    {
      "title": "matplotlib_tutorial",
      "text": "Matplotlib\u00b6Matplotlib\ub294 \ud30c\uc774\uc36c \uc790\ub8cc\ub97c \uc2dc\uac01\ud654(visulaization) \ud558\ub294 \ub77c\uc774\ube0c\ub7ec\ub9ac\uc785\ub2c8\ub2e4. MATLAB\uacfc \uc720\uc0ac\ud55c \uc778\ud130\ud398\uc774\uc2a4\ub85c \ubcf5\uc7a1\ud558\uc9c0\ub9cc \uac15\ub825\ud55c \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\uc8e0. \uc544\ub9c8\ub3c4 \ud30c\uc774\uc36c \ub77c\uc774\ube0c\ub7ec\ub9ac \uc911\uc5d0 \uac00\uc7a5 \uc720\uc6a9\ud558\uace0 \ub530\ub77c\uc11c \uac00\uc7a5 \uc720\uba85\ud569\ub2c8\ub2e4. Matplotlib\ub294 \ub9c9\ub300 \uadf8\ub798\ud504\ub098 \uc120 \uadf8\ub798\ud504 \uc774\uc678\uc5d0\ub3c4 \ub2e4\uc591\ud55c \uc2dc\uac01\ud654 \uae30\ub2a5\uc744 \uc81c\uacf5\ud569\ub2c8\ub2e4. \uc790\uc138\ud55c\uac74 Gallery\ub97c \ucc38\uace0 \ud558\uc138\uc694.\n\ud29c\ud1a0\ub9ac\uc5bc \uac00\uc774\ub4dc\n\uae30\ubcf8\uc801\uc778 \uc815\ubcf4\u00b6\uc0ac\uc6a9\ud558\uae30 \uc55e\uc11c, \ub2e4\uc74c \uadf8\ub9bc\uc744 \ud1b5\ud574 \uad6c\uc870\ub97c \uc54c\uc544 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\nMatplotlib\uac00 \uadf8\ub9ac\ub294 \uadf8\ub9bc\uc740 Figure, Axes, Axis\uc73c\ub85c \uc774\uc5b4\uc9c0\ub294 \uad6c\uc870\ub97c \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ub530\ub77c\uc11c \uc544\ub798\uc640 \uac19\uc740 \uc21c\uc11c\ub85c \uadf8\ub9bc\uc744 \uadf8\ub9ac\uac8c \ub429\ub2c8\ub2e4.\n\nFigure\ub97c \uba3c\uc800 \uc0dd\uc131\ud569\ub2c8\ub2e4.\nFigure\uc5d0 \uc6d0\ud558\ub294 \uac2f\uc218\uc758 Axes\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\n\uac01\uac01\uc758 Axes\uc5d0 \uadf8\ub798\ud504\ub97c \uadf8\ub9ac\uace0 label\uacfc title\uc744 \uc9c0\uc815\ud574 \uc90d\ub2c8\ub2e4.\n\n\uc608\ub97c \ub4e4\uc5b4\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[13]:\n\n    \n%matplotlib inline \nimport matplotlib.pyplot as plt\n\n# \uadf8\ub798\ud504\ub97c \uadf8\ub9b4 X, Y \uac12\uc744 \uc785\ub825\ud569\ub2c8\ub2e4.\nx = [1,2,3,4,5,6,7,8,9,10]\ny = [2,3,4,6,7,9,10,16,17,20]\n\nfig = plt.figure() # Figure\ub97c \uc0dd\uc131\ud569\ub2c8\ub2e4.\naxis1 = fig.add_subplot(2, 1, 1) \n# (2, 1, 1)\uc740 2x1(\ud589x\uc5f4)\uc758 subplot\uc744 \uc0dd\uc131\ud55c\ub2e4\ub294 \uc758\ubbf8\uc774\uace0\n# \uc138\ubc88\uc9f8 \uc778\uc790 1\uc740 \uc0dd\uc131\ub41c \ub450 \uac1c \uc911 \uccab \ubc88\uc9f8\ub97c \uc758\ubbf8\ud569\ub2c8\ub2e4.\naxis1.plot(x,y) # \uae30\ubcf8 \uadf8\ub798\ud504\ub294 \uc120\uadf8\ub798\ud504 \uc785\ub2c8\ub2e4.\n\naxis2 = fig.add_subplot(2, 1, 2)\naxis2.bar(x,y) # \ubc14 \uadf8\ub798\ud504\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[13]:\n\n\n\n\n\n<Container object of 10 artists>\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\uc2e4\ud5d8 \ub370\uc774\ud130\ub85c \uadf8\ub824\ubcf4\uae30\u00b6\uc2e4\uc81c \uc2e4\ud5d8\uc5d0\uc11c \uc5bb\uc740 \ub370\uc774\ud130\ub97c \uac00\uc9c0\uace0 \uc5d0\ub7ec\ubc14\uac00 \uc788\ub294 \uc120 \uadf8\ub798\ud504\ub97c \uadf8\ub824\ubcf4\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \uc774\ubbf8 \uac04\ub2e8\ud558\uac8c \ud3c9\uade0\uac12\uacfc \ud45c\uc900\ud3b8\ucc28\ub97c \uad6c\ud574 \ub193\uc740 \ub370\uc774\ud130\ub97c \uc0ac\uc6a9\ud588\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \n# Data to draw\nx = [0.083, 1, 2,4,8]\ny = [523.11, 62.32, 37.93, 24.85, 13.81]\nstd = [101.62, 22.61, 13.00, 4.64, 3.56]\n\nfig = plt.figure() # figure setting\nax = fig.add_subplot(1,1,1) # Get the figure and the axes\nax.errorbar(x, y, std, fmt = \"ro-\" ,capsize=2 ) # \uc5d0\ub7ec\ubc14\uac00 \uc788\ub294 \uc120 \uadf8\ub798\ud504\ub97c \uadf8\ub824\uc90d\ub2c8\ub2e4.\n\n# Label\uacfc Title\uc744 \uc815\ud574\uc90d\ub2c8\ub2e4.\nax.set(title='Pharmacokinetics ', xlabel='Hours', ylabel='Protein conc.')\n# Y\ucd95\uc744 log\ub85c \ubc14\uafb8\uc5b4 \uc90d\ub2c8\ub2e4. \nax.set_yscale('log')\n\n\n    \n\n\n\n\n\n\n\n\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ub9c8\uce58\uba70\u00b6\uc774\ub807\uac8c matplotlib\uc744 \uc0ac\uc6a9\ud558\uba74 \uac04\ub2e8\ud558\uac8c \uc2e4\ud5d8 \uacb0\uacfc\ub97c \uc2dc\uac01\ud654 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubb34\uc5c7\ubcf4\ub2e4\ub3c4 \uacf5\uc9dc\ub85c \ub9d0\uc774\uc8e0.",
      "tags": "matplotlib,Python,\uc2dc\uac01\ud654",
      "url": "https://partrita.github.io/posts/matplotlib-tutorial/"
    },
    {
      "title": "Pandas tutorial",
      "text": "Pandas \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc0ac\uc6a9\ud558\ub294 \ubc29\ubc95\uc744 \uc815\ub9ac\ud588\uc2b5\ub2c8\ub2e4.\npip install pandas numpy xlrd\n\n\ud544\uc694\ud55c \ubaa8\ub4c8\uc744 \ud130\ubbf8\ub110\uc5d0\uc11c \uc704\uc758 \uba85\ub839\uc5b4\ub85c \uba3c\uc800 \uc124\uce58\ud569\ub2c8\ub2e4.\n\npandas: raw Data\ub97c \ubd88\ub7ec\ub4e4\uc5ec \ud3b8\uc9d1\ud558\ub294\ub370 \uc0ac\uc6a9\nnumpy: pandas\uc758 aggfunc\uc73c\ub85c \ud3c9\uade0\uacfc \ubd84\uc0b0\uac12\uc744 \uad6c\ud558\ub294\ub370 \uc0ac\uc6a9 \nxlrd : excel \ud30c\uc77c\uc744 \uc77d\uc5b4\ub4e4\uc774\ub294\ub370 \ud544\uc694\n\n\ucd9c\ucc98 : pinkwink\n\n\n\n\n\n\n\nIn\u00a0[1]:\n\n    \n# import modules\nimport pandas as pd \nimport numpy as np\n\n\n    \n\n\n\n\n\n\n\n\uc0ac\uc6a9\ud55c \ub370\uc774\ud130\ub294 \uae43\ud5c8\ube0c\uc5d0 \uacf5\uac1c\ub418\uc5b4 \uc788\ub294 \uc5d1\uc140\ud30c\uc77c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\nIn\u00a0[2]:\n\n    \n# read data from web\ndf = pd.read_excel('https://github.com/chris1610/pbpython/raw/master/data/salesfunnel.xlsx')\ndf.head() # \ub9e4\ub2c8\uc800\ub098 \ub3c4\ub9e4\uc0c1\ubcc4 \ub9e4\ucd9c \uc9d1\uacc4 \ub370\uc774\ud130 \uc785\ub2c8\ub2e4. pd.read_excel \ub85c \uc77d\uc5c8\uad6c\uc694\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[2]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Account\n      Name\n      Rep\n      Manager\n      Product\n      Quantity\n      Price\n      Status\n    \n  \n  \n    \n      0\n      714466\n      Trantow-Barrows\n      Craig Booker\n      Debra Henley\n      CPU\n      1\n      30000\n      presented\n    \n    \n      1\n      714466\n      Trantow-Barrows\n      Craig Booker\n      Debra Henley\n      Software\n      1\n      10000\n      presented\n    \n    \n      2\n      714466\n      Trantow-Barrows\n      Craig Booker\n      Debra Henley\n      Maintenance\n      2\n      5000\n      pending\n    \n    \n      3\n      737550\n      Fritsch, Russel and Anderson\n      Craig Booker\n      Debra Henley\n      CPU\n      1\n      35000\n      declined\n    \n    \n      4\n      146832\n      Kiehn-Spinka\n      Daniel Hilton\n      Debra Henley\n      CPU\n      2\n      65000\n      won\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[3]:\n\n    \ndf['Status'] = df['Status'].astype('category') # \ub370\uc774\ud130 \ud0c0\uc785\uc744 \ubcc0\uacbd\n# Status \uceec\ub7fc\uc744 .cat.set_categories\ub85c \uce74\ud14c\uace0\ub9ac\ud615\uc73c\ub85c \ubcc0\uacbd\ud569\ub2c8\ub2e4.\ndf['Status'].cat.set_categories(['won','pending','presented','declined'], inplace = True)\ndf .head()\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[3]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      Account\n      Name\n      Rep\n      Manager\n      Product\n      Quantity\n      Price\n      Status\n    \n  \n  \n    \n      0\n      714466\n      Trantow-Barrows\n      Craig Booker\n      Debra Henley\n      CPU\n      1\n      30000\n      presented\n    \n    \n      1\n      714466\n      Trantow-Barrows\n      Craig Booker\n      Debra Henley\n      Software\n      1\n      10000\n      presented\n    \n    \n      2\n      714466\n      Trantow-Barrows\n      Craig Booker\n      Debra Henley\n      Maintenance\n      2\n      5000\n      pending\n    \n    \n      3\n      737550\n      Fritsch, Russel and Anderson\n      Craig Booker\n      Debra Henley\n      CPU\n      1\n      35000\n      declined\n    \n    \n      4\n      146832\n      Kiehn-Spinka\n      Daniel Hilton\n      Debra Henley\n      CPU\n      2\n      65000\n      won\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[4]:\n\n    \n# \uadf8\ub9ac\uace0... pd.pivot_table \uba85\ub839\uc744 Name \uceec\ub7fc\uc744 \uae30\uc900\uc73c\ub85c \uc801\uc6a9\ud569\ub2c8\ub2e4. \uadf8\ub7ec\uba74 \uc911\ubcf5\ub41c Name\ub4e4\uc744 \ubaa8\ub450 \ud558\ub098\ub85c \ud45c\ud604\ud574\uc11c \uc704 \uadf8\ub9bc\uacfc \uac19\uc740 \uacb0\uacfc\uac00 \ub098\ud0c0\ub0a9\ub2c8\ub2e4. \uc911\ubcf5\ub41c \ud56d\ubaa9\uc758 \uc22b\uc790\ub4e4\uc740 \ubaa8\ub450 \ud3c9\uade0\uc73c\ub85c \ucc98\ub9ac\ub429\ub2c8\ub2e4.\npd.pivot_table(df, index = ['Name','Rep', 'Manager'])\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[4]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      \n      \n      Account\n      Price\n      Quantity\n    \n    \n      Name\n      Rep\n      Manager\n      \n      \n      \n    \n  \n  \n    \n      Barton LLC\n      John Smith\n      Debra Henley\n      740150.0\n      35000.0\n      1.000000\n    \n    \n      Fritsch, Russel and Anderson\n      Craig Booker\n      Debra Henley\n      737550.0\n      35000.0\n      1.000000\n    \n    \n      Herman LLC\n      Cedric Moss\n      Fred Anderson\n      141962.0\n      65000.0\n      2.000000\n    \n    \n      Jerde-Hilpert\n      John Smith\n      Debra Henley\n      412290.0\n      5000.0\n      2.000000\n    \n    \n      Kassulke, Ondricka and Metz\n      Wendy Yule\n      Fred Anderson\n      307599.0\n      7000.0\n      3.000000\n    \n    \n      Keeling LLC\n      Wendy Yule\n      Fred Anderson\n      688981.0\n      100000.0\n      5.000000\n    \n    \n      Kiehn-Spinka\n      Daniel Hilton\n      Debra Henley\n      146832.0\n      65000.0\n      2.000000\n    \n    \n      Koepp Ltd\n      Wendy Yule\n      Fred Anderson\n      729833.0\n      35000.0\n      2.000000\n    \n    \n      Kulas Inc\n      Daniel Hilton\n      Debra Henley\n      218895.0\n      25000.0\n      1.500000\n    \n    \n      Purdy-Kunde\n      Cedric Moss\n      Fred Anderson\n      163416.0\n      30000.0\n      1.000000\n    \n    \n      Stokes LLC\n      Cedric Moss\n      Fred Anderson\n      239344.0\n      7500.0\n      1.000000\n    \n    \n      Trantow-Barrows\n      Craig Booker\n      Debra Henley\n      714466.0\n      15000.0\n      1.333333\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[5]:\n\n    \n#\uc774\ubc88\uc5d0\ub294 Name, Rep, Manager\ub97c \ubaa8\ub450 \uc0ac\uc6a9\ud558\ub294\uac83\uc785\ub2c8\ub2e4.\npd.pivot_table(df, index=['Manager','Rep'])\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[5]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      \n      Account\n      Price\n      Quantity\n    \n    \n      Manager\n      Rep\n      \n      \n      \n    \n  \n  \n    \n      Debra Henley\n      Craig Booker\n      720237.0\n      20000.000000\n      1.250000\n    \n    \n      Daniel Hilton\n      194874.0\n      38333.333333\n      1.666667\n    \n    \n      John Smith\n      576220.0\n      20000.000000\n      1.500000\n    \n    \n      Fred Anderson\n      Cedric Moss\n      196016.5\n      27500.000000\n      1.250000\n    \n    \n      Wendy Yule\n      614061.5\n      44250.000000\n      3.000000\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[6]:\n\n    \n# Name\uc740 \ube7c\uace0, Manager\uc640 Rep\ub9cc \uc0ac\uc6a9\ud558\uba74, \uba3c\uc800 \uc5b8\uae09\ud55c Manger\ub97c \uc911\ubcf5\ub41c \uac83\uc744 \uc815\ub9ac\ud558\uba74 \uc704\uc640 \uac19\uc774 \ub418\uace0, \uadf8 \uc548\uc5d0 Rep\uc744 \uac01\uac01 \ud45c\ud604\ud574\uc8fc\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n# values \uc635\uc158\uc744 \uc0ac\uc6a9\ud574\uc11c Price\ub9cc \ud45c\ud604\ub418\ub3c4\ub85d \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\npd.pivot_table(df, index = ['Manager','Rep'], values = ['Price'] )\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[6]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      \n      Price\n    \n    \n      Manager\n      Rep\n      \n    \n  \n  \n    \n      Debra Henley\n      Craig Booker\n      20000.000000\n    \n    \n      Daniel Hilton\n      38333.333333\n    \n    \n      John Smith\n      20000.000000\n    \n    \n      Fred Anderson\n      Cedric Moss\n      27500.000000\n    \n    \n      Wendy Yule\n      44250.000000\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[7]:\n\n    \n# \uc774\uc81c aggfunc \uc635\uc158\uc744 \uc0ac\uc6a9\ud574\uc11c \uae30\ubcf8\uc801\uc73c\ub85c \ud3c9\uade0\uac12\uc744 \ud45c\ud604\ud558\ub358 \uac83\uc744 np.sum\uc744 \uc774\uc6a9\ud574\uc11c \ud569\uacc4\ub97c \ud45c\ud604\ud558\ub3c4\ub85d \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\npd.pivot_table(df, index = ['Manager','Rep'], values = ['Price'], aggfunc = np.sum )\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[7]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      \n      Price\n    \n    \n      Manager\n      Rep\n      \n    \n  \n  \n    \n      Debra Henley\n      Craig Booker\n      80000\n    \n    \n      Daniel Hilton\n      115000\n    \n    \n      John Smith\n      40000\n    \n    \n      Fred Anderson\n      Cedric Moss\n      110000\n    \n    \n      Wendy Yule\n      177000\n    \n  \n\n\n\n\n\n\n\n\n\n\n\n\nIn\u00a0[8]:\n\n    \n# \ub610\ud55c \uc774\uc81c aggfunc \uc635\uc158\uc744 \uc0ac\uc6a9\ud574\uc11c \uae30\ubcf8\uc801\uc73c\ub85c \ud3c9\uade0\uac12\uc744 \ud45c\ud604\ud558\ub358 \uac83\uc744 np.sum\uc744 \uc774\uc6a9\ud574\uc11c \ud569\uacc4\ub97c \ud45c\ud604\ud558\ub3c4\ub85d \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\npd.pivot_table(df, index = ['Manager','Rep'], values = ['Price'], aggfunc = [np.sum, np.mean] )\n\n\n    \n\n\n\n\n\n\n\n\n\n    Out[8]:\n\n\n\n\n\n\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead tr th {\n        text-align: left;\n    }\n\n    .dataframe thead tr:last-of-type th {\n        text-align: right;\n    }\n\n\n  \n    \n      \n      \n      sum\n      mean\n    \n    \n      \n      \n      Price\n      Price\n    \n    \n      Manager\n      Rep\n      \n      \n    \n  \n  \n    \n      Debra Henley\n      Craig Booker\n      80000\n      20000.000000\n    \n    \n      Daniel Hilton\n      115000\n      38333.333333\n    \n    \n      John Smith\n      40000\n      20000.000000\n    \n    \n      Fred Anderson\n      Cedric Moss\n      110000\n      27500.000000\n    \n    \n      Wendy Yule\n      177000\n      44250.000000",
      "tags": "",
      "url": "https://partrita.github.io/posts/Pandas-tutorial/"
    },
    {
      "title": "hello world",
      "text": "Hello world!\n\uccab \ubc88\uc9f8 \ud3ec\uc2a4\ud2b8 \uc774\uc790, \ucc98\uc74c\uc73c\ub85c \uc368\ubcf4\ub294 reStructuredText \ud3ec\uba67\uc785\ub2c8\ub2e4.\n\n\ub9ac\uc2a4\ud2b8 \ub9cc\ub4e4\uae30\n\nA bullet list item\nSecond item\n\nA sub item\n\n\nSpacing between items creates separate lists\nThird item\n\n\nAn enumerated list item\nSecond item\n\nSub item that goes on at length and thus needs\nto be wrapped. Note the indentation that must\nmatch the beginning of the text, not the\nenumerator.\n\nList items can even include\nparagraph breaks.\n\n\n\n\n\nThird item\nAnother enumerated list item\nSecond item\n\n\n\n\uc774\ubbf8\uc9c0\n\n\n\n\ud558\uc774\ud37c\ub9c1\ud06c\nA sentence with links to Wikipedia and the Linux kernel archive.\nAnother sentence with an anonymous link to the Python website.\nN.B.: named links and anonymous links are enclosed in grave accents (`), and not in apostrophes (').\n\n\n\ucf54\ub4dc \ube14\ub7ed\nsome literal text\nThis may also be used inline at the end of a paragraph, like so:\nsome more literal text\nprint(\"A literal block directive explicitly marked as python code\")",
      "tags": "demo",
      "url": "https://partrita.github.io/posts/hello-world/"
    },
    {
      "title": "Protocols",
      "text": "\uac04\ub7b5\ud55c \uc124\uba85\u00b6\uc774\uacf3\uc5d0\ub294 \uc2e4\ud5d8 \ubc29\ubc95\uc5d0 \ub300\ud55c \uac04\ub7b5\ud55c \uc815\ubcf4\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uacc4\uc18d\ud574\uc11c \uc790\uc8fc \uc0ac\uc6a9\ud558\ub294 \ud504\ub85c\ud1a0\ucf5c\ub4e4\uc744 \uc815\ub9ac\ud560 \uc608\uc815\uc785\ub2c8\ub2e4.\n\ubaa9\ucc28\u00b6\nMiniprep\nELISA\nSequencing\nSDS-PAGE\n\n\n\n\n\n\n\n\nMiniprep \u00b6\uc65c \uc774\ub984\uc774 miniprep \uc778\uac00\uc694?\u00b6\ub2e4\uc591\ud55c \ud68c\uc0ac\uc5d0\uc11c plasmid DNSA\ub97c \uc815\uc81c\ud558\ub294 \ud558\ub294 \ud0a4\ud2b8\ub97c \uc0dd\uc0b0\ud558\uace0 \uc788\ub294\ub370, \uc2dc\uc791\ud558\ub294 E.coli \ubc30\uc591\uc561\uc758 \uc591\uc5d0 \ub530\ub77c\uc11c \ub2e4\uc74c\uacfc \uac19\uc774 miniprep, midiprep, maxiprep\ub77c\uace0 \uacf5\ud1b5\uc801\uc73c\ub85c \ubd80\ub974\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub984\uc5d0\uc11c \uc54c \uc218 \uc788\ub4ef \uc591\uc774 \uc801\uc73c\uba74 mini \ub9ce\uc73c\uba74 maxi\uc785\ub2c8\ub2e4.\nminiprep\uc740 (\uc0c1\ub300\uc801\uc73c\ub85c) \ube60\ub974\uace0 \uc791\uc740 \uaddc\ubaa8\ub85c plasmid DNA\ub97c \ubf51\uc544 \ub0bc \uc218 \uc788\uae30\uc5d0 \ub9ce\uc774 \uc0ac\uc6a9\ub418\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uc6d0\ub9ac\ub294 alkaline lysis method \ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\ub294\ub370 \uac04\ub2e8\ud788 \uc774\uc57c\uae30 \ud558\uba74 \uc5fc\uae30\uc131 \uc6a9\uc561\uc73c\ub85c \uc140\uc744 \uae68\uc8fc\uace0, \ube60\ub974\uac8c \uc911\ud654\uc2dc\ucf1c Plasmid DNA\ub9cc \uc120\ud0dd\ud574 \ub0b4\ub294 \ubc29\ubc95 \uc785\ub2c8\ub2e4. \ubcf4\ud1b5\uc758 \uacbd\uc6b0 miniprep\uc73c\ub85c \uc57d 50\u00b5g\uc758 plasmid DNA\ub97c \uc5bb\uc744 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nminiprep\uc5d0 \uc0ac\uc6a9\ub418\ub294 \ub2e4\uc591\ud55c \ud0a4\ud2b8\uac00 \uc788\uc9c0\ub9cc, \uc5ec\uae30\uc5d0\uc11c\ub294 Qiagen Spin Miniprep \ud0a4\ud2b8 \uae30\uc900\uc73c\ub85c \uc124\uba85\ud569\ub2c8\ub2e4.\n\nMetarials:\u00b6\n\ud558\ub8fb\ubc24 \ud0a4\uc6b4 E.coli \ubc30\uc591\uc561 (1-5ml)\n\ucc28\uac00\uc6b4 P1 \ubc84\ud37c (50 mM Tris-HCl pH 8.0, 10 mM EDTA, 100 \u00b5g/ml RNaseA)\n RNaseA\uac00 \ub4e4\uc5b4\uc788\uc2b5\ub2c8\ub2e4, \ud56d\uc0c1 \ub0c9\uc7a5 \ubcf4\uad00\ud558\uc138\uc694.\nP2 \ubc84\ud37c (200 mM NaOH, 1% SDS)\nN3 \ubc84\ud37c (4.2 M Gu-HCl, 0.9 M potassium acetate, pH 4.8)\nPB \ubc84\ud37c (5 M Gu-HCl, 30% ethanol)\nPE \ubc84\ud37c (10 mM Tris-HCl pH 7.5, 80% ethanol)\nEB \ubc84\ud37c (10 mM Tris\u00b7Cl, pH 8.5; DW\ub85c \ub300\uccb4\ud558\uc154\ub3c4 \ub429\ub2c8\ub2e4.)\nQIAprep spin column (\ud0a4\ud2b8\uc5d0 \ud3ec\ud568\ub418\uc5b4 \uc788\uc74c)\nCentrifuge\n\uba78\uade0\ub41c 1.5-ml microcentrifuge \ud29c\ube0c\n\nMethods:\u00b6\nmicrocentrifuge  \ud29c\ube0c\uc5d0 1.5 ml \uc758 \ubc30\uc591\uc561\uc744 \ub123\uc5b4 \uc90d\ub2c8\ub2e4.\n\ucd5c\ub300 \uc18d\ub3c4\ub85c Centrifuge for 1 min at room temperature, gently aspirate out the supernatant and discard it.\n\ucda9\ubd84\ud55c \ud06c\uae30\uc758 cell pellet\uc774 \uc0dd\uae38\ub54c \uae4c\uc9c0 \ubc18\ubcf5\ud569\ub2c8\ub2e4.\n250 \u00b5l \uc758 \ucc28\uac00\uc6b4 Buffer P1 \ub97c \ub123\uc5b4\uc8fc\uace0, Resuspend pelleted bacterial cells\nAdd 250 \u03bcl Buffer P2 and \uc870\uc2ec\uc2a4\ub7fd\uac8c invert the tube 4\u20136 times to mix.\nAdd 300 \u00b5l of Buffer N3. \n NOTE: Proceed to the next step within immediately !\nClose the tube tightly and invert the tube 4 - 6 times . The solution should become cloudy.\nCentrifuge for 10 min at 13,000 rpm (~17,900 x g) in a table-top microcentrifuge. A compact white pellet will form. Apply the supernatants from step 4 to the QIAprep spin column by decanting or pipetting.\nCentrifuge for 30\u201360 s. Discard the flow-through. Spinning for 60 seconds produces good results.\nWash QIAprep spin column by adding 0.75 ml Buffer PE and centrifuging for 30\u201360 s.\nDiscard the flow-through, and centrifuge for an additional 1 min to remove residual wash buffer. \nIMPORTANT: Residual wash buffer will inhibit subsequent enzymatic reactions. \nPlace the QIAprep column in a clean 1.5 ml microcentrifuge tube. To elute DNA, add 50 \u03bcl Buffer EB (10 mM Tris\u00b7Cl, pH 8.5) or water to the center of each QIAprep spin column, let stand for 1 min, and centrifuge for 1 min.\n\ub9cc\uc57d \ub192\uc740 \ub18d\ub3c4\ub85c elution \ubc1b\uace0 \uc2f6\ub2e4\uba74 add 30 \u03bcL\uc758 DW\ub97c \uceec\ub7fc \uac00\uc6b4\ub370\uc5d0 \ub123\uace0, incubate at room temperature on the bench for 5 mins and then centrifuge for 1 min.\n\n\n\ub178\ud2b8\u00b6\n\ud55c\ubc88\uc5d0 10\uac1c \uc774\uc0c1\uc758 miniprep\uc744 \ud55c\ub2e4\uba74 vacuum manifold \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\ub294\uac8c \ube60\ub985\ub2c8\ub2e4.\ncell lysate\ub97c column\uc5d0 \ub450\ubc88 \uac70\uce58\uba74 \uc218\uc728\uc774 \uc57d 20% \uc99d\uac00\ub429\ub2c8\ub2e4.\n\uc2dc\ud000\uc2f1 \uacbd\uacfc\uac00 \uc548\ub098\uc624\ub294 \uc774\uc720\ub294 \ub300\uccb4\ub85c \uc5fc\uc5d0 \uc758\ud55c \uc624\uc5fc\uc73c\ub85c, Washing \ud558\ub294 \uacfc\uc815\uc744 \ucda9\ubd84\ud558\uac8c \ud574\uc90d\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\n\nELISA (enzyme linked immunosorbent assay)\u00b6\ud6a8\uc18c\uba74\uc5ed \uc815\ub7c9\ubc95 (elisa)\ub294 \uc624\ub298\ub0a0 \uac00\uc7a5 \ub110\ub9ac \uc774\uc6a9\ub418\ub294 \uba74\uc5ed\uc815\ub7c9\ubc95\uc785\ub2c8\ub2e4. \ud56d\uc6d0-\ud56d\uccb4\ubc18\uc751\uc744 \uc774\uc6a9\ud558\uc5ec \ud56d\uc6d0\uc774\ub098 \ud56d\uccb4\ub97c \uc815\uc131, \uc815\ub7c9\ud560 \uc218 \uc788\ub294 \uac10\ub3c4\uac00 \uc6b0\uc218\ud55c \uc2e4\ud5d8\ubc95\uc73c\ub85c \ud56d\uccb4\uc5d0 \ud6a8\uc18c\ub97c \uacb0\ud569\uc2dc\ucf1c \ud56d\uc6d0\ud56d\uccb4\ubc18\uc751\uc744 \ud655\uc778\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4. \uac04\ub2e8\ud558\uace0 \ube44\uc6a9\uc774 \uc801\uac8c \ub4e4\uc5b4 \ub2e4\ub7c9\ubd84\uc11d\uc774 \uac00\ub2a5\ud569\ub2c8\ub2e4.\n\uc6d0\ub9ac\u00b6\uc774\ub984\uc5d0\uc11c \uc54c \uc218 \uc788\ub4ef\uc774 \ud6a8\uc18c\uac00 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \ud56d\uc6d0\uc758 \ub18d\ub3c4\ub294 \uae30\uc9c8 \uc804\ud658 \uc815\ub3c4\uc5d0 \ub2ec\ub77c\uc9d1\ub2c8\ub2e4\n\ud56d\uccb4\ub098 \ud56d\uc6d0\uc774 \uace0\uccb4\uc0c1\uc5d0 \ud761\ucc29\ub418\uc5b4\uc788\uc73c\uba70 \uc774\ub807\uac8c \ud574\uc57c\uc9c0\ub9cc \uacb0\ud569\ud558\uc9c0 \uc54a\uc740 free\ud56d\uc6d0\ub4e4\uc744 \uc138\ucc99\uc73c\ub85c \uc5c6\uc568 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc2e4\ud5d8\ub3d9\ubb3c\uc744 immunization \ud55c \ud6c4 \uc5bb\uc740 serum\uc774\ub098 fusion\uc744 \ud1b5\ud574 \uc5bb\uc740\n\ud558\uc774\ube0c\ub9ac\ub3c4\ub9c8\uc758 culture supernatant\uc548\uc5d0 \uc6d0\ud558\ub294 \ud56d\uccb4\uac00 \uc0dd\uc131\ub418\uc5b4\uc788\ub294\uc9c0 \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubc29\uc0ac\ub2a5\uc744 \uc0ac\uc6a9\ud558\uc9c0 \uc54a\uc73c\uba74\uc11c \uac80\uc0ac\ud560 \uc218 \uc788\uace0 \uc0cc\ub4dc\uc704\uce58\uc640 \uacbd\uc7c1\uc801 ELISA \ubc29\ubc95\uc774 \uac00\uc7a5 \ub9ce\uc774 \uc0ac\uc6a9\ub429\ub2c8\ub2e4. Dirent ELISA\ub3c4 \uc0ac\uc6a9\ub418\ub294\ub370 \ud56d\uc6d0\uc774 \uace0\uccb4\uc0c1\uc5d0 \uace0\uc815\ub429\ub2c8\ub2e4. \uc774 \ubc29\ubc95\uc740 \ud56d\uc6d0\ud2b9\uc774\uc801 \ud56d\uccb4 \uac80\ucd9c\uc2dc\uc5d0 \uc6a9\uc774\ud569\ub2c8\ub2e4. \ud6a8\uc18c\ub85c\ub294 \uac04\ub2e8\ud55c \uae30\uc9c8\uc744 \ub123\uc5b4\uc8fc\uc5c8\uc744\ub54c \uc0c9\uc774 \ub098\ub294 \ubc18\uc751\uc744 \uc774\uc6a9\ud569\ub2c8\ub2e4. \ub300\ud45c\uc801\uc73c\ub85c\ub294 alkaline phosphatase\uc640 HRP(horseradish peroxidase)\uac00 \uc0ac\uc6a9\ub429\ub2c8\ub2e4.\n\uc885\ub958\u00b6\nDirect ELISA:\n \ud56d\uc6d0\uacfc \ubc18\uc751\ud558\ub294 \ud56d\uccb4\uc5d0 \ubc14\ub85c \ud6a8\uc18c\ub97c \uacb0\ud569\uc2dc\ud0a8\ub2e4.\nIndirect ELISA:\n \ud56d\uc6d0\uacfc \uacb0\ud569\ud558\ub294 \ud56d\uccb4(1\ucc28\ud56d\uccb4)\uc5d0\ub294 \ud6a8\uc18c\uac00 \uc5c6\uace0, \uadf8 \ud56d\uccb4\uc640 \uacb0\ud569\ud558\ub294 \ud56d\uccb4(2\ucc28\ud56d\uccb4)\uc5d0\ub294 \ud6a8\uc18c\uac00 \uacb0\ud569\ub418\uc5b4\uc788\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c isotype\uc5d0 \ub300\ud55c \ud56d\uccb4\uc5d0 \ud6a8\uc18c\uac00 \uacb0\ud569\ub41c \ud615\ud0dc\ub85c \ud310\ub9e4\ub418\uace0 \uc788\ub2e4. \uc790\uc2e0\uc774 \uc774\uc6a9\ud558\ub294 \uc77c\ucc28\ud56d\uccb4\uc758 isotype\uc5d0 \ub9de\ub294 \ud6a8\uc18c\uacb0\ud569\ud56d\uccb4\ub97c \uad6c\uc785\ud558\uc5ec \uc0ac\uc6a9\ud558\uba74\ub41c\ub2e4.\ud56d\uccb4\ub97c \uc815\ub7c9 \ubc0f \uc815\uc131\uc801\uc73c\ub85c \ubd84\uc11d \ud560\ub54c \uc0ac\uc6a9\ud55c\ub2e4.\nSandwich ELISA:\n \ud56d\uc6d0\uc5d0 \ub300\ud55c \ud56d\uccb4\ub97c \uba3c\uc800 well\uc5d0 \uacb0\ud569\uc2dc\ud0a4\uace0 \uadf8 \ud56d\uccb4\uc5d0 \ub300\ud55c \ud56d\uc6d0(\uc2dc\ub8cc)\uc744 \uacb0\ud569\uc2dc\ud0a8\ub2e4. \uadf8 \ud6c4 \uc9c1\uc811\uc801\uc774\ub098 \uac04\uc811\ubc95\uc73c\ub85c \uc870\uc0ac\ud55c\ub2e4. \ud56d\uc6d0\uc744 \uc815\uc131 \ubc0f \uc815\ub7c9\uc801\uc73c\ub85c \ubd84\uc11d\ud55c\ub2e4.\n\n\n\n\n\n\n\n\n\n\nDNA \uc11c\uc5f4 \ubd84\uc11d\ud558\uae30\u00b6\ub0b4\uc6a9 \ucd9c\ucc98\n\uadfc\ub798\uc5d0 \uc0dd\uc5b4 \uc2dc\ud000\uc2f1\uc758 \ube44\uc6a9\uc774 \uc6cc\ub099 \uc800\ub834\ud574\uc838\uc11c, \uc2e4\ud5d8\uc744 \ud560 \ub54c DNA \uc11c\uc5f4\uc744 \ud655\uc778\ud558\ub294 \uac83\uc740 \uc77c\uc0c1\ud654 \ub418\uc5c8\uc2b5\ub2c8\ub2e4. \uc2dc\ud000\uc2f1\uc744 \uc11c\ube44\uc2a4\ud574\uc8fc\ub294 \uc5c5\uccb4(\ucf54\uc2a4\ubaa8\uc9c4\ud14d\uc774\ub098 \ubc14\uc774\uc624\ub2c8\uc544)\uc5d0\uc11c\ub294 \uacb0\uacfc \uac12\uc744 ab1 \ud30c\uc77c\ub85c \ub418\ub3cc\ub824 \uc90d\ub2c8\ub2e4.\nab1 \ud30c\uc77c\uc744 \uc5f4\uae30 \uc704\ud55c \ud504\ub85c\uadf8\ub7a8\u00b6\uc800\ub294 \uac1c\uc778\uc801\uc73c\ub85c ApE\ub97c \uc120\ud638\ud558\uc9c0\ub9cc, \ub2e4\uc74c\uacfc \uac19\uc774 \ub2e4\uc591\ud55c \ud504\ub85c\uadf8\ub7a8\uc774 \uc788\uc2b5\ub2c8\ub2e4. \ub9c8\uc74c\uc5d0 \ub4dc\uc2dc\ub294 \uac83\uc744 \uc120\ud0dd\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n\n4Peaks (Mac)\nSnapGene Viewer (Mac/PC)\nFinchTV(Mac/PC)\nSequence Scanner (PC)\nChromas (PC)\nApE(Mac/PC)\n\n\uc0c1\uae30\uc758 \ud504\ub85c\uadf8\ub7a8\uc73c\ub85c ab1\ud30c\uc77c\uc744 \uc5f4\uc5b4\uc11c \uc544\ub798\uc640 \uac19\uc740 \ud06c\ub85c\ub9c8\ud1a0\uadf8\ub7a8\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nDNA \uc11c\uc5f4 \ud06c\ub85c\ub9c8\ud1a0\uadf8\ub7a8\uc740 \uacb9\uccd0\uc788\uc9c0 \uc54a\uc544\uc57c \ud569\ub2c8\ub2e4.\u00b6\uc5ec\uae30 DNA \uc11c\uc5f4 trace\uac00 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc790\uc138\ud788 \ubcf4\uba74 \uc774\uc0c1\ud55c \uac83\uc744 \uc54c \uc218 \uc788\ub294\ub370\uc694. \uba87 \uac1c\uc758 peak\ub4e4\uc774 \uacb9\uccd0\uc838 \uc788\ub294 \uac83\uc774\uc9c0\uc694. Peak\uc774 \uacb9\uccd0\uc838 \uc788\ub2e4\ub294 \uac83\uc740 DNA \uc2dc\ud000\uc2f1 \uacb0\uacfc \uac12\uc774 \uba85\ud655\ud558\uc9c0 \uc54a\ub2e4\ub294 \uac83\uc774\uace0 \uce21\uc815 \uac12\uc758 \uc2e0\ub8b0\ub3c4\uac00 \ub5a8\uc5b4 \uc9d1\ub2c8\ub2e4.\n\uc544\ub798 \uc0ac\uc9c4\uc758 \ud06c\ub85c\ub9c8\ud1a0\uadf8\ub7a8\uc740 \uc2e0\ub8b0\ub3c4\uac00 \uc544\uc8fc \ub192\ub2e4\uace0 \ubcfc\uc218 \uc788\uc8e0.\n\nDNA \uc11c\uc5f4 \uc218\uc815\ud558\uae30\u00b6\ud06c\ub85c\ub9c8\ud1a0\uadf8\ub7a8\uc744 \uc790\uc138\ud788 \ubcf4\ub2e4 \ubcf4\uba74 \uc544\ub798\uc640 \uac19\uc774 \uc798\ubabb\ub41c \uac83\uc774 \uc788\uc744 \uc218\uc788\uc2b5\ub2c8\ub2e4.\n\n\uc2dc\ud000\uc2a4 \uc0c1\uc5d0\ub294 A\uac00 \uc5c6\uc9c0\ub9cc \ud06c\ub85c\ub9c8\ud1a0\uadf8\ub7a8\uc744 \ubcf4\uba74 CTC\uac00 \uc544\ub2cc CATC\uac00 \ub418\uc5b4\uc57c \ud568\uc744 \uc54c\uc218 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\uac00 \uac04\ud639 \uc788\uae30 \ub54c\ubb38\uc5d0 DNA \ud06c\ub85c\ub9c8\ud1a0\uadf8\ub7a8\uc744 \ud655\uc778\ud560 \ud544\uc694\uac00 \uc788\uc2b5\ub2c8\ub2e4.\nDNA \uc11c\uc5f4\uc740 500-700\uac1c \uae4c\uc9c0\ub294 \ubbff\uc744 \ub9cc\ud569\ub2c8\ub2e4.\u00b6\uc0dd\uc5b4 \uc2dc\ud000\uc2f1\uc5d0\ub294 \ud55c\uacc4\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ud55c \ubc88\uc5d0 \uc57d 500\uac1c \uc815\ub3c4 \uae4c\uc9c0\uc758 \uacb0\uacfc\uac12\ub9cc \uc2e0\ub8b0\ud560 \uc218 \uc788\ub2e4\ub294 \uac83\uc785\ub2c8\ub2e4. \uc2dc\ud000\uc2f1 \uc11c\ube44\uc2a4 \uc5c5\uccb4\uc5d0 \ubb38\uc758\ud558\uae30 \uc804\uc5d0 \uc774\uac83\uc744 \uba3c\uc800 \ud655\uc778 \ud558\uc154\uc57c \ud569\ub2c8\ub2e4.\nDNA \uc11c\uc5f4 \ucc98\uc74c 20-30\uac1c\ub294 \uc2e0\ub8b0\ub3c4\uac00 \ub0ae\uc2b5\ub2c8\ub2e4.\u00b6\uadf8\ub798\uc11c Primer\uac00 \ubd99\ub294 \uc704\uce58\ub97c \uc6d0\ud558\ub294 \uc11c\uc5f4\uc758 \uc55e\ucabd 50\uac1c \uc815\ub3c4\ub85c \uc120\ud0dd\ud558\ub294\uac8c \uc88b\uc2b5\ub2c8\ub2e4.\nDNA \uc2dc\ud000\uc2f1\uc744 \ubcf4\ub0bc \uc0d8\ud50c\uc740 \uae68\ub057\ud558\uac8c \ubcf4\ub0c5\ub2c8\ub2e4.\u00b6\uac00\ub2a5\ud558\uba74 \uae68\ub057\ud55c \ud29c\ube0c\uc5d0 \uae54\ub054\ud558\uac8c \uc900\ube44\ud55c DNA \uc0d8\ud50c\uc744 \ubcf4\ub0b4\uc138\uc694. \uc2dc\ud000\uc2f1 \ubc18\uc751\uc774 \ub418\uc9c0 \uc54a\ub354\ub77c\ub3c4 \uc5c5\uccb4\ub294 \ub3c8\uc744 \ubc1b\uc2b5\ub2c8\ub2e4. \uadf8\ub9ac\uace0 \uc0dd\uac01\ubcf4\ub2e4 \uc2dc\ud000\uc2f1 \ubc18\uc751\uc740 \uc624\uc5fc\uc5d0 \ubbfc\uac10\ud569\ub2c8\ub2e4.\n\n\n\n\n\n\n\n\n\nSDS-PAGE\u00b6SDS-PAGE Gel \uc27d\uac8c \ub9cc\ub4e4\uae30\u00b6\uc900\ube44\ubb3c :\n\n2X running gel buffer : 750 mM Tris-HCl, pH8.8 \uc0c1\uc628\ubcf4\uad00\n1x stacking gel solution :  62.5mM Tris-HCl, pH6.8, 4% acrylamide \ub0c9\uc7a5\ubcf4\uad00\n30% acrylamide stock solution (29:1): \ub0c9\uc7a5\ubcf4\uad00\n10% Ammonium persulfate : \ub0c9\uc7a5\ubcf4\uad00\n\n\nAcrylamide\uc758 quality\ub294 \ud574\uc0c1\ub3c4\uc5d0 \uc601\ud5a5\uc744 \uc90d\ub2c8\ub2e4. \ub530\ub77c\uc11c high quality\ub97c \uc0ac\uc6a9\ud558\uc2dc\ub294 \ud3b8\uc774 \uc88b\uace0 \uac00\uae09\uc801 \ube60\ub978 \uc2dc\uac04\ub0b4 \uc18c\ube44\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4.\nGel \ub9cc\ub4e4\uae30 : \ucd1d 10ml\u00b6\n2x running gel buffer 5ml + 20% acrylamide stock 5ml + 10% APS 100ul \uc11e\uc5b4 \uc90d\ub2c8\ub2e4. 2. TEMED 10 ul \ub123\uace0 \ucc9c\ucc9c\ud788 \uc11e\uc5b4\uc90d\ub2c8\ub2e4.\nGel cast\uc5d0 \uae30\ud3ec\uac00 \uc0dd\uae30\uc9c0 \uc54a\uac8c \uc870\uc2ec\ud788 \ubd80\uc5b4 \uc90d\ub2c8\ub2e4.\n100% Ethanol\uc744 \uc704\uc5d0 \uc870\uc2ec\uc2a4\ub7fd\uac8c \ub123\uc2b5\ub2c8\ub2e4. \uc591\uc740 500ul\uc815\ub3c4\n30\ubd84\ud6c4 Gel\uc774 \uad73\uc740 \uac78 \ud655\uc778\ud558\uace0 DW\ub85c gel \uc717 \ubd80\ubd84\uc744 \ud55c\ubc88 \uc53b\uc5b4\uc90d\ub2c8\ub2e4.\n1x stacking gel solution 1ml + 10% APS 10ul\ub97c \uc11e\uc5b4 \uc90d\ub2c8\ub2e4.\nTEMED 1ul\ub97c \ub9c8\uc9c0\ub9c9\uc73c\ub85c \ub123\uc5b4 \ucc9c\ucc9c\ud788 \uc11e\uc5b4 \uc90d\ub2c8\ub2e4.\n5\ubc88 \uacfc\uc815\uc744 \ub05d\ub0b8 running gel \uc704\uc5d0 \ubd87\uace0 comb\uc744 \uaf3d\uc544 \uc90d\ub2c8\ub2e4.\n20\ubd84\ud6c4 comb\uc744 \ubf51\uace0 \uc2e4\ud5d8\uc5d0 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\nGel\uc774 \uad73\ub294 \uc2dc\uac04\uc740 \uc804\uc801\uc73c\ub85c APS\uc758 \ucca8\uac00\ub7c9\uc5d0 \ub530\ub77c \ub2ec\ub77c\uc9c0\uba70 \uc2dc\uac04\uc774 \ucd09\ubc15\ud55c \uacbd\uc6b0 APS\uc758 \uc591\uc744 \ub298\ub824 \uc90d\ub2c8\ub2e4. Gel\uc774 \uc644\uc804\ud788 \uad73\uc9c0 \uc54a\uc558\uc744 \uacbd\uc6b0\uc5d0 \ud574\uc0c1\ub3c4\ub294 \ub5a8\uc5b4\uc9d1\ub2c8\ub2e4. \uc774\ub7ec\ud55c \uc810\uc5d0\uc11c \uc624\ub79c \uc2dc\uac04 \uad73\ud788\ub294 \ubc29\ubc95\ubcf4\ub2e4\ub294 APS\uc758 \uc591\uc744 \ub298\ub824 \ube68\ub9ac \uad73\ud788\ub294 \ud3b8\uc774 \uc88b\uc2b5\ub2c8\ub2e4.\nNote\u00b6SDS\ub294 sample buffer\uc640 running buffer\uc5d0 \ub4e4\uc5b4\uc788\uc73c\ubbc0\ub85c gel\uc5d0 \ub123\uc9c0 \uc54a\uc544\ub3c4 \ud574\uc0c1\ub3c4\uc5d0 \ubb38\uc81c\uac00 \uc5c6\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\n\nDNA ligation\u00b6Standard Protocol: Insert + Vector DNA Ligation\u00b6\ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 3 insert : 1 vector \ube44\uc728\uc744 \ucd94\ucc9c\ud55c\ub2e4. \ub610\ud55c ligation \ubc18\uc751 \uc2dc \ucd1d DNA\uc758 \uc591\uc740 100ng \uc815\ub3c4\uac00 \uad8c\uc7a5 \ub41c\ub2e4.\n\nCombine the following in a PCR or Eppendorf tube:\n25ng Vector DNA\n75ng Insert DNA\nLigase Buffer (1\u03bcL/10\u03bcL reaction for 10X buffer, and 2\u03bcL/10\u03bcL reaction for 5X buffer) 0.5-1\u03bcL T4 DNA Ligase\nDW \ub97c \ub123\uc5b4 total 10\u03bcL\n\ub9cc\uc57d DNA \ub18d\ub3c4\uac00 \ub108\ubb34 \ub0ae\ub2e4\uba74 total volume\uc744 \uc99d\uac00 \uc2dc\ucf1c\uc11c \uc9c4\ud589\ud55c\ub2e4.\n\ud56d\uc0c1 Vector\ub9cc \ub123\uc740 control\uc2e4\ud5d8\uc744 \ud558\uace0 \ub2e4\uc591\ud55c vector : insert \ube44\uc728\uc744 \uc2dc\ub3c4 \ud55c\ub2e4.\n\n\nRT\uc5d0\uc11c 2\uc2dc\uac04 \ud639\uc740 16\u00b0C\uc5d0\uc11c overnight \ubc18\uc751 \uc2dc\ud0a8\ub2e4.\n\"high concentration\" ligase\ub97c \uc0ac\uc6a9\ud558\ub294 \uacbd\uc6b0 RT 5\ubd84\uc774\uba74 \ucda9\ubd84\ud558\ub2e4. \n\n\ntransformation\uc744 \uc9c4\ud589\ud55c\ub2e4.\n\nVector:Insert \ube44\uc728\u00b6\ubcf4\ud1b5 3:1 \ube44\uc728\ub85c \ub123\uc5b4\uc904 \uacbd\uc6b0 \ucda9\ubd84\ud558\uc9c0\ub9cc \uc548\ub420 \uacbd\uc6b0 vector: insert \ube44\uc728\uc744 \uc870\uc808 \ud574 \uc904 \ud544\uc694\uac00 \uc788\ub2e4. \uc790\ub3d9\uc73c\ub85c \uacc4\uc0b0\ud574\uc8fc\ub294 \ub3c4\uad6c \uc774 \uc788\uc73c\ub2c8 \ucc38\uace0\ud55c\ub2e4.\nTips and FAQ\u00b6ligation \ub2e8\uacc4\ub294 \uc2e4\ud5d8\uc758 \uc131\uacf5 \uc5ec\ubd80\ub97c \uc54c\uae30 \ud798\ub4e4\uae30 \ub54c\ubb38\uc5d0 \ud56d\uc0c1 \ucee8\ud2b8\ub864\uc744 \uac19\uc774 \ud574\uc57c \ud55c\ub2e4.\n\n\nControl\nLigase\nInterpretation\n\n\n\n\nUncut vector\n-\nChecks viability of competent cells and verifies the antibiotic resistance of the plasmid\n\n\nCut vector\n-\nBackground due to uncut vector\n\n\nCut vector\n+\nBackground due to vector re-circularization - most useful for phosphatase treated vector\n\n\nInsert or water\n+\nAny colonies indicate contamination of intact plasmid in ligation or transformation reagents\n\n\n\n\n\n\n\n\n\n\nPCR Annealing \uc628\ub3c4\u00b6Tm\uc740 DNA \ub450 \uac00\ub2e5\uc774 \ubc18\ucbe4 \ud480\uc5b4\uc84c\uc744\ub54c \ub610\ub294 \ub450 \uac00\ub2e5 ssDNA\uac00 \ubc18\ucbe4 annealing\ub42c\uc744\ub584\uc758 \uc628\ub3c4\ub97c \ub9d0\ud569\ub2c8\ub2e4. \"\ubc18 \ucbe4\" \uc774\ub77c\ub294 \ud45c\ud604\uc740 \"\ubc18\ucbe4 \ud480\uc5b4\uc84c\uc744\ub54c\" \uc640 \"\ubc18\ucbe4 \ubd99\uc5c8\uc744\ub54c\" \uac00 \uac19\uc740 \uc758\ubbf8\ub85c \uc0ac\uc6a9\ub429\ub2c8\ub2e4. \uae34 template\uc640 \uace0\ub18d\ub3c4\uc758 \uc9e7\uc740 primer\ub4e4\uc774 \uac19\uc774 \uc788\uc744\ub54c \ud504\ub77c\uc774\uba38\uac00 \uc801\ub2f9\ud55c \uc628\ub3c4\uac00 \ub418\uba74 \uc11c\uc11c\ud788 \uc720\uc0ac\ud55c \uc11c\uc5f4\uc5d0 \ubd99\uae30 \uc2dc\uc791\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc Tm\uc5d0\uc11c\ub294 \ubc18 \ubc16\uc5d0 \ubd99\uc9c0 \ubabb\ud558\ubbc0\ub85c, \ud2b9\ud788 \ud504\ub77c\uc774\uba38\uc758 3' \ucabd\uc774 \ubd99\uc9c0 \ubabb\ud55c \uc0c1\ud0dc\ub77c\uba74 PCR \uc774 \uc77c\uc5b4\ub098\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4. \uadf8\ub798\uc11c \uc628\ub3c4\ub97c \uc880 \ub354 \ub0b4\ub824\uc11c \ud504\ub77c\uc774\uba38\uac00 template\uc5d0 \ub354 \ubd99\ub3c4\ub85d \ud569\ub2c8\ub2e4. DNA\uc758 Tm \uac12\uc740 \ub2e4\uc74c\uacfc \uac19\uc774 \uacc4\uc0b0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n$$ Tm = 4*(G+C)+2*(A+T) $$Primer\ub97c \ub514\uc790\uc778\ud560\ub54c \uac00\ub2a5\ud558\uba74 \uac19\uc740 Tm \uac12\uc758 forward,reverse primer\ub97c \uc8fc\ubb38\ud558\ub294 \ud558\ub294\uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \uadf8\ub807\uc9c0 \ubabb\ud55c \uacbd\uc6b0 \ub0ae\uc740 Tm\uac12\uc758 primer\ub97c \uae30\uc900\uc73c\ub85c \uc57d 5\ub3c4 \uc815\ub3c4 \ub0ae\uc740 \uc628\ub3c4\uc5d0\uc11c PCR\uc744 \uc218\ud589\ud569\ub2c8\ub2e4. \ub9cc\uc57d \uc6d0\ud558\ub294 \uc0ac\uc774\uc988\uc758 PCR \ubc34\ub4dc\uc640 \uc7a1\ubc34\ub4dc\uac00 \uac19\uc774 \ub728\uba74 annealing \uc628\ub3c4\ub97c 2\ub3c4\uc529 \uc62c\ub824 \uac00\uba74\uc11c PCR \uc2e4\ud589\ud569\ub2c8\ub2e4.\n\ub9cc\uc57d \uc2e4\ud5d8\uc2e4\uc5d0 gradient PCR\uae30\uac00 \uc788\uc73c\uba74 \ub0ae\uc740 Tm-5\ub3c4\uc640 \ub192\uc740 Tm-5\ub3c4\ub85c\ud574\uc11c \ud55c\ubc88\uc5d0 \ud558\ub294 \ubc29\ubc95\ub3c4 \uc788\uc2b5\ub2c8\ub2e4. \ubcf4\ud1b5 20~30 mer\uc0ac\uc774\ub294 \ubcf4\ud1b5 55\ub3c4 \uadfc\ucc98\uc5d0\uc11c \ud558\uba74 \uc798 \ub098\uc624\ub294\uacbd\uc6b0\uac00 \ub9ce\uc2b5\ub2c8\ub2e4.\n\uc798 \uc548\ub418\ub294 \uacbd\uc6b0\u00b6primer\uc758 \uae38\uc774\uac00 50~60mer\ub97c \ub118\uc5b4\uac04\ub2e4\ub358\uac00 GC\ube44\uc728\uc774 \ud604\uc800\ud558\uac8c \ub192\uac70\ub098 \ub0ae\uc744\ub54c\uc5d0\ub294 annealing temperature\ub97c \ucc3e\uc544\uc57c \ud558\ub294 \uacbd\uc6b0\uac00 \ub9ce\uc2b5\ub2c8\ub2e4. \uadf8\ub7f4\ub54c\ub294 \ubc14\ub85c gradient PCR\uc744 \ucd5c\uc800 \uc628\ub3c4(\ubcf4\ud1b5 48~50\ub3c4)\uc5d0\uc11c \uc717\ucabd\uc73c\ub85c \ud574\ubcf4\ub294\uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \uc7a1\ubc34\ub4dc\ub97c \uac10\uc218\ud558\uace0 \uc6d0\ud558\ub294 \ubc34\ub4dc\ub97c PCR \ud558\uae30 \uc704\ud568\uc785\ub2c8\ub2e4.",
      "tags": "",
      "url": "https://partrita.github.io/posts/protocols/"
    },
    {
      "title": "PCR(polymerase chain reaction)",
      "text": "Table of Contents\n\n1 PCR \uac1c\uc694\n2 PCR \ubaa9\uc801\n3 PCR \uad6c\uc131 \uc694\uc18c\n4 PCR \uc758 3 \ub2e8\uacc4\n\n4.1 DNA \uc758 \ubcc0\uc131(denaturation):\n4.2 Primer \uc758 \uacb0\ud569(annealing):\n4.3 DNA\uc758 \ud569\uc131(polymerization, extension):\n\n\n5 PCR \uc2e4\ud5d8 \uc2dc \uc720\uc758\ud558\uc5ec\uc57c \ud560 \uc0ac\ud56d\n\n5.1 Pipetting & DNA template:\n5.2 Setting up the Laboratory:\n5.3 PCR cycling program:\n5.4 Equipment (Thermocyclers & PCR tubes):\n5.5 PCR reaction components:\n\n\n6 PCR\uc758 \uc885\ub958\n\n6.1 RT-PCR\n6.2 SSCP(Single Strand Conformation Polymorphism)\n6.3 RACE(Rapid Amplification of cDNA Ends):\n6.4 ISPCR(In Situ Polymerase Chain Reaction):\n6.5 DDRT-PCR(Differential Display Reverse Transcriptase PCR):\n6.6 Hot start PCR:\n6.7 RAPD PCR:\n6.8 Touchdown PCR:\n6.9 Long Accurate PCR:\n6.10 Asymmetric PCR:\n6.11 Nest PCR:\n6.12 Inverse PCR:\n6.13 Gradient PCR:\n6.14 Real-Time PCR:\n\n\n\n\n\n1 PCR \uac1c\uc694\n1983\ub144 Kary Mullis\uc5d0 \uc758\ud574 \uace0\uc548. DNA \uc911\ud569\ud6a8\uc18c\ub97c \uc774\uc6a9\ud558\uc5ec DNA, RNA\uc758 \ud2b9\uc815\uc601\uc5ed\uc744 \uc2dc\ud5d8\uad00 \ub0b4\uc5d0 \ub300\ub7c9\uc73c\ub85c \uc99d\ud3ed\n80\ub144\ub300 \uc81c\ud55c\ud6a8\uc18c(restriction enzyme)\uc758 \ubc1c\uacac\uc5d0 \uc758\ud55c gene cloning\ubc95 \uc774\ud6c4, 90\ub144\ub300 \uc0dd\uba85\uacf5 \ud559 \uc5f0\uad6c\uc758 \ud601\uba85\uc801\uc778 \uc0ac\uac74\n\uc5f0\uad6c\ud558\uace0 \uc2f6\uc740 \uc720\uc804\uc790\ub294 \ubb34\uc5c7\uc774\ub4e0 \ub300\ub7c9 \uc0dd\uc0b0\uc774 \uac00\ub2a5.\n\n\n2 PCR \ubaa9\uc801\n\ubcf5\uc7a1\ud55c \uc804\uccb4 genome \uc911\uc5d0 \uc5f0\uad6c\ud558\uace0\uc790 \ud558\ub294 \uc720\uc804\uc790\uac00 \ud76c\uadc0\uc720\uc804\uc790\ub97c \ubd84\uc11d\ud558\uace0 \uc5f0\uad6c\ud558\ub294\ub370 \uac00\uc7a5 \ud070 \ubb38\uc81c\uc810\uc774\uc600\ub2e4. PCR\uc740 \ud2b9\uc815 DNA sequence\uc758 copy \uc218\ub97c \uae30\ud558\uae09\uc218\uc801\uc73c\ub85c \uc99d\ud3ed\uc2dc\ud0b4\uc73c\ub85c\uc368 \uc99d\ud3ed\ub41c DNA\ub97c \uc5ec\ub7ec \uac00\uc9c0 \uc2e4\ud5d8\uc5d0 \uc774\uc6a9\ud560 \uc218 \uc788\uace0, \uc2e4\ud5d8 \uacb0\uacfc\ub97c \ud1a0\ub300\ub85c \ubd84\uc790\uc0dd\ubb3c\ud559, \uc758\ud559, \uc774\ud559, \ub18d\ud559, \uc218\uc758\ud559, \uc2dd\ud488\uacfc\ud559, \ud658\uacbd\uacfc\ud559 \uc5f0\uad6c\uc5d0 \uc751\uc6a9\ud560 \uc218 \uc788\uc74c\n\n\n3 PCR \uad6c\uc131 \uc694\uc18c\n\nDNA, RNA template:\n\uc99d\ud3ed \ub300\uc0c1\uc774 \ub418\ub294 DNA, RNA\n\nPCR Primers:\n\uc99d\ud3ed\ud560 \ubd80\ubd84\uc744 \uc7a1\ub294 \uc9e7\uc740 \uc5fc\uae30\uc11c\uc5f4.\n\nTaq polymerase:\n\uc5f4\uc5d0 \ud2b9\ubcc4\ud788 \uac15\ud55c \uc720\uc804\uc790 \ud569\uc131\ud6a8\uc18c (Taq polymerase: Thermus aquaticus \ub77c\ub294 \uc628\ucc9c\uc5d0 \uc0ac\ub294 \uc138\uade0\uc758DNA polymerase, 72\u2103\uac00 \ucd5c\uc801\uc628\ub3c4, 94\u2103\uc5d0\uc11c\ub3c4 \uc548\uc815\ud568)\n\ndNTP (dATP, dCTP, dGTP, dTTP):\n\uc720\uc804\uc790\ub97c \ud569\uc131\ud558\ub294 \uc7ac\ub8cc\uac00 \ub418\ub294 \uac01 nucleotide\n\nMgCl+2:\nMgCl2+\uc740 dNTP\uc640 \ubcf5\ud569\uccb4\ub97c \ud615\uc131\ud558\uc5ec \ud6a8\uc18c\ud65c\uc131, primer annealing \ub4f1\uc5d0 \uad00\uc5ec\n\n\n\n\n4 PCR \uc758 3 \ub2e8\uacc4\n\n4.1 DNA \uc758 \ubcc0\uc131(denaturation):\n\n90\u2103\u223c96\u2103\ub85c \uac00\uc5f4\ud558\uc5ec \ub450\uac00\ub2e5 DNA\ub97c \ub2e8\uc77c\uac00\ub2e5 DNA\ub85c \ubd84\ub9ac.\n\uc77c\ubc18\uc801\uc73c\ub85c  94\u2103\uc0ac\uc6a9: \ub192\uc740 \uc628\ub3c4\uc77c\uc218\ub85d \ub2e8\uc77c\uac00\ub2e5 DNA\ub85c \uc798 \uc774\ud589\ub418\uc9c0\ub9cc \uc628\ub3c4\uac00 \ub108\ubb34 \ub192\uc73c\uba74 Taq DNA polymerase \uc5ed\uc2dc activity(\ud65c\uc131)\uac00 \ub0ae\uc544\uc9d0.\n\uccab Cycle\uc5d0\uc11c\ub294 \ud655\uc2e4\ud55c \ubcc0\uc131\uc744 \uc704\ud558\uc5ec \uc57d 5\ubd84\uac04 \uc9c0\uc18d\uc2dc\ud0b4.\n\uc774 \ud6c4\uc758 cycle\uc5d0\uc11c\ub294 \uc57d 1\ubd84\uac04 \ubcc0\uc131\uc2dc\ud0b4.\n\n\n\n4.2 Primer \uc758 \uacb0\ud569(annealing):\n\n50\u2103\u223c65\u2103\uc5d0\uc11c \uc9c4\ud589.\n30sec~1min.\n\uc5fc\uae30 \uac04\uc758 \uacb0\ud569\uc740 G, C\uc758\uacbd\uc6b0 \uc138\uad70\ub370 \uc5d0\uc11c \uc218\uc18c\uacb0\ud569\uc774 \uc77c\uc5b4\ub098\uace0 A, T\ub294 \ub450\uad70\ub370\uc5d0\uc11c \uacb0\ud569\uc774 \uc77c\uc5b4\ub098\ubbc0\ub85c G+C \ube44\uc728\uc5d0 \ub530\ub77c \uacb0\ud569 \uc628\ub3c4 \uacb0\uc815.\nPrimer design\uc2dc\uc5d0 Annealing temperature\ub97c \uace0\ub824\ud574\uc57c \ud568.\n\uc77c\ubc18\uc801\uc73c\ub85c GC content\uac00 50%\uac00 \ub418\ub294 primer \uc30d\uc744 \uc774\uc6a9\ud558\ub294 \uac83\uc774 \ubc14\ub78c\uc9c1.\n\n\n\n4.3 DNA\uc758 \ud569\uc131(polymerization, extension):\n\n70\u2103\u223c74\u2103\uc5d0\uc11c \uc2dc\ud589.\n1min ~ 1min 30sec.\nTaq DNA polymerase\uc758 \ud569\uc131 \uc18d\ub3c4: 2,000\u223c4,000 nucleotides/min, 1 kb\ub9c8\ub2e4 1\ubd84 \uc815\ub3c4\uc758 \uc2dc\uac04\uc744 \ubc30\ub2f9.\n\uc6d0\ud558\ub294 PCR \uc0b0\ubb3c\uc758 \ud06c\uae30\uac00 \ud06c \uac70\ub098 \ubc18\uc751\uc694\uc18c\uc758 \ub18d\ub3c4\uac00 \ub0ae\uc744 \ub54c\uc5d0\ub294 \uc2dc\uac04\uc744 \uc5f0\uc7a5\ud560 \uc218 \uc788\uc74c.\nCycle\uc774 \uacc4\uc18d\ub418\uba74\uc11c \ud6a8\uc18c \ud65c\uc131\uc774 \uac10\uc18c\ud560 \uc218 \uc788\uace0 DNA \uc0b0\ubb3c\uc740 \uc810\uc810 \ub9ce\uc774 \uc874\uc7ac\ud558\uac8c \ub418\ubbc0\ub85c cycle \ud6c4\ubc18\ubd80\uc5d0\ub294 \ubc18\uc751\uc2dc\uac04\uc744 \uc870\uae08\uc529 \ub298\ub824\uac00\ub294 \uac83\ub3c4 \uc88b\uc740 \ubc29\ubc95\uc758 \ud558\ub098\uc774\uba70 \ub9c8\uc9c0\ub9c9 cycle \uc5d0\ub294 \uc57d 10\ubd84 \uc815\ub3c4 \uc2dc\uac04\uc744 \ucda9\ubd84\ud788 \uc8fc\uc5b4\uc11c \ud6a8\uc18c\uc758 \ud65c\uc131\uc774 \ucda9\ubd84\ud788 \ubc1c\ud718\ub418\ub3c4\ub85d \ud568.\n\n\n\n\n5 PCR \uc2e4\ud5d8 \uc2dc \uc720\uc758\ud558\uc5ec\uc57c \ud560 \uc0ac\ud56d\n\n5.1 Pipetting & DNA template:\n\uc5ec\ub7ec component\ub97c \ud63c\ud569\ud560 \ub54c\uc5d0\ub294 \uc2dc\ub8cc\uac04\uc5d0 \uc624\uc5fc\uc774 \ub418\uc9c0 \uc54a\ub3c4\ub85d \uc8fc\uc758\ud558\uc5ec\uc57c \ud558\uba70 \uac00\ub2a5\ud558\uba74 \uacf5\uae30\ub97c \ud1b5\ud55c \uc624\uc5fc\uc744 \ubc29\uc9c0\ud560 \uc218 \uc788\ub294 tip\uc744 \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \ubc18\uc751\ubb3c \ud63c\ud569 \uc2dc\uc5d0\ub294 tube\ub97c ice\uc0c1\uc5d0 \ub450\uace0\uc11c \ud63c\ud569\ud558\uc5ec\uc57c \uc0c1\uc628\uc5d0\uc11c\uc758 \uc798\ubabb primer annealing\uc5d0 \uc758\ud55c extension\uc744 \ubc29\uc9c0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\uc774\ub860\uc801\uc73c\ub85c Taq DNA polymerase\ub294 \ucd5c\uc801 \uc628\ub3c4 \uc774\ud558\uc5d0\uc11c\ub3c4 \ubc18\uc751\uc774 \uc5b4\ub290 \uc815\ub3c4 \uc9c4\ud589\ub428 \uc73c\ub85c \uc0c1\uc628 \ub4f1\uc5d0\uc11c \uc815\ud655\ud558\uac8c annealing\ub418\uc9c0 \uc54a\uc740 primer\uc5d0 \uc758\ud55c \uc784\uc758\uc758 \ubc18\uc751\uc774 \uc9c4\ud589\ub428\uc73c\ub85c\uc368 \uc6d0\ud558\ub294 size\uc758 product \uc774\uc678\uc758 non-specific product\uac00 \ub9cc\ub4e4\uc5b4\uc9c8 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n5.2 Setting up the Laboratory:\nPCR\uc740 \ubbfc\uac10\ub3c4\uac00 \ub6f0\uc5b4\ub09c \uc2e4\ud5d8\uc774\uae30 \ub54c\ubb38\uc5d0 \uc544\uc8fc \uc801\uc740 \uc591\uc758 DNA\uac00 \uc624\uc5fc\ub418\ub354\ub77c\ub3c4 \uc2e4\ud5d8\uc5d0 \ud070 \uc601\ud5a5\uc744 \ubbf8\uce60 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c PCR\uc744 \uc704\ud55c template\ub97c \uc900\ube44\ud558\ub294 \uacf3\uacfc PCR \ubc18\uc751\uc744 \ud558\ub294 \uacf3, \uadf8\ub9ac\uace0 PCR \ud6c4 \uc804\uae30\uc601\ub3d9 \ubc0f \ubd84\uc11d\uc744 \ud558\ub294 \uacf3\uc740 \uaca9\ub9ac\uc2dc\ud0a4\ub294 \uac83\uc774 \uc88b\uc73c\uba70, DNase \uc640 RNase free PCR tube\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \ubaa8\ub4e0 \uc2dc\uc57d\ub958\ub294 \ubc18\ub4dc\uc2dc autoclave\uc640 filteration\uc744 \uac70\uce5c \ud6c4 \uc0ac\uc6a9\ud558\uc5ec\uc57c \ud569\ub2c8\ub2e4.\n\n\n5.3 PCR cycling program:\nPCR cycling \uc870\uac74\uc740 PCR\uc758 \uc885\ub958\uc640 \uc8fc\ud615 DNA, primer \uadf8\ub9ac\uace0 PCR \uae30\uae30\ub4f1\uc5d0 \ub530\ub77c \ub2ec\ub77c \uc838\uc57c \ud569\ub2c8\ub2e4.\n\nInitial denaturation:\n\ntemplate DNA\uc758 \uc644\uc804\ud55c denaturation\uc774 \uc911\uc694\ud55c\ub370 94\u2103\u223c95\u2103\uc5d0\uc11c 2\u223c3 min \uc815\ub3c4\ub85c \ucda9\ubd84\ud558\uc9c0\ub9cc \ub300\ubd80\ubd84 5 min \uc815\ub3c4 \ucd08\uae30 \ubcc0\uc131 \uc2dc\uac04\uc744 \uc8fc\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. denaturation \uc774 \ucda9\ubd84\ud558\uc9c0 \uc54a\uc73c\uba74 primer\uc758 annealing \uacfc extension\uc774 \ubc29\ud574\ubc1b\uc544 \uc815\ud655\ud55c \ubc18\uc751\ubb3c\uc774 \uc0dd\uae30\uc9c0 \uc54a\uc744 \uc218 \ub3c4 \uc788\uc2b5\ub2c8\ub2e4.\n\n\nDenaturation step during cycling:\n\n\ubcf4\ud1b5 94\u2103\u223c95\u2103\uc5d0\uc11c 20\u223c30 sec \uc815\ub3c4\uc774\uc9c0\ub9cc PCR \uae30\uae30\uc640 tube \ub4f1\uc5d0 \ub530\ub77c \uc2dc\uac04\uc744 \ub298\ub9ac\uae30\ub3c4 \ud569\ub2c8\ub2e4. Template\uc758 GC\ud568\ub7c9\uc774 \ub192\uc73c\uba74 \ub192\uc740 \uc628\ub3c4\uc640 \uae34 \uc2dc\uac04\uc744 \uc0ac\uc6a9\ud558\uae30\ub3c4 \ud558\uc9c0\ub9cc \ud544\uc694 \uc774\uc0c1\uc73c\ub85c \ubcc0\uc131 \uc628\ub3c4\uac00 \ub192\uac70\ub098 \uae38\uba74 Taq DNA polymerase\uc758 \ud65c\uc131 \uc774 \uac10\uc18c\ub429\ub2c8\ub2e4.\n\n\nPrimer annealing:\n\n\ub300\uac1c\uc758 \uacbd\uc6b0 annealing \uc628\ub3c4\ub294 primer\uc758 Tm \uac12\uc5d0 \ub530\ub77c \uacb0\uc815\ub429\ub2c8\ub2e4. \uc628\ub3c4\uac00 \ub108\ubb34 \ub192\uc73c\uba74 primer\uac00 annealing \ub418\uc9c0 \uc54a\uc544 PCR product\uac00 \uc0dd\uae30\uc9c0 \uc54a\uac8c \ub418\uace0, \uc628\ub3c4\uac00 \ub108\ubb34 \ub0ae\uc73c\uba74 non-specific annealing \uc774 \uc77c\uc5b4\ub098 \uc815\ud655\ud55c PCR product\uac00 \uc0dd\uae30\uc9c0 \uc54a\uc2b5\ub2c8\ub2e4.\n\n\nExtension (polymerization):\n\nTaq polymerase\uc758 \uacbd\uc6b0 72\u2103\uc5d0\uc11c 1\ucd08\ub2f9 \uc57d 60\uac1c\uc758 \uc5fc\uae30\ub97c \uc911\ud569\uc2dc\ud0a4\uae30 \ub54c\ubb38\uc5d0 1 kb \uae4c\uc9c0\ub294 45 sec\uc815\ub3c4\uba74 \ucda9\ubd84\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 1kb\ub2f9 1\ubd84\uc815\ub3c4\uc758 \uc2dc\uac04\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.\n\n\n\nCycle number\n\ub300\ubd80\ubd84\uc758 \uacbd\uc6b0 25\u223c35 cycles\uc744 \uc9c4\ud589\ud558\uace0, Template \ubd84\uc790\uac00 10\uac1c \uc774\ud558\uc778 \uacbd\uc6b0\uc5d0\ub294 40 cycles \uc815\ub3c4 \uc9c4\ud589\ud558\uba74 product\uc744 \uad00\ucc30\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ub098 cycle\uc758 \uc218\ub97c \ubb34\uc791 \uc815 \ub298\ub9b0\ub2e4\uace0 \ud574\uc11c product\uc758 \uc591\uc774 \uae09\uaca9\ud788 \ub298\uc9c0\ub294 \uc54a\uc73c\uba70 \uc624\ud788\ub824 \ube44\ud2b9\uc774\uc801 \ubc34\ub4dc\uac00 \ub298\uc5b4\ub0a0 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\n5.4 Equipment (Thermocyclers & PCR tubes):\nPCR \uae30\uae30\ub294 \uae30\ubcf8\uc801\uc73c\ub85c PCR \ubc18\uc751\uc744 \uad6c\uc131\ud558\ub294 \uc138 \uac00\uc9c0 \uc628\ub3c4\ub97c \ucd5c\uc18c\ud55c\uc758 \uc2dc\uac04\uc5d0 \uc815\ud655\ud558 \uace0 \uc7ac\ud604\uc131\uc788\uac8c \uc720\uc9c0\ud560 \uc218 \uc788\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ub610\ud55c \ubc18\uc751 tube\uc5d0 \ub530\ub77c \uc5f4\uc804\ub3c4\uc728\uc758 \ucc28\uc774\uac00 \uc788\uae30 \ub54c\ubb38\uc5d0 \uac00\ub2a5\ud558\uba74 thin-walled reaction tube\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc774 \uc88b\uc73c\uba70 thermal cycler\uc758 block\uc5d0 \uaf2d \ub9de\ub294 \ud06c\uae30\ub97c \uc0ac\uc6a9\ud558\uc5ec\uc57c \ud569\ub2c8\ub2e4.\n\n\n5.5 PCR reaction components:\n\nDNA template:\n\nTemplate \uc591\uacfc \uc9c8\uc740 PCR\uc5d0 \uc808\ub300\uc801\uc778 \uc601\ud5a5\uc744 \ubbf8\uce69\ub2c8\ub2e4. template\uac00 \uc801\uc744\uc218\ub85d product\uc758 \uc591 \uc5ed\uc2dc \ube44\ub840\uc801\uc73c\ub85c \uac10\uc18c\ud558\uac8c \ub418\uba70, RNA\uc758 \uc624\uc5fc\uc740 Mg2+ \uc774\uc628\uc744 \uc7a1\uc544\uba39\uc5b4 yield\ub97c \ub0ae\ucd94\uac8c \ub418\uace0 \ubd88 \uc21c\ud55c template\uc5d0\ub294 \ubc18\uc751\uc800\ud574\uc81c\ub4e4\uc744 \ub9ce\uc774 \ud3ec\ud568 \ud558\uace0 \uc788\uc5b4 \ubc18\uc751\uc758 \ud6a8\uc728\uc744 \ub5a8\uc5b4\ub728\ub9bd\ub2c8\ub2e4.\n\n\nPCR Primers:\n\nPCR\uc758 \ub9ce\uc740 \uc694\uc18c\ub4e4 \uc911\uc5d0\uc11c\ub3c4 primer\uc758 \uc5fc\uae30\uc11c\uc5f4\uacfc \ub18d\ub3c4\ub294 \uc804\uccb4 \ubc18\uc751\uc758 \uc131\ud328\uc5d0 \uac00\uc7a5 \ud070 \uc601\ud5a5\uc744 \ubbf8\uce58\ub294 \uc694\uc778 \uc911 \ud558\ub098\ub85c \ub2e4\uc74c\uacfc \uac19\uc740 \uc0ac\ud56d\ub4e4\uc744 \uace0\ub824\ud558\uc5ec \uc124\uacc4\ud558\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \uae38\uc774\ub294 18\u223c24mer\uac00 \uc801\ub2f9\ud558\uba70 \ub450 primer\uc758 Tm \uac12\uc758 \ucc28\uc774\ub294 5\u2103 \uc774\ub0b4\ub85c \ud558\uace0 \uac00\uae09\uc801 2\ucc28 \uad6c\uc870\uac00 \ud615\uc131\ub418\uc9c0 \uc54a\ub3c4\ub85d\ud558\uba70 G+C \uac12\uc740 40\u223c60%\ub85c\ud558\uc5ec \ub450 primer\uc758 3\u2032 \uc0ac\uc774\uc5d0 \uc0c1\ubcf4\uacb0\ud569\uc774 \uc5c6\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n\n\nChoice of DNA polymerase:\n\nPCR \ubc18\uc751\uc5d0 \uc0ac\uc6a9\ud558\ub294 Taq DNA polymerase\ub294 0.5\u223c2.5U/20\u223c50ul volume \uc815\ub3c4\uac00 \uc801\ub2f9\ud569\ub2c8\ub2e4. \ube44\uc728\uc801\uc73c\ub85c \ub108\ubb34 \ub9ce\uc740 \ud6a8\uc18c\uac00 \ub4e4\uc5b4\uac00\uac8c \ub418\uba74 \ub192\uc740 glycerol \ub18d\ub3c4\ub85c \uc778\ud558\uc5ec product\uac00 \ub04c\ub9ac\ub294 \ud604\uc0c1\uc774\ub098 \ud2b9\uc774\uc131\uc774 \ub5a8\uc5b4\uc838 \ubd88\uade0\ud615\uc801\uc778 \uacb0\uacfc\ub97c \ucd08\ub798\ud558\uac8c \ub418\uba70, \ub108\ubb34 \uc801\uc740 \uc591\uc758 \ud6a8\uc18c\ub97c \uc0ac\uc6a9\ud558\uba74 \uc0dd\uc131\ubb3c\uc758 \uc591\uc774 \ubd80\uc871\ud558\uac8c \ub429\ub2c8\ub2e4.\n\n\nDeoxynucleotide triphosphate (dNTP):\n\n\ud56d\uc0c1 dNTP\uc758 4\uac00\uc9c0 \uc694\uc18c\ub4e4\uc740 \ub3d9\uc77c \ub18d\ub3c4\ub85c \uc0ac\uc6a9\ud558\uc5ec\uc57c \ud569\ub2c8\ub2e4. dNTP mixture\uc758 \ubd88\uade0 \ud615\uc740 Taq polymerase\uc758 fidelity\ub97c \uac10\uc18c\uc2dc\ucf1c error rate\uac00 \uc99d\uac00\ub420 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ub610\ud55c dNTP stock\uc740 thawing/freezing\uc5d0 \ubbfc\uac10\ud558\uc5ec 3\u223c5\ucc28\ub840\ub9cc \ubc18\ubcf5\ud558\uc5ec\ub3c4 \ud65c\uc131\uc774 \uac10\uc18c\ud558\uc5ec \uc62c\ubc14\ub978 \uacb0\uacfc\ub97c \uae30\ub300\ud560 \uc218 \uc5c6\uc2b5\ub2c8\ub2e4. \uadf8\ub7ec\ubbc0\ub85c stock\uc740 \uc0ac\uc6a9\ub7c9\uc5d0 \ub9de\uac8c\ub054 \uc801\uc808\ud558\uac8c \ubc30\ubd84\ud574\ub193\ub294 \uac83\uc774 \uc88b\uc2b5\ub2c8\ub2e4. \ub9cc\uc77c dNTP\uc758 \ub18d\ub3c4\ub97c \uc99d\uac00\uc2dc\ud0a4\ub824\uba74 \ubc18\ub4dc\uc2dc Mg2+\uc758 \ub18d\ub3c4 \uc5ed\uc2dc \uc99d\uac00\uc2dc\ucf1c \uc8fc\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ub192\uc740 dNTP \ub18d\ub3c4\ub294 free Mg2+\uc744 \uac10\uc18c\uc2dc\ucf1c \ud6a8\uc18c\uc758 \ubc18\uc751\uc744 \ubc29\ud574\ud558\uace0 primer\uc758 annealing\uc744 \uac10\uc18c\uc2dc\ud0a4\uac8c \ub429\ub2c8\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c \uc0ac\uc6a9\ub418\ub294 dNTP\uc758 \ucd5c\uc885 \ub18d\ub3c4\ub294 \uac01 200\u223c250uM \uc785\ub2c8\ub2e4.\n\n\nMgCl2 concentration:\n\nMg2+\uc740 dNTP\uc640 \ubcf5\ud569\uccb4\ub97c \ud615\uc131\ud558\uc5ec \ud6a8\uc18c\uc758 \uc2e4\uc9c8\uc801\uc778 substrate\ub85c \uc774\uc6a9\ub429\ub2c8\ub2e4. free Mg2+\uc758 \ub18d\ub3c4\ub294 dNTP, free pyrophosphate \uadf8\ub9ac \uace0 EDTA \uac19\uc740 ion \uacb0\ud569 \ubb3c\uc9c8\uc758 \ub18d\ub3c4\uc5d0 \uc601\ud5a5\uc744 \ubc1b\uac8c \ub429\ub2c8\ub2e4. \ucd5c\uc801 \uc758 \uc2e4\ud5d8\uacb0\uacfc\ub97c \uc704\ud574\uc120 \uc801\uc808\ud55c MgCl2\uc758 \ub18d\ub3c4\ub97c \uc0ac\uc6a9\ud558\uc5ec\uc57c \ud558\ub294\ub370 \uac00\uc7a5 \uc77c\ubc18\uc801\uc778 \ub18d\ub3c4\ub294 1.5mM (dNTP \uac01 200uM \uc77c \ub54c)\uc785\ub2c8\ub2e4. Mg2+\uc740 \ud6a8\uc18c \ud65c\uc131\uc5d0 \uc601\ud5a5\uc744 \ubbf8\uce58\uace0 double-strand DNA\uc758 Tm \uac12 \uc744 \uc99d\uac00\uc2dc\ud0a4\ub294 \ud6a8\uacfc\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uacfc\ub2e4\ud55c Mg2+\uc740 primer\uc758 \ube44 \ud2b9\uc774 \uc801\uc778 \uacb0\ud569\uacfc background\ub97c \uc99d\uac00\uc2dc\ud0a4\uac8c \ub429\ub2c8\ub2e4.\n\n\n\nReaction overlay:\nPCR \ubc18\uc751\uc744 \ud558\ub294 \ub3d9\uc548 mixture\uac00 \uc99d\ubc1c\ub418\ub294 \uac83\uc744 \ubc29\uc9c0\ud558\uae30 \uc704\ud558\uc5ec mineral oil\uc744 \ub123\uc5b4\uc8fc\uc5b4\uc57c \ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc PCR \uae30\uae30\uc758 \ub450\uaed1\uc5d0 \ud788\ud130\uac00 \ub2ec\ub824\uc788\ub2e4\uba74 mineral oil\uc744 \ub123\uc5b4 \uc904 \ud544\uc694 \uc5c6\uc2b5\ub2c8\ub2e4.\n\n\n\n\n\n\n\n6 PCR\uc758 \uc885\ub958\n\n6.1 RT-PCR\nRT-PCR((Reverse Transcriptase Polymerase Chain Reaction)\uc774\ub780 P.Seeburg(1986)\uc5d0 \uc758\ud574 RNA\ub97c \ucc3e\uace0 \ubd84\uc11d\ud558\ub294\ub370 \ub3c4\uc785\ub41c \ubc29\ubc95\uc73c\ub85c mRNA(messenger RNA)\ub85c\ubd80\ud130 reverse transcription \uacfc\uc815\uc744 \ud1b5\ud574 \uc5bb\uc5b4\uc9c4 cDNA(complementary DNA)\ub97c PCR\ub85c \uc99d\ud3ed\ud558\ub294 \ubc29\ubc95\uc774\ub2e4. \uc774\ub7ec\ud55c \ubc29\ubc95\uc740 RNA \uac80\uc0ac\uc758 sensitivity\ub97c \ub192\uc774\uace0 \uc18c\ub7c9\uc758 RNA\ub85c\ubd80\ud130 \uc5fc\uae30\uc11c\uc5f4\uc744 \ubd84\uc11d\ud560 \uc218 \uc788\uac8c \ud558\uc600\ub2e4. \uc774 \ubc29\ubc95\uc740 Northern blot hybridization\uacfc \uac19\uc740 \ubc29\ubc95\uc744 \ud1b5\ud574 \uac00\ub2a5\ud558\ub358 RNA \ubd84\uc11d\ubcf4\ub2e4 \uc2e4\ud5d8\ubc29\ubc95\uc774 \ub354\uc6b1 \uac04\ub2e8\ud560 \ubfd0 \uc544\ub2c8\ub77c \uc720\uc804\uc790\uc758 \uc5fc\uae30\uc11c\uc5f4 \uacb0\uc815\uc774 \uac00\ub2a5\ud558\uae30 \ub54c\ubb38\uc5d0 \uc8fc\ub85c mRNA\uc758 \uc5fc\uae30\uc11c\uc5f4 \ubc0f \uc804\uc0ac\ub7c9\uc744 \uc5f0\uad6c\ud560 \ub54c \ud06c\uac8c \ub3c4\uc6c0\uc744 \uc900\ub2e4. \uc5fc\uae30\uc11c\uc5f4\uc774 \uc54c\ub824\uc9c4 \uc720\uc804\uc790\uc758 \uacbd\uc6b0 RT-PCR\uc744 \ud1b5\ud574\uc11c \uc804\uccb4 \uae38\uc774\uc758 cDNA\ub97c \uac04\ub2e8\ud558\uac8c \ud569\uc131\ud558\uc5ec cloning \ud560 \uc218 \uc788\ub2e4.\nRT-PCR\uc758 \uc138\uac00\uc9c0 \uacfc\uc815:\n\nRNA \ubd84\ub9ac \uacfc\uc815(\uc774 \uacfc\uc815\uc740 Northern Blot\uc744 \ud558\uae30 \uc804\uc5d0 \uc2dc\ud589\ud574\uc57c \ud558\ub294 \ub3d9\uc77c\ud55c \uacfc\uc815\uc774\ub2e4)\ncDNA \ud569\uc131 \uacfc\uc815(reverse transcription)\nPCR amplification (\uc774 \uacfc\uc815\uc740 Genomic DNA\ub85c\ubd80\ud130 \ud2b9\uc815 \uc720\uc804\uc790 \ubd80\uc704\ub97c \uc99d\ud3ed\uc2dc\ud0a4\ub294 \uacfc\uc815\uacfc \uac19\ub2e4)\uc73c\ub85c \uc9c4\ud589\ub41c\ub2e4.\n\nmRNA\ub85c\ubd80\ud130 reverse transcriptase\ub97c \uc774\uc6a9\ud558\uc5ec cDNA\ub97c \uc81c\uc870\ud558\ub294 \ubc29\ubc95\uc5d0\ub294 \uc5b4\ub5a4 oligonucleotide\ub97c primer\ub85c \uc0ac\uc6a9\ud558\ub294\uac00\uc5d0 \ub530\ub77c \uc138\uac00\uc9c0 \ubc29\ubc95\n\nAntisense primer(3\u2019\ucabd \uc720\uc804\uc790\uc5d0 \ud2b9\uc774\uc131\uc744 \uc9c0\ub2cc primer)\ub97c \uc774\uc6a9\ud558\uc5ec \ud2b9\uc815\ubd80\uc704 cDNA \uc81c\uc870\nRandom hexamer\ub97c \uc774\uc6a9\ud558\uc5ec \uc804\uccb4 mRNA\uc5d0 \uc0c1\ubcf4\uc801\uc778 cDNA \uc81c\uc870\nOligo dT primer\ub97c \uc774\uc6a9\ud558\uc5ec \uc804\uccb4 mRNA\uc5d0 \uc0c1\ubcf4\uc801\uc778 cDNA \uc81c\uc870\uac00 \uc788\ub2e4.\n\n\n\n6.2 SSCP(Single Strand Conformation Polymorphism)\npoint mutation \ucc3e\uae30. \uc720\uc804\uc790\ub0b4\uc758 \ubcc0\uc774, \ud2b9\ud788 point mutation\uc744 \ubc1c\uacac\ud558\ub294\ub370 \uac00\uc7a5 \uac04\ub2e8\ud558\uace0 \uc2e0\uc18d\ud55c \ubc29\ubc95\uc774\ub2e4. PCR \uc218\ud589\uc2dc \uac01\ud558\ub294 \ubc29\ud5a5\uacfc \ubc18\ub300 \ubc29\ud5a5\uc73c\ub85c PCR\uc744 \uc2e4\uc2dc\ud558\ub294 \ubc29\ubc95\uc774\ub2e4. \ubcc0\uc774\uac00 \uc788\uc744 \uac83\uc73c\ub85c \uc608\uc0c1\ub418\ub294 DNA \ud2b9\uc815\ubd80\uc704 \uc591\ucabd\uc73c\ub85c \uc801\ub2f9\ud788 \ub35c\uc5b4\uc838 \uc788\ub294 \ubd80\uc704\uc5d0 PCR\uc744 \uc2e4\uc2dc\ud558\uae30 \uc704\ud55c primer\ub97c \uc81c\uc870\ud55c \ud6c4 PCR\ub85c \uc774 DNA\ub97c \uc99d\ud3ed\uc2dc\ud0a8\ub2e4. \uc774 \uc99d\ud3ed\ub41c DNA\ub97c \uac80\ucd9c\ud558\uae30 \uc704\ud574\uc11c\ub294 \uc804\uae30\uc601\ub3d9\uc744 \uc2e4\uc2dc\ud574\uc57c \ud558\ub294\ub370 \uc804\uae30\uc601\ub3d9\uc5d0 \uc601\ud5a5\uc744 \uc8fc\ub294 \uc778\uc790\ub4e4\uc5d0\ub294 \uc5ec\ub7ec \uac00\uc9c0\uac00 \uc788\ub2e4. \uadf8 \uc911 SSCP\uc5d0 \uc774\uc6a9\ub418\ub294 \uc778\uc790\ub294 \uc785\uc790\ub4e4\uc758 \ud615\ud0dc\uc5d0 \ub530\ub77c \uc804\uae30\uc601\ub3d9\uc2dc \uc774\ub3d9\ud558\ub294 \uc18d\ub3c4\uac00 \ub2ec\ub77c\uc9c4\ub2e4\ub294 \uc810\uc744 \uc774\uc6a9\ud558\ub294 \uac83\uc774\ub2e4. \ud55c \uac1c\uc758 point mutation\ub9cc \uc788\ub294 \uacbd\uc6b0\uc5d0\ub3c4 \ub098\ud0c0\ub0a0 \uc218 \uc788\ub294 \ubbf8\uc138\ud55c \uc774\ub3d9 \uc18d\ub3c4\uc758 \ucc28\uc774\ub3c4 \uac80\ucd9c\ud574\uc57c \ud558\ubbc0\ub85c SSCP\ub97c \uc704\ud574\uc11c\ub294 agarose gel\ub300\uc2e0 acrylamide gel\uc774 \uc774\uc6a9\ub41c\ub2e4. PCR \uc0b0\ubb3c\uc744 \uc804\uae30\uc601\ub3d9\ud558\uae30 \uc804\uc5d0 DNA\ub97c \ubcc0\uc131\uc2dc\ud0ac \uc218 \uc788\ub3c4\ub85d NaOH\ub97c \uac00\ud55c \ud6c4 urea\uac00 \ud3ec\ud568\ub41c denaturing acrylamide gel\uc5d0 \uc804\uae30\uc601\ub3d9\ud558\uba74 \ubcc0\uc131\ub41c DNA double strand\ub294 \ub450 \uac1c\uc758 single strand DNA\ub85c \ubd84\ub9ac\ub418\uc5b4 \uc804\uae30\uc601\ub3d9\ud558\uac8c \ub418\uba70 \uc774 \ub54c point mutation\uc774 \uc0dd\uae34 \uc2dc\ub8cc\ub294 \ub2e4\ub978 \uc815\uc0c1\uc801\uc778 \uc2dc\ub8cc\uc5d0\uc11c \uc5bb\uc5b4\uc9c4 \ub450 \uac1c\uc758 DNA band\uc640 \ub2e4\ub978 \uc704\uce58\uc5d0 band\uac00 \ub098\ud0c0\ub098\uac8c \ub41c\ub2e4. \uc77c\ubc18\uc801\uc778 \uc5fc\uc0c9\ub9cc\uc73c\ub85c \ubcc0\uc774 \uc5ec\ubd80\ub97c \ud310\uc815\ud560 \uc218 \uc788\ub294 \uacbd\uc6b0\ub3c4 \uc788\uc73c\ub098, \uc6cc\ub099 \ubbf8\uc138\ud55c \ucc28\uc774\ub97c \uac10\uc9c0\ud574\uc57c \ud558\ubbc0\ub85c \ubbfc\uac10\ub3c4\uac00 \ub192\uc740 silver nitrate \uc5fc\uc0c9\uc744 \ud558\ub294 \ud3b8\uc774 \uacb0\uacfc\ub97c \ud310\uc815\ud558\uae30\uc5d0 \ud3b8\ub9ac\ud558\ub2e4.   \uacfc\uac70\uc5d0\ub294 \uc544\uc8fc \uc2dc\ub8cc\ub97c \ubcc0\uc131\uc2dc\ud0a8 \ud6c4 non-denatured acrylamide\uc5d0 \uc804\uae30\uc601\ub3d9\ud558\uace0, \uc774\ub97c nylon membrane\uc5d0 transfer\ud55c \ud6c4 \ubc29\uc0ac\uc131 \ub3d9\uc704 \uc6d0\uc18c(radioisotope)\ub85c \ud45c\uc9c0\ub41c probe\ub97c \ubd99\uc774\ub294 \ubcf5\uc7a1\ud55c \uc2e4\ud5d8 \ubc29\ubc95\uc774\uc5c8\uc73c\ub098 \ucd5c\uadfc\uc5d0\ub294 \uc544\uc8fc \uac04\ub2e8\ud55c \ubc29\ubc95\uc73c\ub85c \uac1c\ub7c9\ub418\uc5b4 \ub110\ub9ac \uc4f0\uc774\uace0 \uc788\uc73c\uba70, \ubbfc\uac10\ub3c4\ub97c \ub192\uc774\uae30 \uc704\ud574  \ubc29\uc0ac\uc131 \ub3d9\uc704 \uc6d0\uc18c\ub97c \uc0ac\uc6a9\ud560 \ud544\uc694 \uc5c6\uc774 silver nitrate\ub97c \uc774\uc6a9\ud558\uc5ec \uac74\uac15\uc744 \ud5e4\uce58\uc9c0 \uc54a\uace0 \uac04\ub2e8\ud788 \uacb0\uacfc\ub97c \ud310\ub3c5\ud560 \uc218 \uc788\uac8c \ub418\uc5c8\ub2e4.\n\n\n6.3 RACE(Rapid Amplification of cDNA Ends):\ncDNA\ub97c cloning\ud558\uae30 \uc704\ud574\uc11c\ub294 cDNA library\ub97c screening\ud558\ub294 \ubc29\ubc95\uc774 \ud604\uc7ac \uac00\uc7a5 \uc77c\ubc18\uc801\uc774\ub77c \ud560 \uc218\uc788\uc9c0\ub9cc, \uc774 \ubc29\ubc95\uc73c\ub85c \ucc98\uc74c screening\uc744 \ud558\uc5ec \ucc3e\uc544\ub0b8 clone\uc740 \ub300\uac1c \uc804\uccb4 cDNA\uc758 \uc77c\ubd80\uc774\uba70 \uacc4\uc18d \ubc18\ubcf5\ud558\uc5ec screening\uc744 \ud558\uc5ec\uc57c\ub9cc \uc644\uc804\ud55c cDNA\ub97c \uc5bb\uc5b4\ub0bc \uc218 \uc788\ub2e4. \uadf8\ub7ec\ub098 \uc774\ub7f0 \uacfc\uc815\uc740 \ub300\ub2e8\ud788 \uc2dc\uac04\uacfc \ub178\ub825\uc774 \uc18c\ubaa8\ub418\ub294 \uc791\uc5c5\uc774\uba70 \uc720\uc804\uc790 \uc790\uccb4\uac00 cDNA library\uc5d0 \uc801\uc740 \uc591\uc73c\ub85c \uc874\uc7ac\ud558\ub294 \uacbd\uc6b0\ub294 \ub354\ub354\uc6b1 \ud798\ub4e0 \uc77c\uc774 \ub420 \uac83\uc774\ub2e4. \ub610\ud55c initiation codon\ubd80\ud130 termination codon\uae4c\uc9c0 open reading frame(ORF)\uc744 \uc644\uc804\ud788 \uacb0\uc815\ud55c \uacbd\uc6b0\uc5d0\ub3c4 cDNA\uc758 5\u2019\uacfc 3\u2032-\ub05d\uc758 non-coding region \uc77c\ubd80\ub294 library screening\uc5d0\uc11c \uc5bb\uae30\uac00 \uc5b4\ub835\ub2e4. \uc774\ub7ec\ud55c \ubb38\uc81c\ub97c \ud574\uacb0\ud558\uace0\uc790, 1988\ub144 Frohmann \ub4f1\uc740 \ub2e4\uc74c\uacfc \uac19\uc740 \ubc29\ubc95\uc744 \uc18c\uac1c\ud558\uace0, \uc774\ub97c RACE(rapid amplification of cDNA ends)\ub77c \uc774\ub984\ud558\uc600\ub2e4. \uc989, cDNA\uc758 \uc77c\ubd80 \uc5fc\uae30\uc11c\uc5f4\uc744 \uc54c\uace0 \uc788\uc73c\uba74, \uc774 \ubd80\ubd84\uc5d0\uc11c gene specific primer\ub97c \ud569\uc131\ud558\uace0 PCR reaction\uc744 \ud1b5\ud574 5\u2032 \ud639\uc740 3\u2032-end \uae4c\uc9c0\uc758 DNA\ub97c \uc99d\ud3ed\ud558\ub294 \uac83\uc774\ub2e4. 3\u2032-RACE\uc5d0\uc11c\ub294 mRNA\uc758 3\u2032-end\uc5d0 \uc874\uc7ac\ud558\ub294 poly(A) tail\uc744 \uc774\uc6a9\ud560 \uc218 \uc788\uc73c\ubbc0\ub85c, down stream primer\ub85c oligo-(dT) primer\ub97c \uc4f4\ub2e4. \uadf8\ub7ec\ub098, 5\u2032-RACE\uc758 \uacbd\uc6b0\ub294 gene specific primer\ub85c \ud569\uc131\ud55c 1st single strand cDNA\uc758 \ub05d\uc5d0 TdT(terminal deoxynucleotidyl transferase)\ub97c \uc0ac\uc6a9\ud558\uc5ec poly(A) \ud639\uc740 poly(C) tail\uc744 \uc778\uc704\uc801\uc73c\ub85c \ub9cc\ub4e4\uc5b4 \uc8fc\uc5b4\uc57c\ub9cc \ud55c\ub2e4.\n\n\n6.4 ISPCR(In Situ Polymerase Chain Reaction):\nPCR\uc740 \uc6d0\ud558\ub294 DNA\ub97c \ub300\ub7c9\uc73c\ub85c \uc99d\ud3ed\uc2dc\ud0a4\ub294 \ubc29\ubc95\uc774\uace0, in situ hybidization (ISH)\uc740 \uc138\ud3ec\ub098 \uc870\uc9c1\uc5d0 \uc874\uc7ac\ud558\ub294 \uadf9\ubbf8\ub7c9\uc758 DNA \ubc0f RNA\ub97c \ucc3e\uc544\ub0bc \uc218 \uc788\uc74c\uc740 \ubb3c\ub860 \uc6d0\ud558\ub294 \uc720\uc804\uc790\ub4e4\uc758 \uc704\uce58\uae4c\uc9c0 \ud655\uc778\ud560 \uc218 \uc788\ub294 \ubc29\ubc95\uc774\ub2e4. ISPCR\uc740 \uc774 \ub450 \uac00\uc9c0 \ubc29\ubc95\uc758 \uc7a5\uc810\uc744 \ud63c\ud569\ud558\uc5ec \uc751\uc6a9\ud55c \ubc29\ubc95\uc73c\ub85c\uc11c PCR\uc758 sensitivity\uc640 ISH\uc758 specificity\ub97c \uace0\ub8e8 \uac16\ucd94\uace0 \uc788\ub2e4. ISPCR\uc758 \uc2e4\ud5d8\uc6d0\ub9ac\ub294 \uc77c\ubc18\uc801\uc778 PCR \ubc29\ubc95\uacfc \uac19\uc73c\ub098, slide glass \ub4f1\uc758 \uc0ac\uc6a9\uc5d0 \uc801\ud569\ud55c ISPCR\uc6a9 \uae30\uad6c\uac00 \ud544\uc694\ud558\uba70 \uc0ac\uc6a9\ud558\ub294 \uae30\uad6c\uc5d0 \ub530\ub77c \ubc18\uc751\uc2dc\ud0a4\ub294 \ubc29\ubc95\ub4e4\uc774 \ub2e4\uc591\ud558\uac8c \uc81c\uc2dc\ub418\uc5b4 \uc788\ub2e4.\nISPCR\uc740 \uc138\ud3ec\ub0b4\uc758 target sequence\ub97c \uc99d\ud3ed\uc2dc\ud0a4\ub294 \uac83\uc73c\ub85c\ubd80\ud130 \ubc18\uc751\uc774 \uc2dc\uc791\ub418\uba70 \uc138\ud3ec\ub9c9\uc744 \ud1b5\ud574 \uc5ec\ub7ec \ubb3c\uc9c8(\uc608: PCR \uc6a9\uc561\uc5d0 \ub4e4\uc5b4 \uc788\ub294 salt \ub4f1)\ub4e4\uc774 \uc27d\uac8c \uc774\ub3d9\ud560 \uc218 \uc788\ub3c4\ub85d \uc138\ud3ec\ub9c9\uc744 HCl, proteinase K \ub610\ub294 Triton X-100 \ub4f1\uc73c\ub85c \ucc98\ub9ac\ud574 \uc8fc\ub294 \uacfc\uc815\uc744 \uac70\uccd0\uc57c \ud55c\ub2e4. \uc774 \uacfc\uc815\uc5d0 \uc774\uc0c1\uc774 \uc0dd\uae30\uba74 \uc138\ud3ec\uac00 \uc190\uc0c1\ub418\uac70\ub098 \ud30c\uad34\ub418\ub294 \uc218\uac00 \uc788\uc73c\ubbc0\ub85c PCR\uc774 \ub05d\ub09c \ud6c4\uc5d0 \uc138\ud3ec \uc548\uc5d0\uc11c \uc99d\ud3ed\ub41c PCR \uc0b0\ubb3c\uc774 \uc138\ud3ec \ubc16\uc73c\ub85c \ube60\uc838\ub098\uc624\ub294 \uc6d0\uc778\uc774 \ub418\uae30\ub3c4 \ud55c\ub2e4. \uadf8\ub7ec\ubbc0\ub85c \uc801\ub2f9\ud55c \uc138\uc81c\uc758 \uc801\uc808\ud55c \uc120\ud0dd\uacfc \uc0ac\uc6a9\uc774 \ubb34\uc5c7\ubcf4\ub2e4 \uc911\uc694\ud558\uba70 PCR \uc0b0\ubb3c\uc774 \uc138\ud3ec \ubc16\uc73c\ub85c \uc720\ucd9c\ub418\ub294 \uac83\uc744 \ub9c9\uae30 \uc704\ud574\uc11c\ub294 single primer pair with complementary tail, biotinylated dNTPs, multiple overlapping primer pair \ub4f1\uc744 \uc774\uc6a9\ud55c \ubc29\ubc95\uc774 \uc18c\uac1c\ub418\uc5b4 \uc788\ub2e4.\ud604\uc7ac\uae4c\uc9c0 ISPCR \ubc29\ubc95\uc758 \ud6a8\uc728\uc740 \uadf8\ub2e4\uc9c0 \ub192\uc9c0 \ubabb\ud55c \uac83\uc73c\ub85c \uc54c\ub824\uc838 \uc788\uc73c\uba70 specificity\ub97c \uc99d\uac00\uc2dc\ud0a4\uae30 \uc704\ud574\uc11c\ub294 DNA probe\ub97c \uc774\uc6a9\ud55c in situ hybridization\uc744 \uc2dc\ud589\ud558\uac70\ub098 Southern blot hybridization\uc744 \uc2dc\ud589\ud558\ub294 \uac83\uc774 \uc88b\uc740 \ubc29\ubc95\uc774 \ub41c\ub2e4. \ud6a8\uc728\uc774 \ubcc4\ub85c \ub192\uc9c0 \ubabb\ud55c \ubc29\ubc95\uc784\uc5d0\ub3c4 \ubd88\uad6c\ud558\uace0 ISPCR\uc5d0 \ub300\ud55c \uad00\uc2ec\uc774 \ucd5c\uadfc \ud06c\uac8c \uc99d\uac00\ud558\uace0 \uc788\ub294 \uac83\uc740 \uc5ec\ub7ec \uac00\uc9c0 \uc9c8\ubcd1\ub4e4\uc758 \uc870\uae30 \ubc1c\uacac\uc5d0 \ud070 \ub3c4\uc6c0\uc744 \ubc1b\uc744 \uc218 \uc788\uc744 \uac83\uc73c\ub85c \uae30\ub300\ub418\uae30 \ub54c\ubb38\uc774\uba70, \uc9c0\uae08\ub3c4 \uc5ec\ub7ec \ud68c\uc0ac\uc5d0\uc11c ISPCR\uc5d0 \uc720\uc6a9\ud55c \uae30\uad6c\ub4e4\uc744 \uc81c\uc791, \ud310\ub9e4\ud558\uace0 \uc788\uc73c\ub098 \ub354 \uc88b\uc740 \uae30\uad6c\uc758 \uac1c\ubc1c\uc774 \uc774\ub8e8\uc5b4\uc838 \ud6a8\uc728\uc744 \ub354\uc6b1 \ub192\uc77c \uc218 \uc788\ub2e4\uba74 ISPCR\uc774 \ub354\uc6b1 \uc720\uc6a9\ud558\uac8c \uc0ac\uc6a9\ub420 \uc218 \uc788\uc744 \uac83\uc73c\ub85c \uae30\ub300\ub41c\ub2e4.\n\n\n6.5 DDRT-PCR(Differential Display Reverse Transcriptase PCR):\n\uc77c\ubc18\uc801\uc73c\ub85c \uace0\ub4f1\ub3d9\ubb3c\uc5d0\uc11c\ub294 \uc57d 100,000\uac00\uc9c0 \uc815\ub3c4\uc758 \uc11c\ub85c \ub2e4\ub978 \uc720\uc804\uc790\uac00 \ubc1c\ud604\ub418\uace0 \uc788\uc73c\uba70 \uac01\uac01\uc758 \uc138\ud3ec \ud55c \uac1c\uc5d0\uc11c\ub294 \uc774\uc911 \uc57d 15%\ub9cc\uc774 \ubc1c\ud604\ub418\uace0 \uc788\ub2e4. \ubc1c\uc0dd, \ubd84\ud654, homeostasis, \uc138\ud3ec\uc8fc\uae30 \uc870\uc808, \ub178\ud654, \ubc1c\uc554\uacfc\uc815 \ubc0f \uc138\ud3ec\uc758 \ud1f4\ud654 \ub4f1\uc758 \uacfc\uc815\uc5d0\uc11c \ud45c\ud604\ub418\uc5b4 \ub098\ud0c0\ub098\ub294 \uc720\uc804\uc790\ub4e4\uc740 \uc804\uccb4 \uc720\uc804\uc790\ub4e4 \uc911\uc5d0\uc11c \uc77c\ubd80\uac00 \uc120\ud0dd\ub418\uc5b4 \ub098\ud0c0\ub098\ub294 \uac83\uc774\ub77c\uace0 \ud560 \uc218\uac00 \uc788\ub2e4. \ud2b9\uc815 \uc138\ud3ec\uc5d0\uc11c \ubc1c\ud604\ub418\ub294 \ud2b9\uc815 \uc720\uc804\uc790\ub4e4\uc744 \ucc3e\uc544\ub0b4\uae30 \uc704\ud558\uc5ec \uc8fc\ub85c \uc0ac\uc6a9\ub418\ub294 \ubc29\ubc95\uc740 subtractive hybridization \ub610\ub294 differential hybridization \ubc29\ubc95\uc774\uc5c8\uc73c\ub098 \ucd5c\uadfc PCR\uc744 \uc774\uc6a9\ud558\uc5ec \uc720\uc804\uc790\ub97c \ucc3e\uc544\ub0b4\ub294 \ubc29\ubc95(DDRT-PCR)\uc774 \uac1c\ubc1c\ub418\uc5c8\ub2e4.\nDDRT-PCR\uc774\ub780 \uc11c\ub85c \ub2e4\ub978 \uc138\ud3ec\ub85c\ubd80\ud130 RNA\ub97c \ubd84\ub9ac\ud55c \ud6c4 \ud2b9\uc815\ud558\uac8c \ubc1c\ud604\ub418\ub294 mRNA\ub97c \ucc3e\uc544\ub0b4\uae30 \uc704\ud558\uc5ec T \uc5fc\uae30 10\uac1c\uc640 \ube44\ud2b9\uc815\uc5fc\uae30 2\uac1c\uac00 \uc5f0\uacb0\ub41c oligonucleotide\ub97c primer\ub85c \uc774\uc6a9\ud558\uc5ec cDNA\ub97c \ud569\uc131\ud55c \ud6c4 \uc774 primer\uc640 \ube44\ud2b9\uc815 \uc5fc\uae30\uc11c\uc5f4\uc744 \uc9c0\ub2cc oligonucleotide\ub97c primer\ub85c \uc774\uc6a9\ud558\uc5ec PCR \ud558\uc600\uc744 \ub54c \ub098\ud0c0\ub098\ub294 \uc5ec\ub7ec\uac00\uc9c0 PCR \uc0b0\ubb3c\uc744 \ube44\uad50\ud568\uc73c\ub85c\uc368 \uc11c\ub85c \ub2e4\ub978 \uc138\ud3ec\ub85c\ubd80\ud130 \uc99d\ud3ed\ub41c PCR \uc0b0\ubb3c\uc5d0 \ucc28\uc774\uac00 \uc788\ub294\uc9c0 \uc5c6\ub294\uc9c0\ub97c \ud655\uc778\ud558\ub294 \ubc29\ubc95\uc774\ub2e4. \uc11c\ub85c \ub2e4\ub974\uac8c \uc99d\ud3ed\ub41c PCR \uc0b0\ubb3c\uc744 \uc120\ud0dd\ud558\uc5ec \uc774\uc640 \uac19\uc774 \uc99d\ud3ed\ub41c DNA\uac00 \ud2b9\uc815 \uc138\ud3ec\uc5d0\uc11c \ud2b9\uc9d5\uc801\uc73c\ub85c \ubc1c\ud604\ub418\ub294 \uc720\uc804\uc790\uc778\uc9c0\ub97c \ubcf4\ub294 \uac83\uc73c\ub85c subtractive hybridization\ubcf4\ub2e4 \ubc29\ubc95\uc774 \ud6e8\uc52c \uac04\ub2e8\ud55c \uac83\uc774 \uc7a5\uc810\uc774\uc9c0\ub9cc, \uc2e4\ud5d8\uc758 sensitivity\uc640 specificity\uac00 \ub0ae\uc740 \uac83\uc774 \ub2e8\uc810\uc774\ub2e4. \ucd5c\uadfc \uc774 \ubc29\ubc95\uc5d0 \ub300\ud55c \uc5f0\uad6c\uac00 \ub9ce\uc774 \uc9c4\ud589\ub418\uba74\uc11c \uc0c8\ub85c\uc6b4 \ub354 \uc88b\uc740 \ubc29\ubc95\ub4e4\uc774 \uacc4\uc18d \ubc1c\ud45c\ub418\uace0 \uc788\uc73c\ubbc0\ub85c \ucd5c\uc2e0 \ub17c\ubb38\uc744 \ucc38\uace0\ub85c \uc801\uc808\ud55c \uc870\uac74\uc744 \ucc3e\uc544\ub0b4\uc5b4 \uc2e4\ud5d8\uc744 \uc2dc\ud589\ud558\uba74 \uc88b\uc740 \uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\uc744 \uac83\uc73c\ub85c \uae30\ub300\ub41c\ub2e4.\n\ud2b9\uc9d5:\n\u2013 \uc11c\ub85c \ub2e4\ub974\uac8c \uc99d\ud3ed\ub41c PCR \uc0b0\ubb3c\uc744 \uc120\ud0dd\ud558\uc5ec \uc774\uc640 \uac19\uc774 \uc99d\ud3ed\ub41c DNA\uac00 \ud2b9\uc815 \uc138\ud3ec\uc5d0\uc11c \ud2b9\uc9d5\uc801\uc73c\ub85c \ubc1c\ud604\ub418\ub294 \uc720\uc804\uc790\uc778\uc9c0\ub97c \ubcf4\ub294 \uac83\uc73c\ub85c subtractive hybridization\ubcf4\ub2e4 \ubc29\ubc95\uc774 \ud6e8\uc52c \uac04\ub2e8\ud55c \uac83\uc774 \uc7a5\uc810\n\u2013 \uc2e4\ud5d8\uc758 sensitivity\uc640 specificity\uac00 \ub0ae\uc740 \uac83\uc774 \ub2e8\uc810\n\n\n6.6 Hot start PCR:\nTaq1 polymerase\ub294 37\u2103\uc5d0\uc11c\ub3c4 \uadf8 \ud65c\uc131\uc774 \uc88b\uae30 \ub54c\ubb38\uc5d0 \uac04\ud639 \uac00\ub2e4\uac00 \uccab \ubc88\uc9f8 denaturation \uacfc\uc815\uc774 \uc644\uc804\ud788 \uc9c4\ud589\ub418\uae30\ub3c4 \uc804\uc5d0 primer\uac00 DNA molecule\uc5d0 \ubd99\uc5b4\uc11c extension\uc774 \uc77c\uc5b4\ub098\ub294 \uacbd\uc6b0\uac00 \uc788\ub2e4. \uc774\ub807\uac8c \ub0ae\uc740 \uc628\ub3c4\uc5d0\uc11c annealing\uc774 \uc77c\uc5b4\ub0a0 \uacbd\uc6b0 primer\uac00 mismatch\ud560 \ud655\ub960\uc774 \ub192\uace0, \ub530\ub77c\uc11c \uacb0\uacfc\uc801\uc73c\ub85c \uc815\ud655\ub3c4\uac00 \ub5a8\uc5b4\uc9c0\ub294 band\ub97c \uc5bb\uac8c \ub41c\ub2e4. \uc774\uac83\uc744 \ub9c9\ub294 \ubc29\ubc95\uc774 Hot-start PCR\ub97c \uc774\uc6a9\ud558\ub294 \uac83\uc774\ub2e4. Hot start PCR\uc5d0\uc11c\ub294 primer\uac00 \uc815\ud655\ud558\uac8c \uc6d0\ud558\ub294 DNA site\uc5d0\ub9cc \ubd99\uc744 \uc218 \uc788\ub3c4\ub85d \ucda9\ubd84\ud55c \uc628\ub3c4\uac00 \ub41c \ud6c4\uc5d0 PCR\uc774 \uc77c\uc5b4\ub098\ub3c4\ub85d \ud544\uc694\ud55c \ubb3c\uc9c8(ex. polymerase, MgCl2, dNTP)\uc744 \ub123\uc5b4\uc900\ub2e4. (\ubb3c\ub860 \uadf8 \uc804\uc5d0\ub294 \uc548 \ub123\uc5b4\uc900\ub2e4\ub294 \ub9d0\uc774\ub2e4.) \uc774\ub807\uac8c \ud558\uba74 \uc704\uc5d0\uc11c \ub9d0\ud55c \uac83\uacfc \uac19\uc740 mismatch\ub97c \ud53c\ud560 \uc218 \uc788\uc5b4, \uc0c1\ub300\uc801\uc73c\ub85c clear\ud55c band\ub97c \uc5bb\uc744 \uc218 \uc788\ub2e4.\n\n\n6.7 RAPD PCR:\nRAPD (random amplified polymorphic DNA) PCR\uc740 \uc77c\ubc18\uc801\uc73c\ub85c \ub450 \uc0dd\uba85\uccb4\uac00 \uacc4\ud1b5 \uc720\uc804\ud559\uc801\uc73c\ub85c \uc5bc\ub9c8\ub098 \uc720\uc0ac\uc131\uc774 \uc788\ub294\uac00\ub97c \ud310\ubcc4\ud560 \ub54c \uc0ac\uc6a9\ud55c\ub2e4. PCR\ud560 \ub54c primer\uac00 \uc9e7\uc744 \uacbd\uc6b0 genome \uc0c1\uc5d0 \uc5ec\ub7ec \uad70\ub370 \ub2ec\ub77c \ubd99\uc5b4\uc11c \uc5ec\ub7ec fragment\ub97c \ub9cc\ub4e0\ub2e4. \uc774\ub807\uac8c \ud574\uc11c \uc0dd\uaca8\ub09c \uc5ec\ub7ec fragment\ub97c \uc804\uae30\uc601\ub3d9\uc744 \uc0ac\uc6a9\ud574\uc11c \ud655\uc778\ud558\uba74 \uc0dd\uba85\uccb4\ub9c8\ub2e4 \uac01\uac01 \ub3c5\ud2b9\ud55c band\ub97c \ud615\uc131\ud558\ub294\ub370 \uc774\uac83\uc744 \uac00\uc9c0\uace0 \uc0dd\uba85\uccb4\uac04\uc758 \uc720\uc0ac\uc131\uc744 \ud310\ubcc4\ud560 \uc218 \uc788\ub2e4. \ub9cc\uc57d \ub450 \uc0dd\uba85\uccb4\uac00 \ube44\uc2b7\ud55c \uc885\uc77c \uacbd\uc6b0\uc5d0\ub294 band\uc758 \ubaa8\uc591\uc774 \ube44\uc2b7\ud560 \uac83\uc774\uba70, \uadf8\ub807\uc9c0 \uc54a\uc744 \uacbd\uc6b0\uc5d0\ub294 \uc11c\ub85c \ub9ce\uc740 \ucc28\uc774\ub97c \ub098\ud0c0\ub0bc \uac83\uc774\ub2e4. \uc774 RAPD PCR\uc740 \ubc29\ubc95\uc774 \ube44\uad50\uc801 \uac04\ub2e8\ud558\uace0 \uc26c\uc6cc genome sequencing\uc744 \ud558\uae30 \uc804\uc5d0 \ub300\ub7b5\uc801\uc778 \uc885\uac04\uc758 \uad00\uacc4\ub97c \ub098\ud0c0\ub0b4\uae30 \uc704\ud574\uc11c \ub9ce\uc774 \uc0ac\uc6a9\ub41c\ub2e4.\n\n\n6.8 Touchdown PCR:\n\ubc29\ubc95\uc740 PCR\ud560 \ub54c Tm(melting temperature)\uc744 \uc54c\uae30 \uc704\ud574\uc11c \ud558\ub294 PCR \ubc29\ubc95\uc774\ub2e4. PCR \uacfc\uc815\uc5d0\uc11c \ub9e4 2 cycle \ub9c8\ub2e4 annealing temperature\uc744 1\u2103\uc529 \ub0ae\ucd98\ub2e4. \uc77c\ubc18\uc801\uc73c\ub85c annealing\uc774 Tm\uc5d0\uc11c 1\u2103\ub9cc\ud07c \ucc28\uc774\uac00 \ub09c \uc628\ub3c4\uc5d0\uc11c \uc77c\uc5b4\ub0a0 \ub54c \ud55c cycle\uc5d0 product\uc758 \uc591\uc774 \ub450\ubc30 \uc815\ub3c4 \ucc28\uc774\uac00 \ub09c\ub2e4. Touchdown PCR\uc5d0\uc11c\ub294 2 cycle \ub9c8\ub2e4 \uc628\ub3c4\ub97c \ub0ae\ucdc4\uc73c\ubbc0\ub85c 1\u2103\uc5d0 product\uc758 \uc591\uc774 4\ubc30\uac00 \ucc28\uc774\ub098\ub294 \uc148\uc774\ub2e4. \uc774\uac83\uc744 \uc774\uc6a9\ud574\uc11c Tm\uc744 \uc54c \uc218 \uc788\ub2e4. (\uc989 \uc628\ub3c4\uac00 1\ub3c4 \ub0b4\ub824\uac14\uc744 \ub54c product\uc758 \uc591\uc774 4\ubc30 \uc99d\uac00\ud55c \uacfc\uc815\uc5d0\uc11c\uc758 temperature\uac00 Tm\uc774 \ub41c\ub2e4.)\n\ud2b9\uc9d5\uc801\uc73c\ub85c Gene-specific product \ub97c \ub9ce\uc774 \uc0dd\uc131\ud558\ubbc0\ub85c, non-specific amplification\uc744 \uc904\uc77c \uc218 \uc788\ub294 PCR \ubc29\ubc95\n\n\n6.9 Long Accurate PCR:\n\uc77c\ubc18\uc801\uc73c\ub85c PCR\ub85c\ub294 \ub9ce\uc544\uc57c 3kb, \uc880 \ub354 \uc774\uc0c1\uc801\uc77c\ub824\uba74 1kb \ubbf8\ub9cc\uc758 \ud06c\uae30\uc758 DNA\ub97c \uc99d\ud3ed\ud560 \uc218 \uc788\uc73c\ub098 \uc774 \ubc29\ubc95\uc744 \uc0ac\uc6a9\ud558\uba74 5-40kb\uc758 DNA\ub3c4 \uc99d\ud3ed\ud560 \uc218 \uc788\ub2e4. \uc774 long accurate PCR\uc5d0\uc11c\ub294 polymerase\ub97c \ub450 \uac1c \uc0ac\uc6a9\ud558\ub294\ub370, \uadf8\uc911 \ud558\ub098\uac00 minor-proofreading\uc744 \ud560 \uc218 \uc788\uc5b4\uc11c, \uae34 DNA\ub97c \uc99d\ud3ed\ud560 \ub54c error rate\ub97c \uac10\uc18c\uc2dc\ucf1c \uc900\ub2e4.\n\n\n6.10 Asymmetric PCR:\nSingle strand\ub97c \uc5bb\uc744 \ubaa9\uc801\uc73c\ub85c \uc774\uc6a9\ud558\ub294 PCR\ubc29\ubc95\uc774\ub2e4. Primer\ub97c \ub450 \uac1c \uc0ac\uc6a9\ud558\ub294\ub370 \ub450 primer\ub97c \ub18d\ub3c4\uac00 100:1\ub85c \uc11e\uc5b4 \uc0ac\uc6a9\ud55c\ub2e4. PCR\uc758 \ucd08\uae30\uc5d0 \ud55c\ucabd\uc758 primer\ub294 \uc18c\ube44\ub418\uc5b4 \ubc84\ub9ac\uace0 \uacfc\uc789\uc758 primer\uc5d0\uc11c single strand DNA\uac00 \uc0dd\uc131\ub41c\ub2e4\n\n\n6.11 Nest PCR:\n\ud55c\ubc88 PCR\ub85c \uc99d\ud3ed\ud55c DNA \ub2e8\ud3b8\uc744 \ud55c\ubc88 \ub354 \ub0b4\ubd80\uc758 primer\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc99d\ud3ed\ud558\ub294 \ubc29\ubc95\uc774\ub2e4. \uc774\ub294 \ube44 \ud2b9\uc774\uc801 \ubc18\uc751\uc744 \uac10\uc18c \uc2dc\ud0a4\uba70, PCR\uc744 2\ud68c \uc2e4\uc2dc\ud558\ubbc0\ub85c \uac10\ub3c4\uac00 \uc0c1\uc2b9\ud558\ub294 \ud6a8\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\ub2e4.\n\n\n6.12 Inverse PCR:\nInverse PCR\uc740 \uae30\uc874\uc5d0 \uc11c\uc5f4\uc744 \uc54c\uace0 \uc788\ub294 DNA\uc758 \uc591 \uc606\uc5d0 \uc11c\uc5f4\uc744 \uc54c\uc9c0 \ubabb\ud558\ub294 region\uc774 \uc788\uace0, \uc774\uac83\uc744 \uc54c\uace0\uc790 \ud560 \ub54c \ub9ce\uc774 \uc774\uc6a9\ub41c\ub2e4.\n\n\n6.13 Gradient PCR:\n\ud558\ub098\uc758 \ubaa9\uc801 \uc720\uc804\uc790\ub97c \uc99d\ud3ed\ud558\ub294 \ubc18\uc751\uc870\uac74\uc744 \ucd5c\uc801\ud654\ud558\uae30 \uc704\ud558\uc5ec \uc5ec\ub7ec \ubc88\uc758 \uc2e4\ud5d8\uc744 \uc218\ud589\ud574\uc57c \ud558\ub294 \ubc88\uac70\ub85c\uc6c0\uc774 \uc788\uc5c8\uc74c. \uac01 \ub2e8\uacc4\uc758 \uc628\ub3c4 \uc870\uac74\uc5d0\uc11c \uc2dc\ub8cc block\uc758 \uccab lane\uacfc \ub9c8\uc9c0\ub9c9 lane \uc0ac\uc774\uc5d0 \ucd5c\ub300 20 \u2103\uc758 \uc628\ub3c4 \ud3ed \uc124\uc815\uc774 \uac00\ub2a5\ud55c gradient \uae30\ub2a5\uc744 \uc774\uc6a9\ud558\uc5ec \ud55c\ubc88\uc758 \uc2e4\ud5d8\uc73c\ub85c \ubc18\uc751\uc870\uac74\uc744 \ucd5c\uc801\ud654\ud558\ub294 PCR \ubc29\ubc95\n\ud6a8\uacfc:\n\nAnnealing temp. \ub97c \ub2e8\uacc4\ubcc4\ub85c \uc124\uc815\ud558\uc5ec \ucd5c\uc801\uc758 melting temp.\ub97c \ucc3e\uc744 \uc218 \uc788\uc74c\nDenaturation \ub2e8\uacc4\ubfd0\ub9cc \uc544\ub2c8\ub77c extension \ub2e8\uacc4\uc5d0\ub3c4 \uc801\uc6a9 \uac00\ub2a5\n\n\n\n6.14 Real-Time PCR:\nThermal Cycler\uc640 \ubd84\uad11 \ud615\uad11 \uad11\ub3c4\uacc4\uac00 \uc77c\uccb4\ud654\ub41c \uc7a5\uce58\ub97c \uc774\uc6a9\ud558\uc5ec PCR \uc99d\ud3ed \uc0b0\ubb3c\uc758 \uc0dd\uc131 \uacfc\uc815\uc744 real time\uc73c\ub85c \ubaa8\ub2c8\ud130\ub9c1\ud558\uc5ec \ud574\uc11d\ud558\ub294 \ubc29\ubc95. \uc9c0\uae08\uae4c\uc9c0 \ub2e8\uc21c\ud788 DNA \uc99d\ud3ed\uc744 \ubaa9\uc801\uc73c\ub85c \ud558\ub294 PCR\uc5d0 \ube44\ud574 \uc99d\ud3ed\ub7c9\uc744 real time\uc73c\ub85c \ubaa8\ub2c8\ud130 \ud558\uba74\uc11c PCR \ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4. Real time PCR\uc740 \uc9c0\uae08\uae4c\uc9c0\uc758 PCR\uc5d0 \ube44\ud574 (1)\uc804\uae30\uc601\ub3d9\uc774 \ud544\uc694\uc5c6\uace0, (2)\ubc18\uc751 \uc0ac\uc774\ud074 \ub3c4\uc911\uc5d0 \uc99d\ud3ed\uc0b0\ubb3c\uc744 \ud655\uc778\ud560 \uc218 \uc788\uc73c\uba70, (3)\uc815\ub7c9\uc801\uc778 \uacb0\uacfc\ub97c \uc5bb\uc744 \uc218 \uc788\ub294 \uc774\uc810\uc744 \uac00\uc9c0\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\ud2b9\uc9d5:\n\n\uc2e0\uc18d\uc131: \uc804\uae30\uc601\ub3d9\uc774 \ud544\uc694 \uc5c6\uc74c\n\uc815\ub7c9\uc131: \uc99d\ud3ed\uc774 \uc9c0\uc218\ud568\uc218\uc801\uc73c\ub85c \uc77c\uc5b4\ub098\ub294 \uc601\uc5ed\uc5d0\uc11c \uc99d\ud3ed\uc0b0\ubb3c\ub7c9\uc744 \ube44\uad50\ud560 \uc218 \uc788\uc74c(\ubcf4\ub2e4 \uc815\ud655\ud55c \uc815\ub7c9\uc774 \uac00\ub2a5)\n\uc5ed\uc804\uc0ac\ud6a8\uc18c\ub97c \uc774\uc6a9\ud558\uc5ec total RNA\ub098 mRNA\uc5d0\uc11c cDNA\ub97c \ud569\uc131\ud55c \ud6c4, PCR\ub85c \ubaa9\uc801 cDNA\ub97c \uc99d\ud3ed\ud558\ub294 RT(Reverse Transcription)-PCR \ubc29\ubc95\uc740, \ubbf8\ub7c9\uc758 RNA \uc2dc\ub8cc\uc5d0\uc11c\ub3c4 \ubd84\uc11d\uc774 \uac00\ub2a5\ud558\uc5ec RNA \uc2e4\ud5d8\uc5d0\uc11c \uc911\uc694\ud558\uac8c \ub300\ub450\ub418\uace0 \uc788\uc74c",
      "tags": "protocols",
      "url": "https://partrita.github.io/posts/PCR/"
    },
    {
      "title": "\ub178\ud2b8\ubd81 \ud32c \uc18c\uc74c \uc904\uc774\uae30",
      "text": "Asus X540la\uc5d0\uc11c \uc791\ub3d9\ud558\ub294 \uac83\uc744 \ud655\uc778\ud558\uc600\uc2b5\ub2c8\ub2e4.\n\n\nNotebook Fancontrol(\uc774\ud558 NBFC)\ub294 \ud06c\ub85c\uc2a4 \ud50c\ub7ab\ud3fc\uc73c\ub85c \uc708\ub3c4\uc6b0\uc988\uc640 \ub9ac\ub205\uc2a4\uc5d0\uc11c \ub178\ud2b8\ubd81\uc758 \ud32c \uc18d\ub3c4\ub97c \uc870\uc808\ud569\ub2c8\ub2e4. \uc544\uc8fc \uac15\ub825\ud558\uace0 \ub2e4\uc591\ud55c \uc124\uc815 \uc2dc\uc2a4\ud15c\uc774 \ud568\uaed8 \uc81c\uacf5\ud569\ub2c8\ub2e4.\n\ub2e4\uc6b4\ub85c\ub4dc\n\n\n\nSource\n\n\n\n\n\n\n\uae43\ud5c8\ube0c\uc5d0 \ub2e4\uc6b4\ub85c\ub4dc\nNBFC releases\n\n\n\nchocolatey\ub85c \uc778\uc2a4\ud1a8\nNBFC package info\n\n\n\n\n\ud604\uc7ac\ub294 \ubbf8\ub9ac \ucef4\ud30c\uc77c\ub41c \ub9ac\ub205\uc2a4 \ubc84\uc804\uc740 \uc81c\uacf5 \ub418\uc9c0 \uc54a\uace0 \uc788\uc2b5\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc190\uc27d\uac8c \ucef4\ud30c\uc77c\uc774 \uac00\ub2a5\ud558\ubbc0\ub85c \ub2e4\uc74c \ub9c1\ud06c\ub97c \ucc38\uc870\ud558\uc138\uc694. How to build NBFC\n\uc2dc\uc791\ud558\uae30\n\n\uccab\ubc88\uc9f8 \ub2e8\uacc4\n\uc790\uc8fc\ud558\ub294 \uc9c8\ubb38 (\uc0c8\ub85c\uc6b4 \uc774\uc288\ub97c \uc81c\uae30\ud558\uae30 \uc804\uc5d0 \uc77d\uc5b4\uc8fc\uc138\uc694)\n\uc124\uc815\ud30c\uc77c \uad6c\uc870 (\ub9cc\uc57d\uc5d0 \uc0c8\ub85c\uc6b4 \uc124\uc815\ud30c\uc77c\uc744 \ub9cc\ub4dc\uc2dc\uaca0\ub2e4\uba74)\n\nBuild \uc0c1\ud669\n\n\n\nPlatform\nCI service\nStatus\n\n\n\n\nLinux\nTravis\n\n\n\nWindows\nAppVeyor\n\n\n\n\nCredits\n@Stefan Hirschmann",
      "tags": "fancontrol,windows",
      "url": "https://partrita.github.io/posts/notebook-fancontrol/"
    },
    {
      "title": "\ud30c\uc774\uc36c\uc73c\ub85c \uc6f9\ud398\uc774\uc9c0 \ub2e8\uc5b4 \uc138\uae30",
      "text": "\ud30c\uc774\uc36c\uc744 \uc0ac\uc6a9\ud558\uc5ec \uc704\ud0a4\ud53c\ub514\uc544 \uac80\uc0c9\uc5b4\ub97c \uc785\ub825\ud558\uace0 \ub098\uc628 \uacb0\uacfc \ud398\uc774\uc9c0\uc758 \uae00\uc790\uc218\ub97c \uc138\uc5b4\uc8fc\ub294 \uc2a4\ud06c\ub9bd\ud2b8 \uc785\ub2c8\ub2e4.\ub370\uc774\ud130 \uacfc\ud559\uc790, \ubb34\uc5c7\uc744 \ubc30\uc6b8 \uac83\uc778\uac00\ub77c\ub294 \ucc45\uc5d0\uc11c \ucf54\ub4dc\ub97c \uac00\uc838\uc640\uc11c \uc870\uae08 \uc218\uc815 \ud558\uc600\uc2b5\ub2c8\ub2e4.\n# -*- coding: utf-8 -*-\n# \ud30c\uc774\uc36c2.7 \ubc84\uc804 \uae30\uc900\uc73c\ub85c \uc791\uc131\ub418\uc5b4\uc788\uc74c\nimport urllib2\n\n# \uc811\uc18d\ud560 URL\nbase_url = 'http://ko.wikipedia.org/wiki/'\n# \uc0ac\uc6a9\uc790 \uc5d0\uc774\uc804\ud2b8\nua = 'Mozilla/5.0(Windows NT 6.1; WOW64) AppleWebKit/535.7(KHTML,like Gecko) Chrome/16.0.912.75 Safari/535.7'\n# \ucde8\ub4dd\ud558\uace0 \uc2f6\uc740 \ud56d\ubaa9\nqueries = ['\ud3ec\uc720\ub958', '\ud30c\ucda9\ub958', '\uc870\ub958', '\uc5b4\ub958', '\uc591\uc11c\ub958']\n\nresult = {}\n# URL\uc758 \ub0b4\uc6a9 \ucde8\ub4dd\ud558\uae30\n\nfor q in queries:\n    # URL \uc778\ucf54\ub529\ud558\uae30\n    url = base_url + urllib2.quote(q)\n    # Request \uac1d\uccb4 \uc791\uc131\ud558\uae30\n    req = urllib2.Request(url, headers={'User-Agent': ua})\n    try:\n        # \ub9ac\ud018\uc2a4\ud2b8 \uc5f4\uae30\n        html = urllib2.urlopen(req).read()\n        # \uacb0\uacfc\uc758 \ubb38\uc790 \uc218\ub97c result\uc5d0 \ubd80\uc5ec\ud558\uae30\n        result[q] = len(html)\n    # HTTP \uc5d0\ub7ec \uc2dc\uc758 \uc608\uc678 \ucc98\ub9ac\n    except urllib2.HTTPError, e:\n        print 'HTTP \uc5d0\ub7ec'\n        print '\uc5d0\ub7ec \ucf54\ub4dc: ', e.code\n    # URL \uc5d0\ub7ec \uc2dc\uc758 \uc608\uc678 \ucc98\ub9ac\n    except urllib2.URLError, e:\n        print 'URL \uc5d0\ub7ec'\n        print '\uc774\uc720: ', e.reason\n\n# \uac01 \ud56d\ubaa9\uc758 \ubb38\uc790 \uc218\ub97c \ud45c\uc2dc\ud558\uae30\n# \ub2e8\uc5b4\uc218\uac00 \ub9ce\uc740 \uac83\uc73c\ub85c \uc815\ub82c\nord_result = sorted(result.items(), key=lambda x: x[1], reverse=True)\nfor q in ord_result:\n    print('\ucffc\ub9ac\uff1a' + q[0] + ', \ubb38\uc790 \uc218\uff1a' + str(q[1]))\n\n\n\n\uc2e4\ud589 \uacb0\uacfc\n\uc2e4\ud589\ud558\uba74 \uc544\ub798\uc640 \uac19\uc774 \uac01\uac01\uc758 \ucffc\ub9ac\uc640 \ubb38\uc790\uc218\ub97c \ud655\uc778\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\ucffc\ub9ac\uff1a\uc5b4\ub958,\ubb38\uc790 \uc218\uff1a286300\n\ucffc\ub9ac\uff1a\ud3ec\uc720\ub958,\ubb38\uc790 \uc218\uff1a94588\n\ucffc\ub9ac\uff1a\uc591\uc11c\ub958,\ubb38\uc790 \uc218\uff1a77480\n\ucffc\ub9ac\uff1a\ud30c\ucda9\ub958,\ubb38\uc790 \uc218\uff1a73183\n\ucffc\ub9ac\uff1a\uc870\ub958,\ubb38\uc790 \uc218\uff1a21144",
      "tags": "Python,Web",
      "url": "https://partrita.github.io/posts/python_wordcount/"
    },
    {
      "title": "\ub9ac\ub205\uc2a4 \ubb38\uc81c \ud574\uacb0",
      "text": "\ub9ac\ub205\uc2a4 \ud574\uc0c1\ub3c4 \ubb38\uc81c \ud574\uacb0\ud558\uae30\n\uad6c\ud615 \ucef4\ud4e8\ud130\uc5d0 \ub9ac\ub205\uc2a4(\ub9ac\ub205\uc2a4 \ubbfc\ud2b8)\ub97c \uc124\uce58\ud558\uc600\uc2b5\ub2c8\ub2e4. \uc800\ud574\uc0c1\ub3c4\ub85c \uace0\uc815\ub418\ub294 \uacbd\uc6b0\ub294 \ucc98\uc74c\uc774\uc5c8\ub294\ub370, \uac80\uc0c9\uc744 \ud1b5\ud574 \uc544\ub798\uc640 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \ud574\uacb0\ud588\uc2b5\ub2c8\ub2e4.\n\n\uba3c\uc800 \uc544\ub798\uc640 \ud130\ubbf8\ub110\uc5d0 \uc544\ub798\uc640 \uac19\uc740 \uba85\ub839\uc5b4\ub97c \uce69\ub2c8\ub2e4. (\uc608\uc2dc\ub85c 1600\u00d7900\uc744 \uc0ac\uc6a9\ud588\ub294\ub370, \uc6d0\ud558\ub294 \ube44\uc728\ub85c \ubcc0\uacbd\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.)\n\ncvt 1600 900\n\n\n\n1600x900 59.95 Hz (CVT 1.44M9) hsync: 55.99 kHz; pclk: 118.25 MHz\nModeline \"1600x900_60.00\" 118.25 1600 1696 1856 2112 900 903 908 934 -hsync +vsync\n\n\n\n\n\uc704\uc5d0\uc11c \uc5bb\uc740 \uacb0\uacfc\ub97c \ucc38\uace0\ud574 \ubaa8\ub2c8\ud130 \uc124\uc815\uc744 \ucd94\uac00 \ud569\ub2c8\ub2e4. \uc704\uc758 \uacb0\uacfc\uc758 \ub4b7\ubd80\ubd84\uc744 \ubcf5\uc0ac\ud574\uc11c \ubd99\uc5ec\ub123\uc73c\uba74 \ub429\ub2c8\ub2e4.\n\ubaa8\ub2c8\ud130 \ub9c8\ub2e4 \uacb0\uacfc\uac00 \ub2e4\ub974\ub2c8 \uaf2d 1\ubc88\ub2e8\uacc4\ub97c \ud1b5\ud574 \uc9c1\uc811 \uba85\ub839\uc5b4\ub97c \ub9cc\ub4e4\uc5b4\uc57c \ud569\ub2c8\ub2e4.\n\n\n\nxrandr --newmode \"1600x900_60.00\" 118.25 1600 1696 1856 2112 900 903 908 934 -hsync +vsync\n# \uc0c8\ub85c\uc6b4 \ubaa8\ub4dc\ub97c \ub9cc\ub4e4\uace0 \uc544\ub798\uc640 \uac19\uc774 \ucd94\uac00\ud574\uc90d\ub2c8\ub2e4.\nxrandr --addmode VGA1 \"1600x900_60.00\"\n\n\n\n\uba74\uc774 \uae5c\ubc15\uc774\uba74\uc11c 1600\u00d7900\ud574\uc0c1\ub3c4\uac00 \uc0c8\ub86d\uac8c \uc0dd\uae41\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uc7ac\ubd80\ud305\uc744\ud558\uba74 \ub2e4\uc2dc \ubcf5\uad6c\uac00 \ub418\ubbc0\ub85c \ub9e4\ubc88 \uba85\ub839\uc5b4\ub97c \uc785\ub825\ud558\ub294 \ubd88\ud3b8\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc258 \uc2a4\ud06c\ub9bd\ud2b8(fix-resolution.sh)\ub97c \uc791\uc131\ud569\ub2c8\ub2e4. \ud14d\uc2a4\ud2b8\uc5d0\ub514\ud130\ub85c \ub9cc\ub4e4\uc5b4\uc11c \ud655\uc7a5\uc790\ub9cc \ubcc0\uacbd\ud558\uc2dc\uba74 \ub429\ub2c8\ub2e4.\n\n#!/bin/sh\n# fix-resolution.sh\nxrandr --newmode \"1600x900_60.00\" 118.25 1600 1696 1856 2112 900 903 908 934 -hsync +vsync\nxrandr --addmode VGA1 \"1600x900_60.00\"\nxrandr --output VGA1 --mode \"1600x900_60.00\"\n\n\n\n\nfix-resolution.desktop\ub77c\ub294 \ud30c\uc77c\ub3c4 \ub9cc\ub4e4\uc5b4 \uc90d\ub2c8\ub2e4.\n\n# fix-resolution.desktop\n[Desktop Entry]\nType=Application\nName=fix-resolution.desktop\nExec=/usr/local/bin/fix-resolution.sh\n\n\n\n\n\ub450\uac1c\uc758 \ud30c\uc77c\uc774 \ub4e4\uc5b4\uc788\ub294 \ub514\ub809\ud1a0\ub9ac\uc5d0\uc11c \ud130\ubbf8\ub110\uc744 \uc5f4\uace0 \ub2e4\uc74c\uc758 \uba85\ub839\uc5b4\ub97c \uc785\ub825 \ud569\ub2c8\ub2e4.\n\ncp fix-resolution.sh /usr/local/bin\nchmod +x /usr/local/bin/fix-resolution.sh\ncp fix-resolution.desktop /etc/xdg/autostart\n\n\n\n\ud30c\uc77c\uc744 \ubcf5\uc0ac\ud574\uc11c \uc62e\uaca8\uc8fc\ub294 \uac83\uc774\ub77c\uc11c, \uc0dd\uc131\ud558\uc2e0 \ud30c\uc77c\uc740 \uc774\uc81c \uc0ad\uc81c\ud558\uc154\ub3c4 \ub429\ub2c8\ub2e4.\n\n\uc790\uc8fc \uc0ac\uc6a9\ud558\ub294 \ucee4\ub9e8\ub4dc Alias \ub9cc\ub4e4\uae30\n\ud130\ubbf8\ub110\uc744 \uc790\uc8fc \uc0ac\uc6a9\ud558\ub2e4\ubcf4\uba74 \uba85\ub839\uc5b4 \uc785\ub825\uc774 \ubc88\uac70\ub85c\uc6b8 \ub54c\uac00 \uc788\uc2b5\ub2c8\ub2e4. \uc774\ub7f4 \ub54c\ub97c \uc704\ud574\uc11c Bash shell\uc5d0\uc11c\ub294 Alias\ub77c\ub294 \uae30\ub2a5\uc744 \uc81c\uacf5\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4. \uae30\ub2a5\uc744 \uc0ac\uc6a9\ud558\uae30 \uc704\ud574\uc11c\ub294 ~/.bashrc \ud30c\uc77c\uc758 \uc218\uc815\uc774 \ud544\uc694\ud569\ub2c8\ub2e4.\n\nbashrc \ud30c\uc77c \uc5f4\uae30\n\nnano ~/.bashrc\n\n\n\nnano \uc5d0\ub514\ud130\ub85c \ud30c\uc77c\uc744 \uc5f4\uc5b4\uc90d\ub2c8\ub2e4.\n\nAlias \uba85\ub839\uc5b4 \ucd94\uac00\ud558\uae30\nAlias \uc0ac\uc6a9\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4. \n\nalias l=\"ls -a\"\n\n\n\n\u2018l\u2019\uc744 \uce58\uba74 \u2018ls -a\u2019\ub791 \uac19\uc740 \ud6a8\uacfc\uac00 \ub098\ub3c4\ub85d \uc124\uc815\ud558\uc600\uc2b5\ub2c8\ub2e4. \uc774\uc81c Ctrl+x\ub97c \ub20c\ub7ec \ud30c\uc77c\uc744 \uc800\uc7a5\ud569\ub2c8\ub2e4.\n\nBash shell \uc7ac\uc2e4\ud589\n\uc800\uc7a5\ud55c \ub0b4\uc6a9\uc744 \uc801\uc6a9\ud558\uae30 \uc704\ud574 shell\uc744 \ub2e4\uc2dc \uc2e4\ud589 \ud574\uc57c\ud569\ub2c8\ub2e4.\n\nsource .bashrc\n\n\n\n\uc774\uc81c 'l'\uc744 \ub204\ub974\uba74 \uc801\uc6a9\uc774 \ub41c\uac83\uc744 \ud655\uc778 \ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ud55c\uae00\ub85c \ub41c \uc555\ucd95\ud30c\uc77c\uba85\uc774 \uae68\uc9c0\ub294 \uacbd\uc6b0\n\uc708\ub3c4\uc6b0\uc5d0 \ub9ce\uc774 \uc0ac\uc6a9 \ub418\ub294 \uc555\ucd95\ud30c\uc77c\uc778 .zip\ud3ec\uba67\uc740 \ub9ac\ub205\uc2a4\uc5d0\uc11c \uc778\ucf54\ub529 \ubb38\uc81c\ub85c \uc790\uc8fc \ud30c\uc77c\uba85\uc774 \uae68\uc9d1\ub2c8\ub2e4. \uc774\ub7ec\ud55c \ubb38\uc81c\ub97c \ud574\uacb0\ud558\ub824\uba74 \ud130\ubbf8\ub110 \uba85\ub839\uc5b4 unzip\uc5d0 \uc778\ucf54\ub529 \uc635\uc158\uc744 \uc918\uc57c \ud569\ub2c8\ub2e4.\n\nunzip \uc0ac\uc6a9\ubc95\n\uba85\ub839\uc5b4\uc758 \uc0ac\uc6a9\ubc95\uc740 \ub2e4\uc74c\uacfc \uac19\uc2b5\ub2c8\ub2e4.\n\n$unzip -O [\uc778\ucf54\ub529] [\ud30c\uc77c\uba85]\n\n\n\n\uc708\ub3c4\uc6b0\uc5d0\uc11c \ub9ce\uc774 \uc0ac\uc6a9\ub418\ub294 \uc778\ucf54\ub529\uc740 cp949\uc774\ubbc0\ub85c, \uc544\ub798\uc640 \uac19\uc774 \uc4f0\uba74 \ub429\ub2c8\ub2e4.\n\n\ubb3c\ub860 \uc778\ucf54\ub529\uc744 \ubbf8\ub9ac \ud655\uc778\ud558\uace0 \uc0ac\uc6a9\ud558\ub294\uac8c \uc88b\uc2b5\ub2c8\ub2e4.\n\n\ud130\ubbf8\ub110\uc5d0 \uc544\ub798\uc640 \uac19\uc774 \uc785\ub825\ud558\uc138\uc694.\n$unzip -O cp949 \ud55c\uae00.zip\n\n\n\n\uc704 \ubc29\ubc95\uc744 \uc774\uc6a9\ud558\uba74 \uc778\ucf54\ub529 \uae68\uc9d0 \uc5c6\uc774 \ubb34\uc0ac\ud788 \uc555\ucd95\uc744 \ud574\uc81c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\uc774 \ubaa8\ub4e0 \uc0bd\uc9c8\uc758 \uc6d0\uc778\nzip\ud30c\uc77c\uc740 \uac70\uc758 \ubaa8\ub4e0 \uc555\ucd95\ud3ec\ub9f7 \uc911\uc5d0 \ub2e8\uc5f0 \ucd5c\uace0\uc758 \uc0ac\uc6a9\ub960\uc744 \uc790\ub791\ud558\ub294 \ud3ec\ub9f7\uc785\ub2c8\ub2e4. \ud558\uc9c0\ub9cc \uce58\uba85\uc801\uc778 \ub2e8\uc810\uc774 \uc788\ub294\ub370 \ubc14\ub85c Unicode\uac00 \uc9c0\uc6d0\ub418\uc9c0 \uc54a\ub294 \ub2e4\ub294 \uac83\uc774\uc8e0. \uadf8\ub798\uc11c \uc778\ucf54\ub529\uc774 \uae68\uc9c0\ub294 \ud604\uc0c1\uc774 \ubc1c\uc0dd\ud558\uac8c \ub418\ub294 \uac83\uc785\ub2c8\ub2e4. \uc55e\uc73c\ub85c\ub294 7z\uc640 \uac19\uc740 \uc0c8\ub85c\uc6b4 \uc555\ucd95 \ud3ec\ub9f7\uc744 \uc0ac\uc6a9\ud558\ub294\uac8c \uc88b\uaca0\uc2b5\ub2c8\ub2e4.\n\n\n\ud130\ubbf8\ub110\uc5d0\uc11c \ucef4\ud4e8\ud130 \ud558\ub4dc\uc6e8\uc5b4 \uc815\ubcf4 \ud655\uc778\ud558\uae30\n\n\ub9ac\ub205\uc2a4 \ubc84\uc804\ud655\uc778\n\n~$ cat /etc/issue\n\n\n\nUbuntu 15.04\n\n\n\n\uc0ac\uc6a9\uc911\uc778 \ub9ac\ub205\uc2a4\uc758 \ubc84\uc804\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.\n\n\ud558\ub4dc\ub514\uc2a4\ud06c \uc6a9\ub7c9 \ud655\uc778\n\n~$ df -h\n\n\n\nFilesystem Size Used Avail Use% Mounted on\nudev 3.8G 0 3.8G 0% /dev\ntmpfs 771M 26M 746M 4% /run\n/dev/sda5 33G 15G 17G 46% /\ntmpfs 3.8G 604K 3.8G 1% /dev/shm\ntmpfs 5.0M 4.0K 5.0M 1% /run/lock\ntmpfs 3.8G 0 3.8G 0% /sys/fs/cgroup\ncgmfs 100K 0 100K 0% /run/cgmanager/fs\ntmpfs 771M 48K 771M 1% /run/user/1000\n\n\n\n3\ubc88\uc9f8 \uc904\uc5d0\uc11c \ucd1d \uacf5\uac04\uc774 \ucd1d 33G\uc774\uace0 15G\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc74c\uc744 \ud655\uc778\ud569\ub2c8\ub2e4.\n\nCPU \ucf54\uc5b4 \uac2f\uc218 \ud655\uc778\n\n~$ cat /proc/cpuinfo | grep processor | wc -l\n\n\n\n8\n\n\n\n\ucf54\uc5b4\uc758 \uac2f\uc218\uac00 8\uac1c \uc784\uc744 \uc54c\uc218 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ub7a8 \uc0ac\uc6a9\ub7c9 \ud655\uc778\n\n~$ free -m\n\n\n\ntotal used free shared buffers cached\nMem: 7708 2690 5017 161 351 669\n-/+ buffers/cache: 1669 6038\nSwap: 0 0 0\n\n\n\n\uc804\uccb4 7708Mb\uc5d0\uc11c 2618Mb\ub97c \uc0ac\uc6a9\ud558\uace0 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ud5d0\ub9ac\uc6b0\ub4dc \ud574\ucee4 \ud130\ubbf8\ub110\n\uc601\ud654\uc5d0 \ub098\uc624\ub294 \ud574\ucee4\ucc98\ub7fc \ud130\ubbf8\ub110\uc5d0 \ubcf5\uc7a1\ud55c\uac83\uc744 \ub744\uc6cc \ubd05\uc2dc\ub2e4. \uc544\ub798 \ucf54\ub4dc\ub97c \ud130\ubbf8\ub110\uc5d0 \uc785\ub825\ud558\uba74 \ub79c\ub364\ud558\uac8c hex dump\uac00 \uc2dc\uc791\ub429\ub2c8\ub2e4. \nhexdump -C /dev/urandom | GREP_COLOR='1;32' grep --color=auto 'ca fe'\n\n\n\n\nhex dump\ub294 \ub7a8 \ub610\ub294 \ud30c\uc77c\uc774\ub098 \uc800\uc7a5\uc7a5\uce58\uc5d0 \uc788\ub294 \ucef4\ud4e8\ud130 \ub370\uc774\ud130\uc758 \uc2ed\uc721\uc9c4\ubc95\uc801\uc778 \ubcf4\uc784\uc0c8\uc774\ub2e4. \ub370\uc774\ud130\uc758 hex dump\ub97c \ubcf4\ub294 \uac83\uc740 \uc8fc\ub85c \ub514\ubc84\uae45\uc774\ub098 \ub9ac\ubc84\uc2a4 \uc5d4\uc9c0\ub2c8\uc5b4\ub9c1\uc758 \ud55c \ubd80\ubd84\uc774\ub2e4.  -- \uc704\ud0a4\ud53c\ub514\uc544\n\n\uc774\uc640 \ube44\uc2b7\ud55c \uac83\uc73c\ub85c \uc601\ud654 \uba54\ud2b8\ub9ad\uc2a4\uc5d0 \ub098\uc624\ub294 \ud654\uba74\ub3c4 \uc2dc\ub3c4\ud574 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n# \uba3c\uc800 cmatrix\ub97c \uc124\uce58\ud574\uc57c \ud569\ub2c8\ub2e4.\nsudo apt-get install cmatrix\n# \uc2e4\ud589\ud569\ub2c8\ub2e4.\ncmatrix\n\n\n\n\ubcc4 \uc758\ubbf8\ub294 \uc5c6\uc9c0\ub9cc \ud765\ubbf8\ub86d\uc2b5\ub2c8\ub2e4.\n\n\uc8fd\uc740 \ud504\ub85c\uc138\uc11c \ub418\uc0b4\ub9ac\uae30\n\uc11c\ubc84 \uad00\ub9ac\ub97c \ud558\ub2e4 \ubcf4\uba74, \uc8fd\uc73c\uba74 \uc548\ub418\ub294 \ub370\ubaac\uc774 \uac11\uc790\uae30 \uc8fd\ub294 \uacbd\uc6b0\uac00 \uc788\ub2e4. \uc774\ub7f0 \uacbd\uc6b0\ub97c \ub300\ube44\ud574 \ub370\ubaac\uc774 \uc8fd\uc5c8\uc73c\uba74 \uc7ac \uc2e4\ud589 \uc2dc\ucf1c \uc8fc\ub294 \uc2a4\ud06c\ub9bd\ud2b8\ub97c \ub9cc\ub4e4\uc5b4 \ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\n\n\uc258 \uc2a4\ud06c\ub9bd\ud2b8 \uc791\uc131\n\uc544\ud30c\uce58 \ub370\ubaac\uc774 \uc8fd\uc5c8\uc744 \uacbd\uc6b0 \uc790\ub3d9 \uc7ac \uc2dc\uc791\ud558\ub294 \uc2a4\ud06c\ub9bd\ud2b8\ub97c \uc791\uc131\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4. \uc544\ub798\uc640 \uac19\uc740 \ub0b4\uc6a9\uc758 \uc258 \uc2a4\ud06c\ub9bd\ud2b8 \ud30c\uc77c\uc744 \ub9cc\ub4ed\ub2c8\ub2e4. \ud30c\uc77c\uba85\uc740 revive.sh\ub85c \ud558\uaca0\uc2b5\ub2c8\ub2e4.\n\n# revive.sh\n#!/bin/bash\nhttp=\"`pgrep http  | wc -l`\"\nif [ \"$http\" -eq \"0\" ] ; then\n/usr/local/apache/bin/apachectl restart\nfi\n\n\n\nhttp\ub77c\ub294 \ubcc0\uc218\uc5d0 pgrep http\ub85c \uc544\ud30c\uce58 \ud504\ub85c\uc138\uc11c\uc758 \uac2f\uc218\ub97c \uc138\uc5b4 \uc800\uc7a5\ud569\ub2c8\ub2e4. \uadf8\ub9ac\uace0, if\ubb38\uc5d0\uc11c http\ubcc0\uc218\uc5d0 \ub4e4\uc5b4 \uc788\ub294 \uac12\uc774 0\uc774\ub77c\uba74 \uc544\ud30c\uce58\ub97c \uc7ac\uc2dc\uc791 \ud569\ub2c8\ub2e4. \uc704\uc758 \uc2a4\ud06c\ub9bd\ud2b8\ub97c revive.sh \ub85c \uc800\uc7a5\ud558\uace0, \ud130\ubbf8\ub110\uc5d0 \ub2e4\uc74c\uacfc \uac19\uc774 \uc785\ub825\ud569\ub2c8\ub2e4.\n$ chmod -x revive.sh\n\n\n\n\uc774\ub294 \ud37c\ubbf8\uc158\uc744 \uc8fc\uae30 \uc704\ud55c \uac83\uc785\ub2c8\ub2e4.\n\n\ud06c\ub860(cron)\uc5d0 \ub4f1\ub85d\ud574\uc11c 1\ubd84\ub9c8\ub2e4 \ud655\uc778\ud558\uae30\n\ub9ac\ub205\uc2a4\uc5d0\uc11c\ub294 \uc815\uae30\uc801\uc73c\ub85c \ubc18\ubcf5\ub418\ub294 \uc791\uc5c5\uc744 \uc704\ud55c cron\uc774\ub77c\ub294 \uc11c\ube44\uc2a4\uac00 \uc788\uc2b5\ub2c8\ub2e4. \ud06c\ub860\uc73c\ub85c 1\ubd84\uc5d0 \ud55c\ubc88\uc529 \uc704\uc758 \uc2a4\ud06c\ub9bd\ud2b8\uac00 \uc791\ub3d9\ub418\ub3c4\ub85d \ud558\uaca0\uc2b5\ub2c8\ub2e4. \n\ncrontab -e\n\n\n\n\uc73c\ub85c \ud06c\ub860\uc744 \uc2e4\ud589\ud55c\ub4a4 \uc544\ub798\uc640 \uac19\uc774 \uc785\ub825\ud569\ub2c8\ub2e4.\n* * * * * su - root -c '/root/revive.sh /dev/null'\n\n\n\n\ud30c\uc77c\uc744 \uc800\uc7a5\ud55c\ub4a4 \uc801\uc6a9\uc744 \uc704\ud574\uc11c\ub294 \ub85c\uadf8\uc624\ud504\uac00 \ud544\uc694\ud569\ub2c8\ub2e4. \n\n\uc6b0\ubd84\ud22c \ub2e8\ucd95\ud0a4 \ubaa8\uc74c\n\nGeneral keyboard shortcuts \nCtrl + A = Select all\nCtrl + C = Copy the highlighted content to clipboard\nCtrl + V = Paste the clipboard content\nCtrl + N = New (Create a new document, not in terminal)\nCtrl + O = Open a document\nCtrl + S = Save the current document\nCtrl + P = Print the current document\nCtrl + W = Close the close document\nCtrl + Q = Quit the current application\n\n\nKeyboard shortcuts for GNOME desktop\nCtrl + Alt + F1 = Switch to the first virtual terminal\nCtrl + Alt + F2(F3)(F4)(F5)(F6) = Select the different virtual terminals\nCtrl + Alt + F7 = Restore back to the current terminal session with X\nCtrl + Alt + Backspace = Restart GNOME\nCtrl + Alt + L = Lock the screen.\nAlt + Tab = Switch between open programs\nAlt + F1 = opens the Applications menu\nAlt + F2 = opens the Run Application dialog box.\nAlt + F3 = opens the Deskbar Applet\nAlt + F4 = closes the current window.\nAlt + F5 = unmaximizes the current window.\nAlt + F7 = move the current window\nAlt + F8 = resizes the current window.\nAlt + F9 = minimizes the current window.\nAlt + F10 = maximizes the current window. \nAlt + Space = opens the window menu.\nCtrl + Alt + + = Switch to next X resolution\nCtrl + Alt + - = Switch to previous X resolution\nCtrl + Alt + Left/Right = move to the next/previous workspace\n\n\nKeyboard shortcuts for Terminal\nCtrl + A = Move cursor to beginning of line\nCtrl + E = Move cursor to end of line\nCtrl + C = kills the current process.\nCtrl + Z = sends the current process to the background.\nCtrl + D = logs you out.\nCtrl + R = finds the last command matching the entered letters.\nEnter a letter, followed by Tab + Tab = lists the available commands beginning with those letters.\nCtrl + U = deletes the current line.\nCtrl + K = deletes the command from the cursor right.\nCtrl + W = deletes the word before the cursor.\nCtrl + L = clears the terminal output\nShift + Ctrl + C = copy the highlighted command to the clipboard.\nShift + Ctrl + V (or Shift + Insert) = pastes the contents of the clipboard.\nAlt + F = moves forward one word.\nAlt + B = moves backward one word.\nArrow Up/Down = browse command history\nShift + PageUp / PageDown = Scroll terminal output \n\n\nKeyboard shortcuts for Compiz\nAlt + Tab = switch between open windows\nWin + Tab = switch between open windows with Shift Switcher or Ring Switcher effect\nWin + E = Expo, show all workspace\nCtrl + Alt + Down = Film Effect\nCtrl + Alt + Left mouse button = Rotate Desktop Cube\nAlt + Shift + Up = Scale Windows\nCtrl + Alt + D = Show Desktop\nWin + Left mouse button = take screenshot on selected area\nWin + Mousewheel = Zoom In/Out\nAlt + Mousewheel = Transparent Window\nAlt + F8 = Resize Window\nAlt + F7 = Move Window\nWin + P = Add Helper\nF9 = show widget layer\nShift + F9 = show water effects\nWin + Shift + Left mouse button = Fire Effects\nWin + Shift + C = Clear Fire Effects\nWin + Left mouse button = Annotate: Draw\nWin + 1 = Start annotation\nWin + 3 = End annotation\nWin + S = selects windows for grouping\nWin + T = Group Windows together\nWin + U = Ungroup Windows\nWin + Left/Right = Flip Windows\n\n\nKeyboard shortcut for Nautilus\nShift + Ctrl + N = Create New Folder\nCtrl + T = Delete selected file(s) to trash\nAlt + ENTER = Show File/Folder Properties\nCtrl + 1 = Toggle View As Icons\nCtrl + 2 = Toggle View As List\nShift + Right = Open Directory (Only in List View)\nShift + Left = Close Directory (Only in List View)\nCtrl + S = Select Pattern\nF2 = Rename File\nCtrl + A = Select all files and folders\nCtrl + W = Close Window\nCtrl + Shift + W = Close All Nautilus Windows\nCtrl + R = Reload Nautilus Window\nAlt + Up = Open parent directory\nAlt + Left = Back\nAlt + Right = Forward\nAlt + Home = go to Home folder\nCtrl + L = go to location bar\nF9 = Show sidepane\nCtrl + H = Show Hidden Files\nCtrl + + = Zoom In\nCtrl + - = Zoom Out\nCtrl + 0 = Normal Size \n\n\n\n\n\ub9ac\ub205\uc2a4\ub97c \ub178\ud2b8\ubd81\uc5d0 \uc0ac\uc6a9\ud560\ub54c\n\ub9ac\ub205\uc2a4\ub97c \ub178\ud2b8\ubd81\uc5d0 \ucd5c\uc801\ud654 \uc2dc\ud0a4\ub294 \ud234\uc5d0 TLP\uac00 \uc788\uc2b5\ub2c8\ub2e4. TLP \ub294 \ub9ac\ub205\uc2a4 \ubc30\ud3ec\ud310\uacfc \ud558\ub4dc\uc6e8\uc5b4\ub97c \uc790\ub3d9\uc73c\ub85c \uc778\uc2dd\ud574 \ub178\ud2b8\ubd81\uc758 \uc804\uc6d0\uad00\ub9ac\uc640 \uc5ec\ub7ec \ud2b8\uc705\uc744 \uc801\uc6a9 \uc2dc\ucf1c\uc8fc\uae30 \ub54c\ubb38\uc5d0 \uc544\uc8fc \ud3b8\ub9ac\ud569\ub2c8\ub2e4. \ub2e4\uc74c\uacfc \uac19\uc740 \uae30\ub2a5\uc774 \uc788\uc2b5\ub2c8\ub2e4.\n\n\ubc30\ud130\ub9ac\uc640 AC\uc804\uc6d0 \uc720\ubb34\uc5d0 \ub530\ub77c \ubcc0\uacbd\ub418\ub294 \ud6a8\uacfc\nKernel laptop mode and dirty buffer timeouts;\nProcessor frequency scaling including \"turbo boost\" / \"turbo core\";\nPower aware process scheduler for multi-core/hyper-threading;\nHard disk advanced power management level and spin down timeout (per disk);\nSATA aggressive link power management (ALPM);\nPCI Express active state power management (PCIe ASPM) \u2013 Linux 2.6.35 and above;\nRuntime power management for PCI(e) bus devices \u2013 Linux 2.6.35 and above;\nRadeon KMS power management \u2013 Linux 2.6.35 and above, not fglrx;\nWifi power saving mode \u2013 depending on kernel/driver;\nPower off optical drive in drive bay (on battery).\n\n\n\ucd94\uac00\uc801\uc778 TLP \uae30\ub2a5:\nI/O scheduler (per disk);\nUSB autosuspend with blacklist;\nAudio power saving mode \u2013 hda_intel, ac97;\nEnable or disable integrated wifi, bluetooth or wwan devices upon system startup and shutdown;\nRestore radio device state on system startup (from previous shutdown);\nRadio device wizard: switch radios upon network connect/disconnect and dock/undock;\nDisable Wake On LAN;\nWWAN state is restored after suspend/hibernate;\nUndervolting of Intel processors \u2013 requires kernel with PHC-Patch;\nBattery charge thresholds \u2013 ThinkPads only;\nRecalibrate battery \u2013 ThinkPads only.\n\n\n\n\uc124\uce58\ubc95\n\n\ucda9\ub3cc\uc744 \uc77c\uc73c\ud0ac \uc218 \uc788\ub294 laptop-mode \uc81c\uac70\n\nsudo apt-get purge laptop-mode-tools\n\n\n\n\nTLP\uc124\uce58\n\nsudo add-apt-repository ppa:linrunner/tlp\nsudo apt-get update\nsudo apt-get install tlp\n\n\n\n\n\ucc98\uc74c \uc2e4\ud589\ud6c4\uc5d0\ub294 \ubd80\ud305\uc2dc \uc790\ub3d9 \uc2e4\ud589\ub41c\ub2e4.\n\nsudo tlp start",
      "tags": "Linux,trouble",
      "url": "https://partrita.github.io/posts/linux-trouble-shooting/"
    },
    {
      "title": "BeautifulSoup\uc744 \uc0ac\uc6a9\ud574 \uc6f9 \uc2a4\ud06c\ub798\ud551\ud558\uae30",
      "text": "\uc2dc\uc0ac\uc6a9\uc5b4 \ubaa8\uc74c\uc9d1\uc740 \uc720\ub8cc \uc11c\ube44\uc2a4(\uc608\ub97c \ub4e4\uba74 \uc5d0\ub4c0\uc2a4)\ub97c \uc774\uc6a9\ud560 \uc218 \ubc16\uc5d0 \uc5c6\uc5c8\ub294\ub370 \ub2e8\ube44\ub274\uc2a4\ub77c\ub294 \uacf3\uc5d0\uc11c \uac10\uc0ac\ud558\uac8c\ub3c4 \uc2dc\uc0ac\uc6a9\uc5b4\ub97c \uc18c\uac1c\ud558\uace0 \uc788\ub294 \ud398\uc774\uc9c0\uac00 \uc788\uc5b4 \ud30c\uc774\uc36c\uc744 \uc0ac\uc6a9\ud574 \ucd08\uac04\ub2e8 \uc6f9 \uc2a4\ud06c\ub798\ud551\uc744 \ud588\uc2b5\ub2c8\ub2e4.\n1. \ud544\uc694\ud55c \uac83\n\npython 2.7+\nBeautifulSoup \ubaa8\ub4c8\n\n2. Code\n# -*- coding: utf-8 -*-\nimport urllib\nfrom bs4 import BeautifulSoup\n\n#\uacb0\uacfc\ub294 results.txt\ud30c\uc77c\uc5d0 \uc800\uc7a5\nresults = open('results.txt','a')\n#\uc2a4\ud06c\ub798\ud551 \uc2e4\ud328\ud55c \ud398\uc774\uc9c0 \ub9ac\uc2a4\ud2b8\nfail_list = []\n\n#\uac00\uc7a5 \ucd5c\uadfc \ud398\uc774\uc9c0\uac00 6013, \uc22b\uc790\ub97c 1\uc529 \uc904\uc774\uba74\uc11c \uc2a4\ud06c\ub798\ud551\nfor i in range(6013, 0, -1):\n#\uc2a4\ud06c\ub798\ud551 \ud560 \ud398\uc774\uc9c0 \uc8fc\uc18c\n    url = 'http://www.danbinews.com/news/articleView.html?idxno='+ str(i)\n    try:\n        html = urllib.urlopen(url)\n        soup = BeautifulSoup(html, \"lxml\")\n        #\uc544\ud2f0\ud074\uc758 \uc81c\ubaa9: class\uac00 view_t\uc778\uac83\n        title = soup.find('td',class_='view_t').get_text().strip()\n        # '##'\ub97c \uc81c\ubaa9 \uc55e\uc5d0 \ucd94\uac00\ud574\uc11c \ub9c8\ud06c\ub2e4\uc6b4 \ud3ec\uba67\uc73c\ub85c \ubc14\uafb8\uace0 \uc778\ucf54\ub529 \ubcc0\ud658\n        title2 = '## '+ title.encode('utf-8') +'n'\n        #\uc544\ud2f0\ud074\uc758 \ub0b4\uc6a9 \ucc3e\uae30 : class id\uac00 view_r \uc778\uac83\n        text = soup.find('td',class_ ='view_r')\n        #\ubd88\ud544\uc694\ud55c \uad11\uace0\ub97c \uc81c\uac70 \ud558\uae30 \uc704\ud574 p tag\uc548 \ub0b4\uc6a9\ub9cc \uc120\ud0dd\n        text2 = text.find_next('p').get_text()\n        #\uc778\ucf54\ub529\uacfc \ub9c8\uc9c0\ub9c9\uc5d0 \uc904\ubc14\uafc8 \ucd94\uac00\n        text3 = text2.encode('utf-8') + 'n'\n        #\uacb0\uacfc \ud30c\uc77c\uc5d0 \uc81c\ubaa9 \uc4f0\uae30\n        results.write(title2)\n        #\uacb0\uacfc \ud30c\uc77c\uc5d0 \ub0b4\uc6a9 \uc4f0\uae30\n        results.write(text3)\n        #\uc2a4\ud06c\ub798\ud551 \uc131\uacf5 \uba54\uc2dc\uc9c0 \ucd9c\ub825\n        print 'Success : '+ str(i) + 'th article'\n    except:\n        #URL\uc774 \uc5c6\ub294 \uacbd\uc6b0 \uc2a4\ud06c\ub798\ud551 \uc2e4\ud328 \ucd9c\ub825\n        print 'Fail : ' + str(i) + 'th article'\n        #\uc2e4\ud328 \ub9ac\uc2a4\ud2b8\uc5d0 \ucd94\uac00\n        fail_list.append(i)\n\n    #close the results file\n    results.close()\n#\uc2a4\ud06c\ub798\ud551 \ub05d\ub098\uba74 \ucd9c\ub825\nprint 'Finished'\uae30\nprint 'Fail list : '\nprint fail_list # \uc2e4\ud328\ud55c \ud398\uc774\uc9c0 \ucd9c\ub825\n\n\n\n3. \uacb0\uacfc \ud655\uc778\n\uacb0\uacfc\ub294 result.txt \ud30c\uc77c\uc5d0 \uc800\uc7a5\ub429\ub2c8\ub2e4.\n\n\ud30c\uc77c\uc740 \uae08\ubc29 \ub9cc\ub4e4\uc5c8\ub294\ub370 \uc5b8\uc81c \ub2e4 \uc77d\ub098.",
      "tags": "BeautifulSoup,Python,Web,Web Scraping",
      "url": "https://partrita.github.io/posts/python_beutifulsoup/"
    },
    {
      "title": "10\ubd84\uc548\uc5d0 \ubc30\uc6b0\ub294 \ud30c\uc774\uc36c",
      "text": "\ud30c\uc774\uc36c 2.7 \ubc84\uc804 \uae30\uc900\uc785\ub2c8\ub2e4.\n\nPython\uc744 \ubc30\uc6b0\uace0 \uc2f6\uace0, \uac04\ub7b5\ud558\uba74\uc11c\ub3c4 \ub0b4\uc6a9\uc774 \uc54c\ucc2c \ud29c\ud1a0\ub9ac\uc5bc\uc744 \ucc3e\uace0 \uc788\ub294\uac00? \uc774 \ud29c\ud1a0\ub9ac\uc5bc\uc740 Python \uc744 10\ubd84 \ub9cc\uc5d0 \uac00\ub974\uccd0\uc904 \uac83\uc774\ub2e4. \uae30\ubcf8 \uac1c\ub150\ub4e4\uc744 \uc124\uba85\ud574\uc11c, \uc5ec\ub7ec\ubd84\uc774 \ud30c\uc774\uc36c \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uc2dc\uc791\ud560 \uc218 \uc788\uac8c \ub3c4\uc640\uc904 \uac83\uc774\ub2e4. \ubb3c\ub860 \uc81c\ub300\ub85c \ubc30\uc6b0\ub824\uba74, \uc2e4\uc81c\ub85c \ud30c\uc774\uc36c\uc73c\ub85c \ud504\ub85c\uadf8\ub798\ubc0d\uc744 \uaf64 \ud574\ubd10\uc57c \ud560 \uac83\uc774\ub2e4. \uc5ec\ub7ec\ubd84\uc774 \uc774\ubbf8 \ub2e4\ub978 \ud504\ub85c\uadf8\ub798\ubc0d \uc5b8\uc5b4\ub97c \uc0ac\uc6a9\ud574 \ubcf8\uc801\uc774 \uc788\ub2e4\uace0 \uc0dd\uac01\ud558\uace0, \uc544\uc8fc \uae30\ubcf8\uc801\uc778 \ub0b4\uc6a9\ub4e4\uc740 \ub2e4\ub8e8\uc9c0 \uc54a\uace0, \ud30c\uc774\uc36c\uc758 \ud2b9\uc9d5\ub4e4\uc744 \uc8fc\ub85c \ub2e4\ub8f0 \uac83\uc774\ub2e4. \uc8fc\uc758 \uae4a\uac8c \ubcf4\uae30 \ubc14\ub780\ub2e4.\nProperties\n\ud30c\uc774\uc36c\uc740 strongly-typed (\uc5ed\uc8fc: \uc989 \ud0c0\uc785\uc744 \ud655\uc778\ud55c\ub2e4, \uc778\ud130\ud504\ub9ac\ud130\uac00 \ud0c0\uc785\uc744 \uc54c\uace0 \uc788\ub2e4), dynamically-typed (\uc5ed\uc8fc: \ubcc0\uc218\uc758 \ud0c0\uc785\uc744 \uc2e4\uc2dc\uac04\uc73c\ub85c \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4, \ubcc0\uc218\uc790\uccb4\uac00 \ud0c0\uc785\uc744 \uac16\ub294 \uac83\uc774 \uc544\ub2c8\ub77c \ubcc0\uc218\uc758 \uac12\uc774 \ud0c0\uc785\uc744 \uac16\ub294\ub2e4), implicitly typed (\ubcc0\uc218\uc5d0 \ud0c0\uc785\uc744 \uc815\ud574\uc11c \uc120\uc5b8\ud558\uc9c0 \uc54a\ub294\ub2e4. String myString = \"a\" \uac00 \uc544\ub2cc, my_string = \"a\" \uc774\ub77c\uace0 \uc120\uc5b8\ud55c\ub2e4) \ud0c0\uc785\uc744 \uac16\ub294\ub2e4.\n\ub610\ud55c, case sensitive (Var \uc640 var \ub294 \ub2e4\ub978 \ubcc0\uc218\uc774\ub2e4) \ud558\uace0, \uac1d\uccb4 \uc9c0\ud5a5\uc801 (\ubaa8\ub4e0\uac83\uc774 \uac1d\uccb4\uc774\ub2e4) \uc774\ub2e4.\n\ub3c4\uc6c0 \uc5bb\uae30\n\uc778\ud130\ud504\ub9ac\ud130\uc5d0\uc11c \ub3c4\uc6c0\uc744 \ubc1b\uc744 \uc218 \uc788\ub2e4. \uc5b4\ub5a4 \uac1d\uccb4\uc5d0 \ub300\ud574 \uc54c\uace0 \uc2f6\uc73c\uba74, \uc778\ud130\ud504\ub9ac\ud130\uc5d0\uc11c help() \uc640 dir() \uc744 \uc774\uc6a9\ud55c\ub2e4, dir() \uc740 \uac1d\uccb4\uc758 \uc18d\uc131,\uba54\uc368\ub4dc\ub4e4\uc744 \ubcf4\uc5ec\uc900\ub2e4. \uadf8\ub9ac\uace0 .doc \uc73c\ub85c \uac1d\uccb4\uc758 \ubb38\uc11c\ub97c \ubcfc \uc218 \uc788\ub2e4:\nhelp(5) # int \uac1d\uccb4\uc758 help \uba54\uc2dc\uc9c0\ub97c \ubcf4\uc5ec\uc900\ub2e4: (etc etc)\ndir(5) # \uac1d\uccb4\uc758 \uc18d\uc131, \uba54\uc368\ub4dc\ub4e4\uc744 \ubcf4\uc5ec\uc900\ub2e4\n\n\n\n['__abs__', '__add__', ...]\n\n\n\nabs.__doc__\n\n\n\n'abs(number) -> number\n\uc778\uc790\uc758 \uc808\ub300\uac12\uc744 \ub9ac\ud134\ud55c\ub2e4.'\n\n\n\n\ubb38\ubc95(Syntax)\n\ud30c\uc774\uc36c\uc740 \ucf54\ub4dc\uc758 \ub05d\uc744  ;  \ub4f1\uc73c\ub85c \ud2b9\ubcc4\ud788 \ud45c\uc2dc\ud558\uc9c0 \uc54a\ub294\ub2e4. block \uc740 \uc904\ub9de\ucda4 (indentation) \uc73c\ub85c \ud45c\ud604\ud55c\ub2e4. block \uc744 \uc0ac\uc6a9\ud558\ub294 \ubb38\uc7a5 (if, else \ub4f1) \uc740 : \uc744 \ub05d\uc5d0 \ubd99\uc778\ub2e4. \ud55c\uc904\uc9dc\ub9ac \uc8fc\uc11d\uc740 # \uc744 \uc0ac\uc6a9\ud558\uace0, \uc5ec\ub7ec\uc904\uc5d0 \uac78\uce5c \uc8fc\uc11d\uc740 \"\"\" \uc8fc\uc11d \"\"\" \uc744 \uc0ac\uc6a9\ud55c\ub2e4. \uac1d\uccb4\uc5d0 \uac12\uc744 \ud560\ub2f9\ud560 \ub54c\uc5d0\ub294 = \uc744 \uc0ac\uc6a9\ud558\uace0, \ub450 \uac1d\uccb4\ub97c \ube44\uad50\ud560 \ub54c\uc5d0\ub294 == \uc744 \uc0ac\uc6a9\ud55c\ub2e4. += \uc640 -= \uc73c\ub85c \uac12\uc744 \uc99d\uac00/\uac10\uc18c\ud560 \uc218 \uc788\ub2e4.\nmyvar = 3\nmyvar += 2\nmyvar\n\n\n\n5\n\n\n\nmyvar -= 1\nmyvar\n\n\n\n4\n\n\n\n\"\"\"\uc5ec\ub7ec\uc904\uc9dc\ub9ac \uc8fc\uc11d\uc774\ub2e4.\n\uc5b4\uca4c\uace0 \uc800\uca4c\uace0...\"\"\"\nmystring = \"Hello\"\nmystring += \" world.\"\nprint mystring\n\n\n\nHello world.\n\n\n\n\ubcc0\uc218 \ub450\uac1c\ub97c \uc11c\ub85c \ubc14\uafd4\uc900\ub2e4!\nmyvar, mystring = mystring, myvar\n\n\n\n\ub370\uc774\ud130\ud615(Data types)\n\ud30c\uc774\uc36c\uc740 \ub9ac\uc2a4\ud2b8, tuple (\ud29c\ud50c), dictionary, set \ub370\uc774\ud130 \ud0c0\uc785\uc744 \uc81c\uacf5\ud55c\ub2e4. list \ub294 \uc5ec\ub7ec\uac1c\uc758 \uc6d0\uc18c\ub97c \uac00\uc9c0\uace0, \ub2e4\ub978 \ub9ac\uc2a4\ud2b8\ub97c \uc6d0\uc18c\ub85c \uac00\uc9c8 \uc218\ub3c4 \uc788\ub2e4. dictionary \ub294 \uc5f0\uad00\ubc30\uc5f4 (associative array, hash table \ub85c key/value \ub97c \uc800\uc7a5\ud568) \uc774\uace0, tuple \uc740 \ubcc0\uacbd\uc774 \ubd88\uac00\ub2a5\ud55c \ubc30\uc5f4\uc774\ub2e4. \uc774\ub4e4 \ucee8\ud14c\uc774\ub108\uc5d0 \uc5ec\ub7ec\uac1c \ud0c0\uc785\uc758 \uac1d\uccb4\ub4e4\uc744 \uc11e\uc5b4\uc11c \ub123\uc744 \uc218 \uc788\ub2e4. list \ub098 tuple \ub4f1\uc758 \ubc30\uc5f4 \ud615\uc2dd\uc758 \ucee8\ud14c\uc774\ub108\uc5d0\uc11c \uccab\ubc88\uc7ac \uc778\uc790\uc758 \uc778\ub371\uc2a4\ub294 0 \uc774\ub2e4. -1 \uc740 \ubc30\uc5f4\uc758 \ub9c8\uc9c0\ub9c9 \uc6d0\uc18c\uc758 \uc778\ub371\uc2a4\uc774\uba70, -2 \ub294 \ub9c8\uc9c0\ub9c9\uc5d0\uc11c \ub450\ubc88\uc9f8 \uc778\ub371\uc2a4\uc774\ub2e4. \uadf8\ub9ac\uace0 \ud30c\uc774\uc36c\uc5d0\uc11c\ub294, \ubcc0\uc218\uc5d0 \ud568\uc218\ub97c \uc9c0\uc815\ud560 \uc218 \uc788\ub2e4.\nsample = [1, [\"another\", \"list\"], (\"a\", \"tuple\")]\nmylist = [\"List item 1\", 2, 3.14]\nmylist[0] = \"List item 1 again\" # \uccab\ubc88\uc9f8 \uc6d0\uc18c\ub97c \ubcc0\uacbd\ud55c\ub2e4\nmylist[-1] = 3.21 # \ub9c8\uc9c0\ub9c9 \uc6d0\uc18c\ub97c \ubcc0\uacbd\ud55c\ub2e4.\nmydict = {\"Key 1\": \"Value 1\", 2: 3, \"pi\": 3.14}\nmydict[\"pi\"] = 3.15 # dictionary \uac12\uc744 \ubcc0\uacbd\ud55c\ub2e4\nmytuple = (1, 2, 3)\nmyfunction = len # myfunction \ubcc0\uc218\uac00 len \uc774\ub77c\ub294 \ud568\uc218\ub97c \uac00\ub9ac\ud0a4\ub3c4\ub85d \ud55c\ub2e4\nprint myfunction(mylist)\n\n\n\n3\n\n\n\n: \uc744 \uc774\uc6a9\ud558\uc5ec \ubc30\uc5f4\uc758 \uad6c\uac04\uc744 \ud45c\ud604\ud55c\ub2e4. : \uc744 \uc0ac\uc6a9\ud560 \ub54c \uc55e\uc758 index \uac00 \uc5c6\uc73c\uba74 0 \uc778\ub371\uc2a4 \uc744 \uc0ac\uc6a9\ud558\uace0, \ub9c8\uc9c0\ub9c9 \uc778\ub371\uc2a4\uac00 \uc5c6\uc73c\uba74 \ubc30\uc5f4\uc758 \uae38\uc774\ub97c \uc0ac\uc6a9\ud55c\ub2e4.\n[a:b] \ub294 [a, b) \uc989 a \ub294 \ud3ec\ud568\ud558\uace0 b \ub294 \ud3ec\ud568\ud558\uc9c0 \uc54a\ub294\ub2e4.\nmylist = [\"List item 1\", 2, 3.14]\nprint mylist[:] # [0:3] \uacfc \uac19\ub2e4\n\n\n\n['List item 1', 2, 3.1400000000000001]\n\n\n\nprint mylist[0:2]\n\n\n\n['List item 1', 2]\n\n\n\nprint mylist[-3:-1]\n\n\n\n['List item 1', 2]\n\n\n\n>>> print mylist[1:]\n\n\n\n[2, 3.14]\n\n\n\n# 3 \ubc88\uc7ac \uc778\uc790\ub85c, \uac74\ub108 \ub744\uba74\uc11c \uc6d0\uc18c\ub97c \uac00\uc9c0\uace0 \uc62c \uc218\ub3c4 \uc788\ub2e4.\n# [::] == [::1] \uac00 \uae30\ubcf8\uc774\uace0, [::2] \ub85c step \uc774 2 \uc774\uba74 \ud558\ub098\uc529 \uac74\ub108\ub6f4\ub2e4.\nprint mylist[::2]\n\n\n\n['List item 1', 3.14]\n\n\n\n\ubb38\uc790\uc5f4(Strings)\nstring \uc740 \"hello\" \ub610\ub294 'hello' \ucc98\ub7fc, \" \uc640 ' \ub97c \uc544\ubb34\uac83\uc774\ub098 \uc0ac\uc6a9\ud574\ub3c4 \ub41c\ub2e4. \"say 'hello'\" \ucc98\ub7fc \ud558\ub098\ub97c \uc2a4\ud2b8\ub9c1 \uc548\ucabd\uc5d0 \uc0ac\uc6a9\ud560 \uc218\ub3c4 \uc788\ub2e4. \uc5ec\ub7ec\uc904\uc5d0 \uac78\uce5c string \uc740 \ub530\uc634\ud45c \uc138\uac1c (\"\"\") \ub97c \uc0ac\uc6a9\ud55c\ub2e4. \ud30c\uc774\uc36c\uc740 u\"\uc774\uac83\uc740 unicode \ubb38\uc790\uc5f4\uc785\ub2c8\ub2e4\" \uc758 \ud615\ud0dc\ub85c Unicode \ubb38\uc790\uc5f4\uc744 \uae30\ubcf8 \uc9c0\uc6d0\ud55c\ub2e4. % \uc5f0\uc0b0\uc790\uc640 tuple \uc744 \uc0ac\uc6a9\ud558\uc5ec \ubb38\uc790\uc5f4\uc758 \ud55c \ubd80\ubd84\uc744 \uce58\ud658\ud560 \uc218 \uc788\ub2e4.\nprint \"Name: %s Number: %s String: %s\" % (myclass.name, 3, 3 * \"-\")\n\n\n\nName: Poromenos Number: 3 String: ---\n\n\n\n# \ub2e4\uc74c\ucc98\ub7fc dictionary \ub97c \uc0ac\uc6a9\ud558\uc5ec \uce58\ud658\ud560 \uc218\ub3c4 \uc788\ub2e4.\nprint \"This %(verb)s a %(noun)s.\" % {\"noun\": \"test\", \"verb\": \"is\"}\n\n\n\nThis is a test.\nFlow control statements\n\n\n\nif, for, while \uc744 \uc774\uc6a9\ud558\uc5ec \ud750\ub984\uc744 \uc81c\uc5b4\ud55c\ub2e4. range() \ub97c \uc774\uc6a9\ud558\uc5ec \uc22b\uc790 \ubc30\uc5f4\uc744 \uc5bb\uc744 \uc218 \uc788\ub2e4:\nrangelist = range(10)\nprint rangelist\n\n\n\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\n\nfor number in rangelist:\n    # number \uac00 tuple \uc548\uc5d0 \ub4e4\uc5b4 \uc788\ub294\uc9c0 \ud655\uc778\ud55c\ub2e4\n    if number in (3, 4, 7, 9):\n        # \"break\" \ub85c \"else\" \ubb38\uc744 \uc2e4\ud589\ud558\uc9c0 \uc54a\uace0 for \ubb38\uc744 \ub098\uc628\ub2e4.\n        break\n    else:\n        pass  # \uc544\ubb34\uac83\ub3c4 \ud558\uc9c0 \uc54a\ub294\ub2e4\n\n\n\nif rangelist[1] == 2:\n    print \"\ub450\ubc88\uc9f8 \uc544\uc774\ud15c\uc774 2 \uc774\ub2e4\"\nelif rangelist[1] == 3:\n    print \"\ub450\ubc88\uc9f8 \uc544\uc774\ud15c\uc774 3 \uc774\ub2e4\"\nelse:\n    print \"Dunno\"\n\n\n\nwhile rangelist[1] == 1:\n    pass\n\n\n\n\ud568\uc218(Functions)\n\ud568\uc218\ub294 def \ud0a4\uc6cc\ub4dc\ub97c \uc774\uc6a9\ud558\uc5ec \uc120\uc5b8\ud55c\ub2e4. \ud568\uc218\uc758 \uc778\uc790\uc911, \ubc18\ub4dc\uc2dc \ud544\uc694\ud55c \uc778\uc790\ub97c \uba3c\uc800 \ub098\uc5f4\ud558\uace0, \uc120\ud0dd\uc801 \uc778\uc790\ub4e4\uc744 \uadf8 \ud6c4\uc5d0 \ub098\uc5f4\ud55c\ub2e4. \uc120\ud0dd\uc801 \uc778\uc790\ub4e4\uc5d0\uac8c\ub294 \uae30\ubcf8\uac12\uc744 \uc124\uc815\ud55c\ub2e4. \uc5ec\ub7ec\uac1c\uc758 \uac12\uc744 \ud55c\uaebc\ubc88\uc5d0 tuple \ub85c \ub9ac\ud134\ud560 \uc218 \uc788\ub2e4. Lambda \ud568\uc218\ub294 \uc120\uc5b8\uc5c6\uc774, \ud544\uc694\ud560 \ub54c \uc815\uc758\ud574\uc11c \uc0ac\uc6a9\ud558\ub294 \ud568\uc218\ub2e4. \uc778\uc790\ub294 \ub808\ud37c\ub7f0\uc2a4 (\ucc38\uc870) \ub85c \uc804\ub2ec\ub41c\ub2e4. (\uc5ed\uc8fc: C++ \uc758 \ud3ec\uc778\ud130\uac00 \uce74\ud53c\ub418\uc5b4 \uc804\ub2ec\ub41c\ub2e4\uace0 \ubcf4\uba74 \ub41c\ub2e4, \uc804\ub2ec\ub41c \ubcc0\uc218\ub97c \uc218\uc815\ud558\ub294 \uac83\uc774\uc544\ub2c8\ub77c, \uc0c8\ub85c\uc6b4 \uac12\uc744 \ud560\ub2f9\ud558\uba74, \ud568\uc218 \ubc14\uae65\ucabd\uc5d0\uc11c\ub294 \uc774 \ubcc0\ud654\ub294 \uc778\uc9c0\ud558\uc9c0 \ubabb\ud55c\ub2e4.) \ud558\uc9c0\ub9cc \uc804\ub2ec \ubc1b\uc740 immutable \ud0c0\uc785\ub4e4 (\ud29c\ud50c, int, string \ub4f1\ub4f1) \uc740 \ucc38\uc870\ub85c \uc804\ub2ec\ub418\uc5c8\ub2e4\uace0 \ud558\ub354\ub77c\ub3c4, \uc218\uc815\ud560 \uc218 \uc5c6\ub2e4.\n# \ub2e4\uc74c \ubb38\uc7a5\uc740 def funcvar(x): return x + 1 \uc640 \uac19\ub2e4.\nfuncvar = lambda x: x + 1\nprint funcvar(1)\n\n\n\n2\n\n\n\n# an_int \uc640 a_string \uc740 \uc120\ud0dd\uc801 \uc778\uc790\ub85c \uae30\ubcf8\uac12\uc744 \uac00\uc9c4\ub2e4.\ndef passing_example(a_list, an_int=2, a_string=\"A default string\"):\n    a_list.append(\"A new item\")\n    an_int = 4\n    return a_list, an_int, a_string\n\nmy_list = [1, 2, 3]\nmy_int = 10\nprint passing_example(my_list, my_int)\n\n\n\n([1, 2, 3, 'A new item'], 4, \"A default string\")\n\n\n\nmy_list\n\n\n\n[1, 2, 3, 'A new item']\n\n\n\nmy_int\n\n\n\n10\n\n\n\n\ud074\ub798\uc2a4(Classes)\n\ud30c\uc774\uc36c\uc740 \uc81c\ud55c\uc801\uc73c\ub85c \ub2e4\uc911 \uc0c1\uc18d\uc744 \uc9c0\uc6d0\ud55c\ub2e4. private \ubcc0\uc218\uc640, \ud568\uc218\ub294 \uc55e\uc5d0 __ \uc744 \ubd99\uc778\ub2e4. \uad00\uc2b5\uc77c \ubfd0\uc774\uba70, python \uc5b8\uc5b4 \uc790\uccb4\ub294 private \uc774\ub780 \uac1c\ub150\uc774 \uc5c6\ub2e4.\n# \ud074\ub798\uc2a4 \uac1d\uccb4\ub97c \ub9cc\ub4e0\ub2e4.\nclass MyClass(object):\n    common = 10\n    def __init__(self):\n        self.myvariable = 3\n    def myfunction(self, arg1, arg2):\n        return self.myvariable\nclassinstance = MyClass()\nclassinstance.myfunction(1, 2)\n\n\n\n3\n\n\n\n# \uac1d\uccb4\uc5d0\uc11c\ub3c4 common \uc18d\uc131\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4.\nclassinstance2 = MyClass()\nclassinstance.common\n\n\n\n10\n\n\n\nclassinstance2.common\n\n\n\n10\n\n\n\n# \ud074\ub798\uc2a4 \ubcc0\uc218\ub97c \ubcc0\uacbd\ud55c\ub2e4\nMyClass.common = 30\nclassinstance.common\n\n\n\n30\n\n\n\nclassinstance2.common\n\n\n\n30\n\n\n\n# classinstance \uac1d\uccb4\uc5d0 common \uc774\ub77c\ub294 \uc18d\uc131\uc744 \uc0dd\uc131\ud558\uace0, \uac12\uc744 \uc900\ub2e4\nclassinstance.common = 10\nclassinstance.common\n\n\n\n10\n\n\n\nclassinstance2.common\n\n\n\n30\n\n\n\nMyClass.common = 50\n# classinstance.common \uc740 \uac1d\uccb4\uc758 \uc18d\uc131\uc774\uae30 \ub54c\ubb38\uc5d0 \ubcc0\ud558\uc9c0 \uc54a\ub294\ub2e4.\nclassinstance.common\n\n\n\n10\n\n\n\nclassinstance2.common\n\n\n\n50\n\n\n\n# MyClass \ud074\ub798\uc2a4\ub97c \uc0c1\uc18d\ubc1b\ub294\ub2e4.\n# class OtherClass(MyClass1, MyClass2, MyClassN) \ud615\ud0dc\ub85c \ub2e4\uc911\uc0c1\uc18d \ubc1b\uc744 \uc218 \uc788\ub2e4.\nclass OtherClass(MyClass):\n    # \"self\" \uc778\uc790\ub294 \uc790\ub3d9\uc73c\ub85c \ub118\uc5b4\uc624\ub294 \uc778\uc790\ub85c \uac1d\uccb4 \uc790\uc2e0\uc744 \uac00\ub9ac\ud0a8\ub2e4.\n    # \uc989 self \ub97c \uc774\uc6a9\ud558\uc5ec \ub2e4\uc74c\ucc98\ub7fc \uac1d\uccb4\ub97c \ubcc0\uacbd\ud560 \uc218 \uc788\ub2e4.\n    def __init__(self, arg1):\n        self.myvariable = 3\n        print arg1\n\nclassinstance = OtherClass(\"hello\")\n\n\n\nhello\n\n\n\nclassinstance.myfunction(1, 2)\n\n\n\n3\n\n\n\n# \uc774 \ud074\ub798\uc2a4\ub294 test \ub77c\ub294 \ubcc0\uc218\ub97c \uc815\uc758\ud55c\uc801\uc774 \uc5c6\ub2e4.\n# \ud558\uc9c0\ub9cc \ub2e4\uc74c \ucc98\ub7fc \uadf8\ub0e5 \ub9cc\ub4e4\uc218 \uc788\ub2e4.\nclassinstance.test = 10\nclassinstance.test\n\n\n\n10\n\n\n\n\uc608\uc678 \ucc98\ub9ac(Exceptions)\ntry-exept [exceptionname] \ud615\ud0dc\ub85c \ucc98\ub9ac\ud569\ub2c8\ub2e4.\ndef some_function():\n    try:\n        # 0 \uc73c\ub85c \ub098\ub220\uc11c exception \uc744 \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4.\n        10 / 0\n    except ZeroDivisionError:\n        print \"Oops, invalid.\"\n    else:\n        # Exception \uc774 \ubc1c\uc0dd\ud558\uc9c0 \uc54a\uc73c\uba74 \ub2e4\uc74c\uc744 \uc2e4\ud589.\n        pass\n    finally:\n        # \uc704 \ucf54\ub4dc\ub4e4\uc774 \uc2e4\ud589\ub41c \ud6c4\uc5d0, \uc5ec\uae30 finally \uc548\uc758 \ucf54\ub4dc\ub4e4\uc774 \uc2e4\ud589\ub41c\ub2e4.\n        print \"We're done with that.\"\n\nsome_function()\n\n\n\nOops, invalid.\nWe're done with that.\nImporting\n\n\n\n\ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c import [library_name] \uc73c\ub85c \ubd88\ub7ec\uc640 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. from [library_name] import [name] \uc73c\ub85c \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 \ud2b9\uc815 \uc774\ub984\ub9cc \uac00\uc838\uc62c \uc218 \uc788\uc2b5\ub2c8\ub2e4.\nimport random # random library \ub97c \ubd88\ub7ec\uc628\ub2e4\nfrom time import clock # time \ub77c\uc774\ube0c\ub7ec\ub9ac\uc758 clock \ud568\uc218\ub97c \uac00\uc838\uc628\ub2e4.\n\nrandomint = random.randint(1, 100)\nprint randomint\n\n\n\n64\n\n\n\n\ud30c\uc77c \uc785\ucd9c\ub825(File I/O)\n\ud30c\uc774\uc36c\uc740 \ub2e4\uc218\uc758 \ub0b4\uc7a5 \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc81c\uacf5\ud55c\ub2e4. \ub2e4\uc74c \uc608\uc81c\ub294 pickle \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc774\uc6a9\ud558\uc5ec \ub370\uc774\ud130\ub97c serialize \ud558\uc5ec \ud30c\uc77c\ub85c \uc800\uc7a5\ud558\ub294 \uac83\uc744 \ubcf4\uc5ec\uc900\ub2e4.\nimport pickle\nmylist = [\"This\", \"is\", 4, 13327]\n# C:binary.dat \ud30c\uc77c\uc744 \uc4f0\uae30 \ubaa8\ub4dc\ub85c \uc5f0\ub2e4.\n# 'r' \uc740 raw \ub77c\ub294 \ub73b\uc73c\ub85c, \uac00 escaping \uc744 \uc758\ubbf8\ud558\uc9c0 \uc54a\ub3c4\ub85d \ud55c\ub2e4.\nmyfile = open(r\"C:binary.dat\", \"w\")\npickle.dump(mylist, myfile)\nmyfile.close()\n\n# \ud30c\uc77c\uc744 \uc77d\uc5b4\uc11c \ub370\uc774\ud130\ub97c \ub85c\ub4dc\ud55c\ub2e4\nmyfile = open(r\"C:binary.dat\")\nloadedlist = pickle.load(myfile)\nmyfile.close()\n\nprint loadedlist\n\n\n\n['This', 'is', 4, 13327]\n\n\n\n# \ud14d\uc2a4\ud2b8 \ud30c\uc77c\uc5d0 \ub370\uc774\ud130\ub97c \uc800\uc7a5\ud55c\ub2e4\nmyfile = open(r\"C:text.txt\", \"w\")\nmyfile.write(\"This is a sample string\")\nmyfile.close()\n\nmyfile = open(r\"C:text.txt\")\n>>> print myfile.read()\n'This is a sample string'\nmyfile.close()\n\n\n\n\uae30\ud0c0\uae30\ub2a5(Miscellaneous)\n1 < a < 3 \uac19\uc740 \uc870\uac74\uc744 \uc0ac\uc6a9\ud560 \uc218 \uc788\ub2e4. del \ud0a4\uc6cc\ub4dc\ub97c \uc774\uc6a9\ud558\uc5ec, \ubcc0\uc218\ub97c \uc0ad\uc81c\ud558\uac70\ub098, \ubc30\uc5f4\uc758 \uc544\uc774\ud15c\uc744 \uc0ad\uc81c\ud55c\ub2e4. list comprehension \uc744 \uc774\uc6a9\ud558\uc5ec \ub9ac\uc2a4\ud2b8\ub97c \ub9cc\ub4e4 \uc218 \uc788\ub2e4. list comprehension \uc740 for \uc640 if \ubb38\uc744 \ub0b4\ubd80\uc5d0 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\nlst1 = [1, 2, 3]\nlst2 = [3, 4, 5]\nprint [x * y for x in lst1 for y in lst2]\n\n\n\n[3, 4, 5, 6, 8, 10, 9, 12, 15]\n\n\n\nprint [x for x in lst1 if 4 > x > 1]\n\n\n\n[2, 3]\n\n\n\n# \uc6d0\uc18c \ud558\ub098\ub77c\ub3c4 true \uc778\uc9c0 \ud655\uc778\ud55c\ub2e4.\nany([i % 3 for i in [3, 3, 4, 4, 3]]) # any(0,0,1,1,0)\n\n\n\nTrue\n\n\n\n# Check for how many items a condition is true.\nsum(1 for i in [3, 3, 4, 4, 3] if i == 4)\n\n\n\n2\n\n\n\ndel lst1[0]\nprint lst1\n\n\n\n[2, 3]\n\n\n\n\ud568\uc218 \ubc14\uae65\uc5d0 \uc815\uc758\ud558\ub294 \ubcc0\uc218\ub294 \uae00\ub85c\ubc8c \ubcc0\uc218\uc774\ub2e4. \uc5b4\ub514\uc11c\ub3c4 \uc774 \ubcc0\uc218\ub97c \uc811\uadfc\ud560 \uc218 \uc788\uc9c0\ub9cc, \uc774 \uac12\uc744 \ud568\uc218\ub0b4\uc5d0\uc11c \ubcc0\uacbd\ud560 \ub54c\uc5d0\ub294 global \ud0a4\uc6cc\ub4dc\ub97c \uc0ac\uc6a9\ud558\uc5ec \uc120\uc5b8\ud574\uc918\uc57c \ud55c\ub2e4. \uadf8\ub807\uc9c0 \uc54a\uc73c\uba74, \ud30c\uc774\uc36c\uc740 \uac19\uc740 \uc774\ub984\uc758 \uc0c8\ub85c\uc6b4 \ub85c\uceec \ubcc0\uc218\ub97c \ub9cc\ub4e0\ub2e4.\nnumber = 5\n\ndef myfunc():\n    # 5 \ub97c \ucd9c\ub825\ud55c\ub2e4.\n    print number\n\ndef anotherfunc():\n    # execption \uc744 \ubc1c\uc0dd\uc2dc\ud0a8\ub2e4:\n    # \ud30c\uc774\uc36c\uc740 \uc774 \ud568\uc218\uc5d0\uc11c number \uac00 \uc0ac\uc6a9\ub420 \uac83\uc744 \uc54c\uace0, \ub85c\uceec \uac1d\uccb4\ub97c \ub9cc\ub4e0\ub2e4.\n    # \uadf8\ub7f0\ub370 \uc774 \ubcc0\uc218\uc5d0 \uac12\uc744 \uc124\uc815\ud558\uae30 \uc804\uc5d0 print \ud558\ub824\uace0 \ud574\uc11c \uc5d0\ub7ec\uac00 \ubc1c\uc0dd\ud55c\ub2e4.\n    print number\n    number = 3\n\ndef yetanotherfunc():\n    global number\n    # global \ubcc0\uc218\ub97c \uc218\uc815\ud55c\ub2e4.\n    number = 3\n\n\n\n\ub9c8\uce58\uba70\n\uc774 \uae00\uc740 \ud30c\uc774\uc36c\uc758 \ubaa8\ub4e0 \uac83\uc744 \ub2e4\ub8ec \uac83\uc740 \ubb3c\ub860 \uc544\ub2d9\ub2c8\ub2e4. \ud30c\uc774\uc36c\uc740 \ubc29\ub300\ud55c \ub77c\uc774\ube0c\ub7ec\ub9ac\ub97c \uc81c\uacf5\ud558\uba70, \ub354 \ub9ce\uc740 \ub0b4\uc6a9\uc744 \ubc30\uc6b0\ub824\uba74 Dive Into Python \uac19\uc740 \uc88b\uc740 \ucc45\uc744 \uc774\uc6a9\ud558\uae30 \ubc14\ub78d\ub2c8\ub2e4. \ub2e4\ub9cc \uc774 \uae00\uc774 \ud30c\uc774\uc36c \uacf5\ubd80\ub97c \uc2dc\uc791\ud558\ub294\ub370 \ub3c4\uc6c0\uc774 \ub418\uc5c8\uc73c\uba74 \ud569\ub2c8\ub2e4.",
      "tags": "Python",
      "url": "https://partrita.github.io/posts/python_10min_tutorial/"
    },
    {
      "title": "\ub79c\ub364\ud558\uac8c \ub2e8\ubc31\uc9c8 \uc11c\uc5f4\ub9cc\ub4e4\uae30",
      "text": "\ub79c\ub364\uc73c\ub85c \uc6d0\ud558\ub294 \uae38\uc774\uc758 \ub2e8\ubc31\uc9c8 \uc11c\uc5f4\uc744 \uc6d0\ud558\ub294 \ub9cc\ud07c \ub9cc\ub4dc\ub294 \ud30c\uc774\uc36c \uc2a4\ud06c\ub9bd\ud2b8 \uc785\ub2c8\ub2e4.\n# python 2.7 \ubc84\uc804\n# -*- coding: utf-8 -*-\nfrom random import Random\n\ndef AminoacidGenerator(number, length):\n    print '***generate random aminoacid sequence ***'\n    codeFile = open('codes.txt', 'w')\n    if number <= 0:\n        return 'invalid number of protein'\n    else:\n        aminoacid = 'ACDEFGHIKLMNPQRSTVWY'      \n        random = Random()\n        for j in range(1, number + 1):\n            str = ''\n            for i in range(1, length+1):\n                index = random.randint(1,len(aminoacid))\n                str = str + aminoacid[index -1]\n            codeFile.write(str+'\\n')\n\n# 100\uac1c \uae38\uc774\uc758 \ub2e8\ubc31\uc9c8 \uc11c\uc5f4\uc744 100\uac1c \ub9cc\ub4e4\uc5b4 \ubd05\ub2c8\ub2e4. \nprint AminoacidGenerator(100, 100)\n\n\n\n\uadf8\ub0e5 \uc7ac\ubbf8\ub85c \ub9cc\ub4e4\uc5b4 \ubcf4\uc558\uc2b5\ub2c8\ub2e4. \ub9cc\ub4e4\uc5b4\uc9c4 \uc11c\uc5f4\uc744 NCBI\uc758 BLAST! \uac80\uc0c9\uc5d0 \ub123\uc5b4\ubcf4\uc558\ub294\ub370, \ube44\uc2b7\ud55c \uc11c\uc5f4\uc774 \uac80\uc0c9\ub418\uc9c0\ub294 \uc54a\ub354\uad70\uc694. \uadf8 \ubc29\ub300\ud55c \ub370\uc774\ud130\ubca0\uc774\uc2a4\uc5d0\uc11c \uacb9\uce58\ub294 \uc11c\uc5f4\uc774 \uc5c6\ub2e4\ub2c8 \uc9c4\ud654\uc758 \ub180\ub77c\uc6c0\uc5d0 \ub300\ud574 \ub2e4\uc2dc \uc0dd\uac01\ud574\ubcf4\uac8c \ub418\ub294\uad70\uc694.",
      "tags": "Python,Random",
      "url": "https://partrita.github.io/posts/python_randomseq/"
    },
    {
      "title": "\ub514\ub809\ud1a0\ub9ac \ud0d0\uc0c9\ud558\uae30",
      "text": "\ud604\uc7ac \ub514\ub809\ud1a0\ub9ac \uc544\ub798\uc758 \ubaa8\ub4e0 \ud30c\uc77c(\uc11c\ube0c\ub514\ub809\ud1a0\ub9ac \ud3ec\ud568)\uc758 \ubaa9\ub85d\uc744 \uc5bb\uace0\uc790 \ud560 \ub54c\ub294 os.walk('./')\uae30\ub2a5\uc744 \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\uc544\ub798\uc758 \uc608\uc81c \ucf54\ub4dc\ub97c \ud655\uc778\ud558\uc138\uc694.\n# python 2.7 \ubc84\uc804\nimport os\nfor root, dirs, files in os.walk('./'):\n    for file in files:\n        print file\n\n\n\nos.walk\nos.walk\ub294 \ud2b9\uc815 \ub514\ub809\ud1a0\ub9ac \uc544\ub798\uc758 \ubaa8\ub4e0 \ub514\ub809\ud1a0\ub9ac\uc640 \ud30c\uc77c\uc758 \ubaa9\ub85d\uc744 \uc5bb\uc5b4 \uc62c \uc218 \uc788\ub3c4\ub85d \ub3c4\uc640\uc90d\ub2c8\ub2e4. for \ub8e8\ud504\uc5d0\uc11c 3\uac1c\uc758 \uc544\uc774\ud15c\uc73c\ub85c \uad6c\uc131\ub41c \ud29c\ud50c\ub85c \ubd84\ud574\uac00 \uac00\ub2a5\ud55c\ub370 \uc774\ub984\ub9cc\uc73c\ub85c\ub3c4 \ubb34\uc5c7\uc778\uc9c0 \uc54c \uc218 \uc788\uc2b5\ub2c8\ub2e4. root\ub294 \uc5b4\ub5a4 \ub514\ub809\ud1a0\ub9ac\uc778\uc9c0, dirs\ub294 root \uc544\ub798\uc758 \ub514\ub809\ud1a0\ub9ac \ubaa9\ub85d, \uadf8\ub9ac\uace0 files\ub294 root \ud3f4\ub354 \uc544\ub798\uc758 \ud30c\uc77c \ubaa9\ub85d\uc785\ub2c8\ub2e4.  \n\uc880 \ub354 \ub9ce\uc740 \uae30\ub2a5\uc740 \uacf5\uc2dd \ubb38\uc11c\ub97c \ucc38\uace0\ud558\uc138\uc694.\n\uc2a4\ud06c\ub9bd\ud2b8 \ud30c\uc77c \uc608\uc81c\n\uc544\ub798\uc640 \uac19\uc774 \uc2a4\ud06c\ub9bd\ud2b8 \ud30c\uc77c\uc744 \ub9cc\ub4e4\uc5b4 \uc0ac\uc6a9\ud574 \ubcf4\uc558\uc2b5\ub2c8\ub2e4.\n#-*- coding: utf-8 -*-\n# sub_dir_search.py\n# python 2.7 \ubc84\uc804\nimport os\nfrom datetime import datetime\n\nnow = datetime.now()\nnowDate = now.strftime('%Y%m%d') # \uc624\ub298\ub0a0\uc9dc\n\ndef allfiles2(path):\n    res = []\n    for root, dirs, files in os.walk(path):\n        rootpath = os.path.join(os.path.abspath(path), root)\n        for file in files:\n            filepath = os.path.join(rootpath, file)\n            res.append(filepath)\n        with open(nowDate+'_list.txt', 'w') as f:\n            # \uc624\ub298\ub0a0\uc9dc_list.txt \ud30c\uc77c\uc744 \uc0dd\uc131\ud569\ub2c8\ub2e4.\n            for ress in res:\n                f.write(ress+'\\n')\n\ndef main():\n    x = raw_input('where to search? : ')\n    # \uac80\uc0c9\ud560 \uacf3\uc758 \uc704\uce58\ub97c \ubb3c\uc5b4\ubd05\ub2c8\ub2e4.\n    allfiles2(x)\n\nif __name__ == '__main__':\n    main()\n\n\n\n\ud130\ubbf8\ub110\uc5d0 \ub4e4\uc5b4\uac00\uc11c \ub2e4\uc74c\uacfc \uac19\uc774 \uc785\ub825\ud569\ub2c8\ub2e4.\n$ python sub_dir_search.py [\ud3f4\ub354\uba85]\n\n\n\n\n\ub8e8\ud2b8 \ud3f4\ub354('C:\\')\ub97c \ub123\uc5c8\ub354\ub2c8 \uc5c4\uccad\ub098\uac8c \ud070 \ud30c\uc77c \uc0dd\uc131\ub429\ub2c8\ub2e4.",
      "tags": "DIRwalk,os.walk,Python",
      "url": "https://partrita.github.io/posts/walking-the-file-tree/"
    },
    {
      "title": "\uc815\uaddc\uc9c1\uc73c\ub85c \uc904\ubc14\uafc8 \uc81c\uac70\ud558\uae30",
      "text": "\uac04\ud639\ubcf4\uba74 \uac00\ub3c5\uc131\uc744 \uc704\ud574 \uc5d4\ud130\ud0a4\ub97c \ub9c8\uad6c\uccd0 \ub0b4\ub824\uac04 \uae00\ub4e4\uc774 \uc788\uc2b5\ub2c8\ub2e4.\ubcf4\uae30\uc5d4 \uc88b\uc9c0\ub9cc, \ucd9c\ub825\ud560\ub54c\ub294 \ub9ce\uc774 \ubd88\ud3b8\ud569\ub2c8\ub2e4. \uadf8\ub7f4\ub550 '\ucc3e\uc544 \ubc14\uafb8\uae30' \uae30\ub2a5\uc744 \uc774\uc6a9\ud574 \ud574\uacb0\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ubb3c\ub860 \uc815\uaddc\uc2dd\uc744 \uc9c0\uc6d0\ud558\ub294 \uc5d0\ub514\ud130\uc5d0\uc11c \ub9d0\uc785\ub2c8\ub2e4. Sublimetext, visual studio code, atom \ub4f1\ub4f1\uc758 \uc5d0\ub514\ud130\uc5d0\uc11c \ub2e4\uc74c\uc744 \uc2e4\ud589\ud574 \ubcf4\uc138\uc694.\n\n\nCtrl + H \ub97c \ub204\ub978 \ud6c4 (or Find > Replace)\uc5d0 \uc785\ub825 \ucc3d\uc5d0 n \uc744 \uc785\ub825\ud55c\ub2e4.\n\u201cregular expression\u201d\uc744 \uc120\ud0dd\ud55c\ub2e4. (Alt + R\uc744 \ub204\ub974\uac70\ub098 [.*] \uc544\uc774\ucf58\uc744 \ud074\ub9ad)\n\uadf8\ub9ac\uace0 Replace All\ub97c \ub204\ub974\uba74 \ubaa8\ub4e0 \uc904 \ubc14\uafc8\uc774 \uc0ad\uc81c \ub429\ub2c8\ub2e4.",
      "tags": "atom,sublimetext,text editor,visual studio code",
      "url": "https://partrita.github.io/posts/regular-exp_blank/"
    },
    {
      "title": "\ud30c\uc774\uc36c\uc73c\ub85c \uc81c\uacf1\uadfc \uacc4\uc0b0",
      "text": "\uc5d1\uc140\uc5d0\uc11c \uc0ac\uc6a9\ud558\ub358 \uae30\ud638\ub294 \ud30c\uc774\uc36c\uc5d0\uc11c \uc791\ub3d9 \ud558\uc9c0\uc54a\uc2b5\ub2c8\ub2e4. \uba87\uac00\uc9c0 \ub300\uc548\uc774 \uc788\ub294\ub370 pow() \ud568\uc218\ub97c \uc0ac\uc6a9\ud558\uac70\ub098 ** \uc5f0\uc0b0\uc790\ub85c \uc81c\uacf1\uadfc\uc744 \uad6c\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4. \ud639\uc740 math.pow()\ub97c \uc0ac\uc6a9\ud558\ub294 \uac83\uc785\ub2c8\ub2e4.\n1. pow() \ud568\uc218\npow(\ubc11, \uc9c0\uc218) \uc758 \ud615\uc2dd\uc73c\ub85c \uc0ac\uc6a9\ud569\ub2c8\ub2e4.\n\uc608\ub97c \ub4e4\uc5b4, 3\uc758 \uc81c\uacf1\uc744 \uad6c\ud558\ub824\uba74 \uc544\ub798\uc640 \uac19\uc774 \uc785\ub825\ud569\ub2c8\ub2e4.\npow(3, 2)\n\n\n\n\ub2e4\uc74c\uc73c\ub85c, 3\uc758 \uac70\ub4ed\uc81c\uacf1\uadfc\uc744 \uad6c\ud558\ub294 \ubc29\ubc95\uc785\ub2c8\ub2e4.\n# \ud30c\uc774\uc36c 2.7\nfor i in range(0, 11):\n  result = pow(3, i)\n  print \"%d \uc758 %2d \uc81c\uacf1 = %.0f\" % (3, i, result)\n\n\n\n2. ** \uc5f0\uc0b0\uc790\n**\uc744 \uc0ac\uc6a9\ud574\uc11c \uac70\ub4ed\uc81c\uacf1\uc744 \uad6c\ud574\ubcf4\uaca0\uc2b5\ub2c8\ub2e4.\nfor i in range(0,11):\n    print \"%d \uc758 %2d \uc81c\uacf1 = %.0f\" % (3, i, 3**i)  \n\n\n\n\uc0ac\uc2e4\uc0c1 \ud30c\uc774\uc36c\uc5d0 \uae30\ubcf8\uc801\uc73c\ub85c \ub4e4\uc5b4\uc788\ub294 **\uacfc pow()\ud568\uc218\ub294 \uac70\uc758 \uc720\uc0ac\ud569\ub2c8\ub2e4. \ub458\ub2e4 __pow__ \ud639\uc740 __rpow__ \ubc29\ubc95\uc744 \ud638\ucd9c\ud558\uae30 \ub54c\ubb38\uc785\ub2c8\ub2e4. \n3. math.pow() \ud568\uc218\n\uc0ac\uc6a9\ubc95\uc740 \uc704\uc5d0 \uc11c\uc220\ud55c \ub0b4\uc7a5 \ud568\uc218 pow()\uc640 \ub3d9\uc77c\ud569\ub2c8\ub2e4. \ud558\uc9c0\ub9cc math.pow()\uc5d0\ub294 \ud070 \ucc28\uc774\uc810\uc774 \uc788\uc2b5\ub2c8\ub2e4. \uacb0\uacfc\ub97c float\ub85c \ub418\ub3cc\ub824 \uc8fc\ub294 \uac83\uc774\uc9c0\uc694. \ubc18\uba74\uc5d0 \ub0b4\uc7a5\ud568\uc218\ub4e4\uc740 int\ub85c \ub3cc\ub824\uc90d\ub2c8\ub2e4.",
      "tags": "pow,Python,\uc81c\uacf1\uadfc",
      "url": "https://partrita.github.io/posts/python-pow/"
    },
    {
      "title": "\ud30c\uc774\uc36c \ub9ac\uc2a4\ud2b8 \uc911\ubcf5 \uc544\uc774\ud15c \uc81c\uac70",
      "text": "Python\uc758 \ub9ac\uc2a4\ud2b8\uc5d0 \uc911\ubcf5\ub41c \uc544\uc774\ud15c\uc740 \uc544\ub798\uc640 \uac19\uc740 \ubc29\ubc95\uc73c\ub85c \uc27d\uac8c \uc81c\uac70\ud560 \uc218 \uc788\uc2b5\ub2c8\ub2e4.\n#\ub9ac\uc2a4\ud2b8 \uc0dd\uc131\uacfc \ud655\uc778\nli = [\"a\",\"b\",\"c\",\"d\",\"a\",\"b\"]\nprint('li')\n\n\n\n[\"a\",\"b\",\"c\",\"d\",\"a\",\"b\"]\n\n\n\n#\ub9ac\uc2a4\ud2b8\uc5d0 \uc911\ubcf5 \uc544\uc774\ud15c \uc81c\uac70\nli = list(set(li))\nprint(li)\n\n\n\n['a', 'c', 'b', 'd']",
      "tags": "Python",
      "url": "https://partrita.github.io/posts/python_duplicate_list/"
    },
    {
      "title": "\uc708\ub3c4\uc6b0\uc988(windows) \ub2e8\ucd95\ud0a4 \uc815\ubcf4",
      "text": "\ucd9c\ucc98: http://www.pressblog.co.kr/linkblog/19701\n\n\n\uc708\ub3c4\uc6b0\ud0a4 \uc870\ud569\n\n\uc708\ub3c4\uc6b0\ud0a4 : \uc2dc\uc791\uba54\ub274 \ubd80\ub974\uae30 (= Ctrl+Esc)\n\uc708\ub3c4\uc6b0\ud0a4 + D (\ud1a0\uae00) : \ubc14\ud0d5\ud654\uba74\ubcf4\uae30 (= \ud654\uba74\uc5d0 \ub098\ud0c0\ub09c \ucc3d\uc744 \ubaa8\ub450 \ucd5c\uc18c\ud654 \ud569\ub2c8\ub2e4)\n\uc708\ub3c4\uc6b0\ud0a4 + E : \uc708\ub3c4\uc6b0\uc988 \ud0d0\uc0c9\uae30 \uc2e4\ud589\n\uc708\ub3c4\uc6b0\ud0a4 + F : \uac80\uc0c9\ucc3d \ub744\uc6b0\uae30 (= \ucc3e\uae30\uc5d0\uc11c \"\ud30c\uc77c \ub610\ub294 \ud3f4\ub354\")\n\uc708\ub3c4\uc6b0\ud0a4 + M : \ubc14\ud0d5\ud654\uba74\ubcf4\uae30 2 (\uc708\ub3c4\uc6b0\ud0a4 + Shift + M : \ucc3d \uc6d0\ub798\ub300\ub85c)\n\uc708\ub3c4\uc6b0\ud0a4 + R : \uc2e4\ud589\ucc3d ( = \uc2dc\uc791 -> \uc2e4\ud589)\n\uc708\ub3c4\uc6b0\ud0a4 + Tab (+ Enter) : \ud504\ub85c\uadf8\ub7a8 \uc774\ub3d9\n\uc708\ub3c4\uc6b0\ud0a4 + F1 : \uc708\ub3c4\uc6b0 \ub3c4\uc6c0\ub9d0\n\uc708\ub3c4\uc6b0\ud0a4 + Pause/Break : \uc2dc\uc2a4\ud15c \ub4f1\ub85d\uc815\ubcf4\n\uc708\ub3c4\uc6b0\ud0a4 + Ctrl + F : \uac80\uc0c9\ucc3d ( = \ucc3e\uae30\uc5d0\uc11c \"\ucef4\ud4e8\ud130\")\n\n\n\n\ucee8\ud2b8\ub864\ud0a4 \uc870\ud569\n\nCtrl + Esc : \uc2dc\uc791\uba54\ub274 \ubd80\ub974\uae30 ( = \uc708\ub3c4\uc6b0 \ud0a4)\nCtrl + F4 : MDI \ud504\ub85c\uadf8\ub7a8 \ubb38\uc11c\ub2eb\uae30 (mIRC \uac19\uc740 \ud504\ub85c\uadf8\ub7a8)\nCtrl + Alt + Delete : \ud504\ub85c\uadf8\ub7a8 \uac15\uc81c \uc885\ub8cc (\uc791\uc5c5\uad00\ub9ac\uc790\ub85c \uc774\ub3d9\ud558\uc5ec \uc120\ud0dd\uc801 \uc885\ub8cc)\nCtrl + W : \ud604\uc7ac\ucc3d \ub2eb\uae30 (\ud55c \ud504\ub85c\uadf8\ub7a8\uc5d0\uc11c \uc5ec\ub7ec\ucc3d \ub744\uc6b4 \uacbd\uc6b0 - \ud504\ub85c\uadf8\ub7a8 \uc885\ub8cc\uc640\ub294 \ub2e4\ub984.)\nCtrl + A : \ubaa8\ub450\uc120\ud0ddq\nCtrl + C : \ubcf5\uc0ac\ud558\uae30\nCtrl + X : \uc798\ub77c\ub0b4\uae30\nCtrl + V : \ubd99\uc5ec\ub123\uae30\n\n\n\n\uc54c\ud2b8\ud0a4 \uc870\ud569\n\nAlt + \ubc29\ud5a5\ud0a4 : \uc778\ud130\ub137 \uc775\uc2a4\ud50c\ub85c\ub7ec \ud639\uc740 \ud0d0\uc0c9\uae30\uc758 \ub4a4\ub85c ( )\nAlt + F : \uc751\uc6a9\ud504\ub85c\uadf8\ub7a8\uc758 \"File\" \uba54\ub274 \ud638\ucd9c\nAlt + Space Bar : \uc2dc\uc2a4\ud15c \uba54\ub274 \ud638\ucd9c\nAlt + Enter : \ub4f1\ub85d\uc815\ubcf4 \ubcf4\uae30\nAlt + F4 : \ud504\ub85c\uadf8\ub7a8 \uc885\ub8cc (\ud604\uc7ac \ud504\ub85c\uadf8\ub7a8\uc744 \ubc14\ub85c \uc885\ub8cc\uc2dc\ud0b4)\nAlt + Tab : \ud504\ub85c\uadf8\ub7a8 \uc774\ub3d9 ( Enter \ub204\ub97c \ud544\uc694\uc5c6\uc774 \ubc14\ub85c \uc774\ub3d9)\n\n\n\n\uc26c\ud504\ud2b8\ud0a4 \uc870\ud569\n\nShift + Delete : \ud734\uc9c0\ud1b5\uc744 \uac70\uce58\uc9c0 \uc54a\uace0 \ubc14\ub85c \uc0ad\uc81c\nShift + \ubc29\ud5a5\ud0a4 : \ube14\ub85d \uc9c0\uc815\ud558\uae30\nShift + \ud3f4\ub354 (\ub354\ube14) \ud074\ub9ad : \ud3f4\ub354\ub97c \uc708\ub3c4\uc6b0 \ud0d0\uc0c9\uae30\ucc98\ub7fc \uc5f4\uae30\nShift + F10 : \ubc14\ub85c\uac00\uae30 \uba54\ub274\n\uc2dc\ub514 \uc0bd\uc785\uc2dc Shift  : CD \uc790\ub3d9 \uc2e4\ud589 \ud558\uc9c0 \uc54a\uae30\n\uc775\uc2a4\ud50c\ub85c\ub7ec\uc5d0\uc11c \ub9c1\ud06c\ub97c Shift + \ub9c8\uc6b0\uc2a4 \uc67c\ucabd \ud074\ub9ad : \uc0c8\ucc3d\uc5d0\uc11c \uc5f4\uae30\n\n\n\n\ub9c8\uc6b0\uc2a4 \ud65c\uc6a9\n\nCtrl + \ud074\ub9ad : \ub5a8\uc5b4\uc838\uc788\ub294 \ubcf5\uc218 \uac1c\uccb4 \uc120\ud0dd\nShift + \ub450\uad70\ub370 \ud30c\uc77c\uc744 \uc9c0\uc815 : \uc5f0\uacb0\ub41c \ubcf5\uc218\uac1c\uccb4 \uc120\ud0dd\nCtrl + \ub4dc\ub798\uadf8 : \ubcf5\uc0ac\ud558\uae30\nShift + \ub4dc\ub798\uadf8 : \uc774\ub3d9\ud558\uae30\nCtrl + Shift + \ub4dc\ub798\uadf8 : \ubc14\ub85c\uac00\uae30 \uc544\uc774\ucf58 \ub9cc\ub4e4\uae30\nShift + X \ud45c\uc2dc \ud074\ub9ad : \ud604\uc7ac \ud3f4\ub354\uc640 \uc0c1\uc704 \ud3f4\ub354 \ub2eb\uae30",
      "tags": "hotkey,windows",
      "url": "https://partrita.github.io/posts/windows_hotkey/"
    },
    {
      "title": "\ud30c\uc774\uc36c \ucf54\ub529 \uc2a4\ud0c0\uc77c",
      "text": "\ucd9c\ucc98: \ubc15\uc751\uc6a9,'Jump to Python',p439~440,2001,\uc815\ubcf4 \uac8c\uc774\ud2b8\n\ucf54\ub529\uc774\ub780 \ud504\ub85c\uadf8\ub7a8\uc744 \uc791\uc131\ud558\ub294 \ud589\uc704, \uc88b\uc740 \uc2a4\ud0c0\uc77c\uc774\ub77c\uace0 \uc54c\ub824\uc838 \uc788\ub294 \uba87 \uac00\uc9c0 \ubc29\ubc95\uc774 \uc874\uc7ac\ud55c\ub2e4. \uadf8\uac83\ub4e4\uc5d0 \ub300\ud574\uc11c \uc0b4\ud3b4\ubcf4\uc790.\n\uc774\ub984\uacb0\uc815 :\n\ud568\uc218\ub098 \ubcc0\uc218\ub4e4\uc758 \uc774\ub984\uc744 \uc9c0\uc744 \ub54c \uc0dd\uac01\ud560\uc810.\n\ubcc0\uc218\uba85\uc744 \uad6c\uccb4\uc801\uc73c\ub85c \ud558\uc790\na=[1,2,3]\nnumber=[1,2,3]\n\n\n\n\n\ubc1c\uc74c\ud558\uae30 \uc27d\uac8c \uc774\ub984\uc744 \uc9d3\uc790\n\n\ud568\uc218\uc758 \uc785\ub825\uac12\uc744 \ubc1b\ub294 \ubcc0\uc218 \uc55e\uc5d0\ub294 the\ub97c \ubd99\uc774\uc790\ndef writediary(theMonth,theDay):\n    nexDay= theDay+1\n\n\n\n\ucc38\uacfc \uac70\uc9d3\uc744 \ub098\ud0c0\ub0b4\ub294 \ubcc0\uc218\uc5d0\ub294 is\ub97c \ubd99\uc774\uc790\nisProgrammer = 1\nisStudent = 0\n\n\n\n\uc0c1\ud669\uc5d0 \ub530\ub77c \ubcc0\uc218\uba85\uc744 \uacb0\uc815\ud558\uc790\n\ubcf4\ud1b5 \uc21c\ud658\ubb38\uc5d0 \uc0ac\uc6a9\ub418\ub294 \ubcc0\uc218\uc5d0\ub294 i,j,k \ub4f1\uc774 \uad00\ub840\uc801\uc73c\ub85c \uc0ac\uc6a9\ub428\ni = 0\nwhile 1:\n    i = i+1\n\n\n\n\ud568\uc218\ub294 '\ub3d9\uc0ac+\uba85\uc0ac'\uc2dd\uc73c\ub85c \uc9d3\uc790\ndef makehouse(theTree,theCement):\n    pass\n\n\n\n\ud568\uc218\uc5d0 \ub4e4\uc5b4\uc624\ub294 \uc785\ub825 \uac12\uc774 \ub108\ubb34 \ub9ce\uc73c\uba74 \ub515\uc154\ub108\ub9ac\ub85c \ub300\uce58\ud558\uc790\ndef makehouse(theTree,theCement,the.......):\n    pass\n\n\n\n\ubcf4\ub2e4\ub294\ndef makehouse(theManyinput):\n        theTree = theManyinput['tree']\n        theCement = theManyinput['cement']\n\n\n\n\ud074\ub798\uc2a4 \uc774\ub984\uc740 \ub300\ubb38\uc790\ub85c\nclass Person:\n    pass\n\n\n\n\uc8fc\uc11d\ud65c\uc6a9\n\uc790\uc2e0\uc774 \uc791\uc131\ud55c \ucf54\ub4dc\uc758 \uc758\ub3c4\ub97c \uc54c\ub824\uc8fc\uace0 \uc2f6\uc744 \ub54c \uc8fc\uc11d\uc744 \uc0ac\uc6a9\ud558\uc790. \uad6c\uccb4\uc801\uc73c\ub85c \ub2ec\uace0 \uac00\ub2a5\ud558\uba74 \uc601\uc5b4\ub85c \ub2ec\uc790.\n# FIXME: \ucf54\ub4dc\ub97c \uace0\uccd0\uc57c \ud560 \ubd80\ubd84\uc744 \ub098\ud0c0\ub0c4\n# TODO: \uc55e\uc73c\ub85c \uc5b4\ub5bb\uac8c \ucf54\ub4dc\ub97c \uc218\uc815\ud558\uace0 \uc2f6\uc740\uc9c0\uc5d0 \ub300\ud55c \ub0b4\uc6a9\n# XXX: \ubb54\uac00 \uc798\ubabb\uc774 \uc788\ub294 \uac83 \uac19\uc740 \ubd80\ubd84\n\n\n\n\ub9c8\ubb34\ub9ac\ud558\uba70,\n\ubcf4\uae30 \uc88b\uc740 \ucf54\ub4dc\uac00 \uc77d\uae30\ub3c4 \uc88b\uace0 \ubd84\uc11d\ud558\uae30\ub3c4 \uc88b\ub2e4. \ub2e4\ub9cc \uc9c0\ud0a4\uae30 \uc27d\uc9c0 \uc54a\ub2e4\ub294\uac83!",
      "tags": "Python",
      "url": "https://partrita.github.io/posts/python_codingstyle/"
    }
  ]
}